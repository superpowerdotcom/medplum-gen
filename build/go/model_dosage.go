/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Dosage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dosage{}

// Dosage Indicates how the medication is/was taken or should be taken by the patient.
type Dosage struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A whole number
	Sequence *float32 `json:"sequence,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
	// Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").
	AdditionalInstruction []CodeableConcept `json:"additionalInstruction,omitempty"`
	// A sequence of Unicode characters
	PatientInstruction *string `json:"patientInstruction,omitempty"`
	// When medication should be administered.
	Timing *Timing `json:"timing,omitempty"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededBoolean *bool `json:"asNeededBoolean,omitempty"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededCodeableConcept *CodeableConcept `json:"asNeededCodeableConcept,omitempty"`
	// Body site to administer to.
	Site *CodeableConcept `json:"site,omitempty"`
	// How drug should enter body.
	Route *CodeableConcept `json:"route,omitempty"`
	// Technique for administering medication.
	Method *CodeableConcept `json:"method,omitempty"`
	// The amount of medication administered.
	DoseAndRate []DosageDoseAndRate `json:"doseAndRate,omitempty"`
	// Upper limit on medication per unit of time.
	MaxDosePerPeriod *Ratio `json:"maxDosePerPeriod,omitempty"`
	// Upper limit on medication per administration.
	MaxDosePerAdministration *Quantity `json:"maxDosePerAdministration,omitempty"`
	// Upper limit on medication per lifetime of the patient.
	MaxDosePerLifetime *Quantity `json:"maxDosePerLifetime,omitempty"`
}

// NewDosage instantiates a new Dosage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDosage() *Dosage {
	this := Dosage{}
	return &this
}

// NewDosageWithDefaults instantiates a new Dosage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDosageWithDefaults() *Dosage {
	this := Dosage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dosage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dosage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Dosage) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Dosage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Dosage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Dosage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Dosage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Dosage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Dosage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *Dosage) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *Dosage) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *Dosage) SetSequence(v float32) {
	o.Sequence = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Dosage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Dosage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Dosage) SetText(v string) {
	o.Text = &v
}

// GetAdditionalInstruction returns the AdditionalInstruction field value if set, zero value otherwise.
func (o *Dosage) GetAdditionalInstruction() []CodeableConcept {
	if o == nil || IsNil(o.AdditionalInstruction) {
		var ret []CodeableConcept
		return ret
	}
	return o.AdditionalInstruction
}

// GetAdditionalInstructionOk returns a tuple with the AdditionalInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetAdditionalInstructionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.AdditionalInstruction) {
		return nil, false
	}
	return o.AdditionalInstruction, true
}

// HasAdditionalInstruction returns a boolean if a field has been set.
func (o *Dosage) HasAdditionalInstruction() bool {
	if o != nil && !IsNil(o.AdditionalInstruction) {
		return true
	}

	return false
}

// SetAdditionalInstruction gets a reference to the given []CodeableConcept and assigns it to the AdditionalInstruction field.
func (o *Dosage) SetAdditionalInstruction(v []CodeableConcept) {
	o.AdditionalInstruction = v
}

// GetPatientInstruction returns the PatientInstruction field value if set, zero value otherwise.
func (o *Dosage) GetPatientInstruction() string {
	if o == nil || IsNil(o.PatientInstruction) {
		var ret string
		return ret
	}
	return *o.PatientInstruction
}

// GetPatientInstructionOk returns a tuple with the PatientInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetPatientInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.PatientInstruction) {
		return nil, false
	}
	return o.PatientInstruction, true
}

// HasPatientInstruction returns a boolean if a field has been set.
func (o *Dosage) HasPatientInstruction() bool {
	if o != nil && !IsNil(o.PatientInstruction) {
		return true
	}

	return false
}

// SetPatientInstruction gets a reference to the given string and assigns it to the PatientInstruction field.
func (o *Dosage) SetPatientInstruction(v string) {
	o.PatientInstruction = &v
}

// GetTiming returns the Timing field value if set, zero value otherwise.
func (o *Dosage) GetTiming() Timing {
	if o == nil || IsNil(o.Timing) {
		var ret Timing
		return ret
	}
	return *o.Timing
}

// GetTimingOk returns a tuple with the Timing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.Timing) {
		return nil, false
	}
	return o.Timing, true
}

// HasTiming returns a boolean if a field has been set.
func (o *Dosage) HasTiming() bool {
	if o != nil && !IsNil(o.Timing) {
		return true
	}

	return false
}

// SetTiming gets a reference to the given Timing and assigns it to the Timing field.
func (o *Dosage) SetTiming(v Timing) {
	o.Timing = &v
}

// GetAsNeededBoolean returns the AsNeededBoolean field value if set, zero value otherwise.
func (o *Dosage) GetAsNeededBoolean() bool {
	if o == nil || IsNil(o.AsNeededBoolean) {
		var ret bool
		return ret
	}
	return *o.AsNeededBoolean
}

// GetAsNeededBooleanOk returns a tuple with the AsNeededBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetAsNeededBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.AsNeededBoolean) {
		return nil, false
	}
	return o.AsNeededBoolean, true
}

// HasAsNeededBoolean returns a boolean if a field has been set.
func (o *Dosage) HasAsNeededBoolean() bool {
	if o != nil && !IsNil(o.AsNeededBoolean) {
		return true
	}

	return false
}

// SetAsNeededBoolean gets a reference to the given bool and assigns it to the AsNeededBoolean field.
func (o *Dosage) SetAsNeededBoolean(v bool) {
	o.AsNeededBoolean = &v
}

// GetAsNeededCodeableConcept returns the AsNeededCodeableConcept field value if set, zero value otherwise.
func (o *Dosage) GetAsNeededCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.AsNeededCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.AsNeededCodeableConcept
}

// GetAsNeededCodeableConceptOk returns a tuple with the AsNeededCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetAsNeededCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AsNeededCodeableConcept) {
		return nil, false
	}
	return o.AsNeededCodeableConcept, true
}

// HasAsNeededCodeableConcept returns a boolean if a field has been set.
func (o *Dosage) HasAsNeededCodeableConcept() bool {
	if o != nil && !IsNil(o.AsNeededCodeableConcept) {
		return true
	}

	return false
}

// SetAsNeededCodeableConcept gets a reference to the given CodeableConcept and assigns it to the AsNeededCodeableConcept field.
func (o *Dosage) SetAsNeededCodeableConcept(v CodeableConcept) {
	o.AsNeededCodeableConcept = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Dosage) GetSite() CodeableConcept {
	if o == nil || IsNil(o.Site) {
		var ret CodeableConcept
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetSiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Dosage) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given CodeableConcept and assigns it to the Site field.
func (o *Dosage) SetSite(v CodeableConcept) {
	o.Site = &v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *Dosage) GetRoute() CodeableConcept {
	if o == nil || IsNil(o.Route) {
		var ret CodeableConcept
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetRouteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *Dosage) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given CodeableConcept and assigns it to the Route field.
func (o *Dosage) SetRoute(v CodeableConcept) {
	o.Route = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Dosage) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Dosage) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *Dosage) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetDoseAndRate returns the DoseAndRate field value if set, zero value otherwise.
func (o *Dosage) GetDoseAndRate() []DosageDoseAndRate {
	if o == nil || IsNil(o.DoseAndRate) {
		var ret []DosageDoseAndRate
		return ret
	}
	return o.DoseAndRate
}

// GetDoseAndRateOk returns a tuple with the DoseAndRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetDoseAndRateOk() ([]DosageDoseAndRate, bool) {
	if o == nil || IsNil(o.DoseAndRate) {
		return nil, false
	}
	return o.DoseAndRate, true
}

// HasDoseAndRate returns a boolean if a field has been set.
func (o *Dosage) HasDoseAndRate() bool {
	if o != nil && !IsNil(o.DoseAndRate) {
		return true
	}

	return false
}

// SetDoseAndRate gets a reference to the given []DosageDoseAndRate and assigns it to the DoseAndRate field.
func (o *Dosage) SetDoseAndRate(v []DosageDoseAndRate) {
	o.DoseAndRate = v
}

// GetMaxDosePerPeriod returns the MaxDosePerPeriod field value if set, zero value otherwise.
func (o *Dosage) GetMaxDosePerPeriod() Ratio {
	if o == nil || IsNil(o.MaxDosePerPeriod) {
		var ret Ratio
		return ret
	}
	return *o.MaxDosePerPeriod
}

// GetMaxDosePerPeriodOk returns a tuple with the MaxDosePerPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetMaxDosePerPeriodOk() (*Ratio, bool) {
	if o == nil || IsNil(o.MaxDosePerPeriod) {
		return nil, false
	}
	return o.MaxDosePerPeriod, true
}

// HasMaxDosePerPeriod returns a boolean if a field has been set.
func (o *Dosage) HasMaxDosePerPeriod() bool {
	if o != nil && !IsNil(o.MaxDosePerPeriod) {
		return true
	}

	return false
}

// SetMaxDosePerPeriod gets a reference to the given Ratio and assigns it to the MaxDosePerPeriod field.
func (o *Dosage) SetMaxDosePerPeriod(v Ratio) {
	o.MaxDosePerPeriod = &v
}

// GetMaxDosePerAdministration returns the MaxDosePerAdministration field value if set, zero value otherwise.
func (o *Dosage) GetMaxDosePerAdministration() Quantity {
	if o == nil || IsNil(o.MaxDosePerAdministration) {
		var ret Quantity
		return ret
	}
	return *o.MaxDosePerAdministration
}

// GetMaxDosePerAdministrationOk returns a tuple with the MaxDosePerAdministration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetMaxDosePerAdministrationOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxDosePerAdministration) {
		return nil, false
	}
	return o.MaxDosePerAdministration, true
}

// HasMaxDosePerAdministration returns a boolean if a field has been set.
func (o *Dosage) HasMaxDosePerAdministration() bool {
	if o != nil && !IsNil(o.MaxDosePerAdministration) {
		return true
	}

	return false
}

// SetMaxDosePerAdministration gets a reference to the given Quantity and assigns it to the MaxDosePerAdministration field.
func (o *Dosage) SetMaxDosePerAdministration(v Quantity) {
	o.MaxDosePerAdministration = &v
}

// GetMaxDosePerLifetime returns the MaxDosePerLifetime field value if set, zero value otherwise.
func (o *Dosage) GetMaxDosePerLifetime() Quantity {
	if o == nil || IsNil(o.MaxDosePerLifetime) {
		var ret Quantity
		return ret
	}
	return *o.MaxDosePerLifetime
}

// GetMaxDosePerLifetimeOk returns a tuple with the MaxDosePerLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dosage) GetMaxDosePerLifetimeOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxDosePerLifetime) {
		return nil, false
	}
	return o.MaxDosePerLifetime, true
}

// HasMaxDosePerLifetime returns a boolean if a field has been set.
func (o *Dosage) HasMaxDosePerLifetime() bool {
	if o != nil && !IsNil(o.MaxDosePerLifetime) {
		return true
	}

	return false
}

// SetMaxDosePerLifetime gets a reference to the given Quantity and assigns it to the MaxDosePerLifetime field.
func (o *Dosage) SetMaxDosePerLifetime(v Quantity) {
	o.MaxDosePerLifetime = &v
}

func (o Dosage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dosage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.AdditionalInstruction) {
		toSerialize["additionalInstruction"] = o.AdditionalInstruction
	}
	if !IsNil(o.PatientInstruction) {
		toSerialize["patientInstruction"] = o.PatientInstruction
	}
	if !IsNil(o.Timing) {
		toSerialize["timing"] = o.Timing
	}
	if !IsNil(o.AsNeededBoolean) {
		toSerialize["asNeededBoolean"] = o.AsNeededBoolean
	}
	if !IsNil(o.AsNeededCodeableConcept) {
		toSerialize["asNeededCodeableConcept"] = o.AsNeededCodeableConcept
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.DoseAndRate) {
		toSerialize["doseAndRate"] = o.DoseAndRate
	}
	if !IsNil(o.MaxDosePerPeriod) {
		toSerialize["maxDosePerPeriod"] = o.MaxDosePerPeriod
	}
	if !IsNil(o.MaxDosePerAdministration) {
		toSerialize["maxDosePerAdministration"] = o.MaxDosePerAdministration
	}
	if !IsNil(o.MaxDosePerLifetime) {
		toSerialize["maxDosePerLifetime"] = o.MaxDosePerLifetime
	}
	return toSerialize, nil
}

type NullableDosage struct {
	value *Dosage
	isSet bool
}

func (v NullableDosage) Get() *Dosage {
	return v.value
}

func (v *NullableDosage) Set(val *Dosage) {
	v.value = val
	v.isSet = true
}

func (v NullableDosage) IsSet() bool {
	return v.isSet
}

func (v *NullableDosage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDosage(val *Dosage) *NullableDosage {
	return &NullableDosage{value: val, isSet: true}
}

func (v NullableDosage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDosage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


