/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ObservationReferenceRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationReferenceRange{}

// ObservationReferenceRange Measurements and simple assertions made about a patient, device or other subject.
type ObservationReferenceRange struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
	Low *Quantity `json:"low,omitempty"`
	// The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
	High *Quantity `json:"high,omitempty"`
	// Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
	Type *CodeableConcept `json:"type,omitempty"`
	// Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an \"AND\" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
	AppliesTo []CodeableConcept `json:"appliesTo,omitempty"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
	Age *Range `json:"age,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
}

// NewObservationReferenceRange instantiates a new ObservationReferenceRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationReferenceRange() *ObservationReferenceRange {
	this := ObservationReferenceRange{}
	return &this
}

// NewObservationReferenceRangeWithDefaults instantiates a new ObservationReferenceRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationReferenceRangeWithDefaults() *ObservationReferenceRange {
	this := ObservationReferenceRange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationReferenceRange) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ObservationReferenceRange) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ObservationReferenceRange) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetLow() Quantity {
	if o == nil || IsNil(o.Low) {
		var ret Quantity
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetLowOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given Quantity and assigns it to the Low field.
func (o *ObservationReferenceRange) SetLow(v Quantity) {
	o.Low = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetHigh() Quantity {
	if o == nil || IsNil(o.High) {
		var ret Quantity
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetHighOk() (*Quantity, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given Quantity and assigns it to the High field.
func (o *ObservationReferenceRange) SetHigh(v Quantity) {
	o.High = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *ObservationReferenceRange) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetAppliesTo returns the AppliesTo field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetAppliesTo() []CodeableConcept {
	if o == nil || IsNil(o.AppliesTo) {
		var ret []CodeableConcept
		return ret
	}
	return o.AppliesTo
}

// GetAppliesToOk returns a tuple with the AppliesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetAppliesToOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.AppliesTo) {
		return nil, false
	}
	return o.AppliesTo, true
}

// HasAppliesTo returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasAppliesTo() bool {
	if o != nil && !IsNil(o.AppliesTo) {
		return true
	}

	return false
}

// SetAppliesTo gets a reference to the given []CodeableConcept and assigns it to the AppliesTo field.
func (o *ObservationReferenceRange) SetAppliesTo(v []CodeableConcept) {
	o.AppliesTo = v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetAge() Range {
	if o == nil || IsNil(o.Age) {
		var ret Range
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetAgeOk() (*Range, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given Range and assigns it to the Age field.
func (o *ObservationReferenceRange) SetAge(v Range) {
	o.Age = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ObservationReferenceRange) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationReferenceRange) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ObservationReferenceRange) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ObservationReferenceRange) SetText(v string) {
	o.Text = &v
}

func (o ObservationReferenceRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationReferenceRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AppliesTo) {
		toSerialize["appliesTo"] = o.AppliesTo
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableObservationReferenceRange struct {
	value *ObservationReferenceRange
	isSet bool
}

func (v NullableObservationReferenceRange) Get() *ObservationReferenceRange {
	return v.value
}

func (v *NullableObservationReferenceRange) Set(val *ObservationReferenceRange) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationReferenceRange) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationReferenceRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationReferenceRange(val *ObservationReferenceRange) *NullableObservationReferenceRange {
	return &NullableObservationReferenceRange{value: val, isSet: true}
}

func (v NullableObservationReferenceRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationReferenceRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


