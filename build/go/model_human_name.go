/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the HumanName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HumanName{}

// HumanName A human's name with the ability to identify parts and usage.
type HumanName struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// Identifies the purpose for this name.
	Use *string `json:"use,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
	// A sequence of Unicode characters
	Family *string `json:"family,omitempty"`
	// Given name.
	Given []string `json:"given,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix []string `json:"prefix,omitempty"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix []string `json:"suffix,omitempty"`
	// Indicates the period of time when this name was valid for the named person.
	Period *Period `json:"period,omitempty"`
}

// NewHumanName instantiates a new HumanName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHumanName() *HumanName {
	this := HumanName{}
	return &this
}

// NewHumanNameWithDefaults instantiates a new HumanName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHumanNameWithDefaults() *HumanName {
	this := HumanName{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HumanName) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HumanName) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HumanName) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *HumanName) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *HumanName) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *HumanName) SetExtension(v []Extension) {
	o.Extension = v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *HumanName) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *HumanName) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *HumanName) SetUse(v string) {
	o.Use = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HumanName) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HumanName) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *HumanName) SetText(v string) {
	o.Text = &v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *HumanName) GetFamily() string {
	if o == nil || IsNil(o.Family) {
		var ret string
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.Family) {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *HumanName) HasFamily() bool {
	if o != nil && !IsNil(o.Family) {
		return true
	}

	return false
}

// SetFamily gets a reference to the given string and assigns it to the Family field.
func (o *HumanName) SetFamily(v string) {
	o.Family = &v
}

// GetGiven returns the Given field value if set, zero value otherwise.
func (o *HumanName) GetGiven() []string {
	if o == nil || IsNil(o.Given) {
		var ret []string
		return ret
	}
	return o.Given
}

// GetGivenOk returns a tuple with the Given field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetGivenOk() ([]string, bool) {
	if o == nil || IsNil(o.Given) {
		return nil, false
	}
	return o.Given, true
}

// HasGiven returns a boolean if a field has been set.
func (o *HumanName) HasGiven() bool {
	if o != nil && !IsNil(o.Given) {
		return true
	}

	return false
}

// SetGiven gets a reference to the given []string and assigns it to the Given field.
func (o *HumanName) SetGiven(v []string) {
	o.Given = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *HumanName) GetPrefix() []string {
	if o == nil || IsNil(o.Prefix) {
		var ret []string
		return ret
	}
	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetPrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *HumanName) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given []string and assigns it to the Prefix field.
func (o *HumanName) SetPrefix(v []string) {
	o.Prefix = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *HumanName) GetSuffix() []string {
	if o == nil || IsNil(o.Suffix) {
		var ret []string
		return ret
	}
	return o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.Suffix) {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *HumanName) HasSuffix() bool {
	if o != nil && !IsNil(o.Suffix) {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given []string and assigns it to the Suffix field.
func (o *HumanName) SetSuffix(v []string) {
	o.Suffix = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *HumanName) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanName) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *HumanName) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *HumanName) SetPeriod(v Period) {
	o.Period = &v
}

func (o HumanName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HumanName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Family) {
		toSerialize["family"] = o.Family
	}
	if !IsNil(o.Given) {
		toSerialize["given"] = o.Given
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Suffix) {
		toSerialize["suffix"] = o.Suffix
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	return toSerialize, nil
}

type NullableHumanName struct {
	value *HumanName
	isSet bool
}

func (v NullableHumanName) Get() *HumanName {
	return v.value
}

func (v *NullableHumanName) Set(val *HumanName) {
	v.value = val
	v.isSet = true
}

func (v NullableHumanName) IsSet() bool {
	return v.isSet
}

func (v *NullableHumanName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHumanName(val *HumanName) *NullableHumanName {
	return &NullableHumanName{value: val, isSet: true}
}

func (v NullableHumanName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHumanName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


