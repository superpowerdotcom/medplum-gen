/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoverageEligibilityRequestSupportingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageEligibilityRequestSupportingInfo{}

// CoverageEligibilityRequestSupportingInfo The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
type CoverageEligibilityRequestSupportingInfo struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	Information Reference `json:"information"`
	// Value of \"true\" or \"false\"
	AppliesToAll *bool `json:"appliesToAll,omitempty"`
}

type _CoverageEligibilityRequestSupportingInfo CoverageEligibilityRequestSupportingInfo

// NewCoverageEligibilityRequestSupportingInfo instantiates a new CoverageEligibilityRequestSupportingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageEligibilityRequestSupportingInfo(information Reference) *CoverageEligibilityRequestSupportingInfo {
	this := CoverageEligibilityRequestSupportingInfo{}
	this.Information = information
	return &this
}

// NewCoverageEligibilityRequestSupportingInfoWithDefaults instantiates a new CoverageEligibilityRequestSupportingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageEligibilityRequestSupportingInfoWithDefaults() *CoverageEligibilityRequestSupportingInfo {
	this := CoverageEligibilityRequestSupportingInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestSupportingInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestSupportingInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoverageEligibilityRequestSupportingInfo) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestSupportingInfo) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestSupportingInfo) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CoverageEligibilityRequestSupportingInfo) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestSupportingInfo) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestSupportingInfo) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CoverageEligibilityRequestSupportingInfo) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestSupportingInfo) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestSupportingInfo) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *CoverageEligibilityRequestSupportingInfo) SetSequence(v float32) {
	o.Sequence = &v
}

// GetInformation returns the Information field value
func (o *CoverageEligibilityRequestSupportingInfo) GetInformation() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Information
}

// GetInformationOk returns a tuple with the Information field value
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetInformationOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Information, true
}

// SetInformation sets field value
func (o *CoverageEligibilityRequestSupportingInfo) SetInformation(v Reference) {
	o.Information = v
}

// GetAppliesToAll returns the AppliesToAll field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestSupportingInfo) GetAppliesToAll() bool {
	if o == nil || IsNil(o.AppliesToAll) {
		var ret bool
		return ret
	}
	return *o.AppliesToAll
}

// GetAppliesToAllOk returns a tuple with the AppliesToAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestSupportingInfo) GetAppliesToAllOk() (*bool, bool) {
	if o == nil || IsNil(o.AppliesToAll) {
		return nil, false
	}
	return o.AppliesToAll, true
}

// HasAppliesToAll returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestSupportingInfo) HasAppliesToAll() bool {
	if o != nil && !IsNil(o.AppliesToAll) {
		return true
	}

	return false
}

// SetAppliesToAll gets a reference to the given bool and assigns it to the AppliesToAll field.
func (o *CoverageEligibilityRequestSupportingInfo) SetAppliesToAll(v bool) {
	o.AppliesToAll = &v
}

func (o CoverageEligibilityRequestSupportingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageEligibilityRequestSupportingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	toSerialize["information"] = o.Information
	if !IsNil(o.AppliesToAll) {
		toSerialize["appliesToAll"] = o.AppliesToAll
	}
	return toSerialize, nil
}

func (o *CoverageEligibilityRequestSupportingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"information",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoverageEligibilityRequestSupportingInfo := _CoverageEligibilityRequestSupportingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoverageEligibilityRequestSupportingInfo)

	if err != nil {
		return err
	}

	*o = CoverageEligibilityRequestSupportingInfo(varCoverageEligibilityRequestSupportingInfo)

	return err
}

type NullableCoverageEligibilityRequestSupportingInfo struct {
	value *CoverageEligibilityRequestSupportingInfo
	isSet bool
}

func (v NullableCoverageEligibilityRequestSupportingInfo) Get() *CoverageEligibilityRequestSupportingInfo {
	return v.value
}

func (v *NullableCoverageEligibilityRequestSupportingInfo) Set(val *CoverageEligibilityRequestSupportingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageEligibilityRequestSupportingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageEligibilityRequestSupportingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageEligibilityRequestSupportingInfo(val *CoverageEligibilityRequestSupportingInfo) *NullableCoverageEligibilityRequestSupportingInfo {
	return &NullableCoverageEligibilityRequestSupportingInfo{value: val, isSet: true}
}

func (v NullableCoverageEligibilityRequestSupportingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageEligibilityRequestSupportingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


