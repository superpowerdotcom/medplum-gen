/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSpecificationStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSpecificationStructure{}

// SubstanceSpecificationStructure The detailed description of a substance, typically at a level beyond what is used for prescribing.
type SubstanceSpecificationStructure struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Stereochemistry type.
	Stereochemistry *CodeableConcept `json:"stereochemistry,omitempty"`
	// Optical activity type.
	OpticalActivity *CodeableConcept `json:"opticalActivity,omitempty"`
	// A sequence of Unicode characters
	MolecularFormula *string `json:"molecularFormula,omitempty"`
	// A sequence of Unicode characters
	MolecularFormulaByMoiety *string `json:"molecularFormulaByMoiety,omitempty"`
	// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
	Isotope []SubstanceSpecificationIsotope `json:"isotope,omitempty"`
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight *SubstanceSpecificationMolecularWeight `json:"molecularWeight,omitempty"`
	// Supporting literature.
	Source []Reference `json:"source,omitempty"`
	// Molecular structural representation.
	Representation []SubstanceSpecificationRepresentation `json:"representation,omitempty"`
}

// NewSubstanceSpecificationStructure instantiates a new SubstanceSpecificationStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSpecificationStructure() *SubstanceSpecificationStructure {
	this := SubstanceSpecificationStructure{}
	return &this
}

// NewSubstanceSpecificationStructureWithDefaults instantiates a new SubstanceSpecificationStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSpecificationStructureWithDefaults() *SubstanceSpecificationStructure {
	this := SubstanceSpecificationStructure{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSpecificationStructure) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSpecificationStructure) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSpecificationStructure) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetStereochemistry returns the Stereochemistry field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetStereochemistry() CodeableConcept {
	if o == nil || IsNil(o.Stereochemistry) {
		var ret CodeableConcept
		return ret
	}
	return *o.Stereochemistry
}

// GetStereochemistryOk returns a tuple with the Stereochemistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetStereochemistryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Stereochemistry) {
		return nil, false
	}
	return o.Stereochemistry, true
}

// HasStereochemistry returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasStereochemistry() bool {
	if o != nil && !IsNil(o.Stereochemistry) {
		return true
	}

	return false
}

// SetStereochemistry gets a reference to the given CodeableConcept and assigns it to the Stereochemistry field.
func (o *SubstanceSpecificationStructure) SetStereochemistry(v CodeableConcept) {
	o.Stereochemistry = &v
}

// GetOpticalActivity returns the OpticalActivity field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetOpticalActivity() CodeableConcept {
	if o == nil || IsNil(o.OpticalActivity) {
		var ret CodeableConcept
		return ret
	}
	return *o.OpticalActivity
}

// GetOpticalActivityOk returns a tuple with the OpticalActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetOpticalActivityOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OpticalActivity) {
		return nil, false
	}
	return o.OpticalActivity, true
}

// HasOpticalActivity returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasOpticalActivity() bool {
	if o != nil && !IsNil(o.OpticalActivity) {
		return true
	}

	return false
}

// SetOpticalActivity gets a reference to the given CodeableConcept and assigns it to the OpticalActivity field.
func (o *SubstanceSpecificationStructure) SetOpticalActivity(v CodeableConcept) {
	o.OpticalActivity = &v
}

// GetMolecularFormula returns the MolecularFormula field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetMolecularFormula() string {
	if o == nil || IsNil(o.MolecularFormula) {
		var ret string
		return ret
	}
	return *o.MolecularFormula
}

// GetMolecularFormulaOk returns a tuple with the MolecularFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetMolecularFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.MolecularFormula) {
		return nil, false
	}
	return o.MolecularFormula, true
}

// HasMolecularFormula returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasMolecularFormula() bool {
	if o != nil && !IsNil(o.MolecularFormula) {
		return true
	}

	return false
}

// SetMolecularFormula gets a reference to the given string and assigns it to the MolecularFormula field.
func (o *SubstanceSpecificationStructure) SetMolecularFormula(v string) {
	o.MolecularFormula = &v
}

// GetMolecularFormulaByMoiety returns the MolecularFormulaByMoiety field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetMolecularFormulaByMoiety() string {
	if o == nil || IsNil(o.MolecularFormulaByMoiety) {
		var ret string
		return ret
	}
	return *o.MolecularFormulaByMoiety
}

// GetMolecularFormulaByMoietyOk returns a tuple with the MolecularFormulaByMoiety field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetMolecularFormulaByMoietyOk() (*string, bool) {
	if o == nil || IsNil(o.MolecularFormulaByMoiety) {
		return nil, false
	}
	return o.MolecularFormulaByMoiety, true
}

// HasMolecularFormulaByMoiety returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasMolecularFormulaByMoiety() bool {
	if o != nil && !IsNil(o.MolecularFormulaByMoiety) {
		return true
	}

	return false
}

// SetMolecularFormulaByMoiety gets a reference to the given string and assigns it to the MolecularFormulaByMoiety field.
func (o *SubstanceSpecificationStructure) SetMolecularFormulaByMoiety(v string) {
	o.MolecularFormulaByMoiety = &v
}

// GetIsotope returns the Isotope field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetIsotope() []SubstanceSpecificationIsotope {
	if o == nil || IsNil(o.Isotope) {
		var ret []SubstanceSpecificationIsotope
		return ret
	}
	return o.Isotope
}

// GetIsotopeOk returns a tuple with the Isotope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetIsotopeOk() ([]SubstanceSpecificationIsotope, bool) {
	if o == nil || IsNil(o.Isotope) {
		return nil, false
	}
	return o.Isotope, true
}

// HasIsotope returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasIsotope() bool {
	if o != nil && !IsNil(o.Isotope) {
		return true
	}

	return false
}

// SetIsotope gets a reference to the given []SubstanceSpecificationIsotope and assigns it to the Isotope field.
func (o *SubstanceSpecificationStructure) SetIsotope(v []SubstanceSpecificationIsotope) {
	o.Isotope = v
}

// GetMolecularWeight returns the MolecularWeight field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetMolecularWeight() SubstanceSpecificationMolecularWeight {
	if o == nil || IsNil(o.MolecularWeight) {
		var ret SubstanceSpecificationMolecularWeight
		return ret
	}
	return *o.MolecularWeight
}

// GetMolecularWeightOk returns a tuple with the MolecularWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetMolecularWeightOk() (*SubstanceSpecificationMolecularWeight, bool) {
	if o == nil || IsNil(o.MolecularWeight) {
		return nil, false
	}
	return o.MolecularWeight, true
}

// HasMolecularWeight returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasMolecularWeight() bool {
	if o != nil && !IsNil(o.MolecularWeight) {
		return true
	}

	return false
}

// SetMolecularWeight gets a reference to the given SubstanceSpecificationMolecularWeight and assigns it to the MolecularWeight field.
func (o *SubstanceSpecificationStructure) SetMolecularWeight(v SubstanceSpecificationMolecularWeight) {
	o.MolecularWeight = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetSource() []Reference {
	if o == nil || IsNil(o.Source) {
		var ret []Reference
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetSourceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []Reference and assigns it to the Source field.
func (o *SubstanceSpecificationStructure) SetSource(v []Reference) {
	o.Source = v
}

// GetRepresentation returns the Representation field value if set, zero value otherwise.
func (o *SubstanceSpecificationStructure) GetRepresentation() []SubstanceSpecificationRepresentation {
	if o == nil || IsNil(o.Representation) {
		var ret []SubstanceSpecificationRepresentation
		return ret
	}
	return o.Representation
}

// GetRepresentationOk returns a tuple with the Representation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationStructure) GetRepresentationOk() ([]SubstanceSpecificationRepresentation, bool) {
	if o == nil || IsNil(o.Representation) {
		return nil, false
	}
	return o.Representation, true
}

// HasRepresentation returns a boolean if a field has been set.
func (o *SubstanceSpecificationStructure) HasRepresentation() bool {
	if o != nil && !IsNil(o.Representation) {
		return true
	}

	return false
}

// SetRepresentation gets a reference to the given []SubstanceSpecificationRepresentation and assigns it to the Representation field.
func (o *SubstanceSpecificationStructure) SetRepresentation(v []SubstanceSpecificationRepresentation) {
	o.Representation = v
}

func (o SubstanceSpecificationStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSpecificationStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Stereochemistry) {
		toSerialize["stereochemistry"] = o.Stereochemistry
	}
	if !IsNil(o.OpticalActivity) {
		toSerialize["opticalActivity"] = o.OpticalActivity
	}
	if !IsNil(o.MolecularFormula) {
		toSerialize["molecularFormula"] = o.MolecularFormula
	}
	if !IsNil(o.MolecularFormulaByMoiety) {
		toSerialize["molecularFormulaByMoiety"] = o.MolecularFormulaByMoiety
	}
	if !IsNil(o.Isotope) {
		toSerialize["isotope"] = o.Isotope
	}
	if !IsNil(o.MolecularWeight) {
		toSerialize["molecularWeight"] = o.MolecularWeight
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Representation) {
		toSerialize["representation"] = o.Representation
	}
	return toSerialize, nil
}

type NullableSubstanceSpecificationStructure struct {
	value *SubstanceSpecificationStructure
	isSet bool
}

func (v NullableSubstanceSpecificationStructure) Get() *SubstanceSpecificationStructure {
	return v.value
}

func (v *NullableSubstanceSpecificationStructure) Set(val *SubstanceSpecificationStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSpecificationStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSpecificationStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSpecificationStructure(val *SubstanceSpecificationStructure) *NullableSubstanceSpecificationStructure {
	return &NullableSubstanceSpecificationStructure{value: val, isSet: true}
}

func (v NullableSubstanceSpecificationStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSpecificationStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


