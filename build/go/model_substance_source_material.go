/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubstanceSourceMaterial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSourceMaterial{}

// SubstanceSourceMaterial Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterial struct {
	// This is a SubstanceSourceMaterial resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// General high level classification of the source material specific to the origin of the material.
	SourceMaterialClass *CodeableConcept `json:"sourceMaterialClass,omitempty"`
	// The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
	SourceMaterialType *CodeableConcept `json:"sourceMaterialType,omitempty"`
	// The state of the source material when extracted.
	SourceMaterialState *CodeableConcept `json:"sourceMaterialState,omitempty"`
	// The unique identifier associated with the source material parent organism shall be specified.
	OrganismId *Identifier `json:"organismId,omitempty"`
	// A sequence of Unicode characters
	OrganismName *string `json:"organismName,omitempty"`
	// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
	ParentSubstanceId []Identifier `json:"parentSubstanceId,omitempty"`
	// The parent substance of the Herbal Drug, or Herbal preparation.
	ParentSubstanceName []string `json:"parentSubstanceName,omitempty"`
	// The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
	CountryOfOrigin []CodeableConcept `json:"countryOfOrigin,omitempty"`
	// The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
	GeographicalLocation []string `json:"geographicalLocation,omitempty"`
	// Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
	DevelopmentStage *CodeableConcept `json:"developmentStage,omitempty"`
	// Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
	FractionDescription []SubstanceSourceMaterialFractionDescription `json:"fractionDescription,omitempty"`
	// This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
	Organism *SubstanceSourceMaterialOrganism `json:"organism,omitempty"`
	// To do.
	PartDescription []SubstanceSourceMaterialPartDescription `json:"partDescription,omitempty"`
}

type _SubstanceSourceMaterial SubstanceSourceMaterial

// NewSubstanceSourceMaterial instantiates a new SubstanceSourceMaterial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSourceMaterial(resourceType string) *SubstanceSourceMaterial {
	this := SubstanceSourceMaterial{}
	this.ResourceType = resourceType
	return &this
}

// NewSubstanceSourceMaterialWithDefaults instantiates a new SubstanceSourceMaterial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSourceMaterialWithDefaults() *SubstanceSourceMaterial {
	this := SubstanceSourceMaterial{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *SubstanceSourceMaterial) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SubstanceSourceMaterial) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSourceMaterial) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SubstanceSourceMaterial) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *SubstanceSourceMaterial) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SubstanceSourceMaterial) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *SubstanceSourceMaterial) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *SubstanceSourceMaterial) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSourceMaterial) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSourceMaterial) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSourceMaterialClass returns the SourceMaterialClass field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetSourceMaterialClass() CodeableConcept {
	if o == nil || IsNil(o.SourceMaterialClass) {
		var ret CodeableConcept
		return ret
	}
	return *o.SourceMaterialClass
}

// GetSourceMaterialClassOk returns a tuple with the SourceMaterialClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetSourceMaterialClassOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SourceMaterialClass) {
		return nil, false
	}
	return o.SourceMaterialClass, true
}

// HasSourceMaterialClass returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasSourceMaterialClass() bool {
	if o != nil && !IsNil(o.SourceMaterialClass) {
		return true
	}

	return false
}

// SetSourceMaterialClass gets a reference to the given CodeableConcept and assigns it to the SourceMaterialClass field.
func (o *SubstanceSourceMaterial) SetSourceMaterialClass(v CodeableConcept) {
	o.SourceMaterialClass = &v
}

// GetSourceMaterialType returns the SourceMaterialType field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetSourceMaterialType() CodeableConcept {
	if o == nil || IsNil(o.SourceMaterialType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SourceMaterialType
}

// GetSourceMaterialTypeOk returns a tuple with the SourceMaterialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetSourceMaterialTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SourceMaterialType) {
		return nil, false
	}
	return o.SourceMaterialType, true
}

// HasSourceMaterialType returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasSourceMaterialType() bool {
	if o != nil && !IsNil(o.SourceMaterialType) {
		return true
	}

	return false
}

// SetSourceMaterialType gets a reference to the given CodeableConcept and assigns it to the SourceMaterialType field.
func (o *SubstanceSourceMaterial) SetSourceMaterialType(v CodeableConcept) {
	o.SourceMaterialType = &v
}

// GetSourceMaterialState returns the SourceMaterialState field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetSourceMaterialState() CodeableConcept {
	if o == nil || IsNil(o.SourceMaterialState) {
		var ret CodeableConcept
		return ret
	}
	return *o.SourceMaterialState
}

// GetSourceMaterialStateOk returns a tuple with the SourceMaterialState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetSourceMaterialStateOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SourceMaterialState) {
		return nil, false
	}
	return o.SourceMaterialState, true
}

// HasSourceMaterialState returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasSourceMaterialState() bool {
	if o != nil && !IsNil(o.SourceMaterialState) {
		return true
	}

	return false
}

// SetSourceMaterialState gets a reference to the given CodeableConcept and assigns it to the SourceMaterialState field.
func (o *SubstanceSourceMaterial) SetSourceMaterialState(v CodeableConcept) {
	o.SourceMaterialState = &v
}

// GetOrganismId returns the OrganismId field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetOrganismId() Identifier {
	if o == nil || IsNil(o.OrganismId) {
		var ret Identifier
		return ret
	}
	return *o.OrganismId
}

// GetOrganismIdOk returns a tuple with the OrganismId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetOrganismIdOk() (*Identifier, bool) {
	if o == nil || IsNil(o.OrganismId) {
		return nil, false
	}
	return o.OrganismId, true
}

// HasOrganismId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasOrganismId() bool {
	if o != nil && !IsNil(o.OrganismId) {
		return true
	}

	return false
}

// SetOrganismId gets a reference to the given Identifier and assigns it to the OrganismId field.
func (o *SubstanceSourceMaterial) SetOrganismId(v Identifier) {
	o.OrganismId = &v
}

// GetOrganismName returns the OrganismName field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetOrganismName() string {
	if o == nil || IsNil(o.OrganismName) {
		var ret string
		return ret
	}
	return *o.OrganismName
}

// GetOrganismNameOk returns a tuple with the OrganismName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetOrganismNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrganismName) {
		return nil, false
	}
	return o.OrganismName, true
}

// HasOrganismName returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasOrganismName() bool {
	if o != nil && !IsNil(o.OrganismName) {
		return true
	}

	return false
}

// SetOrganismName gets a reference to the given string and assigns it to the OrganismName field.
func (o *SubstanceSourceMaterial) SetOrganismName(v string) {
	o.OrganismName = &v
}

// GetParentSubstanceId returns the ParentSubstanceId field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetParentSubstanceId() []Identifier {
	if o == nil || IsNil(o.ParentSubstanceId) {
		var ret []Identifier
		return ret
	}
	return o.ParentSubstanceId
}

// GetParentSubstanceIdOk returns a tuple with the ParentSubstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetParentSubstanceIdOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.ParentSubstanceId) {
		return nil, false
	}
	return o.ParentSubstanceId, true
}

// HasParentSubstanceId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasParentSubstanceId() bool {
	if o != nil && !IsNil(o.ParentSubstanceId) {
		return true
	}

	return false
}

// SetParentSubstanceId gets a reference to the given []Identifier and assigns it to the ParentSubstanceId field.
func (o *SubstanceSourceMaterial) SetParentSubstanceId(v []Identifier) {
	o.ParentSubstanceId = v
}

// GetParentSubstanceName returns the ParentSubstanceName field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetParentSubstanceName() []string {
	if o == nil || IsNil(o.ParentSubstanceName) {
		var ret []string
		return ret
	}
	return o.ParentSubstanceName
}

// GetParentSubstanceNameOk returns a tuple with the ParentSubstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetParentSubstanceNameOk() ([]string, bool) {
	if o == nil || IsNil(o.ParentSubstanceName) {
		return nil, false
	}
	return o.ParentSubstanceName, true
}

// HasParentSubstanceName returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasParentSubstanceName() bool {
	if o != nil && !IsNil(o.ParentSubstanceName) {
		return true
	}

	return false
}

// SetParentSubstanceName gets a reference to the given []string and assigns it to the ParentSubstanceName field.
func (o *SubstanceSourceMaterial) SetParentSubstanceName(v []string) {
	o.ParentSubstanceName = v
}

// GetCountryOfOrigin returns the CountryOfOrigin field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetCountryOfOrigin() []CodeableConcept {
	if o == nil || IsNil(o.CountryOfOrigin) {
		var ret []CodeableConcept
		return ret
	}
	return o.CountryOfOrigin
}

// GetCountryOfOriginOk returns a tuple with the CountryOfOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetCountryOfOriginOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.CountryOfOrigin) {
		return nil, false
	}
	return o.CountryOfOrigin, true
}

// HasCountryOfOrigin returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasCountryOfOrigin() bool {
	if o != nil && !IsNil(o.CountryOfOrigin) {
		return true
	}

	return false
}

// SetCountryOfOrigin gets a reference to the given []CodeableConcept and assigns it to the CountryOfOrigin field.
func (o *SubstanceSourceMaterial) SetCountryOfOrigin(v []CodeableConcept) {
	o.CountryOfOrigin = v
}

// GetGeographicalLocation returns the GeographicalLocation field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetGeographicalLocation() []string {
	if o == nil || IsNil(o.GeographicalLocation) {
		var ret []string
		return ret
	}
	return o.GeographicalLocation
}

// GetGeographicalLocationOk returns a tuple with the GeographicalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetGeographicalLocationOk() ([]string, bool) {
	if o == nil || IsNil(o.GeographicalLocation) {
		return nil, false
	}
	return o.GeographicalLocation, true
}

// HasGeographicalLocation returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasGeographicalLocation() bool {
	if o != nil && !IsNil(o.GeographicalLocation) {
		return true
	}

	return false
}

// SetGeographicalLocation gets a reference to the given []string and assigns it to the GeographicalLocation field.
func (o *SubstanceSourceMaterial) SetGeographicalLocation(v []string) {
	o.GeographicalLocation = v
}

// GetDevelopmentStage returns the DevelopmentStage field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetDevelopmentStage() CodeableConcept {
	if o == nil || IsNil(o.DevelopmentStage) {
		var ret CodeableConcept
		return ret
	}
	return *o.DevelopmentStage
}

// GetDevelopmentStageOk returns a tuple with the DevelopmentStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetDevelopmentStageOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DevelopmentStage) {
		return nil, false
	}
	return o.DevelopmentStage, true
}

// HasDevelopmentStage returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasDevelopmentStage() bool {
	if o != nil && !IsNil(o.DevelopmentStage) {
		return true
	}

	return false
}

// SetDevelopmentStage gets a reference to the given CodeableConcept and assigns it to the DevelopmentStage field.
func (o *SubstanceSourceMaterial) SetDevelopmentStage(v CodeableConcept) {
	o.DevelopmentStage = &v
}

// GetFractionDescription returns the FractionDescription field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetFractionDescription() []SubstanceSourceMaterialFractionDescription {
	if o == nil || IsNil(o.FractionDescription) {
		var ret []SubstanceSourceMaterialFractionDescription
		return ret
	}
	return o.FractionDescription
}

// GetFractionDescriptionOk returns a tuple with the FractionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetFractionDescriptionOk() ([]SubstanceSourceMaterialFractionDescription, bool) {
	if o == nil || IsNil(o.FractionDescription) {
		return nil, false
	}
	return o.FractionDescription, true
}

// HasFractionDescription returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasFractionDescription() bool {
	if o != nil && !IsNil(o.FractionDescription) {
		return true
	}

	return false
}

// SetFractionDescription gets a reference to the given []SubstanceSourceMaterialFractionDescription and assigns it to the FractionDescription field.
func (o *SubstanceSourceMaterial) SetFractionDescription(v []SubstanceSourceMaterialFractionDescription) {
	o.FractionDescription = v
}

// GetOrganism returns the Organism field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetOrganism() SubstanceSourceMaterialOrganism {
	if o == nil || IsNil(o.Organism) {
		var ret SubstanceSourceMaterialOrganism
		return ret
	}
	return *o.Organism
}

// GetOrganismOk returns a tuple with the Organism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetOrganismOk() (*SubstanceSourceMaterialOrganism, bool) {
	if o == nil || IsNil(o.Organism) {
		return nil, false
	}
	return o.Organism, true
}

// HasOrganism returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasOrganism() bool {
	if o != nil && !IsNil(o.Organism) {
		return true
	}

	return false
}

// SetOrganism gets a reference to the given SubstanceSourceMaterialOrganism and assigns it to the Organism field.
func (o *SubstanceSourceMaterial) SetOrganism(v SubstanceSourceMaterialOrganism) {
	o.Organism = &v
}

// GetPartDescription returns the PartDescription field value if set, zero value otherwise.
func (o *SubstanceSourceMaterial) GetPartDescription() []SubstanceSourceMaterialPartDescription {
	if o == nil || IsNil(o.PartDescription) {
		var ret []SubstanceSourceMaterialPartDescription
		return ret
	}
	return o.PartDescription
}

// GetPartDescriptionOk returns a tuple with the PartDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterial) GetPartDescriptionOk() ([]SubstanceSourceMaterialPartDescription, bool) {
	if o == nil || IsNil(o.PartDescription) {
		return nil, false
	}
	return o.PartDescription, true
}

// HasPartDescription returns a boolean if a field has been set.
func (o *SubstanceSourceMaterial) HasPartDescription() bool {
	if o != nil && !IsNil(o.PartDescription) {
		return true
	}

	return false
}

// SetPartDescription gets a reference to the given []SubstanceSourceMaterialPartDescription and assigns it to the PartDescription field.
func (o *SubstanceSourceMaterial) SetPartDescription(v []SubstanceSourceMaterialPartDescription) {
	o.PartDescription = v
}

func (o SubstanceSourceMaterial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSourceMaterial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.SourceMaterialClass) {
		toSerialize["sourceMaterialClass"] = o.SourceMaterialClass
	}
	if !IsNil(o.SourceMaterialType) {
		toSerialize["sourceMaterialType"] = o.SourceMaterialType
	}
	if !IsNil(o.SourceMaterialState) {
		toSerialize["sourceMaterialState"] = o.SourceMaterialState
	}
	if !IsNil(o.OrganismId) {
		toSerialize["organismId"] = o.OrganismId
	}
	if !IsNil(o.OrganismName) {
		toSerialize["organismName"] = o.OrganismName
	}
	if !IsNil(o.ParentSubstanceId) {
		toSerialize["parentSubstanceId"] = o.ParentSubstanceId
	}
	if !IsNil(o.ParentSubstanceName) {
		toSerialize["parentSubstanceName"] = o.ParentSubstanceName
	}
	if !IsNil(o.CountryOfOrigin) {
		toSerialize["countryOfOrigin"] = o.CountryOfOrigin
	}
	if !IsNil(o.GeographicalLocation) {
		toSerialize["geographicalLocation"] = o.GeographicalLocation
	}
	if !IsNil(o.DevelopmentStage) {
		toSerialize["developmentStage"] = o.DevelopmentStage
	}
	if !IsNil(o.FractionDescription) {
		toSerialize["fractionDescription"] = o.FractionDescription
	}
	if !IsNil(o.Organism) {
		toSerialize["organism"] = o.Organism
	}
	if !IsNil(o.PartDescription) {
		toSerialize["partDescription"] = o.PartDescription
	}
	return toSerialize, nil
}

func (o *SubstanceSourceMaterial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstanceSourceMaterial := _SubstanceSourceMaterial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstanceSourceMaterial)

	if err != nil {
		return err
	}

	*o = SubstanceSourceMaterial(varSubstanceSourceMaterial)

	return err
}

type NullableSubstanceSourceMaterial struct {
	value *SubstanceSourceMaterial
	isSet bool
}

func (v NullableSubstanceSourceMaterial) Get() *SubstanceSourceMaterial {
	return v.value
}

func (v *NullableSubstanceSourceMaterial) Set(val *SubstanceSourceMaterial) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSourceMaterial) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSourceMaterial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSourceMaterial(val *SubstanceSourceMaterial) *NullableSubstanceSourceMaterial {
	return &NullableSubstanceSourceMaterial{value: val, isSet: true}
}

func (v NullableSubstanceSourceMaterial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSourceMaterial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


