/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CoverageEligibilityRequestItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageEligibilityRequestItem{}

// CoverageEligibilityRequestItem The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
type CoverageEligibilityRequestItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Exceptions, special conditions and supporting information applicable for this service or product line.
	SupportingInfoSequence []float32 `json:"supportingInfoSequence,omitempty"`
	// Code to identify the general type of benefits under which products and services are provided.
	Category *CodeableConcept `json:"category,omitempty"`
	// This contains the product, service, drug or other billing code for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// The practitioner who is responsible for the product or service to be rendered to the patient.
	Provider *Reference `json:"provider,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity,omitempty"`
	// The amount charged to the patient by the provider for a single unit.
	UnitPrice *Money `json:"unitPrice,omitempty"`
	// Facility where the services will be provided.
	Facility *Reference `json:"facility,omitempty"`
	// Patient diagnosis for which care is sought.
	Diagnosis []CoverageEligibilityRequestDiagnosis `json:"diagnosis,omitempty"`
	// The plan/proposal/order describing the proposed service in detail.
	Detail []Reference `json:"detail,omitempty"`
}

// NewCoverageEligibilityRequestItem instantiates a new CoverageEligibilityRequestItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageEligibilityRequestItem() *CoverageEligibilityRequestItem {
	this := CoverageEligibilityRequestItem{}
	return &this
}

// NewCoverageEligibilityRequestItemWithDefaults instantiates a new CoverageEligibilityRequestItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageEligibilityRequestItemWithDefaults() *CoverageEligibilityRequestItem {
	this := CoverageEligibilityRequestItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoverageEligibilityRequestItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CoverageEligibilityRequestItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CoverageEligibilityRequestItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSupportingInfoSequence returns the SupportingInfoSequence field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetSupportingInfoSequence() []float32 {
	if o == nil || IsNil(o.SupportingInfoSequence) {
		var ret []float32
		return ret
	}
	return o.SupportingInfoSequence
}

// GetSupportingInfoSequenceOk returns a tuple with the SupportingInfoSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetSupportingInfoSequenceOk() ([]float32, bool) {
	if o == nil || IsNil(o.SupportingInfoSequence) {
		return nil, false
	}
	return o.SupportingInfoSequence, true
}

// HasSupportingInfoSequence returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasSupportingInfoSequence() bool {
	if o != nil && !IsNil(o.SupportingInfoSequence) {
		return true
	}

	return false
}

// SetSupportingInfoSequence gets a reference to the given []float32 and assigns it to the SupportingInfoSequence field.
func (o *CoverageEligibilityRequestItem) SetSupportingInfoSequence(v []float32) {
	o.SupportingInfoSequence = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *CoverageEligibilityRequestItem) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetProductOrService returns the ProductOrService field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetProductOrService() CodeableConcept {
	if o == nil || IsNil(o.ProductOrService) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductOrService
}

// GetProductOrServiceOk returns a tuple with the ProductOrService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetProductOrServiceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductOrService) {
		return nil, false
	}
	return o.ProductOrService, true
}

// HasProductOrService returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasProductOrService() bool {
	if o != nil && !IsNil(o.ProductOrService) {
		return true
	}

	return false
}

// SetProductOrService gets a reference to the given CodeableConcept and assigns it to the ProductOrService field.
func (o *CoverageEligibilityRequestItem) SetProductOrService(v CodeableConcept) {
	o.ProductOrService = &v
}

// GetModifier returns the Modifier field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetModifier() []CodeableConcept {
	if o == nil || IsNil(o.Modifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.Modifier
}

// GetModifierOk returns a tuple with the Modifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Modifier) {
		return nil, false
	}
	return o.Modifier, true
}

// HasModifier returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasModifier() bool {
	if o != nil && !IsNil(o.Modifier) {
		return true
	}

	return false
}

// SetModifier gets a reference to the given []CodeableConcept and assigns it to the Modifier field.
func (o *CoverageEligibilityRequestItem) SetModifier(v []CodeableConcept) {
	o.Modifier = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetProvider() Reference {
	if o == nil || IsNil(o.Provider) {
		var ret Reference
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetProviderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given Reference and assigns it to the Provider field.
func (o *CoverageEligibilityRequestItem) SetProvider(v Reference) {
	o.Provider = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *CoverageEligibilityRequestItem) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetUnitPrice() Money {
	if o == nil || IsNil(o.UnitPrice) {
		var ret Money
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetUnitPriceOk() (*Money, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given Money and assigns it to the UnitPrice field.
func (o *CoverageEligibilityRequestItem) SetUnitPrice(v Money) {
	o.UnitPrice = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetFacility() Reference {
	if o == nil || IsNil(o.Facility) {
		var ret Reference
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetFacilityOk() (*Reference, bool) {
	if o == nil || IsNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasFacility() bool {
	if o != nil && !IsNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given Reference and assigns it to the Facility field.
func (o *CoverageEligibilityRequestItem) SetFacility(v Reference) {
	o.Facility = &v
}

// GetDiagnosis returns the Diagnosis field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetDiagnosis() []CoverageEligibilityRequestDiagnosis {
	if o == nil || IsNil(o.Diagnosis) {
		var ret []CoverageEligibilityRequestDiagnosis
		return ret
	}
	return o.Diagnosis
}

// GetDiagnosisOk returns a tuple with the Diagnosis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetDiagnosisOk() ([]CoverageEligibilityRequestDiagnosis, bool) {
	if o == nil || IsNil(o.Diagnosis) {
		return nil, false
	}
	return o.Diagnosis, true
}

// HasDiagnosis returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasDiagnosis() bool {
	if o != nil && !IsNil(o.Diagnosis) {
		return true
	}

	return false
}

// SetDiagnosis gets a reference to the given []CoverageEligibilityRequestDiagnosis and assigns it to the Diagnosis field.
func (o *CoverageEligibilityRequestItem) SetDiagnosis(v []CoverageEligibilityRequestDiagnosis) {
	o.Diagnosis = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestItem) GetDetail() []Reference {
	if o == nil || IsNil(o.Detail) {
		var ret []Reference
		return ret
	}
	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestItem) GetDetailOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestItem) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given []Reference and assigns it to the Detail field.
func (o *CoverageEligibilityRequestItem) SetDetail(v []Reference) {
	o.Detail = v
}

func (o CoverageEligibilityRequestItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageEligibilityRequestItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.SupportingInfoSequence) {
		toSerialize["supportingInfoSequence"] = o.SupportingInfoSequence
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.ProductOrService) {
		toSerialize["productOrService"] = o.ProductOrService
	}
	if !IsNil(o.Modifier) {
		toSerialize["modifier"] = o.Modifier
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !IsNil(o.Diagnosis) {
		toSerialize["diagnosis"] = o.Diagnosis
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableCoverageEligibilityRequestItem struct {
	value *CoverageEligibilityRequestItem
	isSet bool
}

func (v NullableCoverageEligibilityRequestItem) Get() *CoverageEligibilityRequestItem {
	return v.value
}

func (v *NullableCoverageEligibilityRequestItem) Set(val *CoverageEligibilityRequestItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageEligibilityRequestItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageEligibilityRequestItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageEligibilityRequestItem(val *CoverageEligibilityRequestItem) *NullableCoverageEligibilityRequestItem {
	return &NullableCoverageEligibilityRequestItem{value: val, isSet: true}
}

func (v NullableCoverageEligibilityRequestItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageEligibilityRequestItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


