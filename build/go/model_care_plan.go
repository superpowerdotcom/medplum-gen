/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CarePlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CarePlan{}

// CarePlan Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
type CarePlan struct {
	// This is a CarePlan resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// A care plan that is fulfilled in whole or in part by this care plan.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// Completed or terminated care plan whose function is taken by this new care plan.
	Replaces []Reference `json:"replaces,omitempty"`
	// A larger care plan of which this particular care plan is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Intent *string `json:"intent,omitempty"`
	// Identifies what \"kind\" of plan this is to support differentiation between multiple co-existing plans; e.g. \"Home health\", \"psychiatric\", \"asthma\", \"disease management\", \"wellness plan\", etc.
	Category []CodeableConcept `json:"category,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Identifies the patient or group whose intended care is described by the plan.
	Subject Reference `json:"subject"`
	// The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
	Encounter *Reference `json:"encounter,omitempty"`
	// Indicates when the plan did (or is intended to) come into effect and end.
	Period *Period `json:"period,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Created *string `json:"created,omitempty"`
	// When populated, the author is responsible for the care plan.  The care plan is attributed to the author.
	Author *Reference `json:"author,omitempty"`
	// Identifies the individual(s) or organization who provided the contents of the care plan.
	Contributor []Reference `json:"contributor,omitempty"`
	// Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
	CareTeam []Reference `json:"careTeam,omitempty"`
	// Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
	Addresses []Reference `json:"addresses,omitempty"`
	// Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
	SupportingInfo []Reference `json:"supportingInfo,omitempty"`
	// Describes the intended objective(s) of carrying out the care plan.
	Goal []Reference `json:"goal,omitempty"`
	// Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
	Activity []CarePlanActivity `json:"activity,omitempty"`
	// General notes about the care plan not covered elsewhere.
	Note []Annotation `json:"note,omitempty"`
}

type _CarePlan CarePlan

// NewCarePlan instantiates a new CarePlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarePlan(resourceType string, subject Reference) *CarePlan {
	this := CarePlan{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewCarePlanWithDefaults instantiates a new CarePlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarePlanWithDefaults() *CarePlan {
	this := CarePlan{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *CarePlan) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *CarePlan) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *CarePlan) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CarePlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CarePlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CarePlan) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CarePlan) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CarePlan) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *CarePlan) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *CarePlan) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *CarePlan) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *CarePlan) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *CarePlan) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *CarePlan) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *CarePlan) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CarePlan) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CarePlan) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *CarePlan) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *CarePlan) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *CarePlan) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *CarePlan) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CarePlan) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CarePlan) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CarePlan) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CarePlan) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CarePlan) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CarePlan) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CarePlan) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CarePlan) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *CarePlan) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *CarePlan) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *CarePlan) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *CarePlan) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *CarePlan) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *CarePlan) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *CarePlan) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *CarePlan) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *CarePlan) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *CarePlan) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetReplaces returns the Replaces field value if set, zero value otherwise.
func (o *CarePlan) GetReplaces() []Reference {
	if o == nil || IsNil(o.Replaces) {
		var ret []Reference
		return ret
	}
	return o.Replaces
}

// GetReplacesOk returns a tuple with the Replaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetReplacesOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Replaces) {
		return nil, false
	}
	return o.Replaces, true
}

// HasReplaces returns a boolean if a field has been set.
func (o *CarePlan) HasReplaces() bool {
	if o != nil && !IsNil(o.Replaces) {
		return true
	}

	return false
}

// SetReplaces gets a reference to the given []Reference and assigns it to the Replaces field.
func (o *CarePlan) SetReplaces(v []Reference) {
	o.Replaces = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *CarePlan) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *CarePlan) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *CarePlan) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CarePlan) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CarePlan) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CarePlan) SetStatus(v string) {
	o.Status = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *CarePlan) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *CarePlan) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *CarePlan) SetIntent(v string) {
	o.Intent = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CarePlan) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CarePlan) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *CarePlan) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CarePlan) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CarePlan) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CarePlan) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CarePlan) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CarePlan) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CarePlan) SetDescription(v string) {
	o.Description = &v
}

// GetSubject returns the Subject field value
func (o *CarePlan) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *CarePlan) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *CarePlan) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *CarePlan) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *CarePlan) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *CarePlan) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *CarePlan) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CarePlan) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *CarePlan) SetPeriod(v Period) {
	o.Period = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CarePlan) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CarePlan) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *CarePlan) SetCreated(v string) {
	o.Created = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CarePlan) GetAuthor() Reference {
	if o == nil || IsNil(o.Author) {
		var ret Reference
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetAuthorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CarePlan) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Reference and assigns it to the Author field.
func (o *CarePlan) SetAuthor(v Reference) {
	o.Author = &v
}

// GetContributor returns the Contributor field value if set, zero value otherwise.
func (o *CarePlan) GetContributor() []Reference {
	if o == nil || IsNil(o.Contributor) {
		var ret []Reference
		return ret
	}
	return o.Contributor
}

// GetContributorOk returns a tuple with the Contributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetContributorOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Contributor) {
		return nil, false
	}
	return o.Contributor, true
}

// HasContributor returns a boolean if a field has been set.
func (o *CarePlan) HasContributor() bool {
	if o != nil && !IsNil(o.Contributor) {
		return true
	}

	return false
}

// SetContributor gets a reference to the given []Reference and assigns it to the Contributor field.
func (o *CarePlan) SetContributor(v []Reference) {
	o.Contributor = v
}

// GetCareTeam returns the CareTeam field value if set, zero value otherwise.
func (o *CarePlan) GetCareTeam() []Reference {
	if o == nil || IsNil(o.CareTeam) {
		var ret []Reference
		return ret
	}
	return o.CareTeam
}

// GetCareTeamOk returns a tuple with the CareTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetCareTeamOk() ([]Reference, bool) {
	if o == nil || IsNil(o.CareTeam) {
		return nil, false
	}
	return o.CareTeam, true
}

// HasCareTeam returns a boolean if a field has been set.
func (o *CarePlan) HasCareTeam() bool {
	if o != nil && !IsNil(o.CareTeam) {
		return true
	}

	return false
}

// SetCareTeam gets a reference to the given []Reference and assigns it to the CareTeam field.
func (o *CarePlan) SetCareTeam(v []Reference) {
	o.CareTeam = v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *CarePlan) GetAddresses() []Reference {
	if o == nil || IsNil(o.Addresses) {
		var ret []Reference
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetAddressesOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *CarePlan) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []Reference and assigns it to the Addresses field.
func (o *CarePlan) SetAddresses(v []Reference) {
	o.Addresses = v
}

// GetSupportingInfo returns the SupportingInfo field value if set, zero value otherwise.
func (o *CarePlan) GetSupportingInfo() []Reference {
	if o == nil || IsNil(o.SupportingInfo) {
		var ret []Reference
		return ret
	}
	return o.SupportingInfo
}

// GetSupportingInfoOk returns a tuple with the SupportingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetSupportingInfoOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInfo) {
		return nil, false
	}
	return o.SupportingInfo, true
}

// HasSupportingInfo returns a boolean if a field has been set.
func (o *CarePlan) HasSupportingInfo() bool {
	if o != nil && !IsNil(o.SupportingInfo) {
		return true
	}

	return false
}

// SetSupportingInfo gets a reference to the given []Reference and assigns it to the SupportingInfo field.
func (o *CarePlan) SetSupportingInfo(v []Reference) {
	o.SupportingInfo = v
}

// GetGoal returns the Goal field value if set, zero value otherwise.
func (o *CarePlan) GetGoal() []Reference {
	if o == nil || IsNil(o.Goal) {
		var ret []Reference
		return ret
	}
	return o.Goal
}

// GetGoalOk returns a tuple with the Goal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetGoalOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Goal) {
		return nil, false
	}
	return o.Goal, true
}

// HasGoal returns a boolean if a field has been set.
func (o *CarePlan) HasGoal() bool {
	if o != nil && !IsNil(o.Goal) {
		return true
	}

	return false
}

// SetGoal gets a reference to the given []Reference and assigns it to the Goal field.
func (o *CarePlan) SetGoal(v []Reference) {
	o.Goal = v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *CarePlan) GetActivity() []CarePlanActivity {
	if o == nil || IsNil(o.Activity) {
		var ret []CarePlanActivity
		return ret
	}
	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetActivityOk() ([]CarePlanActivity, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *CarePlan) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []CarePlanActivity and assigns it to the Activity field.
func (o *CarePlan) SetActivity(v []CarePlanActivity) {
	o.Activity = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *CarePlan) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlan) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *CarePlan) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *CarePlan) SetNote(v []Annotation) {
	o.Note = v
}

func (o CarePlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CarePlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.Replaces) {
		toSerialize["replaces"] = o.Replaces
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Contributor) {
		toSerialize["contributor"] = o.Contributor
	}
	if !IsNil(o.CareTeam) {
		toSerialize["careTeam"] = o.CareTeam
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.SupportingInfo) {
		toSerialize["supportingInfo"] = o.SupportingInfo
	}
	if !IsNil(o.Goal) {
		toSerialize["goal"] = o.Goal
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *CarePlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCarePlan := _CarePlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCarePlan)

	if err != nil {
		return err
	}

	*o = CarePlan(varCarePlan)

	return err
}

type NullableCarePlan struct {
	value *CarePlan
	isSet bool
}

func (v NullableCarePlan) Get() *CarePlan {
	return v.value
}

func (v *NullableCarePlan) Set(val *CarePlan) {
	v.value = val
	v.isSet = true
}

func (v NullableCarePlan) IsSet() bool {
	return v.isSet
}

func (v *NullableCarePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarePlan(val *CarePlan) *NullableCarePlan {
	return &NullableCarePlan{value: val, isSet: true}
}

func (v NullableCarePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


