/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceAmount{}

// SubstanceAmount Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
type SubstanceAmount struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
	AmountQuantity *Quantity `json:"amountQuantity,omitempty"`
	// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
	AmountRange *Range `json:"amountRange,omitempty"`
	// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
	AmountString *string `json:"amountString,omitempty"`
	// Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
	AmountType *CodeableConcept `json:"amountType,omitempty"`
	// A sequence of Unicode characters
	AmountText *string `json:"amountText,omitempty"`
	// Reference range of possible or expected values.
	ReferenceRange *SubstanceAmountReferenceRange `json:"referenceRange,omitempty"`
}

// NewSubstanceAmount instantiates a new SubstanceAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceAmount() *SubstanceAmount {
	this := SubstanceAmount{}
	return &this
}

// NewSubstanceAmountWithDefaults instantiates a new SubstanceAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceAmountWithDefaults() *SubstanceAmount {
	this := SubstanceAmount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceAmount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceAmount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceAmount) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceAmount) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceAmount) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceAmount) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceAmount) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceAmount) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceAmount) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAmountQuantity returns the AmountQuantity field value if set, zero value otherwise.
func (o *SubstanceAmount) GetAmountQuantity() Quantity {
	if o == nil || IsNil(o.AmountQuantity) {
		var ret Quantity
		return ret
	}
	return *o.AmountQuantity
}

// GetAmountQuantityOk returns a tuple with the AmountQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetAmountQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.AmountQuantity) {
		return nil, false
	}
	return o.AmountQuantity, true
}

// HasAmountQuantity returns a boolean if a field has been set.
func (o *SubstanceAmount) HasAmountQuantity() bool {
	if o != nil && !IsNil(o.AmountQuantity) {
		return true
	}

	return false
}

// SetAmountQuantity gets a reference to the given Quantity and assigns it to the AmountQuantity field.
func (o *SubstanceAmount) SetAmountQuantity(v Quantity) {
	o.AmountQuantity = &v
}

// GetAmountRange returns the AmountRange field value if set, zero value otherwise.
func (o *SubstanceAmount) GetAmountRange() Range {
	if o == nil || IsNil(o.AmountRange) {
		var ret Range
		return ret
	}
	return *o.AmountRange
}

// GetAmountRangeOk returns a tuple with the AmountRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetAmountRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.AmountRange) {
		return nil, false
	}
	return o.AmountRange, true
}

// HasAmountRange returns a boolean if a field has been set.
func (o *SubstanceAmount) HasAmountRange() bool {
	if o != nil && !IsNil(o.AmountRange) {
		return true
	}

	return false
}

// SetAmountRange gets a reference to the given Range and assigns it to the AmountRange field.
func (o *SubstanceAmount) SetAmountRange(v Range) {
	o.AmountRange = &v
}

// GetAmountString returns the AmountString field value if set, zero value otherwise.
func (o *SubstanceAmount) GetAmountString() string {
	if o == nil || IsNil(o.AmountString) {
		var ret string
		return ret
	}
	return *o.AmountString
}

// GetAmountStringOk returns a tuple with the AmountString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetAmountStringOk() (*string, bool) {
	if o == nil || IsNil(o.AmountString) {
		return nil, false
	}
	return o.AmountString, true
}

// HasAmountString returns a boolean if a field has been set.
func (o *SubstanceAmount) HasAmountString() bool {
	if o != nil && !IsNil(o.AmountString) {
		return true
	}

	return false
}

// SetAmountString gets a reference to the given string and assigns it to the AmountString field.
func (o *SubstanceAmount) SetAmountString(v string) {
	o.AmountString = &v
}

// GetAmountType returns the AmountType field value if set, zero value otherwise.
func (o *SubstanceAmount) GetAmountType() CodeableConcept {
	if o == nil || IsNil(o.AmountType) {
		var ret CodeableConcept
		return ret
	}
	return *o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetAmountTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AmountType) {
		return nil, false
	}
	return o.AmountType, true
}

// HasAmountType returns a boolean if a field has been set.
func (o *SubstanceAmount) HasAmountType() bool {
	if o != nil && !IsNil(o.AmountType) {
		return true
	}

	return false
}

// SetAmountType gets a reference to the given CodeableConcept and assigns it to the AmountType field.
func (o *SubstanceAmount) SetAmountType(v CodeableConcept) {
	o.AmountType = &v
}

// GetAmountText returns the AmountText field value if set, zero value otherwise.
func (o *SubstanceAmount) GetAmountText() string {
	if o == nil || IsNil(o.AmountText) {
		var ret string
		return ret
	}
	return *o.AmountText
}

// GetAmountTextOk returns a tuple with the AmountText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetAmountTextOk() (*string, bool) {
	if o == nil || IsNil(o.AmountText) {
		return nil, false
	}
	return o.AmountText, true
}

// HasAmountText returns a boolean if a field has been set.
func (o *SubstanceAmount) HasAmountText() bool {
	if o != nil && !IsNil(o.AmountText) {
		return true
	}

	return false
}

// SetAmountText gets a reference to the given string and assigns it to the AmountText field.
func (o *SubstanceAmount) SetAmountText(v string) {
	o.AmountText = &v
}

// GetReferenceRange returns the ReferenceRange field value if set, zero value otherwise.
func (o *SubstanceAmount) GetReferenceRange() SubstanceAmountReferenceRange {
	if o == nil || IsNil(o.ReferenceRange) {
		var ret SubstanceAmountReferenceRange
		return ret
	}
	return *o.ReferenceRange
}

// GetReferenceRangeOk returns a tuple with the ReferenceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceAmount) GetReferenceRangeOk() (*SubstanceAmountReferenceRange, bool) {
	if o == nil || IsNil(o.ReferenceRange) {
		return nil, false
	}
	return o.ReferenceRange, true
}

// HasReferenceRange returns a boolean if a field has been set.
func (o *SubstanceAmount) HasReferenceRange() bool {
	if o != nil && !IsNil(o.ReferenceRange) {
		return true
	}

	return false
}

// SetReferenceRange gets a reference to the given SubstanceAmountReferenceRange and assigns it to the ReferenceRange field.
func (o *SubstanceAmount) SetReferenceRange(v SubstanceAmountReferenceRange) {
	o.ReferenceRange = &v
}

func (o SubstanceAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.AmountQuantity) {
		toSerialize["amountQuantity"] = o.AmountQuantity
	}
	if !IsNil(o.AmountRange) {
		toSerialize["amountRange"] = o.AmountRange
	}
	if !IsNil(o.AmountString) {
		toSerialize["amountString"] = o.AmountString
	}
	if !IsNil(o.AmountType) {
		toSerialize["amountType"] = o.AmountType
	}
	if !IsNil(o.AmountText) {
		toSerialize["amountText"] = o.AmountText
	}
	if !IsNil(o.ReferenceRange) {
		toSerialize["referenceRange"] = o.ReferenceRange
	}
	return toSerialize, nil
}

type NullableSubstanceAmount struct {
	value *SubstanceAmount
	isSet bool
}

func (v NullableSubstanceAmount) Get() *SubstanceAmount {
	return v.value
}

func (v *NullableSubstanceAmount) Set(val *SubstanceAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceAmount(val *SubstanceAmount) *NullableSubstanceAmount {
	return &NullableSubstanceAmount{value: val, isSet: true}
}

func (v NullableSubstanceAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


