/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ExampleScenarioStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExampleScenarioStep{}

// ExampleScenarioStep Example of workflow instance.
type ExampleScenarioStep struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Nested process.
	Process []ExampleScenarioProcess `json:"process,omitempty"`
	// Value of \"true\" or \"false\"
	Pause *bool `json:"pause,omitempty"`
	// Each interaction or action.
	Operation *ExampleScenarioOperation `json:"operation,omitempty"`
	// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
	Alternative []ExampleScenarioAlternative `json:"alternative,omitempty"`
}

// NewExampleScenarioStep instantiates a new ExampleScenarioStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExampleScenarioStep() *ExampleScenarioStep {
	this := ExampleScenarioStep{}
	return &this
}

// NewExampleScenarioStepWithDefaults instantiates a new ExampleScenarioStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExampleScenarioStepWithDefaults() *ExampleScenarioStep {
	this := ExampleScenarioStep{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExampleScenarioStep) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ExampleScenarioStep) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ExampleScenarioStep) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetProcess() []ExampleScenarioProcess {
	if o == nil || IsNil(o.Process) {
		var ret []ExampleScenarioProcess
		return ret
	}
	return o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetProcessOk() ([]ExampleScenarioProcess, bool) {
	if o == nil || IsNil(o.Process) {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasProcess() bool {
	if o != nil && !IsNil(o.Process) {
		return true
	}

	return false
}

// SetProcess gets a reference to the given []ExampleScenarioProcess and assigns it to the Process field.
func (o *ExampleScenarioStep) SetProcess(v []ExampleScenarioProcess) {
	o.Process = v
}

// GetPause returns the Pause field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetPause() bool {
	if o == nil || IsNil(o.Pause) {
		var ret bool
		return ret
	}
	return *o.Pause
}

// GetPauseOk returns a tuple with the Pause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetPauseOk() (*bool, bool) {
	if o == nil || IsNil(o.Pause) {
		return nil, false
	}
	return o.Pause, true
}

// HasPause returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasPause() bool {
	if o != nil && !IsNil(o.Pause) {
		return true
	}

	return false
}

// SetPause gets a reference to the given bool and assigns it to the Pause field.
func (o *ExampleScenarioStep) SetPause(v bool) {
	o.Pause = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetOperation() ExampleScenarioOperation {
	if o == nil || IsNil(o.Operation) {
		var ret ExampleScenarioOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetOperationOk() (*ExampleScenarioOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given ExampleScenarioOperation and assigns it to the Operation field.
func (o *ExampleScenarioStep) SetOperation(v ExampleScenarioOperation) {
	o.Operation = &v
}

// GetAlternative returns the Alternative field value if set, zero value otherwise.
func (o *ExampleScenarioStep) GetAlternative() []ExampleScenarioAlternative {
	if o == nil || IsNil(o.Alternative) {
		var ret []ExampleScenarioAlternative
		return ret
	}
	return o.Alternative
}

// GetAlternativeOk returns a tuple with the Alternative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExampleScenarioStep) GetAlternativeOk() ([]ExampleScenarioAlternative, bool) {
	if o == nil || IsNil(o.Alternative) {
		return nil, false
	}
	return o.Alternative, true
}

// HasAlternative returns a boolean if a field has been set.
func (o *ExampleScenarioStep) HasAlternative() bool {
	if o != nil && !IsNil(o.Alternative) {
		return true
	}

	return false
}

// SetAlternative gets a reference to the given []ExampleScenarioAlternative and assigns it to the Alternative field.
func (o *ExampleScenarioStep) SetAlternative(v []ExampleScenarioAlternative) {
	o.Alternative = v
}

func (o ExampleScenarioStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExampleScenarioStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Process) {
		toSerialize["process"] = o.Process
	}
	if !IsNil(o.Pause) {
		toSerialize["pause"] = o.Pause
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Alternative) {
		toSerialize["alternative"] = o.Alternative
	}
	return toSerialize, nil
}

type NullableExampleScenarioStep struct {
	value *ExampleScenarioStep
	isSet bool
}

func (v NullableExampleScenarioStep) Get() *ExampleScenarioStep {
	return v.value
}

func (v *NullableExampleScenarioStep) Set(val *ExampleScenarioStep) {
	v.value = val
	v.isSet = true
}

func (v NullableExampleScenarioStep) IsSet() bool {
	return v.isSet
}

func (v *NullableExampleScenarioStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExampleScenarioStep(val *ExampleScenarioStep) *NullableExampleScenarioStep {
	return &NullableExampleScenarioStep{value: val, isSet: true}
}

func (v NullableExampleScenarioStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExampleScenarioStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


