/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Coverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coverage{}

// Coverage Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
type Coverage struct {
	// This is a Coverage resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this coverage.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
	Type *CodeableConcept `json:"type,omitempty"`
	// The party who 'owns' the insurance policy.
	PolicyHolder *Reference `json:"policyHolder,omitempty"`
	// The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
	Subscriber *Reference `json:"subscriber,omitempty"`
	// A sequence of Unicode characters
	SubscriberId *string `json:"subscriberId,omitempty"`
	// The party who benefits from the insurance coverage; the patient when products and/or services are provided.
	Beneficiary Reference `json:"beneficiary"`
	// A sequence of Unicode characters
	Dependent *string `json:"dependent,omitempty"`
	// The relationship of beneficiary (patient) to the subscriber.
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	// Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
	Period *Period `json:"period,omitempty"`
	// The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.
	Payor []Reference `json:"payor"`
	// A suite of underwriter specific classifiers.
	Class []CoverageClass `json:"class,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Order *float32 `json:"order,omitempty"`
	// A sequence of Unicode characters
	Network *string `json:"network,omitempty"`
	// A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
	CostToBeneficiary []CoverageCostToBeneficiary `json:"costToBeneficiary,omitempty"`
	// Value of \"true\" or \"false\"
	Subrogation *bool `json:"subrogation,omitempty"`
	// The policy(s) which constitute this insurance coverage.
	Contract []Reference `json:"contract,omitempty"`
}

type _Coverage Coverage

// NewCoverage instantiates a new Coverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverage(resourceType string, beneficiary Reference, payor []Reference) *Coverage {
	this := Coverage{}
	this.ResourceType = resourceType
	this.Beneficiary = beneficiary
	this.Payor = payor
	return &this
}

// NewCoverageWithDefaults instantiates a new Coverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageWithDefaults() *Coverage {
	this := Coverage{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Coverage) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Coverage) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Coverage) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Coverage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Coverage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Coverage) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Coverage) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Coverage) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Coverage) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Coverage) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Coverage) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Coverage) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Coverage) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Coverage) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Coverage) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Coverage) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Coverage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Coverage) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Coverage) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Coverage) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Coverage) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Coverage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Coverage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Coverage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Coverage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Coverage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Coverage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Coverage) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Coverage) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Coverage) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Coverage) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Coverage) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Coverage) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Coverage) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Coverage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *Coverage) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetPolicyHolder returns the PolicyHolder field value if set, zero value otherwise.
func (o *Coverage) GetPolicyHolder() Reference {
	if o == nil || IsNil(o.PolicyHolder) {
		var ret Reference
		return ret
	}
	return *o.PolicyHolder
}

// GetPolicyHolderOk returns a tuple with the PolicyHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetPolicyHolderOk() (*Reference, bool) {
	if o == nil || IsNil(o.PolicyHolder) {
		return nil, false
	}
	return o.PolicyHolder, true
}

// HasPolicyHolder returns a boolean if a field has been set.
func (o *Coverage) HasPolicyHolder() bool {
	if o != nil && !IsNil(o.PolicyHolder) {
		return true
	}

	return false
}

// SetPolicyHolder gets a reference to the given Reference and assigns it to the PolicyHolder field.
func (o *Coverage) SetPolicyHolder(v Reference) {
	o.PolicyHolder = &v
}

// GetSubscriber returns the Subscriber field value if set, zero value otherwise.
func (o *Coverage) GetSubscriber() Reference {
	if o == nil || IsNil(o.Subscriber) {
		var ret Reference
		return ret
	}
	return *o.Subscriber
}

// GetSubscriberOk returns a tuple with the Subscriber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetSubscriberOk() (*Reference, bool) {
	if o == nil || IsNil(o.Subscriber) {
		return nil, false
	}
	return o.Subscriber, true
}

// HasSubscriber returns a boolean if a field has been set.
func (o *Coverage) HasSubscriber() bool {
	if o != nil && !IsNil(o.Subscriber) {
		return true
	}

	return false
}

// SetSubscriber gets a reference to the given Reference and assigns it to the Subscriber field.
func (o *Coverage) SetSubscriber(v Reference) {
	o.Subscriber = &v
}

// GetSubscriberId returns the SubscriberId field value if set, zero value otherwise.
func (o *Coverage) GetSubscriberId() string {
	if o == nil || IsNil(o.SubscriberId) {
		var ret string
		return ret
	}
	return *o.SubscriberId
}

// GetSubscriberIdOk returns a tuple with the SubscriberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetSubscriberIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberId) {
		return nil, false
	}
	return o.SubscriberId, true
}

// HasSubscriberId returns a boolean if a field has been set.
func (o *Coverage) HasSubscriberId() bool {
	if o != nil && !IsNil(o.SubscriberId) {
		return true
	}

	return false
}

// SetSubscriberId gets a reference to the given string and assigns it to the SubscriberId field.
func (o *Coverage) SetSubscriberId(v string) {
	o.SubscriberId = &v
}

// GetBeneficiary returns the Beneficiary field value
func (o *Coverage) GetBeneficiary() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Beneficiary
}

// GetBeneficiaryOk returns a tuple with the Beneficiary field value
// and a boolean to check if the value has been set.
func (o *Coverage) GetBeneficiaryOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Beneficiary, true
}

// SetBeneficiary sets field value
func (o *Coverage) SetBeneficiary(v Reference) {
	o.Beneficiary = v
}

// GetDependent returns the Dependent field value if set, zero value otherwise.
func (o *Coverage) GetDependent() string {
	if o == nil || IsNil(o.Dependent) {
		var ret string
		return ret
	}
	return *o.Dependent
}

// GetDependentOk returns a tuple with the Dependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetDependentOk() (*string, bool) {
	if o == nil || IsNil(o.Dependent) {
		return nil, false
	}
	return o.Dependent, true
}

// HasDependent returns a boolean if a field has been set.
func (o *Coverage) HasDependent() bool {
	if o != nil && !IsNil(o.Dependent) {
		return true
	}

	return false
}

// SetDependent gets a reference to the given string and assigns it to the Dependent field.
func (o *Coverage) SetDependent(v string) {
	o.Dependent = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *Coverage) GetRelationship() CodeableConcept {
	if o == nil || IsNil(o.Relationship) {
		var ret CodeableConcept
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetRelationshipOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *Coverage) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given CodeableConcept and assigns it to the Relationship field.
func (o *Coverage) SetRelationship(v CodeableConcept) {
	o.Relationship = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Coverage) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Coverage) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *Coverage) SetPeriod(v Period) {
	o.Period = &v
}

// GetPayor returns the Payor field value
func (o *Coverage) GetPayor() []Reference {
	if o == nil {
		var ret []Reference
		return ret
	}

	return o.Payor
}

// GetPayorOk returns a tuple with the Payor field value
// and a boolean to check if the value has been set.
func (o *Coverage) GetPayorOk() ([]Reference, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payor, true
}

// SetPayor sets field value
func (o *Coverage) SetPayor(v []Reference) {
	o.Payor = v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *Coverage) GetClass() []CoverageClass {
	if o == nil || IsNil(o.Class) {
		var ret []CoverageClass
		return ret
	}
	return o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetClassOk() ([]CoverageClass, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *Coverage) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given []CoverageClass and assigns it to the Class field.
func (o *Coverage) SetClass(v []CoverageClass) {
	o.Class = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Coverage) GetOrder() float32 {
	if o == nil || IsNil(o.Order) {
		var ret float32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Coverage) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given float32 and assigns it to the Order field.
func (o *Coverage) SetOrder(v float32) {
	o.Order = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Coverage) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Coverage) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Coverage) SetNetwork(v string) {
	o.Network = &v
}

// GetCostToBeneficiary returns the CostToBeneficiary field value if set, zero value otherwise.
func (o *Coverage) GetCostToBeneficiary() []CoverageCostToBeneficiary {
	if o == nil || IsNil(o.CostToBeneficiary) {
		var ret []CoverageCostToBeneficiary
		return ret
	}
	return o.CostToBeneficiary
}

// GetCostToBeneficiaryOk returns a tuple with the CostToBeneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetCostToBeneficiaryOk() ([]CoverageCostToBeneficiary, bool) {
	if o == nil || IsNil(o.CostToBeneficiary) {
		return nil, false
	}
	return o.CostToBeneficiary, true
}

// HasCostToBeneficiary returns a boolean if a field has been set.
func (o *Coverage) HasCostToBeneficiary() bool {
	if o != nil && !IsNil(o.CostToBeneficiary) {
		return true
	}

	return false
}

// SetCostToBeneficiary gets a reference to the given []CoverageCostToBeneficiary and assigns it to the CostToBeneficiary field.
func (o *Coverage) SetCostToBeneficiary(v []CoverageCostToBeneficiary) {
	o.CostToBeneficiary = v
}

// GetSubrogation returns the Subrogation field value if set, zero value otherwise.
func (o *Coverage) GetSubrogation() bool {
	if o == nil || IsNil(o.Subrogation) {
		var ret bool
		return ret
	}
	return *o.Subrogation
}

// GetSubrogationOk returns a tuple with the Subrogation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetSubrogationOk() (*bool, bool) {
	if o == nil || IsNil(o.Subrogation) {
		return nil, false
	}
	return o.Subrogation, true
}

// HasSubrogation returns a boolean if a field has been set.
func (o *Coverage) HasSubrogation() bool {
	if o != nil && !IsNil(o.Subrogation) {
		return true
	}

	return false
}

// SetSubrogation gets a reference to the given bool and assigns it to the Subrogation field.
func (o *Coverage) SetSubrogation(v bool) {
	o.Subrogation = &v
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *Coverage) GetContract() []Reference {
	if o == nil || IsNil(o.Contract) {
		var ret []Reference
		return ret
	}
	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coverage) GetContractOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *Coverage) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given []Reference and assigns it to the Contract field.
func (o *Coverage) SetContract(v []Reference) {
	o.Contract = v
}

func (o Coverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PolicyHolder) {
		toSerialize["policyHolder"] = o.PolicyHolder
	}
	if !IsNil(o.Subscriber) {
		toSerialize["subscriber"] = o.Subscriber
	}
	if !IsNil(o.SubscriberId) {
		toSerialize["subscriberId"] = o.SubscriberId
	}
	toSerialize["beneficiary"] = o.Beneficiary
	if !IsNil(o.Dependent) {
		toSerialize["dependent"] = o.Dependent
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	toSerialize["payor"] = o.Payor
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.CostToBeneficiary) {
		toSerialize["costToBeneficiary"] = o.CostToBeneficiary
	}
	if !IsNil(o.Subrogation) {
		toSerialize["subrogation"] = o.Subrogation
	}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	return toSerialize, nil
}

func (o *Coverage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"beneficiary",
		"payor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoverage := _Coverage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoverage)

	if err != nil {
		return err
	}

	*o = Coverage(varCoverage)

	return err
}

type NullableCoverage struct {
	value *Coverage
	isSet bool
}

func (v NullableCoverage) Get() *Coverage {
	return v.value
}

func (v *NullableCoverage) Set(val *Coverage) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverage(val *Coverage) *NullableCoverage {
	return &NullableCoverage{value: val, isSet: true}
}

func (v NullableCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


