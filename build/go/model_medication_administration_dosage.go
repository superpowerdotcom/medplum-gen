/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MedicationAdministrationDosage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationAdministrationDosage{}

// MedicationAdministrationDosage Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
type MedicationAdministrationDosage struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
	// A coded specification of the anatomic site where the medication first entered the body.  For example, \"left arm\".
	Site *CodeableConcept `json:"site,omitempty"`
	// A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
	Route *CodeableConcept `json:"route,omitempty"`
	// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
	Method *CodeableConcept `json:"method,omitempty"`
	// The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
	Dose *Quantity `json:"dose,omitempty"`
	// Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
	RateRatio *Ratio `json:"rateRatio,omitempty"`
	// Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
	RateQuantity *Quantity `json:"rateQuantity,omitempty"`
}

// NewMedicationAdministrationDosage instantiates a new MedicationAdministrationDosage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationAdministrationDosage() *MedicationAdministrationDosage {
	this := MedicationAdministrationDosage{}
	return &this
}

// NewMedicationAdministrationDosageWithDefaults instantiates a new MedicationAdministrationDosage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationAdministrationDosageWithDefaults() *MedicationAdministrationDosage {
	this := MedicationAdministrationDosage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationAdministrationDosage) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationAdministrationDosage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationAdministrationDosage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MedicationAdministrationDosage) SetText(v string) {
	o.Text = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetSite() CodeableConcept {
	if o == nil || IsNil(o.Site) {
		var ret CodeableConcept
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetSiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given CodeableConcept and assigns it to the Site field.
func (o *MedicationAdministrationDosage) SetSite(v CodeableConcept) {
	o.Site = &v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetRoute() CodeableConcept {
	if o == nil || IsNil(o.Route) {
		var ret CodeableConcept
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetRouteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given CodeableConcept and assigns it to the Route field.
func (o *MedicationAdministrationDosage) SetRoute(v CodeableConcept) {
	o.Route = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *MedicationAdministrationDosage) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetDose returns the Dose field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetDose() Quantity {
	if o == nil || IsNil(o.Dose) {
		var ret Quantity
		return ret
	}
	return *o.Dose
}

// GetDoseOk returns a tuple with the Dose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetDoseOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Dose) {
		return nil, false
	}
	return o.Dose, true
}

// HasDose returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasDose() bool {
	if o != nil && !IsNil(o.Dose) {
		return true
	}

	return false
}

// SetDose gets a reference to the given Quantity and assigns it to the Dose field.
func (o *MedicationAdministrationDosage) SetDose(v Quantity) {
	o.Dose = &v
}

// GetRateRatio returns the RateRatio field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetRateRatio() Ratio {
	if o == nil || IsNil(o.RateRatio) {
		var ret Ratio
		return ret
	}
	return *o.RateRatio
}

// GetRateRatioOk returns a tuple with the RateRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetRateRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.RateRatio) {
		return nil, false
	}
	return o.RateRatio, true
}

// HasRateRatio returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasRateRatio() bool {
	if o != nil && !IsNil(o.RateRatio) {
		return true
	}

	return false
}

// SetRateRatio gets a reference to the given Ratio and assigns it to the RateRatio field.
func (o *MedicationAdministrationDosage) SetRateRatio(v Ratio) {
	o.RateRatio = &v
}

// GetRateQuantity returns the RateQuantity field value if set, zero value otherwise.
func (o *MedicationAdministrationDosage) GetRateQuantity() Quantity {
	if o == nil || IsNil(o.RateQuantity) {
		var ret Quantity
		return ret
	}
	return *o.RateQuantity
}

// GetRateQuantityOk returns a tuple with the RateQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministrationDosage) GetRateQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.RateQuantity) {
		return nil, false
	}
	return o.RateQuantity, true
}

// HasRateQuantity returns a boolean if a field has been set.
func (o *MedicationAdministrationDosage) HasRateQuantity() bool {
	if o != nil && !IsNil(o.RateQuantity) {
		return true
	}

	return false
}

// SetRateQuantity gets a reference to the given Quantity and assigns it to the RateQuantity field.
func (o *MedicationAdministrationDosage) SetRateQuantity(v Quantity) {
	o.RateQuantity = &v
}

func (o MedicationAdministrationDosage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationAdministrationDosage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Dose) {
		toSerialize["dose"] = o.Dose
	}
	if !IsNil(o.RateRatio) {
		toSerialize["rateRatio"] = o.RateRatio
	}
	if !IsNil(o.RateQuantity) {
		toSerialize["rateQuantity"] = o.RateQuantity
	}
	return toSerialize, nil
}

type NullableMedicationAdministrationDosage struct {
	value *MedicationAdministrationDosage
	isSet bool
}

func (v NullableMedicationAdministrationDosage) Get() *MedicationAdministrationDosage {
	return v.value
}

func (v *NullableMedicationAdministrationDosage) Set(val *MedicationAdministrationDosage) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationAdministrationDosage) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationAdministrationDosage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationAdministrationDosage(val *MedicationAdministrationDosage) *NullableMedicationAdministrationDosage {
	return &NullableMedicationAdministrationDosage{value: val, isSet: true}
}

func (v NullableMedicationAdministrationDosage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationAdministrationDosage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


