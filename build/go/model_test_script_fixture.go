/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TestScriptFixture type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestScriptFixture{}

// TestScriptFixture A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScriptFixture struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Value of \"true\" or \"false\"
	Autocreate *bool `json:"autocreate,omitempty"`
	// Value of \"true\" or \"false\"
	Autodelete *bool `json:"autodelete,omitempty"`
	// Reference to the resource (containing the contents of the resource needed for operations).
	Resource *Reference `json:"resource,omitempty"`
}

// NewTestScriptFixture instantiates a new TestScriptFixture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestScriptFixture() *TestScriptFixture {
	this := TestScriptFixture{}
	return &this
}

// NewTestScriptFixtureWithDefaults instantiates a new TestScriptFixture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestScriptFixtureWithDefaults() *TestScriptFixture {
	this := TestScriptFixture{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestScriptFixture) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestScriptFixture) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestScriptFixture) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TestScriptFixture) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TestScriptFixture) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TestScriptFixture) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TestScriptFixture) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TestScriptFixture) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TestScriptFixture) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAutocreate returns the Autocreate field value if set, zero value otherwise.
func (o *TestScriptFixture) GetAutocreate() bool {
	if o == nil || IsNil(o.Autocreate) {
		var ret bool
		return ret
	}
	return *o.Autocreate
}

// GetAutocreateOk returns a tuple with the Autocreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetAutocreateOk() (*bool, bool) {
	if o == nil || IsNil(o.Autocreate) {
		return nil, false
	}
	return o.Autocreate, true
}

// HasAutocreate returns a boolean if a field has been set.
func (o *TestScriptFixture) HasAutocreate() bool {
	if o != nil && !IsNil(o.Autocreate) {
		return true
	}

	return false
}

// SetAutocreate gets a reference to the given bool and assigns it to the Autocreate field.
func (o *TestScriptFixture) SetAutocreate(v bool) {
	o.Autocreate = &v
}

// GetAutodelete returns the Autodelete field value if set, zero value otherwise.
func (o *TestScriptFixture) GetAutodelete() bool {
	if o == nil || IsNil(o.Autodelete) {
		var ret bool
		return ret
	}
	return *o.Autodelete
}

// GetAutodeleteOk returns a tuple with the Autodelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetAutodeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Autodelete) {
		return nil, false
	}
	return o.Autodelete, true
}

// HasAutodelete returns a boolean if a field has been set.
func (o *TestScriptFixture) HasAutodelete() bool {
	if o != nil && !IsNil(o.Autodelete) {
		return true
	}

	return false
}

// SetAutodelete gets a reference to the given bool and assigns it to the Autodelete field.
func (o *TestScriptFixture) SetAutodelete(v bool) {
	o.Autodelete = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *TestScriptFixture) GetResource() Reference {
	if o == nil || IsNil(o.Resource) {
		var ret Reference
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptFixture) GetResourceOk() (*Reference, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *TestScriptFixture) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given Reference and assigns it to the Resource field.
func (o *TestScriptFixture) SetResource(v Reference) {
	o.Resource = &v
}

func (o TestScriptFixture) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestScriptFixture) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Autocreate) {
		toSerialize["autocreate"] = o.Autocreate
	}
	if !IsNil(o.Autodelete) {
		toSerialize["autodelete"] = o.Autodelete
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableTestScriptFixture struct {
	value *TestScriptFixture
	isSet bool
}

func (v NullableTestScriptFixture) Get() *TestScriptFixture {
	return v.value
}

func (v *NullableTestScriptFixture) Set(val *TestScriptFixture) {
	v.value = val
	v.isSet = true
}

func (v NullableTestScriptFixture) IsSet() bool {
	return v.isSet
}

func (v *NullableTestScriptFixture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestScriptFixture(val *TestScriptFixture) *NullableTestScriptFixture {
	return &NullableTestScriptFixture{value: val, isSet: true}
}

func (v NullableTestScriptFixture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestScriptFixture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


