/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImplementationGuideResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationGuideResource{}

// ImplementationGuideResource A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
type ImplementationGuideResource struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Where this resource is found.
	Reference Reference `json:"reference"`
	// Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
	FhirVersion []string `json:"fhirVersion,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleBoolean *bool `json:"exampleBoolean,omitempty"`
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleCanonical *string `json:"exampleCanonical,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	GroupingId *string `json:"groupingId,omitempty"`
}

type _ImplementationGuideResource ImplementationGuideResource

// NewImplementationGuideResource instantiates a new ImplementationGuideResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationGuideResource(reference Reference) *ImplementationGuideResource {
	this := ImplementationGuideResource{}
	this.Reference = reference
	return &this
}

// NewImplementationGuideResourceWithDefaults instantiates a new ImplementationGuideResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationGuideResourceWithDefaults() *ImplementationGuideResource {
	this := ImplementationGuideResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImplementationGuideResource) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImplementationGuideResource) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImplementationGuideResource) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetReference returns the Reference field value
func (o *ImplementationGuideResource) GetReference() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetReferenceOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *ImplementationGuideResource) SetReference(v Reference) {
	o.Reference = v
}

// GetFhirVersion returns the FhirVersion field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetFhirVersion() []string {
	if o == nil || IsNil(o.FhirVersion) {
		var ret []string
		return ret
	}
	return o.FhirVersion
}

// GetFhirVersionOk returns a tuple with the FhirVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetFhirVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.FhirVersion) {
		return nil, false
	}
	return o.FhirVersion, true
}

// HasFhirVersion returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasFhirVersion() bool {
	if o != nil && !IsNil(o.FhirVersion) {
		return true
	}

	return false
}

// SetFhirVersion gets a reference to the given []string and assigns it to the FhirVersion field.
func (o *ImplementationGuideResource) SetFhirVersion(v []string) {
	o.FhirVersion = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImplementationGuideResource) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImplementationGuideResource) SetDescription(v string) {
	o.Description = &v
}

// GetExampleBoolean returns the ExampleBoolean field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetExampleBoolean() bool {
	if o == nil || IsNil(o.ExampleBoolean) {
		var ret bool
		return ret
	}
	return *o.ExampleBoolean
}

// GetExampleBooleanOk returns a tuple with the ExampleBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetExampleBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ExampleBoolean) {
		return nil, false
	}
	return o.ExampleBoolean, true
}

// HasExampleBoolean returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasExampleBoolean() bool {
	if o != nil && !IsNil(o.ExampleBoolean) {
		return true
	}

	return false
}

// SetExampleBoolean gets a reference to the given bool and assigns it to the ExampleBoolean field.
func (o *ImplementationGuideResource) SetExampleBoolean(v bool) {
	o.ExampleBoolean = &v
}

// GetExampleCanonical returns the ExampleCanonical field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetExampleCanonical() string {
	if o == nil || IsNil(o.ExampleCanonical) {
		var ret string
		return ret
	}
	return *o.ExampleCanonical
}

// GetExampleCanonicalOk returns a tuple with the ExampleCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetExampleCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.ExampleCanonical) {
		return nil, false
	}
	return o.ExampleCanonical, true
}

// HasExampleCanonical returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasExampleCanonical() bool {
	if o != nil && !IsNil(o.ExampleCanonical) {
		return true
	}

	return false
}

// SetExampleCanonical gets a reference to the given string and assigns it to the ExampleCanonical field.
func (o *ImplementationGuideResource) SetExampleCanonical(v string) {
	o.ExampleCanonical = &v
}

// GetGroupingId returns the GroupingId field value if set, zero value otherwise.
func (o *ImplementationGuideResource) GetGroupingId() string {
	if o == nil || IsNil(o.GroupingId) {
		var ret string
		return ret
	}
	return *o.GroupingId
}

// GetGroupingIdOk returns a tuple with the GroupingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuideResource) GetGroupingIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupingId) {
		return nil, false
	}
	return o.GroupingId, true
}

// HasGroupingId returns a boolean if a field has been set.
func (o *ImplementationGuideResource) HasGroupingId() bool {
	if o != nil && !IsNil(o.GroupingId) {
		return true
	}

	return false
}

// SetGroupingId gets a reference to the given string and assigns it to the GroupingId field.
func (o *ImplementationGuideResource) SetGroupingId(v string) {
	o.GroupingId = &v
}

func (o ImplementationGuideResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationGuideResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["reference"] = o.Reference
	if !IsNil(o.FhirVersion) {
		toSerialize["fhirVersion"] = o.FhirVersion
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExampleBoolean) {
		toSerialize["exampleBoolean"] = o.ExampleBoolean
	}
	if !IsNil(o.ExampleCanonical) {
		toSerialize["exampleCanonical"] = o.ExampleCanonical
	}
	if !IsNil(o.GroupingId) {
		toSerialize["groupingId"] = o.GroupingId
	}
	return toSerialize, nil
}

func (o *ImplementationGuideResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementationGuideResource := _ImplementationGuideResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementationGuideResource)

	if err != nil {
		return err
	}

	*o = ImplementationGuideResource(varImplementationGuideResource)

	return err
}

type NullableImplementationGuideResource struct {
	value *ImplementationGuideResource
	isSet bool
}

func (v NullableImplementationGuideResource) Get() *ImplementationGuideResource {
	return v.value
}

func (v *NullableImplementationGuideResource) Set(val *ImplementationGuideResource) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationGuideResource) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationGuideResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationGuideResource(val *ImplementationGuideResource) *NullableImplementationGuideResource {
	return &NullableImplementationGuideResource{value: val, isSet: true}
}

func (v NullableImplementationGuideResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationGuideResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


