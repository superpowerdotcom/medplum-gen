/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SpecimenCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecimenCollection{}

// SpecimenCollection A sample to be used for analysis.
type SpecimenCollection struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Person who collected the specimen.
	Collector *Reference `json:"collector,omitempty"`
	// Time when specimen was collected from subject - the physiologically relevant time.
	CollectedDateTime *string `json:"collectedDateTime,omitempty"`
	// Time when specimen was collected from subject - the physiologically relevant time.
	CollectedPeriod *Period `json:"collectedPeriod,omitempty"`
	// The span of time over which the collection of a specimen occurred.
	Duration *Duration `json:"duration,omitempty"`
	// The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
	Quantity *Quantity `json:"quantity,omitempty"`
	// A coded value specifying the technique that is used to perform the procedure.
	Method *CodeableConcept `json:"method,omitempty"`
	// Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
	BodySite *CodeableConcept `json:"bodySite,omitempty"`
	// Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
	FastingStatusCodeableConcept *CodeableConcept `json:"fastingStatusCodeableConcept,omitempty"`
	// Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
	FastingStatusDuration *Duration `json:"fastingStatusDuration,omitempty"`
}

// NewSpecimenCollection instantiates a new SpecimenCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecimenCollection() *SpecimenCollection {
	this := SpecimenCollection{}
	return &this
}

// NewSpecimenCollectionWithDefaults instantiates a new SpecimenCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecimenCollectionWithDefaults() *SpecimenCollection {
	this := SpecimenCollection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecimenCollection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecimenCollection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpecimenCollection) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SpecimenCollection) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SpecimenCollection) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SpecimenCollection) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SpecimenCollection) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SpecimenCollection) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SpecimenCollection) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCollector returns the Collector field value if set, zero value otherwise.
func (o *SpecimenCollection) GetCollector() Reference {
	if o == nil || IsNil(o.Collector) {
		var ret Reference
		return ret
	}
	return *o.Collector
}

// GetCollectorOk returns a tuple with the Collector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetCollectorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Collector) {
		return nil, false
	}
	return o.Collector, true
}

// HasCollector returns a boolean if a field has been set.
func (o *SpecimenCollection) HasCollector() bool {
	if o != nil && !IsNil(o.Collector) {
		return true
	}

	return false
}

// SetCollector gets a reference to the given Reference and assigns it to the Collector field.
func (o *SpecimenCollection) SetCollector(v Reference) {
	o.Collector = &v
}

// GetCollectedDateTime returns the CollectedDateTime field value if set, zero value otherwise.
func (o *SpecimenCollection) GetCollectedDateTime() string {
	if o == nil || IsNil(o.CollectedDateTime) {
		var ret string
		return ret
	}
	return *o.CollectedDateTime
}

// GetCollectedDateTimeOk returns a tuple with the CollectedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetCollectedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CollectedDateTime) {
		return nil, false
	}
	return o.CollectedDateTime, true
}

// HasCollectedDateTime returns a boolean if a field has been set.
func (o *SpecimenCollection) HasCollectedDateTime() bool {
	if o != nil && !IsNil(o.CollectedDateTime) {
		return true
	}

	return false
}

// SetCollectedDateTime gets a reference to the given string and assigns it to the CollectedDateTime field.
func (o *SpecimenCollection) SetCollectedDateTime(v string) {
	o.CollectedDateTime = &v
}

// GetCollectedPeriod returns the CollectedPeriod field value if set, zero value otherwise.
func (o *SpecimenCollection) GetCollectedPeriod() Period {
	if o == nil || IsNil(o.CollectedPeriod) {
		var ret Period
		return ret
	}
	return *o.CollectedPeriod
}

// GetCollectedPeriodOk returns a tuple with the CollectedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetCollectedPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.CollectedPeriod) {
		return nil, false
	}
	return o.CollectedPeriod, true
}

// HasCollectedPeriod returns a boolean if a field has been set.
func (o *SpecimenCollection) HasCollectedPeriod() bool {
	if o != nil && !IsNil(o.CollectedPeriod) {
		return true
	}

	return false
}

// SetCollectedPeriod gets a reference to the given Period and assigns it to the CollectedPeriod field.
func (o *SpecimenCollection) SetCollectedPeriod(v Period) {
	o.CollectedPeriod = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SpecimenCollection) GetDuration() Duration {
	if o == nil || IsNil(o.Duration) {
		var ret Duration
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SpecimenCollection) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Duration and assigns it to the Duration field.
func (o *SpecimenCollection) SetDuration(v Duration) {
	o.Duration = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *SpecimenCollection) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *SpecimenCollection) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *SpecimenCollection) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *SpecimenCollection) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *SpecimenCollection) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *SpecimenCollection) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *SpecimenCollection) GetBodySite() CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret CodeableConcept
		return ret
	}
	return *o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetBodySiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *SpecimenCollection) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given CodeableConcept and assigns it to the BodySite field.
func (o *SpecimenCollection) SetBodySite(v CodeableConcept) {
	o.BodySite = &v
}

// GetFastingStatusCodeableConcept returns the FastingStatusCodeableConcept field value if set, zero value otherwise.
func (o *SpecimenCollection) GetFastingStatusCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.FastingStatusCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.FastingStatusCodeableConcept
}

// GetFastingStatusCodeableConceptOk returns a tuple with the FastingStatusCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetFastingStatusCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FastingStatusCodeableConcept) {
		return nil, false
	}
	return o.FastingStatusCodeableConcept, true
}

// HasFastingStatusCodeableConcept returns a boolean if a field has been set.
func (o *SpecimenCollection) HasFastingStatusCodeableConcept() bool {
	if o != nil && !IsNil(o.FastingStatusCodeableConcept) {
		return true
	}

	return false
}

// SetFastingStatusCodeableConcept gets a reference to the given CodeableConcept and assigns it to the FastingStatusCodeableConcept field.
func (o *SpecimenCollection) SetFastingStatusCodeableConcept(v CodeableConcept) {
	o.FastingStatusCodeableConcept = &v
}

// GetFastingStatusDuration returns the FastingStatusDuration field value if set, zero value otherwise.
func (o *SpecimenCollection) GetFastingStatusDuration() Duration {
	if o == nil || IsNil(o.FastingStatusDuration) {
		var ret Duration
		return ret
	}
	return *o.FastingStatusDuration
}

// GetFastingStatusDurationOk returns a tuple with the FastingStatusDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenCollection) GetFastingStatusDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.FastingStatusDuration) {
		return nil, false
	}
	return o.FastingStatusDuration, true
}

// HasFastingStatusDuration returns a boolean if a field has been set.
func (o *SpecimenCollection) HasFastingStatusDuration() bool {
	if o != nil && !IsNil(o.FastingStatusDuration) {
		return true
	}

	return false
}

// SetFastingStatusDuration gets a reference to the given Duration and assigns it to the FastingStatusDuration field.
func (o *SpecimenCollection) SetFastingStatusDuration(v Duration) {
	o.FastingStatusDuration = &v
}

func (o SpecimenCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecimenCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Collector) {
		toSerialize["collector"] = o.Collector
	}
	if !IsNil(o.CollectedDateTime) {
		toSerialize["collectedDateTime"] = o.CollectedDateTime
	}
	if !IsNil(o.CollectedPeriod) {
		toSerialize["collectedPeriod"] = o.CollectedPeriod
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.FastingStatusCodeableConcept) {
		toSerialize["fastingStatusCodeableConcept"] = o.FastingStatusCodeableConcept
	}
	if !IsNil(o.FastingStatusDuration) {
		toSerialize["fastingStatusDuration"] = o.FastingStatusDuration
	}
	return toSerialize, nil
}

type NullableSpecimenCollection struct {
	value *SpecimenCollection
	isSet bool
}

func (v NullableSpecimenCollection) Get() *SpecimenCollection {
	return v.value
}

func (v *NullableSpecimenCollection) Set(val *SpecimenCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecimenCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecimenCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecimenCollection(val *SpecimenCollection) *NullableSpecimenCollection {
	return &NullableSpecimenCollection{value: val, isSet: true}
}

func (v NullableSpecimenCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecimenCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


