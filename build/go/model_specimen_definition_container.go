/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SpecimenDefinitionContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecimenDefinitionContainer{}

// SpecimenDefinitionContainer A kind of specimen with associated set of requirements.
type SpecimenDefinitionContainer struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The type of material of the container.
	Material *CodeableConcept `json:"material,omitempty"`
	// The type of container used to contain this kind of specimen.
	Type *CodeableConcept `json:"type,omitempty"`
	// Color of container cap.
	Cap *CodeableConcept `json:"cap,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// The capacity (volume or other measure) of this kind of container.
	Capacity *Quantity `json:"capacity,omitempty"`
	// The minimum volume to be conditioned in the container.
	MinimumVolumeQuantity *Quantity `json:"minimumVolumeQuantity,omitempty"`
	// The minimum volume to be conditioned in the container.
	MinimumVolumeString *string `json:"minimumVolumeString,omitempty"`
	// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
	Additive []SpecimenDefinitionAdditive `json:"additive,omitempty"`
	// A sequence of Unicode characters
	Preparation *string `json:"preparation,omitempty"`
}

// NewSpecimenDefinitionContainer instantiates a new SpecimenDefinitionContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecimenDefinitionContainer() *SpecimenDefinitionContainer {
	this := SpecimenDefinitionContainer{}
	return &this
}

// NewSpecimenDefinitionContainerWithDefaults instantiates a new SpecimenDefinitionContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecimenDefinitionContainerWithDefaults() *SpecimenDefinitionContainer {
	this := SpecimenDefinitionContainer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpecimenDefinitionContainer) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SpecimenDefinitionContainer) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SpecimenDefinitionContainer) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetMaterial() CodeableConcept {
	if o == nil || IsNil(o.Material) {
		var ret CodeableConcept
		return ret
	}
	return *o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetMaterialOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given CodeableConcept and assigns it to the Material field.
func (o *SpecimenDefinitionContainer) SetMaterial(v CodeableConcept) {
	o.Material = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SpecimenDefinitionContainer) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetCap returns the Cap field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetCap() CodeableConcept {
	if o == nil || IsNil(o.Cap) {
		var ret CodeableConcept
		return ret
	}
	return *o.Cap
}

// GetCapOk returns a tuple with the Cap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetCapOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Cap) {
		return nil, false
	}
	return o.Cap, true
}

// HasCap returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasCap() bool {
	if o != nil && !IsNil(o.Cap) {
		return true
	}

	return false
}

// SetCap gets a reference to the given CodeableConcept and assigns it to the Cap field.
func (o *SpecimenDefinitionContainer) SetCap(v CodeableConcept) {
	o.Cap = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SpecimenDefinitionContainer) SetDescription(v string) {
	o.Description = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetCapacity() Quantity {
	if o == nil || IsNil(o.Capacity) {
		var ret Quantity
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetCapacityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given Quantity and assigns it to the Capacity field.
func (o *SpecimenDefinitionContainer) SetCapacity(v Quantity) {
	o.Capacity = &v
}

// GetMinimumVolumeQuantity returns the MinimumVolumeQuantity field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetMinimumVolumeQuantity() Quantity {
	if o == nil || IsNil(o.MinimumVolumeQuantity) {
		var ret Quantity
		return ret
	}
	return *o.MinimumVolumeQuantity
}

// GetMinimumVolumeQuantityOk returns a tuple with the MinimumVolumeQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetMinimumVolumeQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MinimumVolumeQuantity) {
		return nil, false
	}
	return o.MinimumVolumeQuantity, true
}

// HasMinimumVolumeQuantity returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasMinimumVolumeQuantity() bool {
	if o != nil && !IsNil(o.MinimumVolumeQuantity) {
		return true
	}

	return false
}

// SetMinimumVolumeQuantity gets a reference to the given Quantity and assigns it to the MinimumVolumeQuantity field.
func (o *SpecimenDefinitionContainer) SetMinimumVolumeQuantity(v Quantity) {
	o.MinimumVolumeQuantity = &v
}

// GetMinimumVolumeString returns the MinimumVolumeString field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetMinimumVolumeString() string {
	if o == nil || IsNil(o.MinimumVolumeString) {
		var ret string
		return ret
	}
	return *o.MinimumVolumeString
}

// GetMinimumVolumeStringOk returns a tuple with the MinimumVolumeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetMinimumVolumeStringOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumVolumeString) {
		return nil, false
	}
	return o.MinimumVolumeString, true
}

// HasMinimumVolumeString returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasMinimumVolumeString() bool {
	if o != nil && !IsNil(o.MinimumVolumeString) {
		return true
	}

	return false
}

// SetMinimumVolumeString gets a reference to the given string and assigns it to the MinimumVolumeString field.
func (o *SpecimenDefinitionContainer) SetMinimumVolumeString(v string) {
	o.MinimumVolumeString = &v
}

// GetAdditive returns the Additive field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetAdditive() []SpecimenDefinitionAdditive {
	if o == nil || IsNil(o.Additive) {
		var ret []SpecimenDefinitionAdditive
		return ret
	}
	return o.Additive
}

// GetAdditiveOk returns a tuple with the Additive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetAdditiveOk() ([]SpecimenDefinitionAdditive, bool) {
	if o == nil || IsNil(o.Additive) {
		return nil, false
	}
	return o.Additive, true
}

// HasAdditive returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasAdditive() bool {
	if o != nil && !IsNil(o.Additive) {
		return true
	}

	return false
}

// SetAdditive gets a reference to the given []SpecimenDefinitionAdditive and assigns it to the Additive field.
func (o *SpecimenDefinitionContainer) SetAdditive(v []SpecimenDefinitionAdditive) {
	o.Additive = v
}

// GetPreparation returns the Preparation field value if set, zero value otherwise.
func (o *SpecimenDefinitionContainer) GetPreparation() string {
	if o == nil || IsNil(o.Preparation) {
		var ret string
		return ret
	}
	return *o.Preparation
}

// GetPreparationOk returns a tuple with the Preparation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionContainer) GetPreparationOk() (*string, bool) {
	if o == nil || IsNil(o.Preparation) {
		return nil, false
	}
	return o.Preparation, true
}

// HasPreparation returns a boolean if a field has been set.
func (o *SpecimenDefinitionContainer) HasPreparation() bool {
	if o != nil && !IsNil(o.Preparation) {
		return true
	}

	return false
}

// SetPreparation gets a reference to the given string and assigns it to the Preparation field.
func (o *SpecimenDefinitionContainer) SetPreparation(v string) {
	o.Preparation = &v
}

func (o SpecimenDefinitionContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecimenDefinitionContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Cap) {
		toSerialize["cap"] = o.Cap
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.MinimumVolumeQuantity) {
		toSerialize["minimumVolumeQuantity"] = o.MinimumVolumeQuantity
	}
	if !IsNil(o.MinimumVolumeString) {
		toSerialize["minimumVolumeString"] = o.MinimumVolumeString
	}
	if !IsNil(o.Additive) {
		toSerialize["additive"] = o.Additive
	}
	if !IsNil(o.Preparation) {
		toSerialize["preparation"] = o.Preparation
	}
	return toSerialize, nil
}

type NullableSpecimenDefinitionContainer struct {
	value *SpecimenDefinitionContainer
	isSet bool
}

func (v NullableSpecimenDefinitionContainer) Get() *SpecimenDefinitionContainer {
	return v.value
}

func (v *NullableSpecimenDefinitionContainer) Set(val *SpecimenDefinitionContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecimenDefinitionContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecimenDefinitionContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecimenDefinitionContainer(val *SpecimenDefinitionContainer) *NullableSpecimenDefinitionContainer {
	return &NullableSpecimenDefinitionContainer{value: val, isSet: true}
}

func (v NullableSpecimenDefinitionContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecimenDefinitionContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


