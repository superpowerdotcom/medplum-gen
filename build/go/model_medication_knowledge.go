/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicationKnowledge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationKnowledge{}

// MedicationKnowledge Information about a medication that is used to support knowledge.
type MedicationKnowledge struct {
	// This is a MedicationKnowledge resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
	Code *CodeableConcept `json:"code,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
	Manufacturer *Reference `json:"manufacturer,omitempty"`
	// Describes the form of the item.  Powder; tablets; capsule.
	DoseForm *CodeableConcept `json:"doseForm,omitempty"`
	// Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
	Amount *Quantity `json:"amount,omitempty"`
	// Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
	Synonym []string `json:"synonym,omitempty"`
	// Associated or related knowledge about a medication.
	RelatedMedicationKnowledge []MedicationKnowledgeRelatedMedicationKnowledge `json:"relatedMedicationKnowledge,omitempty"`
	// Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
	AssociatedMedication []Reference `json:"associatedMedication,omitempty"`
	// Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
	ProductType []CodeableConcept `json:"productType,omitempty"`
	// Associated documentation about the medication.
	Monograph []MedicationKnowledgeMonograph `json:"monograph,omitempty"`
	// Identifies a particular constituent of interest in the product.
	Ingredient []MedicationKnowledgeIngredient `json:"ingredient,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	PreparationInstruction *string `json:"preparationInstruction,omitempty"`
	// The intended or approved route of administration.
	IntendedRoute []CodeableConcept `json:"intendedRoute,omitempty"`
	// The price of the medication.
	Cost []MedicationKnowledgeCost `json:"cost,omitempty"`
	// The program under which the medication is reviewed.
	MonitoringProgram []MedicationKnowledgeMonitoringProgram `json:"monitoringProgram,omitempty"`
	// Guidelines for the administration of the medication.
	AdministrationGuidelines []MedicationKnowledgeAdministrationGuidelines `json:"administrationGuidelines,omitempty"`
	// Categorization of the medication within a formulary or classification system.
	MedicineClassification []MedicationKnowledgeMedicineClassification `json:"medicineClassification,omitempty"`
	// Information that only applies to packages (not products).
	Packaging *MedicationKnowledgePackaging `json:"packaging,omitempty"`
	// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
	DrugCharacteristic []MedicationKnowledgeDrugCharacteristic `json:"drugCharacteristic,omitempty"`
	// Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
	Contraindication []Reference `json:"contraindication,omitempty"`
	// Regulatory information about a medication.
	Regulatory []MedicationKnowledgeRegulatory `json:"regulatory,omitempty"`
	// The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
	Kinetics []MedicationKnowledgeKinetics `json:"kinetics,omitempty"`
}

type _MedicationKnowledge MedicationKnowledge

// NewMedicationKnowledge instantiates a new MedicationKnowledge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationKnowledge(resourceType string) *MedicationKnowledge {
	this := MedicationKnowledge{}
	this.ResourceType = resourceType
	return &this
}

// NewMedicationKnowledgeWithDefaults instantiates a new MedicationKnowledge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationKnowledgeWithDefaults() *MedicationKnowledge {
	this := MedicationKnowledge{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicationKnowledge) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicationKnowledge) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationKnowledge) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicationKnowledge) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicationKnowledge) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicationKnowledge) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicationKnowledge) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicationKnowledge) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationKnowledge) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationKnowledge) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *MedicationKnowledge) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MedicationKnowledge) SetStatus(v string) {
	o.Status = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetManufacturer() Reference {
	if o == nil || IsNil(o.Manufacturer) {
		var ret Reference
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetManufacturerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given Reference and assigns it to the Manufacturer field.
func (o *MedicationKnowledge) SetManufacturer(v Reference) {
	o.Manufacturer = &v
}

// GetDoseForm returns the DoseForm field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetDoseForm() CodeableConcept {
	if o == nil || IsNil(o.DoseForm) {
		var ret CodeableConcept
		return ret
	}
	return *o.DoseForm
}

// GetDoseFormOk returns a tuple with the DoseForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetDoseFormOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DoseForm) {
		return nil, false
	}
	return o.DoseForm, true
}

// HasDoseForm returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasDoseForm() bool {
	if o != nil && !IsNil(o.DoseForm) {
		return true
	}

	return false
}

// SetDoseForm gets a reference to the given CodeableConcept and assigns it to the DoseForm field.
func (o *MedicationKnowledge) SetDoseForm(v CodeableConcept) {
	o.DoseForm = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetAmount() Quantity {
	if o == nil || IsNil(o.Amount) {
		var ret Quantity
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetAmountOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Quantity and assigns it to the Amount field.
func (o *MedicationKnowledge) SetAmount(v Quantity) {
	o.Amount = &v
}

// GetSynonym returns the Synonym field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetSynonym() []string {
	if o == nil || IsNil(o.Synonym) {
		var ret []string
		return ret
	}
	return o.Synonym
}

// GetSynonymOk returns a tuple with the Synonym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetSynonymOk() ([]string, bool) {
	if o == nil || IsNil(o.Synonym) {
		return nil, false
	}
	return o.Synonym, true
}

// HasSynonym returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasSynonym() bool {
	if o != nil && !IsNil(o.Synonym) {
		return true
	}

	return false
}

// SetSynonym gets a reference to the given []string and assigns it to the Synonym field.
func (o *MedicationKnowledge) SetSynonym(v []string) {
	o.Synonym = v
}

// GetRelatedMedicationKnowledge returns the RelatedMedicationKnowledge field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetRelatedMedicationKnowledge() []MedicationKnowledgeRelatedMedicationKnowledge {
	if o == nil || IsNil(o.RelatedMedicationKnowledge) {
		var ret []MedicationKnowledgeRelatedMedicationKnowledge
		return ret
	}
	return o.RelatedMedicationKnowledge
}

// GetRelatedMedicationKnowledgeOk returns a tuple with the RelatedMedicationKnowledge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetRelatedMedicationKnowledgeOk() ([]MedicationKnowledgeRelatedMedicationKnowledge, bool) {
	if o == nil || IsNil(o.RelatedMedicationKnowledge) {
		return nil, false
	}
	return o.RelatedMedicationKnowledge, true
}

// HasRelatedMedicationKnowledge returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasRelatedMedicationKnowledge() bool {
	if o != nil && !IsNil(o.RelatedMedicationKnowledge) {
		return true
	}

	return false
}

// SetRelatedMedicationKnowledge gets a reference to the given []MedicationKnowledgeRelatedMedicationKnowledge and assigns it to the RelatedMedicationKnowledge field.
func (o *MedicationKnowledge) SetRelatedMedicationKnowledge(v []MedicationKnowledgeRelatedMedicationKnowledge) {
	o.RelatedMedicationKnowledge = v
}

// GetAssociatedMedication returns the AssociatedMedication field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetAssociatedMedication() []Reference {
	if o == nil || IsNil(o.AssociatedMedication) {
		var ret []Reference
		return ret
	}
	return o.AssociatedMedication
}

// GetAssociatedMedicationOk returns a tuple with the AssociatedMedication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetAssociatedMedicationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.AssociatedMedication) {
		return nil, false
	}
	return o.AssociatedMedication, true
}

// HasAssociatedMedication returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasAssociatedMedication() bool {
	if o != nil && !IsNil(o.AssociatedMedication) {
		return true
	}

	return false
}

// SetAssociatedMedication gets a reference to the given []Reference and assigns it to the AssociatedMedication field.
func (o *MedicationKnowledge) SetAssociatedMedication(v []Reference) {
	o.AssociatedMedication = v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetProductType() []CodeableConcept {
	if o == nil || IsNil(o.ProductType) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetProductTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given []CodeableConcept and assigns it to the ProductType field.
func (o *MedicationKnowledge) SetProductType(v []CodeableConcept) {
	o.ProductType = v
}

// GetMonograph returns the Monograph field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetMonograph() []MedicationKnowledgeMonograph {
	if o == nil || IsNil(o.Monograph) {
		var ret []MedicationKnowledgeMonograph
		return ret
	}
	return o.Monograph
}

// GetMonographOk returns a tuple with the Monograph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetMonographOk() ([]MedicationKnowledgeMonograph, bool) {
	if o == nil || IsNil(o.Monograph) {
		return nil, false
	}
	return o.Monograph, true
}

// HasMonograph returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasMonograph() bool {
	if o != nil && !IsNil(o.Monograph) {
		return true
	}

	return false
}

// SetMonograph gets a reference to the given []MedicationKnowledgeMonograph and assigns it to the Monograph field.
func (o *MedicationKnowledge) SetMonograph(v []MedicationKnowledgeMonograph) {
	o.Monograph = v
}

// GetIngredient returns the Ingredient field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetIngredient() []MedicationKnowledgeIngredient {
	if o == nil || IsNil(o.Ingredient) {
		var ret []MedicationKnowledgeIngredient
		return ret
	}
	return o.Ingredient
}

// GetIngredientOk returns a tuple with the Ingredient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetIngredientOk() ([]MedicationKnowledgeIngredient, bool) {
	if o == nil || IsNil(o.Ingredient) {
		return nil, false
	}
	return o.Ingredient, true
}

// HasIngredient returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasIngredient() bool {
	if o != nil && !IsNil(o.Ingredient) {
		return true
	}

	return false
}

// SetIngredient gets a reference to the given []MedicationKnowledgeIngredient and assigns it to the Ingredient field.
func (o *MedicationKnowledge) SetIngredient(v []MedicationKnowledgeIngredient) {
	o.Ingredient = v
}

// GetPreparationInstruction returns the PreparationInstruction field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetPreparationInstruction() string {
	if o == nil || IsNil(o.PreparationInstruction) {
		var ret string
		return ret
	}
	return *o.PreparationInstruction
}

// GetPreparationInstructionOk returns a tuple with the PreparationInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetPreparationInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.PreparationInstruction) {
		return nil, false
	}
	return o.PreparationInstruction, true
}

// HasPreparationInstruction returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasPreparationInstruction() bool {
	if o != nil && !IsNil(o.PreparationInstruction) {
		return true
	}

	return false
}

// SetPreparationInstruction gets a reference to the given string and assigns it to the PreparationInstruction field.
func (o *MedicationKnowledge) SetPreparationInstruction(v string) {
	o.PreparationInstruction = &v
}

// GetIntendedRoute returns the IntendedRoute field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetIntendedRoute() []CodeableConcept {
	if o == nil || IsNil(o.IntendedRoute) {
		var ret []CodeableConcept
		return ret
	}
	return o.IntendedRoute
}

// GetIntendedRouteOk returns a tuple with the IntendedRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetIntendedRouteOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.IntendedRoute) {
		return nil, false
	}
	return o.IntendedRoute, true
}

// HasIntendedRoute returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasIntendedRoute() bool {
	if o != nil && !IsNil(o.IntendedRoute) {
		return true
	}

	return false
}

// SetIntendedRoute gets a reference to the given []CodeableConcept and assigns it to the IntendedRoute field.
func (o *MedicationKnowledge) SetIntendedRoute(v []CodeableConcept) {
	o.IntendedRoute = v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetCost() []MedicationKnowledgeCost {
	if o == nil || IsNil(o.Cost) {
		var ret []MedicationKnowledgeCost
		return ret
	}
	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetCostOk() ([]MedicationKnowledgeCost, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given []MedicationKnowledgeCost and assigns it to the Cost field.
func (o *MedicationKnowledge) SetCost(v []MedicationKnowledgeCost) {
	o.Cost = v
}

// GetMonitoringProgram returns the MonitoringProgram field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetMonitoringProgram() []MedicationKnowledgeMonitoringProgram {
	if o == nil || IsNil(o.MonitoringProgram) {
		var ret []MedicationKnowledgeMonitoringProgram
		return ret
	}
	return o.MonitoringProgram
}

// GetMonitoringProgramOk returns a tuple with the MonitoringProgram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetMonitoringProgramOk() ([]MedicationKnowledgeMonitoringProgram, bool) {
	if o == nil || IsNil(o.MonitoringProgram) {
		return nil, false
	}
	return o.MonitoringProgram, true
}

// HasMonitoringProgram returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasMonitoringProgram() bool {
	if o != nil && !IsNil(o.MonitoringProgram) {
		return true
	}

	return false
}

// SetMonitoringProgram gets a reference to the given []MedicationKnowledgeMonitoringProgram and assigns it to the MonitoringProgram field.
func (o *MedicationKnowledge) SetMonitoringProgram(v []MedicationKnowledgeMonitoringProgram) {
	o.MonitoringProgram = v
}

// GetAdministrationGuidelines returns the AdministrationGuidelines field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetAdministrationGuidelines() []MedicationKnowledgeAdministrationGuidelines {
	if o == nil || IsNil(o.AdministrationGuidelines) {
		var ret []MedicationKnowledgeAdministrationGuidelines
		return ret
	}
	return o.AdministrationGuidelines
}

// GetAdministrationGuidelinesOk returns a tuple with the AdministrationGuidelines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetAdministrationGuidelinesOk() ([]MedicationKnowledgeAdministrationGuidelines, bool) {
	if o == nil || IsNil(o.AdministrationGuidelines) {
		return nil, false
	}
	return o.AdministrationGuidelines, true
}

// HasAdministrationGuidelines returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasAdministrationGuidelines() bool {
	if o != nil && !IsNil(o.AdministrationGuidelines) {
		return true
	}

	return false
}

// SetAdministrationGuidelines gets a reference to the given []MedicationKnowledgeAdministrationGuidelines and assigns it to the AdministrationGuidelines field.
func (o *MedicationKnowledge) SetAdministrationGuidelines(v []MedicationKnowledgeAdministrationGuidelines) {
	o.AdministrationGuidelines = v
}

// GetMedicineClassification returns the MedicineClassification field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetMedicineClassification() []MedicationKnowledgeMedicineClassification {
	if o == nil || IsNil(o.MedicineClassification) {
		var ret []MedicationKnowledgeMedicineClassification
		return ret
	}
	return o.MedicineClassification
}

// GetMedicineClassificationOk returns a tuple with the MedicineClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetMedicineClassificationOk() ([]MedicationKnowledgeMedicineClassification, bool) {
	if o == nil || IsNil(o.MedicineClassification) {
		return nil, false
	}
	return o.MedicineClassification, true
}

// HasMedicineClassification returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasMedicineClassification() bool {
	if o != nil && !IsNil(o.MedicineClassification) {
		return true
	}

	return false
}

// SetMedicineClassification gets a reference to the given []MedicationKnowledgeMedicineClassification and assigns it to the MedicineClassification field.
func (o *MedicationKnowledge) SetMedicineClassification(v []MedicationKnowledgeMedicineClassification) {
	o.MedicineClassification = v
}

// GetPackaging returns the Packaging field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetPackaging() MedicationKnowledgePackaging {
	if o == nil || IsNil(o.Packaging) {
		var ret MedicationKnowledgePackaging
		return ret
	}
	return *o.Packaging
}

// GetPackagingOk returns a tuple with the Packaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetPackagingOk() (*MedicationKnowledgePackaging, bool) {
	if o == nil || IsNil(o.Packaging) {
		return nil, false
	}
	return o.Packaging, true
}

// HasPackaging returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasPackaging() bool {
	if o != nil && !IsNil(o.Packaging) {
		return true
	}

	return false
}

// SetPackaging gets a reference to the given MedicationKnowledgePackaging and assigns it to the Packaging field.
func (o *MedicationKnowledge) SetPackaging(v MedicationKnowledgePackaging) {
	o.Packaging = &v
}

// GetDrugCharacteristic returns the DrugCharacteristic field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetDrugCharacteristic() []MedicationKnowledgeDrugCharacteristic {
	if o == nil || IsNil(o.DrugCharacteristic) {
		var ret []MedicationKnowledgeDrugCharacteristic
		return ret
	}
	return o.DrugCharacteristic
}

// GetDrugCharacteristicOk returns a tuple with the DrugCharacteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetDrugCharacteristicOk() ([]MedicationKnowledgeDrugCharacteristic, bool) {
	if o == nil || IsNil(o.DrugCharacteristic) {
		return nil, false
	}
	return o.DrugCharacteristic, true
}

// HasDrugCharacteristic returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasDrugCharacteristic() bool {
	if o != nil && !IsNil(o.DrugCharacteristic) {
		return true
	}

	return false
}

// SetDrugCharacteristic gets a reference to the given []MedicationKnowledgeDrugCharacteristic and assigns it to the DrugCharacteristic field.
func (o *MedicationKnowledge) SetDrugCharacteristic(v []MedicationKnowledgeDrugCharacteristic) {
	o.DrugCharacteristic = v
}

// GetContraindication returns the Contraindication field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetContraindication() []Reference {
	if o == nil || IsNil(o.Contraindication) {
		var ret []Reference
		return ret
	}
	return o.Contraindication
}

// GetContraindicationOk returns a tuple with the Contraindication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetContraindicationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Contraindication) {
		return nil, false
	}
	return o.Contraindication, true
}

// HasContraindication returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasContraindication() bool {
	if o != nil && !IsNil(o.Contraindication) {
		return true
	}

	return false
}

// SetContraindication gets a reference to the given []Reference and assigns it to the Contraindication field.
func (o *MedicationKnowledge) SetContraindication(v []Reference) {
	o.Contraindication = v
}

// GetRegulatory returns the Regulatory field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetRegulatory() []MedicationKnowledgeRegulatory {
	if o == nil || IsNil(o.Regulatory) {
		var ret []MedicationKnowledgeRegulatory
		return ret
	}
	return o.Regulatory
}

// GetRegulatoryOk returns a tuple with the Regulatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetRegulatoryOk() ([]MedicationKnowledgeRegulatory, bool) {
	if o == nil || IsNil(o.Regulatory) {
		return nil, false
	}
	return o.Regulatory, true
}

// HasRegulatory returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasRegulatory() bool {
	if o != nil && !IsNil(o.Regulatory) {
		return true
	}

	return false
}

// SetRegulatory gets a reference to the given []MedicationKnowledgeRegulatory and assigns it to the Regulatory field.
func (o *MedicationKnowledge) SetRegulatory(v []MedicationKnowledgeRegulatory) {
	o.Regulatory = v
}

// GetKinetics returns the Kinetics field value if set, zero value otherwise.
func (o *MedicationKnowledge) GetKinetics() []MedicationKnowledgeKinetics {
	if o == nil || IsNil(o.Kinetics) {
		var ret []MedicationKnowledgeKinetics
		return ret
	}
	return o.Kinetics
}

// GetKineticsOk returns a tuple with the Kinetics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledge) GetKineticsOk() ([]MedicationKnowledgeKinetics, bool) {
	if o == nil || IsNil(o.Kinetics) {
		return nil, false
	}
	return o.Kinetics, true
}

// HasKinetics returns a boolean if a field has been set.
func (o *MedicationKnowledge) HasKinetics() bool {
	if o != nil && !IsNil(o.Kinetics) {
		return true
	}

	return false
}

// SetKinetics gets a reference to the given []MedicationKnowledgeKinetics and assigns it to the Kinetics field.
func (o *MedicationKnowledge) SetKinetics(v []MedicationKnowledgeKinetics) {
	o.Kinetics = v
}

func (o MedicationKnowledge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationKnowledge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.DoseForm) {
		toSerialize["doseForm"] = o.DoseForm
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Synonym) {
		toSerialize["synonym"] = o.Synonym
	}
	if !IsNil(o.RelatedMedicationKnowledge) {
		toSerialize["relatedMedicationKnowledge"] = o.RelatedMedicationKnowledge
	}
	if !IsNil(o.AssociatedMedication) {
		toSerialize["associatedMedication"] = o.AssociatedMedication
	}
	if !IsNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !IsNil(o.Monograph) {
		toSerialize["monograph"] = o.Monograph
	}
	if !IsNil(o.Ingredient) {
		toSerialize["ingredient"] = o.Ingredient
	}
	if !IsNil(o.PreparationInstruction) {
		toSerialize["preparationInstruction"] = o.PreparationInstruction
	}
	if !IsNil(o.IntendedRoute) {
		toSerialize["intendedRoute"] = o.IntendedRoute
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.MonitoringProgram) {
		toSerialize["monitoringProgram"] = o.MonitoringProgram
	}
	if !IsNil(o.AdministrationGuidelines) {
		toSerialize["administrationGuidelines"] = o.AdministrationGuidelines
	}
	if !IsNil(o.MedicineClassification) {
		toSerialize["medicineClassification"] = o.MedicineClassification
	}
	if !IsNil(o.Packaging) {
		toSerialize["packaging"] = o.Packaging
	}
	if !IsNil(o.DrugCharacteristic) {
		toSerialize["drugCharacteristic"] = o.DrugCharacteristic
	}
	if !IsNil(o.Contraindication) {
		toSerialize["contraindication"] = o.Contraindication
	}
	if !IsNil(o.Regulatory) {
		toSerialize["regulatory"] = o.Regulatory
	}
	if !IsNil(o.Kinetics) {
		toSerialize["kinetics"] = o.Kinetics
	}
	return toSerialize, nil
}

func (o *MedicationKnowledge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicationKnowledge := _MedicationKnowledge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicationKnowledge)

	if err != nil {
		return err
	}

	*o = MedicationKnowledge(varMedicationKnowledge)

	return err
}

type NullableMedicationKnowledge struct {
	value *MedicationKnowledge
	isSet bool
}

func (v NullableMedicationKnowledge) Get() *MedicationKnowledge {
	return v.value
}

func (v *NullableMedicationKnowledge) Set(val *MedicationKnowledge) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationKnowledge) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationKnowledge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationKnowledge(val *MedicationKnowledge) *NullableMedicationKnowledge {
	return &NullableMedicationKnowledge{value: val, isSet: true}
}

func (v NullableMedicationKnowledge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationKnowledge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


