/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImagingStudySeries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImagingStudySeries{}

// ImagingStudySeries Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
type ImagingStudySeries struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Uid *string `json:"uid,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	Number *float32 `json:"number,omitempty"`
	// The modality of this series sequence.
	Modality Coding `json:"modality"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	NumberOfInstances *float32 `json:"numberOfInstances,omitempty"`
	// The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
	Endpoint []Reference `json:"endpoint,omitempty"`
	// The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
	BodySite *Coding `json:"bodySite,omitempty"`
	// The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
	Laterality *Coding `json:"laterality,omitempty"`
	// The specimen imaged, e.g., for whole slide imaging of a biopsy.
	Specimen []Reference `json:"specimen,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Started *string `json:"started,omitempty"`
	// Indicates who or what performed the series and how they were involved.
	Performer []ImagingStudyPerformer `json:"performer,omitempty"`
	// A single SOP instance within the series, e.g. an image, or presentation state.
	Instance []ImagingStudyInstance `json:"instance,omitempty"`
}

type _ImagingStudySeries ImagingStudySeries

// NewImagingStudySeries instantiates a new ImagingStudySeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImagingStudySeries(modality Coding) *ImagingStudySeries {
	this := ImagingStudySeries{}
	this.Modality = modality
	return &this
}

// NewImagingStudySeriesWithDefaults instantiates a new ImagingStudySeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagingStudySeriesWithDefaults() *ImagingStudySeries {
	this := ImagingStudySeries{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImagingStudySeries) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImagingStudySeries) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImagingStudySeries) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ImagingStudySeries) SetUid(v string) {
	o.Uid = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetNumber() float32 {
	if o == nil || IsNil(o.Number) {
		var ret float32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float32 and assigns it to the Number field.
func (o *ImagingStudySeries) SetNumber(v float32) {
	o.Number = &v
}

// GetModality returns the Modality field value
func (o *ImagingStudySeries) GetModality() Coding {
	if o == nil {
		var ret Coding
		return ret
	}

	return o.Modality
}

// GetModalityOk returns a tuple with the Modality field value
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetModalityOk() (*Coding, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modality, true
}

// SetModality sets field value
func (o *ImagingStudySeries) SetModality(v Coding) {
	o.Modality = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImagingStudySeries) SetDescription(v string) {
	o.Description = &v
}

// GetNumberOfInstances returns the NumberOfInstances field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetNumberOfInstances() float32 {
	if o == nil || IsNil(o.NumberOfInstances) {
		var ret float32
		return ret
	}
	return *o.NumberOfInstances
}

// GetNumberOfInstancesOk returns a tuple with the NumberOfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetNumberOfInstancesOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfInstances) {
		return nil, false
	}
	return o.NumberOfInstances, true
}

// HasNumberOfInstances returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasNumberOfInstances() bool {
	if o != nil && !IsNil(o.NumberOfInstances) {
		return true
	}

	return false
}

// SetNumberOfInstances gets a reference to the given float32 and assigns it to the NumberOfInstances field.
func (o *ImagingStudySeries) SetNumberOfInstances(v float32) {
	o.NumberOfInstances = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetEndpoint() []Reference {
	if o == nil || IsNil(o.Endpoint) {
		var ret []Reference
		return ret
	}
	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetEndpointOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given []Reference and assigns it to the Endpoint field.
func (o *ImagingStudySeries) SetEndpoint(v []Reference) {
	o.Endpoint = v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetBodySite() Coding {
	if o == nil || IsNil(o.BodySite) {
		var ret Coding
		return ret
	}
	return *o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetBodySiteOk() (*Coding, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given Coding and assigns it to the BodySite field.
func (o *ImagingStudySeries) SetBodySite(v Coding) {
	o.BodySite = &v
}

// GetLaterality returns the Laterality field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetLaterality() Coding {
	if o == nil || IsNil(o.Laterality) {
		var ret Coding
		return ret
	}
	return *o.Laterality
}

// GetLateralityOk returns a tuple with the Laterality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetLateralityOk() (*Coding, bool) {
	if o == nil || IsNil(o.Laterality) {
		return nil, false
	}
	return o.Laterality, true
}

// HasLaterality returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasLaterality() bool {
	if o != nil && !IsNil(o.Laterality) {
		return true
	}

	return false
}

// SetLaterality gets a reference to the given Coding and assigns it to the Laterality field.
func (o *ImagingStudySeries) SetLaterality(v Coding) {
	o.Laterality = &v
}

// GetSpecimen returns the Specimen field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetSpecimen() []Reference {
	if o == nil || IsNil(o.Specimen) {
		var ret []Reference
		return ret
	}
	return o.Specimen
}

// GetSpecimenOk returns a tuple with the Specimen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetSpecimenOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Specimen) {
		return nil, false
	}
	return o.Specimen, true
}

// HasSpecimen returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasSpecimen() bool {
	if o != nil && !IsNil(o.Specimen) {
		return true
	}

	return false
}

// SetSpecimen gets a reference to the given []Reference and assigns it to the Specimen field.
func (o *ImagingStudySeries) SetSpecimen(v []Reference) {
	o.Specimen = v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetStarted() string {
	if o == nil || IsNil(o.Started) {
		var ret string
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetStartedOk() (*string, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given string and assigns it to the Started field.
func (o *ImagingStudySeries) SetStarted(v string) {
	o.Started = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetPerformer() []ImagingStudyPerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []ImagingStudyPerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetPerformerOk() ([]ImagingStudyPerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []ImagingStudyPerformer and assigns it to the Performer field.
func (o *ImagingStudySeries) SetPerformer(v []ImagingStudyPerformer) {
	o.Performer = v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ImagingStudySeries) GetInstance() []ImagingStudyInstance {
	if o == nil || IsNil(o.Instance) {
		var ret []ImagingStudyInstance
		return ret
	}
	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudySeries) GetInstanceOk() ([]ImagingStudyInstance, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ImagingStudySeries) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given []ImagingStudyInstance and assigns it to the Instance field.
func (o *ImagingStudySeries) SetInstance(v []ImagingStudyInstance) {
	o.Instance = v
}

func (o ImagingStudySeries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImagingStudySeries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	toSerialize["modality"] = o.Modality
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.NumberOfInstances) {
		toSerialize["numberOfInstances"] = o.NumberOfInstances
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.Laterality) {
		toSerialize["laterality"] = o.Laterality
	}
	if !IsNil(o.Specimen) {
		toSerialize["specimen"] = o.Specimen
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	return toSerialize, nil
}

func (o *ImagingStudySeries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"modality",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImagingStudySeries := _ImagingStudySeries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImagingStudySeries)

	if err != nil {
		return err
	}

	*o = ImagingStudySeries(varImagingStudySeries)

	return err
}

type NullableImagingStudySeries struct {
	value *ImagingStudySeries
	isSet bool
}

func (v NullableImagingStudySeries) Get() *ImagingStudySeries {
	return v.value
}

func (v *NullableImagingStudySeries) Set(val *ImagingStudySeries) {
	v.value = val
	v.isSet = true
}

func (v NullableImagingStudySeries) IsSet() bool {
	return v.isSet
}

func (v *NullableImagingStudySeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImagingStudySeries(val *ImagingStudySeries) *NullableImagingStudySeries {
	return &NullableImagingStudySeries{value: val, isSet: true}
}

func (v NullableImagingStudySeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImagingStudySeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


