/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the GoalTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoalTarget{}

// GoalTarget Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
type GoalTarget struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
	Measure *CodeableConcept `json:"measure,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailQuantity *Quantity `json:"detailQuantity,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailRange *Range `json:"detailRange,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailCodeableConcept *CodeableConcept `json:"detailCodeableConcept,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailString *string `json:"detailString,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailBoolean *bool `json:"detailBoolean,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailInteger *float32 `json:"detailInteger,omitempty"`
	// The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
	DetailRatio *Ratio `json:"detailRatio,omitempty"`
	// Indicates either the date or the duration after start by which the goal should be met.
	DueDate *string `json:"dueDate,omitempty"`
	// Indicates either the date or the duration after start by which the goal should be met.
	DueDuration *Duration `json:"dueDuration,omitempty"`
}

// NewGoalTarget instantiates a new GoalTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoalTarget() *GoalTarget {
	this := GoalTarget{}
	return &this
}

// NewGoalTargetWithDefaults instantiates a new GoalTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalTargetWithDefaults() *GoalTarget {
	this := GoalTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GoalTarget) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GoalTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GoalTarget) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *GoalTarget) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *GoalTarget) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *GoalTarget) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *GoalTarget) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *GoalTarget) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *GoalTarget) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetMeasure returns the Measure field value if set, zero value otherwise.
func (o *GoalTarget) GetMeasure() CodeableConcept {
	if o == nil || IsNil(o.Measure) {
		var ret CodeableConcept
		return ret
	}
	return *o.Measure
}

// GetMeasureOk returns a tuple with the Measure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetMeasureOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Measure) {
		return nil, false
	}
	return o.Measure, true
}

// HasMeasure returns a boolean if a field has been set.
func (o *GoalTarget) HasMeasure() bool {
	if o != nil && !IsNil(o.Measure) {
		return true
	}

	return false
}

// SetMeasure gets a reference to the given CodeableConcept and assigns it to the Measure field.
func (o *GoalTarget) SetMeasure(v CodeableConcept) {
	o.Measure = &v
}

// GetDetailQuantity returns the DetailQuantity field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailQuantity() Quantity {
	if o == nil || IsNil(o.DetailQuantity) {
		var ret Quantity
		return ret
	}
	return *o.DetailQuantity
}

// GetDetailQuantityOk returns a tuple with the DetailQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DetailQuantity) {
		return nil, false
	}
	return o.DetailQuantity, true
}

// HasDetailQuantity returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailQuantity() bool {
	if o != nil && !IsNil(o.DetailQuantity) {
		return true
	}

	return false
}

// SetDetailQuantity gets a reference to the given Quantity and assigns it to the DetailQuantity field.
func (o *GoalTarget) SetDetailQuantity(v Quantity) {
	o.DetailQuantity = &v
}

// GetDetailRange returns the DetailRange field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailRange() Range {
	if o == nil || IsNil(o.DetailRange) {
		var ret Range
		return ret
	}
	return *o.DetailRange
}

// GetDetailRangeOk returns a tuple with the DetailRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.DetailRange) {
		return nil, false
	}
	return o.DetailRange, true
}

// HasDetailRange returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailRange() bool {
	if o != nil && !IsNil(o.DetailRange) {
		return true
	}

	return false
}

// SetDetailRange gets a reference to the given Range and assigns it to the DetailRange field.
func (o *GoalTarget) SetDetailRange(v Range) {
	o.DetailRange = &v
}

// GetDetailCodeableConcept returns the DetailCodeableConcept field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DetailCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DetailCodeableConcept
}

// GetDetailCodeableConceptOk returns a tuple with the DetailCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DetailCodeableConcept) {
		return nil, false
	}
	return o.DetailCodeableConcept, true
}

// HasDetailCodeableConcept returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailCodeableConcept() bool {
	if o != nil && !IsNil(o.DetailCodeableConcept) {
		return true
	}

	return false
}

// SetDetailCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DetailCodeableConcept field.
func (o *GoalTarget) SetDetailCodeableConcept(v CodeableConcept) {
	o.DetailCodeableConcept = &v
}

// GetDetailString returns the DetailString field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailString() string {
	if o == nil || IsNil(o.DetailString) {
		var ret string
		return ret
	}
	return *o.DetailString
}

// GetDetailStringOk returns a tuple with the DetailString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailStringOk() (*string, bool) {
	if o == nil || IsNil(o.DetailString) {
		return nil, false
	}
	return o.DetailString, true
}

// HasDetailString returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailString() bool {
	if o != nil && !IsNil(o.DetailString) {
		return true
	}

	return false
}

// SetDetailString gets a reference to the given string and assigns it to the DetailString field.
func (o *GoalTarget) SetDetailString(v string) {
	o.DetailString = &v
}

// GetDetailBoolean returns the DetailBoolean field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailBoolean() bool {
	if o == nil || IsNil(o.DetailBoolean) {
		var ret bool
		return ret
	}
	return *o.DetailBoolean
}

// GetDetailBooleanOk returns a tuple with the DetailBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.DetailBoolean) {
		return nil, false
	}
	return o.DetailBoolean, true
}

// HasDetailBoolean returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailBoolean() bool {
	if o != nil && !IsNil(o.DetailBoolean) {
		return true
	}

	return false
}

// SetDetailBoolean gets a reference to the given bool and assigns it to the DetailBoolean field.
func (o *GoalTarget) SetDetailBoolean(v bool) {
	o.DetailBoolean = &v
}

// GetDetailInteger returns the DetailInteger field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailInteger() float32 {
	if o == nil || IsNil(o.DetailInteger) {
		var ret float32
		return ret
	}
	return *o.DetailInteger
}

// GetDetailIntegerOk returns a tuple with the DetailInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.DetailInteger) {
		return nil, false
	}
	return o.DetailInteger, true
}

// HasDetailInteger returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailInteger() bool {
	if o != nil && !IsNil(o.DetailInteger) {
		return true
	}

	return false
}

// SetDetailInteger gets a reference to the given float32 and assigns it to the DetailInteger field.
func (o *GoalTarget) SetDetailInteger(v float32) {
	o.DetailInteger = &v
}

// GetDetailRatio returns the DetailRatio field value if set, zero value otherwise.
func (o *GoalTarget) GetDetailRatio() Ratio {
	if o == nil || IsNil(o.DetailRatio) {
		var ret Ratio
		return ret
	}
	return *o.DetailRatio
}

// GetDetailRatioOk returns a tuple with the DetailRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDetailRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.DetailRatio) {
		return nil, false
	}
	return o.DetailRatio, true
}

// HasDetailRatio returns a boolean if a field has been set.
func (o *GoalTarget) HasDetailRatio() bool {
	if o != nil && !IsNil(o.DetailRatio) {
		return true
	}

	return false
}

// SetDetailRatio gets a reference to the given Ratio and assigns it to the DetailRatio field.
func (o *GoalTarget) SetDetailRatio(v Ratio) {
	o.DetailRatio = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *GoalTarget) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *GoalTarget) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *GoalTarget) SetDueDate(v string) {
	o.DueDate = &v
}

// GetDueDuration returns the DueDuration field value if set, zero value otherwise.
func (o *GoalTarget) GetDueDuration() Duration {
	if o == nil || IsNil(o.DueDuration) {
		var ret Duration
		return ret
	}
	return *o.DueDuration
}

// GetDueDurationOk returns a tuple with the DueDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoalTarget) GetDueDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.DueDuration) {
		return nil, false
	}
	return o.DueDuration, true
}

// HasDueDuration returns a boolean if a field has been set.
func (o *GoalTarget) HasDueDuration() bool {
	if o != nil && !IsNil(o.DueDuration) {
		return true
	}

	return false
}

// SetDueDuration gets a reference to the given Duration and assigns it to the DueDuration field.
func (o *GoalTarget) SetDueDuration(v Duration) {
	o.DueDuration = &v
}

func (o GoalTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoalTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Measure) {
		toSerialize["measure"] = o.Measure
	}
	if !IsNil(o.DetailQuantity) {
		toSerialize["detailQuantity"] = o.DetailQuantity
	}
	if !IsNil(o.DetailRange) {
		toSerialize["detailRange"] = o.DetailRange
	}
	if !IsNil(o.DetailCodeableConcept) {
		toSerialize["detailCodeableConcept"] = o.DetailCodeableConcept
	}
	if !IsNil(o.DetailString) {
		toSerialize["detailString"] = o.DetailString
	}
	if !IsNil(o.DetailBoolean) {
		toSerialize["detailBoolean"] = o.DetailBoolean
	}
	if !IsNil(o.DetailInteger) {
		toSerialize["detailInteger"] = o.DetailInteger
	}
	if !IsNil(o.DetailRatio) {
		toSerialize["detailRatio"] = o.DetailRatio
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.DueDuration) {
		toSerialize["dueDuration"] = o.DueDuration
	}
	return toSerialize, nil
}

type NullableGoalTarget struct {
	value *GoalTarget
	isSet bool
}

func (v NullableGoalTarget) Get() *GoalTarget {
	return v.value
}

func (v *NullableGoalTarget) Set(val *GoalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableGoalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableGoalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoalTarget(val *GoalTarget) *NullableGoalTarget {
	return &NullableGoalTarget{value: val, isSet: true}
}

func (v NullableGoalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


