/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Patient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Patient{}

// Patient Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type Patient struct {
	// This is a Patient resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An identifier for this patient.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Value of \"true\" or \"false\"
	Active *bool `json:"active,omitempty"`
	// A name associated with the individual.
	Name []HumanName `json:"name,omitempty"`
	// A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
	Telecom []ContactPoint `json:"telecom,omitempty"`
	// Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
	Gender *string `json:"gender,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	BirthDate *string `json:"birthDate,omitempty"`
	// Indicates if the individual is deceased or not.
	DeceasedBoolean *bool `json:"deceasedBoolean,omitempty"`
	// Indicates if the individual is deceased or not.
	DeceasedDateTime *string `json:"deceasedDateTime,omitempty"`
	// An address for the individual.
	Address []Address `json:"address,omitempty"`
	// This field contains a patient's most recent marital (civil) status.
	MaritalStatus *CodeableConcept `json:"maritalStatus,omitempty"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthBoolean *bool `json:"multipleBirthBoolean,omitempty"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthInteger *float32 `json:"multipleBirthInteger,omitempty"`
	// Image of the patient.
	Photo []Attachment `json:"photo,omitempty"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []PatientContact `json:"contact,omitempty"`
	// A language which may be used to communicate with the patient about his or her health.
	Communication []PatientCommunication `json:"communication,omitempty"`
	// Patient's nominated care provider.
	GeneralPractitioner []Reference `json:"generalPractitioner,omitempty"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *Reference `json:"managingOrganization,omitempty"`
	// Link to another patient resource that concerns the same actual patient.
	Link []PatientLink `json:"link,omitempty"`
}

type _Patient Patient

// NewPatient instantiates a new Patient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatient(resourceType string) *Patient {
	this := Patient{}
	this.ResourceType = resourceType
	return &this
}

// NewPatientWithDefaults instantiates a new Patient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatientWithDefaults() *Patient {
	this := Patient{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Patient) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Patient) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Patient) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Patient) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Patient) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Patient) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Patient) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Patient) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Patient) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Patient) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Patient) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Patient) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Patient) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Patient) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Patient) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Patient) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Patient) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Patient) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Patient) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Patient) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Patient) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Patient) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Patient) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Patient) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Patient) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Patient) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Patient) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Patient) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Patient) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Patient) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Patient) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Patient) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Patient) SetActive(v bool) {
	o.Active = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Patient) GetName() []HumanName {
	if o == nil || IsNil(o.Name) {
		var ret []HumanName
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetNameOk() ([]HumanName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Patient) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []HumanName and assigns it to the Name field.
func (o *Patient) SetName(v []HumanName) {
	o.Name = v
}

// GetTelecom returns the Telecom field value if set, zero value otherwise.
func (o *Patient) GetTelecom() []ContactPoint {
	if o == nil || IsNil(o.Telecom) {
		var ret []ContactPoint
		return ret
	}
	return o.Telecom
}

// GetTelecomOk returns a tuple with the Telecom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetTelecomOk() ([]ContactPoint, bool) {
	if o == nil || IsNil(o.Telecom) {
		return nil, false
	}
	return o.Telecom, true
}

// HasTelecom returns a boolean if a field has been set.
func (o *Patient) HasTelecom() bool {
	if o != nil && !IsNil(o.Telecom) {
		return true
	}

	return false
}

// SetTelecom gets a reference to the given []ContactPoint and assigns it to the Telecom field.
func (o *Patient) SetTelecom(v []ContactPoint) {
	o.Telecom = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *Patient) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Patient) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *Patient) SetGender(v string) {
	o.Gender = &v
}

// GetBirthDate returns the BirthDate field value if set, zero value otherwise.
func (o *Patient) GetBirthDate() string {
	if o == nil || IsNil(o.BirthDate) {
		var ret string
		return ret
	}
	return *o.BirthDate
}

// GetBirthDateOk returns a tuple with the BirthDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetBirthDateOk() (*string, bool) {
	if o == nil || IsNil(o.BirthDate) {
		return nil, false
	}
	return o.BirthDate, true
}

// HasBirthDate returns a boolean if a field has been set.
func (o *Patient) HasBirthDate() bool {
	if o != nil && !IsNil(o.BirthDate) {
		return true
	}

	return false
}

// SetBirthDate gets a reference to the given string and assigns it to the BirthDate field.
func (o *Patient) SetBirthDate(v string) {
	o.BirthDate = &v
}

// GetDeceasedBoolean returns the DeceasedBoolean field value if set, zero value otherwise.
func (o *Patient) GetDeceasedBoolean() bool {
	if o == nil || IsNil(o.DeceasedBoolean) {
		var ret bool
		return ret
	}
	return *o.DeceasedBoolean
}

// GetDeceasedBooleanOk returns a tuple with the DeceasedBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetDeceasedBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.DeceasedBoolean) {
		return nil, false
	}
	return o.DeceasedBoolean, true
}

// HasDeceasedBoolean returns a boolean if a field has been set.
func (o *Patient) HasDeceasedBoolean() bool {
	if o != nil && !IsNil(o.DeceasedBoolean) {
		return true
	}

	return false
}

// SetDeceasedBoolean gets a reference to the given bool and assigns it to the DeceasedBoolean field.
func (o *Patient) SetDeceasedBoolean(v bool) {
	o.DeceasedBoolean = &v
}

// GetDeceasedDateTime returns the DeceasedDateTime field value if set, zero value otherwise.
func (o *Patient) GetDeceasedDateTime() string {
	if o == nil || IsNil(o.DeceasedDateTime) {
		var ret string
		return ret
	}
	return *o.DeceasedDateTime
}

// GetDeceasedDateTimeOk returns a tuple with the DeceasedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetDeceasedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DeceasedDateTime) {
		return nil, false
	}
	return o.DeceasedDateTime, true
}

// HasDeceasedDateTime returns a boolean if a field has been set.
func (o *Patient) HasDeceasedDateTime() bool {
	if o != nil && !IsNil(o.DeceasedDateTime) {
		return true
	}

	return false
}

// SetDeceasedDateTime gets a reference to the given string and assigns it to the DeceasedDateTime field.
func (o *Patient) SetDeceasedDateTime(v string) {
	o.DeceasedDateTime = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Patient) GetAddress() []Address {
	if o == nil || IsNil(o.Address) {
		var ret []Address
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetAddressOk() ([]Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Patient) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given []Address and assigns it to the Address field.
func (o *Patient) SetAddress(v []Address) {
	o.Address = v
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise.
func (o *Patient) GetMaritalStatus() CodeableConcept {
	if o == nil || IsNil(o.MaritalStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.MaritalStatus
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetMaritalStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.MaritalStatus) {
		return nil, false
	}
	return o.MaritalStatus, true
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *Patient) HasMaritalStatus() bool {
	if o != nil && !IsNil(o.MaritalStatus) {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given CodeableConcept and assigns it to the MaritalStatus field.
func (o *Patient) SetMaritalStatus(v CodeableConcept) {
	o.MaritalStatus = &v
}

// GetMultipleBirthBoolean returns the MultipleBirthBoolean field value if set, zero value otherwise.
func (o *Patient) GetMultipleBirthBoolean() bool {
	if o == nil || IsNil(o.MultipleBirthBoolean) {
		var ret bool
		return ret
	}
	return *o.MultipleBirthBoolean
}

// GetMultipleBirthBooleanOk returns a tuple with the MultipleBirthBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetMultipleBirthBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleBirthBoolean) {
		return nil, false
	}
	return o.MultipleBirthBoolean, true
}

// HasMultipleBirthBoolean returns a boolean if a field has been set.
func (o *Patient) HasMultipleBirthBoolean() bool {
	if o != nil && !IsNil(o.MultipleBirthBoolean) {
		return true
	}

	return false
}

// SetMultipleBirthBoolean gets a reference to the given bool and assigns it to the MultipleBirthBoolean field.
func (o *Patient) SetMultipleBirthBoolean(v bool) {
	o.MultipleBirthBoolean = &v
}

// GetMultipleBirthInteger returns the MultipleBirthInteger field value if set, zero value otherwise.
func (o *Patient) GetMultipleBirthInteger() float32 {
	if o == nil || IsNil(o.MultipleBirthInteger) {
		var ret float32
		return ret
	}
	return *o.MultipleBirthInteger
}

// GetMultipleBirthIntegerOk returns a tuple with the MultipleBirthInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetMultipleBirthIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.MultipleBirthInteger) {
		return nil, false
	}
	return o.MultipleBirthInteger, true
}

// HasMultipleBirthInteger returns a boolean if a field has been set.
func (o *Patient) HasMultipleBirthInteger() bool {
	if o != nil && !IsNil(o.MultipleBirthInteger) {
		return true
	}

	return false
}

// SetMultipleBirthInteger gets a reference to the given float32 and assigns it to the MultipleBirthInteger field.
func (o *Patient) SetMultipleBirthInteger(v float32) {
	o.MultipleBirthInteger = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise.
func (o *Patient) GetPhoto() []Attachment {
	if o == nil || IsNil(o.Photo) {
		var ret []Attachment
		return ret
	}
	return o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetPhotoOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Photo) {
		return nil, false
	}
	return o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *Patient) HasPhoto() bool {
	if o != nil && !IsNil(o.Photo) {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given []Attachment and assigns it to the Photo field.
func (o *Patient) SetPhoto(v []Attachment) {
	o.Photo = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Patient) GetContact() []PatientContact {
	if o == nil || IsNil(o.Contact) {
		var ret []PatientContact
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetContactOk() ([]PatientContact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Patient) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []PatientContact and assigns it to the Contact field.
func (o *Patient) SetContact(v []PatientContact) {
	o.Contact = v
}

// GetCommunication returns the Communication field value if set, zero value otherwise.
func (o *Patient) GetCommunication() []PatientCommunication {
	if o == nil || IsNil(o.Communication) {
		var ret []PatientCommunication
		return ret
	}
	return o.Communication
}

// GetCommunicationOk returns a tuple with the Communication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetCommunicationOk() ([]PatientCommunication, bool) {
	if o == nil || IsNil(o.Communication) {
		return nil, false
	}
	return o.Communication, true
}

// HasCommunication returns a boolean if a field has been set.
func (o *Patient) HasCommunication() bool {
	if o != nil && !IsNil(o.Communication) {
		return true
	}

	return false
}

// SetCommunication gets a reference to the given []PatientCommunication and assigns it to the Communication field.
func (o *Patient) SetCommunication(v []PatientCommunication) {
	o.Communication = v
}

// GetGeneralPractitioner returns the GeneralPractitioner field value if set, zero value otherwise.
func (o *Patient) GetGeneralPractitioner() []Reference {
	if o == nil || IsNil(o.GeneralPractitioner) {
		var ret []Reference
		return ret
	}
	return o.GeneralPractitioner
}

// GetGeneralPractitionerOk returns a tuple with the GeneralPractitioner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetGeneralPractitionerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.GeneralPractitioner) {
		return nil, false
	}
	return o.GeneralPractitioner, true
}

// HasGeneralPractitioner returns a boolean if a field has been set.
func (o *Patient) HasGeneralPractitioner() bool {
	if o != nil && !IsNil(o.GeneralPractitioner) {
		return true
	}

	return false
}

// SetGeneralPractitioner gets a reference to the given []Reference and assigns it to the GeneralPractitioner field.
func (o *Patient) SetGeneralPractitioner(v []Reference) {
	o.GeneralPractitioner = v
}

// GetManagingOrganization returns the ManagingOrganization field value if set, zero value otherwise.
func (o *Patient) GetManagingOrganization() Reference {
	if o == nil || IsNil(o.ManagingOrganization) {
		var ret Reference
		return ret
	}
	return *o.ManagingOrganization
}

// GetManagingOrganizationOk returns a tuple with the ManagingOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetManagingOrganizationOk() (*Reference, bool) {
	if o == nil || IsNil(o.ManagingOrganization) {
		return nil, false
	}
	return o.ManagingOrganization, true
}

// HasManagingOrganization returns a boolean if a field has been set.
func (o *Patient) HasManagingOrganization() bool {
	if o != nil && !IsNil(o.ManagingOrganization) {
		return true
	}

	return false
}

// SetManagingOrganization gets a reference to the given Reference and assigns it to the ManagingOrganization field.
func (o *Patient) SetManagingOrganization(v Reference) {
	o.ManagingOrganization = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *Patient) GetLink() []PatientLink {
	if o == nil || IsNil(o.Link) {
		var ret []PatientLink
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patient) GetLinkOk() ([]PatientLink, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Patient) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given []PatientLink and assigns it to the Link field.
func (o *Patient) SetLink(v []PatientLink) {
	o.Link = v
}

func (o Patient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Patient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Telecom) {
		toSerialize["telecom"] = o.Telecom
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.BirthDate) {
		toSerialize["birthDate"] = o.BirthDate
	}
	if !IsNil(o.DeceasedBoolean) {
		toSerialize["deceasedBoolean"] = o.DeceasedBoolean
	}
	if !IsNil(o.DeceasedDateTime) {
		toSerialize["deceasedDateTime"] = o.DeceasedDateTime
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.MaritalStatus) {
		toSerialize["maritalStatus"] = o.MaritalStatus
	}
	if !IsNil(o.MultipleBirthBoolean) {
		toSerialize["multipleBirthBoolean"] = o.MultipleBirthBoolean
	}
	if !IsNil(o.MultipleBirthInteger) {
		toSerialize["multipleBirthInteger"] = o.MultipleBirthInteger
	}
	if !IsNil(o.Photo) {
		toSerialize["photo"] = o.Photo
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Communication) {
		toSerialize["communication"] = o.Communication
	}
	if !IsNil(o.GeneralPractitioner) {
		toSerialize["generalPractitioner"] = o.GeneralPractitioner
	}
	if !IsNil(o.ManagingOrganization) {
		toSerialize["managingOrganization"] = o.ManagingOrganization
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	return toSerialize, nil
}

func (o *Patient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatient := _Patient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatient)

	if err != nil {
		return err
	}

	*o = Patient(varPatient)

	return err
}

type NullablePatient struct {
	value *Patient
	isSet bool
}

func (v NullablePatient) Get() *Patient {
	return v.value
}

func (v *NullablePatient) Set(val *Patient) {
	v.value = val
	v.isSet = true
}

func (v NullablePatient) IsSet() bool {
	return v.isSet
}

func (v *NullablePatient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatient(val *Patient) *NullablePatient {
	return &NullablePatient{value: val, isSet: true}
}

func (v NullablePatient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


