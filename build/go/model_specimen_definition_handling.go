/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SpecimenDefinitionHandling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecimenDefinitionHandling{}

// SpecimenDefinitionHandling A kind of specimen with associated set of requirements.
type SpecimenDefinitionHandling struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
	TemperatureQualifier *CodeableConcept `json:"temperatureQualifier,omitempty"`
	// The temperature interval for this set of handling instructions.
	TemperatureRange *Range `json:"temperatureRange,omitempty"`
	// The maximum time interval of preservation of the specimen with these conditions.
	MaxDuration *Duration `json:"maxDuration,omitempty"`
	// A sequence of Unicode characters
	Instruction *string `json:"instruction,omitempty"`
}

// NewSpecimenDefinitionHandling instantiates a new SpecimenDefinitionHandling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecimenDefinitionHandling() *SpecimenDefinitionHandling {
	this := SpecimenDefinitionHandling{}
	return &this
}

// NewSpecimenDefinitionHandlingWithDefaults instantiates a new SpecimenDefinitionHandling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecimenDefinitionHandlingWithDefaults() *SpecimenDefinitionHandling {
	this := SpecimenDefinitionHandling{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpecimenDefinitionHandling) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SpecimenDefinitionHandling) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SpecimenDefinitionHandling) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetTemperatureQualifier returns the TemperatureQualifier field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetTemperatureQualifier() CodeableConcept {
	if o == nil || IsNil(o.TemperatureQualifier) {
		var ret CodeableConcept
		return ret
	}
	return *o.TemperatureQualifier
}

// GetTemperatureQualifierOk returns a tuple with the TemperatureQualifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetTemperatureQualifierOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.TemperatureQualifier) {
		return nil, false
	}
	return o.TemperatureQualifier, true
}

// HasTemperatureQualifier returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasTemperatureQualifier() bool {
	if o != nil && !IsNil(o.TemperatureQualifier) {
		return true
	}

	return false
}

// SetTemperatureQualifier gets a reference to the given CodeableConcept and assigns it to the TemperatureQualifier field.
func (o *SpecimenDefinitionHandling) SetTemperatureQualifier(v CodeableConcept) {
	o.TemperatureQualifier = &v
}

// GetTemperatureRange returns the TemperatureRange field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetTemperatureRange() Range {
	if o == nil || IsNil(o.TemperatureRange) {
		var ret Range
		return ret
	}
	return *o.TemperatureRange
}

// GetTemperatureRangeOk returns a tuple with the TemperatureRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetTemperatureRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.TemperatureRange) {
		return nil, false
	}
	return o.TemperatureRange, true
}

// HasTemperatureRange returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasTemperatureRange() bool {
	if o != nil && !IsNil(o.TemperatureRange) {
		return true
	}

	return false
}

// SetTemperatureRange gets a reference to the given Range and assigns it to the TemperatureRange field.
func (o *SpecimenDefinitionHandling) SetTemperatureRange(v Range) {
	o.TemperatureRange = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetMaxDuration() Duration {
	if o == nil || IsNil(o.MaxDuration) {
		var ret Duration
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetMaxDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.MaxDuration) {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasMaxDuration() bool {
	if o != nil && !IsNil(o.MaxDuration) {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given Duration and assigns it to the MaxDuration field.
func (o *SpecimenDefinitionHandling) SetMaxDuration(v Duration) {
	o.MaxDuration = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *SpecimenDefinitionHandling) GetInstruction() string {
	if o == nil || IsNil(o.Instruction) {
		var ret string
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionHandling) GetInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *SpecimenDefinitionHandling) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given string and assigns it to the Instruction field.
func (o *SpecimenDefinitionHandling) SetInstruction(v string) {
	o.Instruction = &v
}

func (o SpecimenDefinitionHandling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecimenDefinitionHandling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.TemperatureQualifier) {
		toSerialize["temperatureQualifier"] = o.TemperatureQualifier
	}
	if !IsNil(o.TemperatureRange) {
		toSerialize["temperatureRange"] = o.TemperatureRange
	}
	if !IsNil(o.MaxDuration) {
		toSerialize["maxDuration"] = o.MaxDuration
	}
	if !IsNil(o.Instruction) {
		toSerialize["instruction"] = o.Instruction
	}
	return toSerialize, nil
}

type NullableSpecimenDefinitionHandling struct {
	value *SpecimenDefinitionHandling
	isSet bool
}

func (v NullableSpecimenDefinitionHandling) Get() *SpecimenDefinitionHandling {
	return v.value
}

func (v *NullableSpecimenDefinitionHandling) Set(val *SpecimenDefinitionHandling) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecimenDefinitionHandling) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecimenDefinitionHandling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecimenDefinitionHandling(val *SpecimenDefinitionHandling) *NullableSpecimenDefinitionHandling {
	return &NullableSpecimenDefinitionHandling{value: val, isSet: true}
}

func (v NullableSpecimenDefinitionHandling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecimenDefinitionHandling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


