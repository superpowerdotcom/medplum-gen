/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicationKnowledgeRegulatory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationKnowledgeRegulatory{}

// MedicationKnowledgeRegulatory Information about a medication that is used to support knowledge.
type MedicationKnowledgeRegulatory struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The authority that is specifying the regulations.
	RegulatoryAuthority Reference `json:"regulatoryAuthority"`
	// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
	Substitution []MedicationKnowledgeSubstitution `json:"substitution,omitempty"`
	// Specifies the schedule of a medication in jurisdiction.
	Schedule []MedicationKnowledgeSchedule `json:"schedule,omitempty"`
	// The maximum number of units of the medication that can be dispensed in a period.
	MaxDispense *MedicationKnowledgeMaxDispense `json:"maxDispense,omitempty"`
}

type _MedicationKnowledgeRegulatory MedicationKnowledgeRegulatory

// NewMedicationKnowledgeRegulatory instantiates a new MedicationKnowledgeRegulatory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationKnowledgeRegulatory(regulatoryAuthority Reference) *MedicationKnowledgeRegulatory {
	this := MedicationKnowledgeRegulatory{}
	this.RegulatoryAuthority = regulatoryAuthority
	return &this
}

// NewMedicationKnowledgeRegulatoryWithDefaults instantiates a new MedicationKnowledgeRegulatory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationKnowledgeRegulatoryWithDefaults() *MedicationKnowledgeRegulatory {
	this := MedicationKnowledgeRegulatory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationKnowledgeRegulatory) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationKnowledgeRegulatory) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationKnowledgeRegulatory) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetRegulatoryAuthority returns the RegulatoryAuthority field value
func (o *MedicationKnowledgeRegulatory) GetRegulatoryAuthority() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.RegulatoryAuthority
}

// GetRegulatoryAuthorityOk returns a tuple with the RegulatoryAuthority field value
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetRegulatoryAuthorityOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegulatoryAuthority, true
}

// SetRegulatoryAuthority sets field value
func (o *MedicationKnowledgeRegulatory) SetRegulatoryAuthority(v Reference) {
	o.RegulatoryAuthority = v
}

// GetSubstitution returns the Substitution field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetSubstitution() []MedicationKnowledgeSubstitution {
	if o == nil || IsNil(o.Substitution) {
		var ret []MedicationKnowledgeSubstitution
		return ret
	}
	return o.Substitution
}

// GetSubstitutionOk returns a tuple with the Substitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetSubstitutionOk() ([]MedicationKnowledgeSubstitution, bool) {
	if o == nil || IsNil(o.Substitution) {
		return nil, false
	}
	return o.Substitution, true
}

// HasSubstitution returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasSubstitution() bool {
	if o != nil && !IsNil(o.Substitution) {
		return true
	}

	return false
}

// SetSubstitution gets a reference to the given []MedicationKnowledgeSubstitution and assigns it to the Substitution field.
func (o *MedicationKnowledgeRegulatory) SetSubstitution(v []MedicationKnowledgeSubstitution) {
	o.Substitution = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetSchedule() []MedicationKnowledgeSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret []MedicationKnowledgeSchedule
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetScheduleOk() ([]MedicationKnowledgeSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given []MedicationKnowledgeSchedule and assigns it to the Schedule field.
func (o *MedicationKnowledgeRegulatory) SetSchedule(v []MedicationKnowledgeSchedule) {
	o.Schedule = v
}

// GetMaxDispense returns the MaxDispense field value if set, zero value otherwise.
func (o *MedicationKnowledgeRegulatory) GetMaxDispense() MedicationKnowledgeMaxDispense {
	if o == nil || IsNil(o.MaxDispense) {
		var ret MedicationKnowledgeMaxDispense
		return ret
	}
	return *o.MaxDispense
}

// GetMaxDispenseOk returns a tuple with the MaxDispense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationKnowledgeRegulatory) GetMaxDispenseOk() (*MedicationKnowledgeMaxDispense, bool) {
	if o == nil || IsNil(o.MaxDispense) {
		return nil, false
	}
	return o.MaxDispense, true
}

// HasMaxDispense returns a boolean if a field has been set.
func (o *MedicationKnowledgeRegulatory) HasMaxDispense() bool {
	if o != nil && !IsNil(o.MaxDispense) {
		return true
	}

	return false
}

// SetMaxDispense gets a reference to the given MedicationKnowledgeMaxDispense and assigns it to the MaxDispense field.
func (o *MedicationKnowledgeRegulatory) SetMaxDispense(v MedicationKnowledgeMaxDispense) {
	o.MaxDispense = &v
}

func (o MedicationKnowledgeRegulatory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationKnowledgeRegulatory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["regulatoryAuthority"] = o.RegulatoryAuthority
	if !IsNil(o.Substitution) {
		toSerialize["substitution"] = o.Substitution
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.MaxDispense) {
		toSerialize["maxDispense"] = o.MaxDispense
	}
	return toSerialize, nil
}

func (o *MedicationKnowledgeRegulatory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"regulatoryAuthority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicationKnowledgeRegulatory := _MedicationKnowledgeRegulatory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicationKnowledgeRegulatory)

	if err != nil {
		return err
	}

	*o = MedicationKnowledgeRegulatory(varMedicationKnowledgeRegulatory)

	return err
}

type NullableMedicationKnowledgeRegulatory struct {
	value *MedicationKnowledgeRegulatory
	isSet bool
}

func (v NullableMedicationKnowledgeRegulatory) Get() *MedicationKnowledgeRegulatory {
	return v.value
}

func (v *NullableMedicationKnowledgeRegulatory) Set(val *MedicationKnowledgeRegulatory) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationKnowledgeRegulatory) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationKnowledgeRegulatory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationKnowledgeRegulatory(val *MedicationKnowledgeRegulatory) *NullableMedicationKnowledgeRegulatory {
	return &NullableMedicationKnowledgeRegulatory{value: val, isSet: true}
}

func (v NullableMedicationKnowledgeRegulatory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationKnowledgeRegulatory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


