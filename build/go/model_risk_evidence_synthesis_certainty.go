/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the RiskEvidenceSynthesisCertainty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskEvidenceSynthesisCertainty{}

// RiskEvidenceSynthesisCertainty The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
type RiskEvidenceSynthesisCertainty struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A rating of the certainty of the effect estimate.
	Rating []CodeableConcept `json:"rating,omitempty"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []Annotation `json:"note,omitempty"`
	// A description of a component of the overall certainty.
	CertaintySubcomponent []RiskEvidenceSynthesisCertaintySubcomponent `json:"certaintySubcomponent,omitempty"`
}

// NewRiskEvidenceSynthesisCertainty instantiates a new RiskEvidenceSynthesisCertainty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskEvidenceSynthesisCertainty() *RiskEvidenceSynthesisCertainty {
	this := RiskEvidenceSynthesisCertainty{}
	return &this
}

// NewRiskEvidenceSynthesisCertaintyWithDefaults instantiates a new RiskEvidenceSynthesisCertainty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskEvidenceSynthesisCertaintyWithDefaults() *RiskEvidenceSynthesisCertainty {
	this := RiskEvidenceSynthesisCertainty{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RiskEvidenceSynthesisCertainty) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *RiskEvidenceSynthesisCertainty) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *RiskEvidenceSynthesisCertainty) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetRating() []CodeableConcept {
	if o == nil || IsNil(o.Rating) {
		var ret []CodeableConcept
		return ret
	}
	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetRatingOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given []CodeableConcept and assigns it to the Rating field.
func (o *RiskEvidenceSynthesisCertainty) SetRating(v []CodeableConcept) {
	o.Rating = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *RiskEvidenceSynthesisCertainty) SetNote(v []Annotation) {
	o.Note = v
}

// GetCertaintySubcomponent returns the CertaintySubcomponent field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisCertainty) GetCertaintySubcomponent() []RiskEvidenceSynthesisCertaintySubcomponent {
	if o == nil || IsNil(o.CertaintySubcomponent) {
		var ret []RiskEvidenceSynthesisCertaintySubcomponent
		return ret
	}
	return o.CertaintySubcomponent
}

// GetCertaintySubcomponentOk returns a tuple with the CertaintySubcomponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisCertainty) GetCertaintySubcomponentOk() ([]RiskEvidenceSynthesisCertaintySubcomponent, bool) {
	if o == nil || IsNil(o.CertaintySubcomponent) {
		return nil, false
	}
	return o.CertaintySubcomponent, true
}

// HasCertaintySubcomponent returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisCertainty) HasCertaintySubcomponent() bool {
	if o != nil && !IsNil(o.CertaintySubcomponent) {
		return true
	}

	return false
}

// SetCertaintySubcomponent gets a reference to the given []RiskEvidenceSynthesisCertaintySubcomponent and assigns it to the CertaintySubcomponent field.
func (o *RiskEvidenceSynthesisCertainty) SetCertaintySubcomponent(v []RiskEvidenceSynthesisCertaintySubcomponent) {
	o.CertaintySubcomponent = v
}

func (o RiskEvidenceSynthesisCertainty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskEvidenceSynthesisCertainty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.CertaintySubcomponent) {
		toSerialize["certaintySubcomponent"] = o.CertaintySubcomponent
	}
	return toSerialize, nil
}

type NullableRiskEvidenceSynthesisCertainty struct {
	value *RiskEvidenceSynthesisCertainty
	isSet bool
}

func (v NullableRiskEvidenceSynthesisCertainty) Get() *RiskEvidenceSynthesisCertainty {
	return v.value
}

func (v *NullableRiskEvidenceSynthesisCertainty) Set(val *RiskEvidenceSynthesisCertainty) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskEvidenceSynthesisCertainty) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskEvidenceSynthesisCertainty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskEvidenceSynthesisCertainty(val *RiskEvidenceSynthesisCertainty) *NullableRiskEvidenceSynthesisCertainty {
	return &NullableRiskEvidenceSynthesisCertainty{value: val, isSet: true}
}

func (v NullableRiskEvidenceSynthesisCertainty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskEvidenceSynthesisCertainty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


