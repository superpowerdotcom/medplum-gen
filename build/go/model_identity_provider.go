/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentityProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProvider{}

// IdentityProvider External Identity Provider (IdP) configuration details.
type IdentityProvider struct {
	// A sequence of Unicode characters
	AuthorizeUrl string `json:"authorizeUrl"`
	// A sequence of Unicode characters
	TokenUrl string `json:"tokenUrl"`
	// Client Authentication method used by Clients to authenticate to the Authorization Server when using the Token Endpoint. If no method is registered, the default method is client_secret_basic.
	TokenAuthMethod *string `json:"tokenAuthMethod,omitempty"`
	// A sequence of Unicode characters
	UserInfoUrl string `json:"userInfoUrl"`
	// A sequence of Unicode characters
	ClientId string `json:"clientId"`
	// A sequence of Unicode characters
	ClientSecret string `json:"clientSecret"`
	// Value of \"true\" or \"false\"
	UsePkce *bool `json:"usePkce,omitempty"`
	// Value of \"true\" or \"false\"
	UseSubject *bool `json:"useSubject,omitempty"`
}

type _IdentityProvider IdentityProvider

// NewIdentityProvider instantiates a new IdentityProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProvider(authorizeUrl string, tokenUrl string, userInfoUrl string, clientId string, clientSecret string) *IdentityProvider {
	this := IdentityProvider{}
	this.AuthorizeUrl = authorizeUrl
	this.TokenUrl = tokenUrl
	this.UserInfoUrl = userInfoUrl
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	return &this
}

// NewIdentityProviderWithDefaults instantiates a new IdentityProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderWithDefaults() *IdentityProvider {
	this := IdentityProvider{}
	return &this
}

// GetAuthorizeUrl returns the AuthorizeUrl field value
func (o *IdentityProvider) GetAuthorizeUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizeUrl
}

// GetAuthorizeUrlOk returns a tuple with the AuthorizeUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetAuthorizeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizeUrl, true
}

// SetAuthorizeUrl sets field value
func (o *IdentityProvider) SetAuthorizeUrl(v string) {
	o.AuthorizeUrl = v
}

// GetTokenUrl returns the TokenUrl field value
func (o *IdentityProvider) GetTokenUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenUrl
}

// GetTokenUrlOk returns a tuple with the TokenUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetTokenUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenUrl, true
}

// SetTokenUrl sets field value
func (o *IdentityProvider) SetTokenUrl(v string) {
	o.TokenUrl = v
}

// GetTokenAuthMethod returns the TokenAuthMethod field value if set, zero value otherwise.
func (o *IdentityProvider) GetTokenAuthMethod() string {
	if o == nil || IsNil(o.TokenAuthMethod) {
		var ret string
		return ret
	}
	return *o.TokenAuthMethod
}

// GetTokenAuthMethodOk returns a tuple with the TokenAuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetTokenAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.TokenAuthMethod) {
		return nil, false
	}
	return o.TokenAuthMethod, true
}

// HasTokenAuthMethod returns a boolean if a field has been set.
func (o *IdentityProvider) HasTokenAuthMethod() bool {
	if o != nil && !IsNil(o.TokenAuthMethod) {
		return true
	}

	return false
}

// SetTokenAuthMethod gets a reference to the given string and assigns it to the TokenAuthMethod field.
func (o *IdentityProvider) SetTokenAuthMethod(v string) {
	o.TokenAuthMethod = &v
}

// GetUserInfoUrl returns the UserInfoUrl field value
func (o *IdentityProvider) GetUserInfoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserInfoUrl
}

// GetUserInfoUrlOk returns a tuple with the UserInfoUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetUserInfoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserInfoUrl, true
}

// SetUserInfoUrl sets field value
func (o *IdentityProvider) SetUserInfoUrl(v string) {
	o.UserInfoUrl = v
}

// GetClientId returns the ClientId field value
func (o *IdentityProvider) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *IdentityProvider) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *IdentityProvider) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *IdentityProvider) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetUsePkce returns the UsePkce field value if set, zero value otherwise.
func (o *IdentityProvider) GetUsePkce() bool {
	if o == nil || IsNil(o.UsePkce) {
		var ret bool
		return ret
	}
	return *o.UsePkce
}

// GetUsePkceOk returns a tuple with the UsePkce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetUsePkceOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePkce) {
		return nil, false
	}
	return o.UsePkce, true
}

// HasUsePkce returns a boolean if a field has been set.
func (o *IdentityProvider) HasUsePkce() bool {
	if o != nil && !IsNil(o.UsePkce) {
		return true
	}

	return false
}

// SetUsePkce gets a reference to the given bool and assigns it to the UsePkce field.
func (o *IdentityProvider) SetUsePkce(v bool) {
	o.UsePkce = &v
}

// GetUseSubject returns the UseSubject field value if set, zero value otherwise.
func (o *IdentityProvider) GetUseSubject() bool {
	if o == nil || IsNil(o.UseSubject) {
		var ret bool
		return ret
	}
	return *o.UseSubject
}

// GetUseSubjectOk returns a tuple with the UseSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetUseSubjectOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubject) {
		return nil, false
	}
	return o.UseSubject, true
}

// HasUseSubject returns a boolean if a field has been set.
func (o *IdentityProvider) HasUseSubject() bool {
	if o != nil && !IsNil(o.UseSubject) {
		return true
	}

	return false
}

// SetUseSubject gets a reference to the given bool and assigns it to the UseSubject field.
func (o *IdentityProvider) SetUseSubject(v bool) {
	o.UseSubject = &v
}

func (o IdentityProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authorizeUrl"] = o.AuthorizeUrl
	toSerialize["tokenUrl"] = o.TokenUrl
	if !IsNil(o.TokenAuthMethod) {
		toSerialize["tokenAuthMethod"] = o.TokenAuthMethod
	}
	toSerialize["userInfoUrl"] = o.UserInfoUrl
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientSecret"] = o.ClientSecret
	if !IsNil(o.UsePkce) {
		toSerialize["usePkce"] = o.UsePkce
	}
	if !IsNil(o.UseSubject) {
		toSerialize["useSubject"] = o.UseSubject
	}
	return toSerialize, nil
}

func (o *IdentityProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorizeUrl",
		"tokenUrl",
		"userInfoUrl",
		"clientId",
		"clientSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityProvider := _IdentityProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityProvider)

	if err != nil {
		return err
	}

	*o = IdentityProvider(varIdentityProvider)

	return err
}

type NullableIdentityProvider struct {
	value *IdentityProvider
	isSet bool
}

func (v NullableIdentityProvider) Get() *IdentityProvider {
	return v.value
}

func (v *NullableIdentityProvider) Set(val *IdentityProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProvider(val *IdentityProvider) *NullableIdentityProvider {
	return &NullableIdentityProvider{value: val, isSet: true}
}

func (v NullableIdentityProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


