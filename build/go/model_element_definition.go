/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ElementDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElementDefinition{}

// ElementDefinition Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Path *string `json:"path,omitempty"`
	// Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	Representation []string `json:"representation,omitempty"`
	// A sequence of Unicode characters
	SliceName *string `json:"sliceName,omitempty"`
	// Value of \"true\" or \"false\"
	SliceIsConstraining *bool `json:"sliceIsConstraining,omitempty"`
	// A sequence of Unicode characters
	Label *string `json:"label,omitempty"`
	// A code that has the same meaning as the element in a particular terminology.
	Code []Coding `json:"code,omitempty"`
	// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	Slicing *ElementDefinitionSlicing `json:"slicing,omitempty"`
	// A sequence of Unicode characters
	Short *string `json:"short,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Definition *string `json:"definition,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Comment *string `json:"comment,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Requirements *string `json:"requirements,omitempty"`
	// Identifies additional names by which this element might also be known.
	Alias []string `json:"alias,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	Min *float32 `json:"min,omitempty"`
	// A sequence of Unicode characters
	Max *string `json:"max,omitempty"`
	// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
	Base *ElementDefinitionBase `json:"base,omitempty"`
	// String of characters used to identify a name or a resource
	ContentReference *string `json:"contentReference,omitempty"`
	// The data type or resource that the value of this element is permitted to be.
	Type []ElementDefinitionType `json:"type,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueBase64Binary *string `json:"defaultValueBase64Binary,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueBoolean *bool `json:"defaultValueBoolean,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCanonical *string `json:"defaultValueCanonical,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCode *string `json:"defaultValueCode,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDate *string `json:"defaultValueDate,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDateTime *string `json:"defaultValueDateTime,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDecimal *float32 `json:"defaultValueDecimal,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueId *string `json:"defaultValueId,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueInstant *string `json:"defaultValueInstant,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueInteger *float32 `json:"defaultValueInteger,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueMarkdown *string `json:"defaultValueMarkdown,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueOid *string `json:"defaultValueOid,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValuePositiveInt *float32 `json:"defaultValuePositiveInt,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueString *string `json:"defaultValueString,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTime *string `json:"defaultValueTime,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUnsignedInt *float32 `json:"defaultValueUnsignedInt,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUri *string `json:"defaultValueUri,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUrl *string `json:"defaultValueUrl,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUuid *string `json:"defaultValueUuid,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAddress *Address `json:"defaultValueAddress,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAge *Age `json:"defaultValueAge,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAnnotation *Annotation `json:"defaultValueAnnotation,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAttachment *Attachment `json:"defaultValueAttachment,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCodeableConcept *CodeableConcept `json:"defaultValueCodeableConcept,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCoding *Coding `json:"defaultValueCoding,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContactPoint *ContactPoint `json:"defaultValueContactPoint,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCount *Count `json:"defaultValueCount,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDistance *Distance `json:"defaultValueDistance,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDuration *Duration `json:"defaultValueDuration,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueHumanName *HumanName `json:"defaultValueHumanName,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueIdentifier *Identifier `json:"defaultValueIdentifier,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueMoney *Money `json:"defaultValueMoney,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValuePeriod *Period `json:"defaultValuePeriod,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueQuantity *Quantity `json:"defaultValueQuantity,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRange *Range `json:"defaultValueRange,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRatio *Ratio `json:"defaultValueRatio,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueReference *Reference `json:"defaultValueReference,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueSampledData *SampledData `json:"defaultValueSampledData,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueSignature *Signature `json:"defaultValueSignature,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTiming *Timing `json:"defaultValueTiming,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContactDetail *ContactDetail `json:"defaultValueContactDetail,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContributor *Contributor `json:"defaultValueContributor,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDataRequirement *DataRequirement `json:"defaultValueDataRequirement,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueExpression *Expression `json:"defaultValueExpression,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueParameterDefinition *ParameterDefinition `json:"defaultValueParameterDefinition,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRelatedArtifact *RelatedArtifact `json:"defaultValueRelatedArtifact,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTriggerDefinition *TriggerDefinition `json:"defaultValueTriggerDefinition,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUsageContext *UsageContext `json:"defaultValueUsageContext,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDosage *Dosage `json:"defaultValueDosage,omitempty"`
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueMeta *Meta `json:"defaultValueMeta,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	MeaningWhenMissing *string `json:"meaningWhenMissing,omitempty"`
	// A sequence of Unicode characters
	OrderMeaning *string `json:"orderMeaning,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedBase64Binary *string `json:"fixedBase64Binary,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedBoolean *bool `json:"fixedBoolean,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCanonical *string `json:"fixedCanonical,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCode *string `json:"fixedCode,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDate *string `json:"fixedDate,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDateTime *string `json:"fixedDateTime,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDecimal *float32 `json:"fixedDecimal,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedId *string `json:"fixedId,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedInstant *string `json:"fixedInstant,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedInteger *float32 `json:"fixedInteger,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedMarkdown *string `json:"fixedMarkdown,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedOid *string `json:"fixedOid,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedPositiveInt *float32 `json:"fixedPositiveInt,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedString *string `json:"fixedString,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTime *string `json:"fixedTime,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUnsignedInt *float32 `json:"fixedUnsignedInt,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUri *string `json:"fixedUri,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUrl *string `json:"fixedUrl,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUuid *string `json:"fixedUuid,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAddress *Address `json:"fixedAddress,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAge *Age `json:"fixedAge,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAnnotation *Annotation `json:"fixedAnnotation,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAttachment *Attachment `json:"fixedAttachment,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCodeableConcept *CodeableConcept `json:"fixedCodeableConcept,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCoding *Coding `json:"fixedCoding,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContactPoint *ContactPoint `json:"fixedContactPoint,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCount *Count `json:"fixedCount,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDistance *Distance `json:"fixedDistance,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDuration *Duration `json:"fixedDuration,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedHumanName *HumanName `json:"fixedHumanName,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedIdentifier *Identifier `json:"fixedIdentifier,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedMoney *Money `json:"fixedMoney,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedPeriod *Period `json:"fixedPeriod,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedQuantity *Quantity `json:"fixedQuantity,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRange *Range `json:"fixedRange,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRatio *Ratio `json:"fixedRatio,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedReference *Reference `json:"fixedReference,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedSampledData *SampledData `json:"fixedSampledData,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedSignature *Signature `json:"fixedSignature,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTiming *Timing `json:"fixedTiming,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContactDetail *ContactDetail `json:"fixedContactDetail,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContributor *Contributor `json:"fixedContributor,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDataRequirement *DataRequirement `json:"fixedDataRequirement,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedExpression *Expression `json:"fixedExpression,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedParameterDefinition *ParameterDefinition `json:"fixedParameterDefinition,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRelatedArtifact *RelatedArtifact `json:"fixedRelatedArtifact,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTriggerDefinition *TriggerDefinition `json:"fixedTriggerDefinition,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUsageContext *UsageContext `json:"fixedUsageContext,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDosage *Dosage `json:"fixedDosage,omitempty"`
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedMeta *Meta `json:"fixedMeta,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternBase64Binary *string `json:"patternBase64Binary,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternBoolean *bool `json:"patternBoolean,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternCanonical *string `json:"patternCanonical,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternCode *string `json:"patternCode,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDate *string `json:"patternDate,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDateTime *string `json:"patternDateTime,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDecimal *float32 `json:"patternDecimal,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternId *string `json:"patternId,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternInstant *string `json:"patternInstant,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternInteger *float32 `json:"patternInteger,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternMarkdown *string `json:"patternMarkdown,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternOid *string `json:"patternOid,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternPositiveInt *float32 `json:"patternPositiveInt,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternString *string `json:"patternString,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternTime *string `json:"patternTime,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternUnsignedInt *float32 `json:"patternUnsignedInt,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternUri *string `json:"patternUri,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternUrl *string `json:"patternUrl,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternUuid *string `json:"patternUuid,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternAddress *Address `json:"patternAddress,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternAge *Age `json:"patternAge,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternAnnotation *Annotation `json:"patternAnnotation,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternAttachment *Attachment `json:"patternAttachment,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternCodeableConcept *CodeableConcept `json:"patternCodeableConcept,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternCoding *Coding `json:"patternCoding,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternContactPoint *ContactPoint `json:"patternContactPoint,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternCount *Count `json:"patternCount,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDistance *Distance `json:"patternDistance,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDuration *Duration `json:"patternDuration,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternHumanName *HumanName `json:"patternHumanName,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternIdentifier *Identifier `json:"patternIdentifier,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternMoney *Money `json:"patternMoney,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternPeriod *Period `json:"patternPeriod,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternQuantity *Quantity `json:"patternQuantity,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternRange *Range `json:"patternRange,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternRatio *Ratio `json:"patternRatio,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternReference *Reference `json:"patternReference,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternSampledData *SampledData `json:"patternSampledData,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternSignature *Signature `json:"patternSignature,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternTiming *Timing `json:"patternTiming,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternContactDetail *ContactDetail `json:"patternContactDetail,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternContributor *Contributor `json:"patternContributor,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDataRequirement *DataRequirement `json:"patternDataRequirement,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternExpression *Expression `json:"patternExpression,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternParameterDefinition *ParameterDefinition `json:"patternParameterDefinition,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternRelatedArtifact *RelatedArtifact `json:"patternRelatedArtifact,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternTriggerDefinition *TriggerDefinition `json:"patternTriggerDefinition,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternUsageContext *UsageContext `json:"patternUsageContext,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternDosage *Dosage `json:"patternDosage,omitempty"`
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
	PatternMeta *Meta `json:"patternMeta,omitempty"`
	// A sample value for this element demonstrating the type of information that would typically be found in the element.
	Example []ElementDefinitionExample `json:"example,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDate *string `json:"minValueDate,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDateTime *string `json:"minValueDateTime,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueInstant *string `json:"minValueInstant,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueTime *string `json:"minValueTime,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDecimal *float32 `json:"minValueDecimal,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueInteger *float32 `json:"minValueInteger,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValuePositiveInt *float32 `json:"minValuePositiveInt,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueUnsignedInt *float32 `json:"minValueUnsignedInt,omitempty"`
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueQuantity *Quantity `json:"minValueQuantity,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDate *string `json:"maxValueDate,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDateTime *string `json:"maxValueDateTime,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueInstant *string `json:"maxValueInstant,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueTime *string `json:"maxValueTime,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDecimal *float32 `json:"maxValueDecimal,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueInteger *float32 `json:"maxValueInteger,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValuePositiveInt *float32 `json:"maxValuePositiveInt,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueUnsignedInt *float32 `json:"maxValueUnsignedInt,omitempty"`
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueQuantity *Quantity `json:"maxValueQuantity,omitempty"`
	// A whole number
	MaxLength *float32 `json:"maxLength,omitempty"`
	// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
	Condition []string `json:"condition,omitempty"`
	// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	Constraint []ElementDefinitionConstraint `json:"constraint,omitempty"`
	// Value of \"true\" or \"false\"
	MustSupport *bool `json:"mustSupport,omitempty"`
	// Value of \"true\" or \"false\"
	IsModifier *bool `json:"isModifier,omitempty"`
	// A sequence of Unicode characters
	IsModifierReason *string `json:"isModifierReason,omitempty"`
	// Value of \"true\" or \"false\"
	IsSummary *bool `json:"isSummary,omitempty"`
	// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	Binding *ElementDefinitionBinding `json:"binding,omitempty"`
	// Identifies a concept from an external specification that roughly corresponds to this element.
	Mapping []ElementDefinitionMapping `json:"mapping,omitempty"`
}

// NewElementDefinition instantiates a new ElementDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementDefinition() *ElementDefinition {
	this := ElementDefinition{}
	return &this
}

// NewElementDefinitionWithDefaults instantiates a new ElementDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementDefinitionWithDefaults() *ElementDefinition {
	this := ElementDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ElementDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ElementDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ElementDefinition) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ElementDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ElementDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ElementDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ElementDefinition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ElementDefinition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ElementDefinition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ElementDefinition) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ElementDefinition) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ElementDefinition) SetPath(v string) {
	o.Path = &v
}

// GetRepresentation returns the Representation field value if set, zero value otherwise.
func (o *ElementDefinition) GetRepresentation() []string {
	if o == nil || IsNil(o.Representation) {
		var ret []string
		return ret
	}
	return o.Representation
}

// GetRepresentationOk returns a tuple with the Representation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetRepresentationOk() ([]string, bool) {
	if o == nil || IsNil(o.Representation) {
		return nil, false
	}
	return o.Representation, true
}

// HasRepresentation returns a boolean if a field has been set.
func (o *ElementDefinition) HasRepresentation() bool {
	if o != nil && !IsNil(o.Representation) {
		return true
	}

	return false
}

// SetRepresentation gets a reference to the given []string and assigns it to the Representation field.
func (o *ElementDefinition) SetRepresentation(v []string) {
	o.Representation = v
}

// GetSliceName returns the SliceName field value if set, zero value otherwise.
func (o *ElementDefinition) GetSliceName() string {
	if o == nil || IsNil(o.SliceName) {
		var ret string
		return ret
	}
	return *o.SliceName
}

// GetSliceNameOk returns a tuple with the SliceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetSliceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SliceName) {
		return nil, false
	}
	return o.SliceName, true
}

// HasSliceName returns a boolean if a field has been set.
func (o *ElementDefinition) HasSliceName() bool {
	if o != nil && !IsNil(o.SliceName) {
		return true
	}

	return false
}

// SetSliceName gets a reference to the given string and assigns it to the SliceName field.
func (o *ElementDefinition) SetSliceName(v string) {
	o.SliceName = &v
}

// GetSliceIsConstraining returns the SliceIsConstraining field value if set, zero value otherwise.
func (o *ElementDefinition) GetSliceIsConstraining() bool {
	if o == nil || IsNil(o.SliceIsConstraining) {
		var ret bool
		return ret
	}
	return *o.SliceIsConstraining
}

// GetSliceIsConstrainingOk returns a tuple with the SliceIsConstraining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetSliceIsConstrainingOk() (*bool, bool) {
	if o == nil || IsNil(o.SliceIsConstraining) {
		return nil, false
	}
	return o.SliceIsConstraining, true
}

// HasSliceIsConstraining returns a boolean if a field has been set.
func (o *ElementDefinition) HasSliceIsConstraining() bool {
	if o != nil && !IsNil(o.SliceIsConstraining) {
		return true
	}

	return false
}

// SetSliceIsConstraining gets a reference to the given bool and assigns it to the SliceIsConstraining field.
func (o *ElementDefinition) SetSliceIsConstraining(v bool) {
	o.SliceIsConstraining = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ElementDefinition) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ElementDefinition) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ElementDefinition) SetLabel(v string) {
	o.Label = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ElementDefinition) GetCode() []Coding {
	if o == nil || IsNil(o.Code) {
		var ret []Coding
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetCodeOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ElementDefinition) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []Coding and assigns it to the Code field.
func (o *ElementDefinition) SetCode(v []Coding) {
	o.Code = v
}

// GetSlicing returns the Slicing field value if set, zero value otherwise.
func (o *ElementDefinition) GetSlicing() ElementDefinitionSlicing {
	if o == nil || IsNil(o.Slicing) {
		var ret ElementDefinitionSlicing
		return ret
	}
	return *o.Slicing
}

// GetSlicingOk returns a tuple with the Slicing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetSlicingOk() (*ElementDefinitionSlicing, bool) {
	if o == nil || IsNil(o.Slicing) {
		return nil, false
	}
	return o.Slicing, true
}

// HasSlicing returns a boolean if a field has been set.
func (o *ElementDefinition) HasSlicing() bool {
	if o != nil && !IsNil(o.Slicing) {
		return true
	}

	return false
}

// SetSlicing gets a reference to the given ElementDefinitionSlicing and assigns it to the Slicing field.
func (o *ElementDefinition) SetSlicing(v ElementDefinitionSlicing) {
	o.Slicing = &v
}

// GetShort returns the Short field value if set, zero value otherwise.
func (o *ElementDefinition) GetShort() string {
	if o == nil || IsNil(o.Short) {
		var ret string
		return ret
	}
	return *o.Short
}

// GetShortOk returns a tuple with the Short field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetShortOk() (*string, bool) {
	if o == nil || IsNil(o.Short) {
		return nil, false
	}
	return o.Short, true
}

// HasShort returns a boolean if a field has been set.
func (o *ElementDefinition) HasShort() bool {
	if o != nil && !IsNil(o.Short) {
		return true
	}

	return false
}

// SetShort gets a reference to the given string and assigns it to the Short field.
func (o *ElementDefinition) SetShort(v string) {
	o.Short = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *ElementDefinition) SetDefinition(v string) {
	o.Definition = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ElementDefinition) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ElementDefinition) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ElementDefinition) SetComment(v string) {
	o.Comment = &v
}

// GetRequirements returns the Requirements field value if set, zero value otherwise.
func (o *ElementDefinition) GetRequirements() string {
	if o == nil || IsNil(o.Requirements) {
		var ret string
		return ret
	}
	return *o.Requirements
}

// GetRequirementsOk returns a tuple with the Requirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetRequirementsOk() (*string, bool) {
	if o == nil || IsNil(o.Requirements) {
		return nil, false
	}
	return o.Requirements, true
}

// HasRequirements returns a boolean if a field has been set.
func (o *ElementDefinition) HasRequirements() bool {
	if o != nil && !IsNil(o.Requirements) {
		return true
	}

	return false
}

// SetRequirements gets a reference to the given string and assigns it to the Requirements field.
func (o *ElementDefinition) SetRequirements(v string) {
	o.Requirements = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ElementDefinition) GetAlias() []string {
	if o == nil || IsNil(o.Alias) {
		var ret []string
		return ret
	}
	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetAliasOk() ([]string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ElementDefinition) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given []string and assigns it to the Alias field.
func (o *ElementDefinition) SetAlias(v []string) {
	o.Alias = v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *ElementDefinition) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *ElementDefinition) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *ElementDefinition) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ElementDefinition) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ElementDefinition) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *ElementDefinition) SetMax(v string) {
	o.Max = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *ElementDefinition) GetBase() ElementDefinitionBase {
	if o == nil || IsNil(o.Base) {
		var ret ElementDefinitionBase
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetBaseOk() (*ElementDefinitionBase, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *ElementDefinition) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given ElementDefinitionBase and assigns it to the Base field.
func (o *ElementDefinition) SetBase(v ElementDefinitionBase) {
	o.Base = &v
}

// GetContentReference returns the ContentReference field value if set, zero value otherwise.
func (o *ElementDefinition) GetContentReference() string {
	if o == nil || IsNil(o.ContentReference) {
		var ret string
		return ret
	}
	return *o.ContentReference
}

// GetContentReferenceOk returns a tuple with the ContentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetContentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ContentReference) {
		return nil, false
	}
	return o.ContentReference, true
}

// HasContentReference returns a boolean if a field has been set.
func (o *ElementDefinition) HasContentReference() bool {
	if o != nil && !IsNil(o.ContentReference) {
		return true
	}

	return false
}

// SetContentReference gets a reference to the given string and assigns it to the ContentReference field.
func (o *ElementDefinition) SetContentReference(v string) {
	o.ContentReference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ElementDefinition) GetType() []ElementDefinitionType {
	if o == nil || IsNil(o.Type) {
		var ret []ElementDefinitionType
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetTypeOk() ([]ElementDefinitionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ElementDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []ElementDefinitionType and assigns it to the Type field.
func (o *ElementDefinition) SetType(v []ElementDefinitionType) {
	o.Type = v
}

// GetDefaultValueBase64Binary returns the DefaultValueBase64Binary field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueBase64Binary() string {
	if o == nil || IsNil(o.DefaultValueBase64Binary) {
		var ret string
		return ret
	}
	return *o.DefaultValueBase64Binary
}

// GetDefaultValueBase64BinaryOk returns a tuple with the DefaultValueBase64Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueBase64BinaryOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueBase64Binary) {
		return nil, false
	}
	return o.DefaultValueBase64Binary, true
}

// HasDefaultValueBase64Binary returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueBase64Binary() bool {
	if o != nil && !IsNil(o.DefaultValueBase64Binary) {
		return true
	}

	return false
}

// SetDefaultValueBase64Binary gets a reference to the given string and assigns it to the DefaultValueBase64Binary field.
func (o *ElementDefinition) SetDefaultValueBase64Binary(v string) {
	o.DefaultValueBase64Binary = &v
}

// GetDefaultValueBoolean returns the DefaultValueBoolean field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueBoolean() bool {
	if o == nil || IsNil(o.DefaultValueBoolean) {
		var ret bool
		return ret
	}
	return *o.DefaultValueBoolean
}

// GetDefaultValueBooleanOk returns a tuple with the DefaultValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultValueBoolean) {
		return nil, false
	}
	return o.DefaultValueBoolean, true
}

// HasDefaultValueBoolean returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueBoolean() bool {
	if o != nil && !IsNil(o.DefaultValueBoolean) {
		return true
	}

	return false
}

// SetDefaultValueBoolean gets a reference to the given bool and assigns it to the DefaultValueBoolean field.
func (o *ElementDefinition) SetDefaultValueBoolean(v bool) {
	o.DefaultValueBoolean = &v
}

// GetDefaultValueCanonical returns the DefaultValueCanonical field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueCanonical() string {
	if o == nil || IsNil(o.DefaultValueCanonical) {
		var ret string
		return ret
	}
	return *o.DefaultValueCanonical
}

// GetDefaultValueCanonicalOk returns a tuple with the DefaultValueCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueCanonical) {
		return nil, false
	}
	return o.DefaultValueCanonical, true
}

// HasDefaultValueCanonical returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueCanonical() bool {
	if o != nil && !IsNil(o.DefaultValueCanonical) {
		return true
	}

	return false
}

// SetDefaultValueCanonical gets a reference to the given string and assigns it to the DefaultValueCanonical field.
func (o *ElementDefinition) SetDefaultValueCanonical(v string) {
	o.DefaultValueCanonical = &v
}

// GetDefaultValueCode returns the DefaultValueCode field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueCode() string {
	if o == nil || IsNil(o.DefaultValueCode) {
		var ret string
		return ret
	}
	return *o.DefaultValueCode
}

// GetDefaultValueCodeOk returns a tuple with the DefaultValueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueCode) {
		return nil, false
	}
	return o.DefaultValueCode, true
}

// HasDefaultValueCode returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueCode() bool {
	if o != nil && !IsNil(o.DefaultValueCode) {
		return true
	}

	return false
}

// SetDefaultValueCode gets a reference to the given string and assigns it to the DefaultValueCode field.
func (o *ElementDefinition) SetDefaultValueCode(v string) {
	o.DefaultValueCode = &v
}

// GetDefaultValueDate returns the DefaultValueDate field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDate() string {
	if o == nil || IsNil(o.DefaultValueDate) {
		var ret string
		return ret
	}
	return *o.DefaultValueDate
}

// GetDefaultValueDateOk returns a tuple with the DefaultValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueDate) {
		return nil, false
	}
	return o.DefaultValueDate, true
}

// HasDefaultValueDate returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDate() bool {
	if o != nil && !IsNil(o.DefaultValueDate) {
		return true
	}

	return false
}

// SetDefaultValueDate gets a reference to the given string and assigns it to the DefaultValueDate field.
func (o *ElementDefinition) SetDefaultValueDate(v string) {
	o.DefaultValueDate = &v
}

// GetDefaultValueDateTime returns the DefaultValueDateTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDateTime() string {
	if o == nil || IsNil(o.DefaultValueDateTime) {
		var ret string
		return ret
	}
	return *o.DefaultValueDateTime
}

// GetDefaultValueDateTimeOk returns a tuple with the DefaultValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueDateTime) {
		return nil, false
	}
	return o.DefaultValueDateTime, true
}

// HasDefaultValueDateTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDateTime() bool {
	if o != nil && !IsNil(o.DefaultValueDateTime) {
		return true
	}

	return false
}

// SetDefaultValueDateTime gets a reference to the given string and assigns it to the DefaultValueDateTime field.
func (o *ElementDefinition) SetDefaultValueDateTime(v string) {
	o.DefaultValueDateTime = &v
}

// GetDefaultValueDecimal returns the DefaultValueDecimal field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDecimal() float32 {
	if o == nil || IsNil(o.DefaultValueDecimal) {
		var ret float32
		return ret
	}
	return *o.DefaultValueDecimal
}

// GetDefaultValueDecimalOk returns a tuple with the DefaultValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueDecimal) {
		return nil, false
	}
	return o.DefaultValueDecimal, true
}

// HasDefaultValueDecimal returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDecimal() bool {
	if o != nil && !IsNil(o.DefaultValueDecimal) {
		return true
	}

	return false
}

// SetDefaultValueDecimal gets a reference to the given float32 and assigns it to the DefaultValueDecimal field.
func (o *ElementDefinition) SetDefaultValueDecimal(v float32) {
	o.DefaultValueDecimal = &v
}

// GetDefaultValueId returns the DefaultValueId field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueId() string {
	if o == nil || IsNil(o.DefaultValueId) {
		var ret string
		return ret
	}
	return *o.DefaultValueId
}

// GetDefaultValueIdOk returns a tuple with the DefaultValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueId) {
		return nil, false
	}
	return o.DefaultValueId, true
}

// HasDefaultValueId returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueId() bool {
	if o != nil && !IsNil(o.DefaultValueId) {
		return true
	}

	return false
}

// SetDefaultValueId gets a reference to the given string and assigns it to the DefaultValueId field.
func (o *ElementDefinition) SetDefaultValueId(v string) {
	o.DefaultValueId = &v
}

// GetDefaultValueInstant returns the DefaultValueInstant field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueInstant() string {
	if o == nil || IsNil(o.DefaultValueInstant) {
		var ret string
		return ret
	}
	return *o.DefaultValueInstant
}

// GetDefaultValueInstantOk returns a tuple with the DefaultValueInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueInstantOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueInstant) {
		return nil, false
	}
	return o.DefaultValueInstant, true
}

// HasDefaultValueInstant returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueInstant() bool {
	if o != nil && !IsNil(o.DefaultValueInstant) {
		return true
	}

	return false
}

// SetDefaultValueInstant gets a reference to the given string and assigns it to the DefaultValueInstant field.
func (o *ElementDefinition) SetDefaultValueInstant(v string) {
	o.DefaultValueInstant = &v
}

// GetDefaultValueInteger returns the DefaultValueInteger field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueInteger() float32 {
	if o == nil || IsNil(o.DefaultValueInteger) {
		var ret float32
		return ret
	}
	return *o.DefaultValueInteger
}

// GetDefaultValueIntegerOk returns a tuple with the DefaultValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueInteger) {
		return nil, false
	}
	return o.DefaultValueInteger, true
}

// HasDefaultValueInteger returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueInteger() bool {
	if o != nil && !IsNil(o.DefaultValueInteger) {
		return true
	}

	return false
}

// SetDefaultValueInteger gets a reference to the given float32 and assigns it to the DefaultValueInteger field.
func (o *ElementDefinition) SetDefaultValueInteger(v float32) {
	o.DefaultValueInteger = &v
}

// GetDefaultValueMarkdown returns the DefaultValueMarkdown field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueMarkdown() string {
	if o == nil || IsNil(o.DefaultValueMarkdown) {
		var ret string
		return ret
	}
	return *o.DefaultValueMarkdown
}

// GetDefaultValueMarkdownOk returns a tuple with the DefaultValueMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueMarkdown) {
		return nil, false
	}
	return o.DefaultValueMarkdown, true
}

// HasDefaultValueMarkdown returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueMarkdown() bool {
	if o != nil && !IsNil(o.DefaultValueMarkdown) {
		return true
	}

	return false
}

// SetDefaultValueMarkdown gets a reference to the given string and assigns it to the DefaultValueMarkdown field.
func (o *ElementDefinition) SetDefaultValueMarkdown(v string) {
	o.DefaultValueMarkdown = &v
}

// GetDefaultValueOid returns the DefaultValueOid field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueOid() string {
	if o == nil || IsNil(o.DefaultValueOid) {
		var ret string
		return ret
	}
	return *o.DefaultValueOid
}

// GetDefaultValueOidOk returns a tuple with the DefaultValueOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueOidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueOid) {
		return nil, false
	}
	return o.DefaultValueOid, true
}

// HasDefaultValueOid returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueOid() bool {
	if o != nil && !IsNil(o.DefaultValueOid) {
		return true
	}

	return false
}

// SetDefaultValueOid gets a reference to the given string and assigns it to the DefaultValueOid field.
func (o *ElementDefinition) SetDefaultValueOid(v string) {
	o.DefaultValueOid = &v
}

// GetDefaultValuePositiveInt returns the DefaultValuePositiveInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValuePositiveInt() float32 {
	if o == nil || IsNil(o.DefaultValuePositiveInt) {
		var ret float32
		return ret
	}
	return *o.DefaultValuePositiveInt
}

// GetDefaultValuePositiveIntOk returns a tuple with the DefaultValuePositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValuePositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValuePositiveInt) {
		return nil, false
	}
	return o.DefaultValuePositiveInt, true
}

// HasDefaultValuePositiveInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValuePositiveInt() bool {
	if o != nil && !IsNil(o.DefaultValuePositiveInt) {
		return true
	}

	return false
}

// SetDefaultValuePositiveInt gets a reference to the given float32 and assigns it to the DefaultValuePositiveInt field.
func (o *ElementDefinition) SetDefaultValuePositiveInt(v float32) {
	o.DefaultValuePositiveInt = &v
}

// GetDefaultValueString returns the DefaultValueString field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueString() string {
	if o == nil || IsNil(o.DefaultValueString) {
		var ret string
		return ret
	}
	return *o.DefaultValueString
}

// GetDefaultValueStringOk returns a tuple with the DefaultValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueString) {
		return nil, false
	}
	return o.DefaultValueString, true
}

// HasDefaultValueString returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueString() bool {
	if o != nil && !IsNil(o.DefaultValueString) {
		return true
	}

	return false
}

// SetDefaultValueString gets a reference to the given string and assigns it to the DefaultValueString field.
func (o *ElementDefinition) SetDefaultValueString(v string) {
	o.DefaultValueString = &v
}

// GetDefaultValueTime returns the DefaultValueTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueTime() string {
	if o == nil || IsNil(o.DefaultValueTime) {
		var ret string
		return ret
	}
	return *o.DefaultValueTime
}

// GetDefaultValueTimeOk returns a tuple with the DefaultValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueTime) {
		return nil, false
	}
	return o.DefaultValueTime, true
}

// HasDefaultValueTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueTime() bool {
	if o != nil && !IsNil(o.DefaultValueTime) {
		return true
	}

	return false
}

// SetDefaultValueTime gets a reference to the given string and assigns it to the DefaultValueTime field.
func (o *ElementDefinition) SetDefaultValueTime(v string) {
	o.DefaultValueTime = &v
}

// GetDefaultValueUnsignedInt returns the DefaultValueUnsignedInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueUnsignedInt() float32 {
	if o == nil || IsNil(o.DefaultValueUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.DefaultValueUnsignedInt
}

// GetDefaultValueUnsignedIntOk returns a tuple with the DefaultValueUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueUnsignedInt) {
		return nil, false
	}
	return o.DefaultValueUnsignedInt, true
}

// HasDefaultValueUnsignedInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueUnsignedInt() bool {
	if o != nil && !IsNil(o.DefaultValueUnsignedInt) {
		return true
	}

	return false
}

// SetDefaultValueUnsignedInt gets a reference to the given float32 and assigns it to the DefaultValueUnsignedInt field.
func (o *ElementDefinition) SetDefaultValueUnsignedInt(v float32) {
	o.DefaultValueUnsignedInt = &v
}

// GetDefaultValueUri returns the DefaultValueUri field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueUri() string {
	if o == nil || IsNil(o.DefaultValueUri) {
		var ret string
		return ret
	}
	return *o.DefaultValueUri
}

// GetDefaultValueUriOk returns a tuple with the DefaultValueUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueUriOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUri) {
		return nil, false
	}
	return o.DefaultValueUri, true
}

// HasDefaultValueUri returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueUri() bool {
	if o != nil && !IsNil(o.DefaultValueUri) {
		return true
	}

	return false
}

// SetDefaultValueUri gets a reference to the given string and assigns it to the DefaultValueUri field.
func (o *ElementDefinition) SetDefaultValueUri(v string) {
	o.DefaultValueUri = &v
}

// GetDefaultValueUrl returns the DefaultValueUrl field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueUrl() string {
	if o == nil || IsNil(o.DefaultValueUrl) {
		var ret string
		return ret
	}
	return *o.DefaultValueUrl
}

// GetDefaultValueUrlOk returns a tuple with the DefaultValueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUrl) {
		return nil, false
	}
	return o.DefaultValueUrl, true
}

// HasDefaultValueUrl returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueUrl() bool {
	if o != nil && !IsNil(o.DefaultValueUrl) {
		return true
	}

	return false
}

// SetDefaultValueUrl gets a reference to the given string and assigns it to the DefaultValueUrl field.
func (o *ElementDefinition) SetDefaultValueUrl(v string) {
	o.DefaultValueUrl = &v
}

// GetDefaultValueUuid returns the DefaultValueUuid field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueUuid() string {
	if o == nil || IsNil(o.DefaultValueUuid) {
		var ret string
		return ret
	}
	return *o.DefaultValueUuid
}

// GetDefaultValueUuidOk returns a tuple with the DefaultValueUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUuid) {
		return nil, false
	}
	return o.DefaultValueUuid, true
}

// HasDefaultValueUuid returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueUuid() bool {
	if o != nil && !IsNil(o.DefaultValueUuid) {
		return true
	}

	return false
}

// SetDefaultValueUuid gets a reference to the given string and assigns it to the DefaultValueUuid field.
func (o *ElementDefinition) SetDefaultValueUuid(v string) {
	o.DefaultValueUuid = &v
}

// GetDefaultValueAddress returns the DefaultValueAddress field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueAddress() Address {
	if o == nil || IsNil(o.DefaultValueAddress) {
		var ret Address
		return ret
	}
	return *o.DefaultValueAddress
}

// GetDefaultValueAddressOk returns a tuple with the DefaultValueAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.DefaultValueAddress) {
		return nil, false
	}
	return o.DefaultValueAddress, true
}

// HasDefaultValueAddress returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueAddress() bool {
	if o != nil && !IsNil(o.DefaultValueAddress) {
		return true
	}

	return false
}

// SetDefaultValueAddress gets a reference to the given Address and assigns it to the DefaultValueAddress field.
func (o *ElementDefinition) SetDefaultValueAddress(v Address) {
	o.DefaultValueAddress = &v
}

// GetDefaultValueAge returns the DefaultValueAge field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueAge() Age {
	if o == nil || IsNil(o.DefaultValueAge) {
		var ret Age
		return ret
	}
	return *o.DefaultValueAge
}

// GetDefaultValueAgeOk returns a tuple with the DefaultValueAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.DefaultValueAge) {
		return nil, false
	}
	return o.DefaultValueAge, true
}

// HasDefaultValueAge returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueAge() bool {
	if o != nil && !IsNil(o.DefaultValueAge) {
		return true
	}

	return false
}

// SetDefaultValueAge gets a reference to the given Age and assigns it to the DefaultValueAge field.
func (o *ElementDefinition) SetDefaultValueAge(v Age) {
	o.DefaultValueAge = &v
}

// GetDefaultValueAnnotation returns the DefaultValueAnnotation field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueAnnotation() Annotation {
	if o == nil || IsNil(o.DefaultValueAnnotation) {
		var ret Annotation
		return ret
	}
	return *o.DefaultValueAnnotation
}

// GetDefaultValueAnnotationOk returns a tuple with the DefaultValueAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueAnnotationOk() (*Annotation, bool) {
	if o == nil || IsNil(o.DefaultValueAnnotation) {
		return nil, false
	}
	return o.DefaultValueAnnotation, true
}

// HasDefaultValueAnnotation returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueAnnotation() bool {
	if o != nil && !IsNil(o.DefaultValueAnnotation) {
		return true
	}

	return false
}

// SetDefaultValueAnnotation gets a reference to the given Annotation and assigns it to the DefaultValueAnnotation field.
func (o *ElementDefinition) SetDefaultValueAnnotation(v Annotation) {
	o.DefaultValueAnnotation = &v
}

// GetDefaultValueAttachment returns the DefaultValueAttachment field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueAttachment() Attachment {
	if o == nil || IsNil(o.DefaultValueAttachment) {
		var ret Attachment
		return ret
	}
	return *o.DefaultValueAttachment
}

// GetDefaultValueAttachmentOk returns a tuple with the DefaultValueAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.DefaultValueAttachment) {
		return nil, false
	}
	return o.DefaultValueAttachment, true
}

// HasDefaultValueAttachment returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueAttachment() bool {
	if o != nil && !IsNil(o.DefaultValueAttachment) {
		return true
	}

	return false
}

// SetDefaultValueAttachment gets a reference to the given Attachment and assigns it to the DefaultValueAttachment field.
func (o *ElementDefinition) SetDefaultValueAttachment(v Attachment) {
	o.DefaultValueAttachment = &v
}

// GetDefaultValueCodeableConcept returns the DefaultValueCodeableConcept field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DefaultValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DefaultValueCodeableConcept
}

// GetDefaultValueCodeableConceptOk returns a tuple with the DefaultValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DefaultValueCodeableConcept) {
		return nil, false
	}
	return o.DefaultValueCodeableConcept, true
}

// HasDefaultValueCodeableConcept returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueCodeableConcept() bool {
	if o != nil && !IsNil(o.DefaultValueCodeableConcept) {
		return true
	}

	return false
}

// SetDefaultValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DefaultValueCodeableConcept field.
func (o *ElementDefinition) SetDefaultValueCodeableConcept(v CodeableConcept) {
	o.DefaultValueCodeableConcept = &v
}

// GetDefaultValueCoding returns the DefaultValueCoding field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueCoding() Coding {
	if o == nil || IsNil(o.DefaultValueCoding) {
		var ret Coding
		return ret
	}
	return *o.DefaultValueCoding
}

// GetDefaultValueCodingOk returns a tuple with the DefaultValueCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.DefaultValueCoding) {
		return nil, false
	}
	return o.DefaultValueCoding, true
}

// HasDefaultValueCoding returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueCoding() bool {
	if o != nil && !IsNil(o.DefaultValueCoding) {
		return true
	}

	return false
}

// SetDefaultValueCoding gets a reference to the given Coding and assigns it to the DefaultValueCoding field.
func (o *ElementDefinition) SetDefaultValueCoding(v Coding) {
	o.DefaultValueCoding = &v
}

// GetDefaultValueContactPoint returns the DefaultValueContactPoint field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueContactPoint() ContactPoint {
	if o == nil || IsNil(o.DefaultValueContactPoint) {
		var ret ContactPoint
		return ret
	}
	return *o.DefaultValueContactPoint
}

// GetDefaultValueContactPointOk returns a tuple with the DefaultValueContactPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueContactPointOk() (*ContactPoint, bool) {
	if o == nil || IsNil(o.DefaultValueContactPoint) {
		return nil, false
	}
	return o.DefaultValueContactPoint, true
}

// HasDefaultValueContactPoint returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueContactPoint() bool {
	if o != nil && !IsNil(o.DefaultValueContactPoint) {
		return true
	}

	return false
}

// SetDefaultValueContactPoint gets a reference to the given ContactPoint and assigns it to the DefaultValueContactPoint field.
func (o *ElementDefinition) SetDefaultValueContactPoint(v ContactPoint) {
	o.DefaultValueContactPoint = &v
}

// GetDefaultValueCount returns the DefaultValueCount field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueCount() Count {
	if o == nil || IsNil(o.DefaultValueCount) {
		var ret Count
		return ret
	}
	return *o.DefaultValueCount
}

// GetDefaultValueCountOk returns a tuple with the DefaultValueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueCountOk() (*Count, bool) {
	if o == nil || IsNil(o.DefaultValueCount) {
		return nil, false
	}
	return o.DefaultValueCount, true
}

// HasDefaultValueCount returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueCount() bool {
	if o != nil && !IsNil(o.DefaultValueCount) {
		return true
	}

	return false
}

// SetDefaultValueCount gets a reference to the given Count and assigns it to the DefaultValueCount field.
func (o *ElementDefinition) SetDefaultValueCount(v Count) {
	o.DefaultValueCount = &v
}

// GetDefaultValueDistance returns the DefaultValueDistance field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDistance() Distance {
	if o == nil || IsNil(o.DefaultValueDistance) {
		var ret Distance
		return ret
	}
	return *o.DefaultValueDistance
}

// GetDefaultValueDistanceOk returns a tuple with the DefaultValueDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDistanceOk() (*Distance, bool) {
	if o == nil || IsNil(o.DefaultValueDistance) {
		return nil, false
	}
	return o.DefaultValueDistance, true
}

// HasDefaultValueDistance returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDistance() bool {
	if o != nil && !IsNil(o.DefaultValueDistance) {
		return true
	}

	return false
}

// SetDefaultValueDistance gets a reference to the given Distance and assigns it to the DefaultValueDistance field.
func (o *ElementDefinition) SetDefaultValueDistance(v Distance) {
	o.DefaultValueDistance = &v
}

// GetDefaultValueDuration returns the DefaultValueDuration field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDuration() Duration {
	if o == nil || IsNil(o.DefaultValueDuration) {
		var ret Duration
		return ret
	}
	return *o.DefaultValueDuration
}

// GetDefaultValueDurationOk returns a tuple with the DefaultValueDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.DefaultValueDuration) {
		return nil, false
	}
	return o.DefaultValueDuration, true
}

// HasDefaultValueDuration returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDuration() bool {
	if o != nil && !IsNil(o.DefaultValueDuration) {
		return true
	}

	return false
}

// SetDefaultValueDuration gets a reference to the given Duration and assigns it to the DefaultValueDuration field.
func (o *ElementDefinition) SetDefaultValueDuration(v Duration) {
	o.DefaultValueDuration = &v
}

// GetDefaultValueHumanName returns the DefaultValueHumanName field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueHumanName() HumanName {
	if o == nil || IsNil(o.DefaultValueHumanName) {
		var ret HumanName
		return ret
	}
	return *o.DefaultValueHumanName
}

// GetDefaultValueHumanNameOk returns a tuple with the DefaultValueHumanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueHumanNameOk() (*HumanName, bool) {
	if o == nil || IsNil(o.DefaultValueHumanName) {
		return nil, false
	}
	return o.DefaultValueHumanName, true
}

// HasDefaultValueHumanName returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueHumanName() bool {
	if o != nil && !IsNil(o.DefaultValueHumanName) {
		return true
	}

	return false
}

// SetDefaultValueHumanName gets a reference to the given HumanName and assigns it to the DefaultValueHumanName field.
func (o *ElementDefinition) SetDefaultValueHumanName(v HumanName) {
	o.DefaultValueHumanName = &v
}

// GetDefaultValueIdentifier returns the DefaultValueIdentifier field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueIdentifier() Identifier {
	if o == nil || IsNil(o.DefaultValueIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.DefaultValueIdentifier
}

// GetDefaultValueIdentifierOk returns a tuple with the DefaultValueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.DefaultValueIdentifier) {
		return nil, false
	}
	return o.DefaultValueIdentifier, true
}

// HasDefaultValueIdentifier returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueIdentifier() bool {
	if o != nil && !IsNil(o.DefaultValueIdentifier) {
		return true
	}

	return false
}

// SetDefaultValueIdentifier gets a reference to the given Identifier and assigns it to the DefaultValueIdentifier field.
func (o *ElementDefinition) SetDefaultValueIdentifier(v Identifier) {
	o.DefaultValueIdentifier = &v
}

// GetDefaultValueMoney returns the DefaultValueMoney field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueMoney() Money {
	if o == nil || IsNil(o.DefaultValueMoney) {
		var ret Money
		return ret
	}
	return *o.DefaultValueMoney
}

// GetDefaultValueMoneyOk returns a tuple with the DefaultValueMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.DefaultValueMoney) {
		return nil, false
	}
	return o.DefaultValueMoney, true
}

// HasDefaultValueMoney returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueMoney() bool {
	if o != nil && !IsNil(o.DefaultValueMoney) {
		return true
	}

	return false
}

// SetDefaultValueMoney gets a reference to the given Money and assigns it to the DefaultValueMoney field.
func (o *ElementDefinition) SetDefaultValueMoney(v Money) {
	o.DefaultValueMoney = &v
}

// GetDefaultValuePeriod returns the DefaultValuePeriod field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValuePeriod() Period {
	if o == nil || IsNil(o.DefaultValuePeriod) {
		var ret Period
		return ret
	}
	return *o.DefaultValuePeriod
}

// GetDefaultValuePeriodOk returns a tuple with the DefaultValuePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValuePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.DefaultValuePeriod) {
		return nil, false
	}
	return o.DefaultValuePeriod, true
}

// HasDefaultValuePeriod returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValuePeriod() bool {
	if o != nil && !IsNil(o.DefaultValuePeriod) {
		return true
	}

	return false
}

// SetDefaultValuePeriod gets a reference to the given Period and assigns it to the DefaultValuePeriod field.
func (o *ElementDefinition) SetDefaultValuePeriod(v Period) {
	o.DefaultValuePeriod = &v
}

// GetDefaultValueQuantity returns the DefaultValueQuantity field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueQuantity() Quantity {
	if o == nil || IsNil(o.DefaultValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.DefaultValueQuantity
}

// GetDefaultValueQuantityOk returns a tuple with the DefaultValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DefaultValueQuantity) {
		return nil, false
	}
	return o.DefaultValueQuantity, true
}

// HasDefaultValueQuantity returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueQuantity() bool {
	if o != nil && !IsNil(o.DefaultValueQuantity) {
		return true
	}

	return false
}

// SetDefaultValueQuantity gets a reference to the given Quantity and assigns it to the DefaultValueQuantity field.
func (o *ElementDefinition) SetDefaultValueQuantity(v Quantity) {
	o.DefaultValueQuantity = &v
}

// GetDefaultValueRange returns the DefaultValueRange field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueRange() Range {
	if o == nil || IsNil(o.DefaultValueRange) {
		var ret Range
		return ret
	}
	return *o.DefaultValueRange
}

// GetDefaultValueRangeOk returns a tuple with the DefaultValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.DefaultValueRange) {
		return nil, false
	}
	return o.DefaultValueRange, true
}

// HasDefaultValueRange returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueRange() bool {
	if o != nil && !IsNil(o.DefaultValueRange) {
		return true
	}

	return false
}

// SetDefaultValueRange gets a reference to the given Range and assigns it to the DefaultValueRange field.
func (o *ElementDefinition) SetDefaultValueRange(v Range) {
	o.DefaultValueRange = &v
}

// GetDefaultValueRatio returns the DefaultValueRatio field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueRatio() Ratio {
	if o == nil || IsNil(o.DefaultValueRatio) {
		var ret Ratio
		return ret
	}
	return *o.DefaultValueRatio
}

// GetDefaultValueRatioOk returns a tuple with the DefaultValueRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.DefaultValueRatio) {
		return nil, false
	}
	return o.DefaultValueRatio, true
}

// HasDefaultValueRatio returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueRatio() bool {
	if o != nil && !IsNil(o.DefaultValueRatio) {
		return true
	}

	return false
}

// SetDefaultValueRatio gets a reference to the given Ratio and assigns it to the DefaultValueRatio field.
func (o *ElementDefinition) SetDefaultValueRatio(v Ratio) {
	o.DefaultValueRatio = &v
}

// GetDefaultValueReference returns the DefaultValueReference field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueReference() Reference {
	if o == nil || IsNil(o.DefaultValueReference) {
		var ret Reference
		return ret
	}
	return *o.DefaultValueReference
}

// GetDefaultValueReferenceOk returns a tuple with the DefaultValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.DefaultValueReference) {
		return nil, false
	}
	return o.DefaultValueReference, true
}

// HasDefaultValueReference returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueReference() bool {
	if o != nil && !IsNil(o.DefaultValueReference) {
		return true
	}

	return false
}

// SetDefaultValueReference gets a reference to the given Reference and assigns it to the DefaultValueReference field.
func (o *ElementDefinition) SetDefaultValueReference(v Reference) {
	o.DefaultValueReference = &v
}

// GetDefaultValueSampledData returns the DefaultValueSampledData field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueSampledData() SampledData {
	if o == nil || IsNil(o.DefaultValueSampledData) {
		var ret SampledData
		return ret
	}
	return *o.DefaultValueSampledData
}

// GetDefaultValueSampledDataOk returns a tuple with the DefaultValueSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.DefaultValueSampledData) {
		return nil, false
	}
	return o.DefaultValueSampledData, true
}

// HasDefaultValueSampledData returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueSampledData() bool {
	if o != nil && !IsNil(o.DefaultValueSampledData) {
		return true
	}

	return false
}

// SetDefaultValueSampledData gets a reference to the given SampledData and assigns it to the DefaultValueSampledData field.
func (o *ElementDefinition) SetDefaultValueSampledData(v SampledData) {
	o.DefaultValueSampledData = &v
}

// GetDefaultValueSignature returns the DefaultValueSignature field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueSignature() Signature {
	if o == nil || IsNil(o.DefaultValueSignature) {
		var ret Signature
		return ret
	}
	return *o.DefaultValueSignature
}

// GetDefaultValueSignatureOk returns a tuple with the DefaultValueSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.DefaultValueSignature) {
		return nil, false
	}
	return o.DefaultValueSignature, true
}

// HasDefaultValueSignature returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueSignature() bool {
	if o != nil && !IsNil(o.DefaultValueSignature) {
		return true
	}

	return false
}

// SetDefaultValueSignature gets a reference to the given Signature and assigns it to the DefaultValueSignature field.
func (o *ElementDefinition) SetDefaultValueSignature(v Signature) {
	o.DefaultValueSignature = &v
}

// GetDefaultValueTiming returns the DefaultValueTiming field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueTiming() Timing {
	if o == nil || IsNil(o.DefaultValueTiming) {
		var ret Timing
		return ret
	}
	return *o.DefaultValueTiming
}

// GetDefaultValueTimingOk returns a tuple with the DefaultValueTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.DefaultValueTiming) {
		return nil, false
	}
	return o.DefaultValueTiming, true
}

// HasDefaultValueTiming returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueTiming() bool {
	if o != nil && !IsNil(o.DefaultValueTiming) {
		return true
	}

	return false
}

// SetDefaultValueTiming gets a reference to the given Timing and assigns it to the DefaultValueTiming field.
func (o *ElementDefinition) SetDefaultValueTiming(v Timing) {
	o.DefaultValueTiming = &v
}

// GetDefaultValueContactDetail returns the DefaultValueContactDetail field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueContactDetail() ContactDetail {
	if o == nil || IsNil(o.DefaultValueContactDetail) {
		var ret ContactDetail
		return ret
	}
	return *o.DefaultValueContactDetail
}

// GetDefaultValueContactDetailOk returns a tuple with the DefaultValueContactDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueContactDetailOk() (*ContactDetail, bool) {
	if o == nil || IsNil(o.DefaultValueContactDetail) {
		return nil, false
	}
	return o.DefaultValueContactDetail, true
}

// HasDefaultValueContactDetail returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueContactDetail() bool {
	if o != nil && !IsNil(o.DefaultValueContactDetail) {
		return true
	}

	return false
}

// SetDefaultValueContactDetail gets a reference to the given ContactDetail and assigns it to the DefaultValueContactDetail field.
func (o *ElementDefinition) SetDefaultValueContactDetail(v ContactDetail) {
	o.DefaultValueContactDetail = &v
}

// GetDefaultValueContributor returns the DefaultValueContributor field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueContributor() Contributor {
	if o == nil || IsNil(o.DefaultValueContributor) {
		var ret Contributor
		return ret
	}
	return *o.DefaultValueContributor
}

// GetDefaultValueContributorOk returns a tuple with the DefaultValueContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueContributorOk() (*Contributor, bool) {
	if o == nil || IsNil(o.DefaultValueContributor) {
		return nil, false
	}
	return o.DefaultValueContributor, true
}

// HasDefaultValueContributor returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueContributor() bool {
	if o != nil && !IsNil(o.DefaultValueContributor) {
		return true
	}

	return false
}

// SetDefaultValueContributor gets a reference to the given Contributor and assigns it to the DefaultValueContributor field.
func (o *ElementDefinition) SetDefaultValueContributor(v Contributor) {
	o.DefaultValueContributor = &v
}

// GetDefaultValueDataRequirement returns the DefaultValueDataRequirement field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDataRequirement() DataRequirement {
	if o == nil || IsNil(o.DefaultValueDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.DefaultValueDataRequirement
}

// GetDefaultValueDataRequirementOk returns a tuple with the DefaultValueDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.DefaultValueDataRequirement) {
		return nil, false
	}
	return o.DefaultValueDataRequirement, true
}

// HasDefaultValueDataRequirement returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDataRequirement() bool {
	if o != nil && !IsNil(o.DefaultValueDataRequirement) {
		return true
	}

	return false
}

// SetDefaultValueDataRequirement gets a reference to the given DataRequirement and assigns it to the DefaultValueDataRequirement field.
func (o *ElementDefinition) SetDefaultValueDataRequirement(v DataRequirement) {
	o.DefaultValueDataRequirement = &v
}

// GetDefaultValueExpression returns the DefaultValueExpression field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueExpression() Expression {
	if o == nil || IsNil(o.DefaultValueExpression) {
		var ret Expression
		return ret
	}
	return *o.DefaultValueExpression
}

// GetDefaultValueExpressionOk returns a tuple with the DefaultValueExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.DefaultValueExpression) {
		return nil, false
	}
	return o.DefaultValueExpression, true
}

// HasDefaultValueExpression returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueExpression() bool {
	if o != nil && !IsNil(o.DefaultValueExpression) {
		return true
	}

	return false
}

// SetDefaultValueExpression gets a reference to the given Expression and assigns it to the DefaultValueExpression field.
func (o *ElementDefinition) SetDefaultValueExpression(v Expression) {
	o.DefaultValueExpression = &v
}

// GetDefaultValueParameterDefinition returns the DefaultValueParameterDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueParameterDefinition() ParameterDefinition {
	if o == nil || IsNil(o.DefaultValueParameterDefinition) {
		var ret ParameterDefinition
		return ret
	}
	return *o.DefaultValueParameterDefinition
}

// GetDefaultValueParameterDefinitionOk returns a tuple with the DefaultValueParameterDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueParameterDefinitionOk() (*ParameterDefinition, bool) {
	if o == nil || IsNil(o.DefaultValueParameterDefinition) {
		return nil, false
	}
	return o.DefaultValueParameterDefinition, true
}

// HasDefaultValueParameterDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueParameterDefinition() bool {
	if o != nil && !IsNil(o.DefaultValueParameterDefinition) {
		return true
	}

	return false
}

// SetDefaultValueParameterDefinition gets a reference to the given ParameterDefinition and assigns it to the DefaultValueParameterDefinition field.
func (o *ElementDefinition) SetDefaultValueParameterDefinition(v ParameterDefinition) {
	o.DefaultValueParameterDefinition = &v
}

// GetDefaultValueRelatedArtifact returns the DefaultValueRelatedArtifact field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueRelatedArtifact() RelatedArtifact {
	if o == nil || IsNil(o.DefaultValueRelatedArtifact) {
		var ret RelatedArtifact
		return ret
	}
	return *o.DefaultValueRelatedArtifact
}

// GetDefaultValueRelatedArtifactOk returns a tuple with the DefaultValueRelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueRelatedArtifactOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.DefaultValueRelatedArtifact) {
		return nil, false
	}
	return o.DefaultValueRelatedArtifact, true
}

// HasDefaultValueRelatedArtifact returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueRelatedArtifact() bool {
	if o != nil && !IsNil(o.DefaultValueRelatedArtifact) {
		return true
	}

	return false
}

// SetDefaultValueRelatedArtifact gets a reference to the given RelatedArtifact and assigns it to the DefaultValueRelatedArtifact field.
func (o *ElementDefinition) SetDefaultValueRelatedArtifact(v RelatedArtifact) {
	o.DefaultValueRelatedArtifact = &v
}

// GetDefaultValueTriggerDefinition returns the DefaultValueTriggerDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.DefaultValueTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.DefaultValueTriggerDefinition
}

// GetDefaultValueTriggerDefinitionOk returns a tuple with the DefaultValueTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.DefaultValueTriggerDefinition) {
		return nil, false
	}
	return o.DefaultValueTriggerDefinition, true
}

// HasDefaultValueTriggerDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueTriggerDefinition() bool {
	if o != nil && !IsNil(o.DefaultValueTriggerDefinition) {
		return true
	}

	return false
}

// SetDefaultValueTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the DefaultValueTriggerDefinition field.
func (o *ElementDefinition) SetDefaultValueTriggerDefinition(v TriggerDefinition) {
	o.DefaultValueTriggerDefinition = &v
}

// GetDefaultValueUsageContext returns the DefaultValueUsageContext field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueUsageContext() UsageContext {
	if o == nil || IsNil(o.DefaultValueUsageContext) {
		var ret UsageContext
		return ret
	}
	return *o.DefaultValueUsageContext
}

// GetDefaultValueUsageContextOk returns a tuple with the DefaultValueUsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueUsageContextOk() (*UsageContext, bool) {
	if o == nil || IsNil(o.DefaultValueUsageContext) {
		return nil, false
	}
	return o.DefaultValueUsageContext, true
}

// HasDefaultValueUsageContext returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueUsageContext() bool {
	if o != nil && !IsNil(o.DefaultValueUsageContext) {
		return true
	}

	return false
}

// SetDefaultValueUsageContext gets a reference to the given UsageContext and assigns it to the DefaultValueUsageContext field.
func (o *ElementDefinition) SetDefaultValueUsageContext(v UsageContext) {
	o.DefaultValueUsageContext = &v
}

// GetDefaultValueDosage returns the DefaultValueDosage field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueDosage() Dosage {
	if o == nil || IsNil(o.DefaultValueDosage) {
		var ret Dosage
		return ret
	}
	return *o.DefaultValueDosage
}

// GetDefaultValueDosageOk returns a tuple with the DefaultValueDosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueDosageOk() (*Dosage, bool) {
	if o == nil || IsNil(o.DefaultValueDosage) {
		return nil, false
	}
	return o.DefaultValueDosage, true
}

// HasDefaultValueDosage returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueDosage() bool {
	if o != nil && !IsNil(o.DefaultValueDosage) {
		return true
	}

	return false
}

// SetDefaultValueDosage gets a reference to the given Dosage and assigns it to the DefaultValueDosage field.
func (o *ElementDefinition) SetDefaultValueDosage(v Dosage) {
	o.DefaultValueDosage = &v
}

// GetDefaultValueMeta returns the DefaultValueMeta field value if set, zero value otherwise.
func (o *ElementDefinition) GetDefaultValueMeta() Meta {
	if o == nil || IsNil(o.DefaultValueMeta) {
		var ret Meta
		return ret
	}
	return *o.DefaultValueMeta
}

// GetDefaultValueMetaOk returns a tuple with the DefaultValueMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetDefaultValueMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.DefaultValueMeta) {
		return nil, false
	}
	return o.DefaultValueMeta, true
}

// HasDefaultValueMeta returns a boolean if a field has been set.
func (o *ElementDefinition) HasDefaultValueMeta() bool {
	if o != nil && !IsNil(o.DefaultValueMeta) {
		return true
	}

	return false
}

// SetDefaultValueMeta gets a reference to the given Meta and assigns it to the DefaultValueMeta field.
func (o *ElementDefinition) SetDefaultValueMeta(v Meta) {
	o.DefaultValueMeta = &v
}

// GetMeaningWhenMissing returns the MeaningWhenMissing field value if set, zero value otherwise.
func (o *ElementDefinition) GetMeaningWhenMissing() string {
	if o == nil || IsNil(o.MeaningWhenMissing) {
		var ret string
		return ret
	}
	return *o.MeaningWhenMissing
}

// GetMeaningWhenMissingOk returns a tuple with the MeaningWhenMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMeaningWhenMissingOk() (*string, bool) {
	if o == nil || IsNil(o.MeaningWhenMissing) {
		return nil, false
	}
	return o.MeaningWhenMissing, true
}

// HasMeaningWhenMissing returns a boolean if a field has been set.
func (o *ElementDefinition) HasMeaningWhenMissing() bool {
	if o != nil && !IsNil(o.MeaningWhenMissing) {
		return true
	}

	return false
}

// SetMeaningWhenMissing gets a reference to the given string and assigns it to the MeaningWhenMissing field.
func (o *ElementDefinition) SetMeaningWhenMissing(v string) {
	o.MeaningWhenMissing = &v
}

// GetOrderMeaning returns the OrderMeaning field value if set, zero value otherwise.
func (o *ElementDefinition) GetOrderMeaning() string {
	if o == nil || IsNil(o.OrderMeaning) {
		var ret string
		return ret
	}
	return *o.OrderMeaning
}

// GetOrderMeaningOk returns a tuple with the OrderMeaning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetOrderMeaningOk() (*string, bool) {
	if o == nil || IsNil(o.OrderMeaning) {
		return nil, false
	}
	return o.OrderMeaning, true
}

// HasOrderMeaning returns a boolean if a field has been set.
func (o *ElementDefinition) HasOrderMeaning() bool {
	if o != nil && !IsNil(o.OrderMeaning) {
		return true
	}

	return false
}

// SetOrderMeaning gets a reference to the given string and assigns it to the OrderMeaning field.
func (o *ElementDefinition) SetOrderMeaning(v string) {
	o.OrderMeaning = &v
}

// GetFixedBase64Binary returns the FixedBase64Binary field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedBase64Binary() string {
	if o == nil || IsNil(o.FixedBase64Binary) {
		var ret string
		return ret
	}
	return *o.FixedBase64Binary
}

// GetFixedBase64BinaryOk returns a tuple with the FixedBase64Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedBase64BinaryOk() (*string, bool) {
	if o == nil || IsNil(o.FixedBase64Binary) {
		return nil, false
	}
	return o.FixedBase64Binary, true
}

// HasFixedBase64Binary returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedBase64Binary() bool {
	if o != nil && !IsNil(o.FixedBase64Binary) {
		return true
	}

	return false
}

// SetFixedBase64Binary gets a reference to the given string and assigns it to the FixedBase64Binary field.
func (o *ElementDefinition) SetFixedBase64Binary(v string) {
	o.FixedBase64Binary = &v
}

// GetFixedBoolean returns the FixedBoolean field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedBoolean() bool {
	if o == nil || IsNil(o.FixedBoolean) {
		var ret bool
		return ret
	}
	return *o.FixedBoolean
}

// GetFixedBooleanOk returns a tuple with the FixedBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.FixedBoolean) {
		return nil, false
	}
	return o.FixedBoolean, true
}

// HasFixedBoolean returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedBoolean() bool {
	if o != nil && !IsNil(o.FixedBoolean) {
		return true
	}

	return false
}

// SetFixedBoolean gets a reference to the given bool and assigns it to the FixedBoolean field.
func (o *ElementDefinition) SetFixedBoolean(v bool) {
	o.FixedBoolean = &v
}

// GetFixedCanonical returns the FixedCanonical field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedCanonical() string {
	if o == nil || IsNil(o.FixedCanonical) {
		var ret string
		return ret
	}
	return *o.FixedCanonical
}

// GetFixedCanonicalOk returns a tuple with the FixedCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.FixedCanonical) {
		return nil, false
	}
	return o.FixedCanonical, true
}

// HasFixedCanonical returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedCanonical() bool {
	if o != nil && !IsNil(o.FixedCanonical) {
		return true
	}

	return false
}

// SetFixedCanonical gets a reference to the given string and assigns it to the FixedCanonical field.
func (o *ElementDefinition) SetFixedCanonical(v string) {
	o.FixedCanonical = &v
}

// GetFixedCode returns the FixedCode field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedCode() string {
	if o == nil || IsNil(o.FixedCode) {
		var ret string
		return ret
	}
	return *o.FixedCode
}

// GetFixedCodeOk returns a tuple with the FixedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FixedCode) {
		return nil, false
	}
	return o.FixedCode, true
}

// HasFixedCode returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedCode() bool {
	if o != nil && !IsNil(o.FixedCode) {
		return true
	}

	return false
}

// SetFixedCode gets a reference to the given string and assigns it to the FixedCode field.
func (o *ElementDefinition) SetFixedCode(v string) {
	o.FixedCode = &v
}

// GetFixedDate returns the FixedDate field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDate() string {
	if o == nil || IsNil(o.FixedDate) {
		var ret string
		return ret
	}
	return *o.FixedDate
}

// GetFixedDateOk returns a tuple with the FixedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDateOk() (*string, bool) {
	if o == nil || IsNil(o.FixedDate) {
		return nil, false
	}
	return o.FixedDate, true
}

// HasFixedDate returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDate() bool {
	if o != nil && !IsNil(o.FixedDate) {
		return true
	}

	return false
}

// SetFixedDate gets a reference to the given string and assigns it to the FixedDate field.
func (o *ElementDefinition) SetFixedDate(v string) {
	o.FixedDate = &v
}

// GetFixedDateTime returns the FixedDateTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDateTime() string {
	if o == nil || IsNil(o.FixedDateTime) {
		var ret string
		return ret
	}
	return *o.FixedDateTime
}

// GetFixedDateTimeOk returns a tuple with the FixedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FixedDateTime) {
		return nil, false
	}
	return o.FixedDateTime, true
}

// HasFixedDateTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDateTime() bool {
	if o != nil && !IsNil(o.FixedDateTime) {
		return true
	}

	return false
}

// SetFixedDateTime gets a reference to the given string and assigns it to the FixedDateTime field.
func (o *ElementDefinition) SetFixedDateTime(v string) {
	o.FixedDateTime = &v
}

// GetFixedDecimal returns the FixedDecimal field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDecimal() float32 {
	if o == nil || IsNil(o.FixedDecimal) {
		var ret float32
		return ret
	}
	return *o.FixedDecimal
}

// GetFixedDecimalOk returns a tuple with the FixedDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedDecimal) {
		return nil, false
	}
	return o.FixedDecimal, true
}

// HasFixedDecimal returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDecimal() bool {
	if o != nil && !IsNil(o.FixedDecimal) {
		return true
	}

	return false
}

// SetFixedDecimal gets a reference to the given float32 and assigns it to the FixedDecimal field.
func (o *ElementDefinition) SetFixedDecimal(v float32) {
	o.FixedDecimal = &v
}

// GetFixedId returns the FixedId field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedId() string {
	if o == nil || IsNil(o.FixedId) {
		var ret string
		return ret
	}
	return *o.FixedId
}

// GetFixedIdOk returns a tuple with the FixedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedIdOk() (*string, bool) {
	if o == nil || IsNil(o.FixedId) {
		return nil, false
	}
	return o.FixedId, true
}

// HasFixedId returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedId() bool {
	if o != nil && !IsNil(o.FixedId) {
		return true
	}

	return false
}

// SetFixedId gets a reference to the given string and assigns it to the FixedId field.
func (o *ElementDefinition) SetFixedId(v string) {
	o.FixedId = &v
}

// GetFixedInstant returns the FixedInstant field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedInstant() string {
	if o == nil || IsNil(o.FixedInstant) {
		var ret string
		return ret
	}
	return *o.FixedInstant
}

// GetFixedInstantOk returns a tuple with the FixedInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedInstantOk() (*string, bool) {
	if o == nil || IsNil(o.FixedInstant) {
		return nil, false
	}
	return o.FixedInstant, true
}

// HasFixedInstant returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedInstant() bool {
	if o != nil && !IsNil(o.FixedInstant) {
		return true
	}

	return false
}

// SetFixedInstant gets a reference to the given string and assigns it to the FixedInstant field.
func (o *ElementDefinition) SetFixedInstant(v string) {
	o.FixedInstant = &v
}

// GetFixedInteger returns the FixedInteger field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedInteger() float32 {
	if o == nil || IsNil(o.FixedInteger) {
		var ret float32
		return ret
	}
	return *o.FixedInteger
}

// GetFixedIntegerOk returns a tuple with the FixedInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedInteger) {
		return nil, false
	}
	return o.FixedInteger, true
}

// HasFixedInteger returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedInteger() bool {
	if o != nil && !IsNil(o.FixedInteger) {
		return true
	}

	return false
}

// SetFixedInteger gets a reference to the given float32 and assigns it to the FixedInteger field.
func (o *ElementDefinition) SetFixedInteger(v float32) {
	o.FixedInteger = &v
}

// GetFixedMarkdown returns the FixedMarkdown field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedMarkdown() string {
	if o == nil || IsNil(o.FixedMarkdown) {
		var ret string
		return ret
	}
	return *o.FixedMarkdown
}

// GetFixedMarkdownOk returns a tuple with the FixedMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.FixedMarkdown) {
		return nil, false
	}
	return o.FixedMarkdown, true
}

// HasFixedMarkdown returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedMarkdown() bool {
	if o != nil && !IsNil(o.FixedMarkdown) {
		return true
	}

	return false
}

// SetFixedMarkdown gets a reference to the given string and assigns it to the FixedMarkdown field.
func (o *ElementDefinition) SetFixedMarkdown(v string) {
	o.FixedMarkdown = &v
}

// GetFixedOid returns the FixedOid field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedOid() string {
	if o == nil || IsNil(o.FixedOid) {
		var ret string
		return ret
	}
	return *o.FixedOid
}

// GetFixedOidOk returns a tuple with the FixedOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedOidOk() (*string, bool) {
	if o == nil || IsNil(o.FixedOid) {
		return nil, false
	}
	return o.FixedOid, true
}

// HasFixedOid returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedOid() bool {
	if o != nil && !IsNil(o.FixedOid) {
		return true
	}

	return false
}

// SetFixedOid gets a reference to the given string and assigns it to the FixedOid field.
func (o *ElementDefinition) SetFixedOid(v string) {
	o.FixedOid = &v
}

// GetFixedPositiveInt returns the FixedPositiveInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedPositiveInt() float32 {
	if o == nil || IsNil(o.FixedPositiveInt) {
		var ret float32
		return ret
	}
	return *o.FixedPositiveInt
}

// GetFixedPositiveIntOk returns a tuple with the FixedPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedPositiveInt) {
		return nil, false
	}
	return o.FixedPositiveInt, true
}

// HasFixedPositiveInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedPositiveInt() bool {
	if o != nil && !IsNil(o.FixedPositiveInt) {
		return true
	}

	return false
}

// SetFixedPositiveInt gets a reference to the given float32 and assigns it to the FixedPositiveInt field.
func (o *ElementDefinition) SetFixedPositiveInt(v float32) {
	o.FixedPositiveInt = &v
}

// GetFixedString returns the FixedString field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedString() string {
	if o == nil || IsNil(o.FixedString) {
		var ret string
		return ret
	}
	return *o.FixedString
}

// GetFixedStringOk returns a tuple with the FixedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedStringOk() (*string, bool) {
	if o == nil || IsNil(o.FixedString) {
		return nil, false
	}
	return o.FixedString, true
}

// HasFixedString returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedString() bool {
	if o != nil && !IsNil(o.FixedString) {
		return true
	}

	return false
}

// SetFixedString gets a reference to the given string and assigns it to the FixedString field.
func (o *ElementDefinition) SetFixedString(v string) {
	o.FixedString = &v
}

// GetFixedTime returns the FixedTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedTime() string {
	if o == nil || IsNil(o.FixedTime) {
		var ret string
		return ret
	}
	return *o.FixedTime
}

// GetFixedTimeOk returns a tuple with the FixedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FixedTime) {
		return nil, false
	}
	return o.FixedTime, true
}

// HasFixedTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedTime() bool {
	if o != nil && !IsNil(o.FixedTime) {
		return true
	}

	return false
}

// SetFixedTime gets a reference to the given string and assigns it to the FixedTime field.
func (o *ElementDefinition) SetFixedTime(v string) {
	o.FixedTime = &v
}

// GetFixedUnsignedInt returns the FixedUnsignedInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedUnsignedInt() float32 {
	if o == nil || IsNil(o.FixedUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.FixedUnsignedInt
}

// GetFixedUnsignedIntOk returns a tuple with the FixedUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedUnsignedInt) {
		return nil, false
	}
	return o.FixedUnsignedInt, true
}

// HasFixedUnsignedInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedUnsignedInt() bool {
	if o != nil && !IsNil(o.FixedUnsignedInt) {
		return true
	}

	return false
}

// SetFixedUnsignedInt gets a reference to the given float32 and assigns it to the FixedUnsignedInt field.
func (o *ElementDefinition) SetFixedUnsignedInt(v float32) {
	o.FixedUnsignedInt = &v
}

// GetFixedUri returns the FixedUri field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedUri() string {
	if o == nil || IsNil(o.FixedUri) {
		var ret string
		return ret
	}
	return *o.FixedUri
}

// GetFixedUriOk returns a tuple with the FixedUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedUriOk() (*string, bool) {
	if o == nil || IsNil(o.FixedUri) {
		return nil, false
	}
	return o.FixedUri, true
}

// HasFixedUri returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedUri() bool {
	if o != nil && !IsNil(o.FixedUri) {
		return true
	}

	return false
}

// SetFixedUri gets a reference to the given string and assigns it to the FixedUri field.
func (o *ElementDefinition) SetFixedUri(v string) {
	o.FixedUri = &v
}

// GetFixedUrl returns the FixedUrl field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedUrl() string {
	if o == nil || IsNil(o.FixedUrl) {
		var ret string
		return ret
	}
	return *o.FixedUrl
}

// GetFixedUrlOk returns a tuple with the FixedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FixedUrl) {
		return nil, false
	}
	return o.FixedUrl, true
}

// HasFixedUrl returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedUrl() bool {
	if o != nil && !IsNil(o.FixedUrl) {
		return true
	}

	return false
}

// SetFixedUrl gets a reference to the given string and assigns it to the FixedUrl field.
func (o *ElementDefinition) SetFixedUrl(v string) {
	o.FixedUrl = &v
}

// GetFixedUuid returns the FixedUuid field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedUuid() string {
	if o == nil || IsNil(o.FixedUuid) {
		var ret string
		return ret
	}
	return *o.FixedUuid
}

// GetFixedUuidOk returns a tuple with the FixedUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedUuidOk() (*string, bool) {
	if o == nil || IsNil(o.FixedUuid) {
		return nil, false
	}
	return o.FixedUuid, true
}

// HasFixedUuid returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedUuid() bool {
	if o != nil && !IsNil(o.FixedUuid) {
		return true
	}

	return false
}

// SetFixedUuid gets a reference to the given string and assigns it to the FixedUuid field.
func (o *ElementDefinition) SetFixedUuid(v string) {
	o.FixedUuid = &v
}

// GetFixedAddress returns the FixedAddress field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedAddress() Address {
	if o == nil || IsNil(o.FixedAddress) {
		var ret Address
		return ret
	}
	return *o.FixedAddress
}

// GetFixedAddressOk returns a tuple with the FixedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.FixedAddress) {
		return nil, false
	}
	return o.FixedAddress, true
}

// HasFixedAddress returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedAddress() bool {
	if o != nil && !IsNil(o.FixedAddress) {
		return true
	}

	return false
}

// SetFixedAddress gets a reference to the given Address and assigns it to the FixedAddress field.
func (o *ElementDefinition) SetFixedAddress(v Address) {
	o.FixedAddress = &v
}

// GetFixedAge returns the FixedAge field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedAge() Age {
	if o == nil || IsNil(o.FixedAge) {
		var ret Age
		return ret
	}
	return *o.FixedAge
}

// GetFixedAgeOk returns a tuple with the FixedAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.FixedAge) {
		return nil, false
	}
	return o.FixedAge, true
}

// HasFixedAge returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedAge() bool {
	if o != nil && !IsNil(o.FixedAge) {
		return true
	}

	return false
}

// SetFixedAge gets a reference to the given Age and assigns it to the FixedAge field.
func (o *ElementDefinition) SetFixedAge(v Age) {
	o.FixedAge = &v
}

// GetFixedAnnotation returns the FixedAnnotation field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedAnnotation() Annotation {
	if o == nil || IsNil(o.FixedAnnotation) {
		var ret Annotation
		return ret
	}
	return *o.FixedAnnotation
}

// GetFixedAnnotationOk returns a tuple with the FixedAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedAnnotationOk() (*Annotation, bool) {
	if o == nil || IsNil(o.FixedAnnotation) {
		return nil, false
	}
	return o.FixedAnnotation, true
}

// HasFixedAnnotation returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedAnnotation() bool {
	if o != nil && !IsNil(o.FixedAnnotation) {
		return true
	}

	return false
}

// SetFixedAnnotation gets a reference to the given Annotation and assigns it to the FixedAnnotation field.
func (o *ElementDefinition) SetFixedAnnotation(v Annotation) {
	o.FixedAnnotation = &v
}

// GetFixedAttachment returns the FixedAttachment field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedAttachment() Attachment {
	if o == nil || IsNil(o.FixedAttachment) {
		var ret Attachment
		return ret
	}
	return *o.FixedAttachment
}

// GetFixedAttachmentOk returns a tuple with the FixedAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.FixedAttachment) {
		return nil, false
	}
	return o.FixedAttachment, true
}

// HasFixedAttachment returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedAttachment() bool {
	if o != nil && !IsNil(o.FixedAttachment) {
		return true
	}

	return false
}

// SetFixedAttachment gets a reference to the given Attachment and assigns it to the FixedAttachment field.
func (o *ElementDefinition) SetFixedAttachment(v Attachment) {
	o.FixedAttachment = &v
}

// GetFixedCodeableConcept returns the FixedCodeableConcept field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.FixedCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.FixedCodeableConcept
}

// GetFixedCodeableConceptOk returns a tuple with the FixedCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FixedCodeableConcept) {
		return nil, false
	}
	return o.FixedCodeableConcept, true
}

// HasFixedCodeableConcept returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedCodeableConcept() bool {
	if o != nil && !IsNil(o.FixedCodeableConcept) {
		return true
	}

	return false
}

// SetFixedCodeableConcept gets a reference to the given CodeableConcept and assigns it to the FixedCodeableConcept field.
func (o *ElementDefinition) SetFixedCodeableConcept(v CodeableConcept) {
	o.FixedCodeableConcept = &v
}

// GetFixedCoding returns the FixedCoding field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedCoding() Coding {
	if o == nil || IsNil(o.FixedCoding) {
		var ret Coding
		return ret
	}
	return *o.FixedCoding
}

// GetFixedCodingOk returns a tuple with the FixedCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.FixedCoding) {
		return nil, false
	}
	return o.FixedCoding, true
}

// HasFixedCoding returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedCoding() bool {
	if o != nil && !IsNil(o.FixedCoding) {
		return true
	}

	return false
}

// SetFixedCoding gets a reference to the given Coding and assigns it to the FixedCoding field.
func (o *ElementDefinition) SetFixedCoding(v Coding) {
	o.FixedCoding = &v
}

// GetFixedContactPoint returns the FixedContactPoint field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedContactPoint() ContactPoint {
	if o == nil || IsNil(o.FixedContactPoint) {
		var ret ContactPoint
		return ret
	}
	return *o.FixedContactPoint
}

// GetFixedContactPointOk returns a tuple with the FixedContactPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedContactPointOk() (*ContactPoint, bool) {
	if o == nil || IsNil(o.FixedContactPoint) {
		return nil, false
	}
	return o.FixedContactPoint, true
}

// HasFixedContactPoint returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedContactPoint() bool {
	if o != nil && !IsNil(o.FixedContactPoint) {
		return true
	}

	return false
}

// SetFixedContactPoint gets a reference to the given ContactPoint and assigns it to the FixedContactPoint field.
func (o *ElementDefinition) SetFixedContactPoint(v ContactPoint) {
	o.FixedContactPoint = &v
}

// GetFixedCount returns the FixedCount field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedCount() Count {
	if o == nil || IsNil(o.FixedCount) {
		var ret Count
		return ret
	}
	return *o.FixedCount
}

// GetFixedCountOk returns a tuple with the FixedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedCountOk() (*Count, bool) {
	if o == nil || IsNil(o.FixedCount) {
		return nil, false
	}
	return o.FixedCount, true
}

// HasFixedCount returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedCount() bool {
	if o != nil && !IsNil(o.FixedCount) {
		return true
	}

	return false
}

// SetFixedCount gets a reference to the given Count and assigns it to the FixedCount field.
func (o *ElementDefinition) SetFixedCount(v Count) {
	o.FixedCount = &v
}

// GetFixedDistance returns the FixedDistance field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDistance() Distance {
	if o == nil || IsNil(o.FixedDistance) {
		var ret Distance
		return ret
	}
	return *o.FixedDistance
}

// GetFixedDistanceOk returns a tuple with the FixedDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDistanceOk() (*Distance, bool) {
	if o == nil || IsNil(o.FixedDistance) {
		return nil, false
	}
	return o.FixedDistance, true
}

// HasFixedDistance returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDistance() bool {
	if o != nil && !IsNil(o.FixedDistance) {
		return true
	}

	return false
}

// SetFixedDistance gets a reference to the given Distance and assigns it to the FixedDistance field.
func (o *ElementDefinition) SetFixedDistance(v Distance) {
	o.FixedDistance = &v
}

// GetFixedDuration returns the FixedDuration field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDuration() Duration {
	if o == nil || IsNil(o.FixedDuration) {
		var ret Duration
		return ret
	}
	return *o.FixedDuration
}

// GetFixedDurationOk returns a tuple with the FixedDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.FixedDuration) {
		return nil, false
	}
	return o.FixedDuration, true
}

// HasFixedDuration returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDuration() bool {
	if o != nil && !IsNil(o.FixedDuration) {
		return true
	}

	return false
}

// SetFixedDuration gets a reference to the given Duration and assigns it to the FixedDuration field.
func (o *ElementDefinition) SetFixedDuration(v Duration) {
	o.FixedDuration = &v
}

// GetFixedHumanName returns the FixedHumanName field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedHumanName() HumanName {
	if o == nil || IsNil(o.FixedHumanName) {
		var ret HumanName
		return ret
	}
	return *o.FixedHumanName
}

// GetFixedHumanNameOk returns a tuple with the FixedHumanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedHumanNameOk() (*HumanName, bool) {
	if o == nil || IsNil(o.FixedHumanName) {
		return nil, false
	}
	return o.FixedHumanName, true
}

// HasFixedHumanName returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedHumanName() bool {
	if o != nil && !IsNil(o.FixedHumanName) {
		return true
	}

	return false
}

// SetFixedHumanName gets a reference to the given HumanName and assigns it to the FixedHumanName field.
func (o *ElementDefinition) SetFixedHumanName(v HumanName) {
	o.FixedHumanName = &v
}

// GetFixedIdentifier returns the FixedIdentifier field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedIdentifier() Identifier {
	if o == nil || IsNil(o.FixedIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.FixedIdentifier
}

// GetFixedIdentifierOk returns a tuple with the FixedIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.FixedIdentifier) {
		return nil, false
	}
	return o.FixedIdentifier, true
}

// HasFixedIdentifier returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedIdentifier() bool {
	if o != nil && !IsNil(o.FixedIdentifier) {
		return true
	}

	return false
}

// SetFixedIdentifier gets a reference to the given Identifier and assigns it to the FixedIdentifier field.
func (o *ElementDefinition) SetFixedIdentifier(v Identifier) {
	o.FixedIdentifier = &v
}

// GetFixedMoney returns the FixedMoney field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedMoney() Money {
	if o == nil || IsNil(o.FixedMoney) {
		var ret Money
		return ret
	}
	return *o.FixedMoney
}

// GetFixedMoneyOk returns a tuple with the FixedMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.FixedMoney) {
		return nil, false
	}
	return o.FixedMoney, true
}

// HasFixedMoney returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedMoney() bool {
	if o != nil && !IsNil(o.FixedMoney) {
		return true
	}

	return false
}

// SetFixedMoney gets a reference to the given Money and assigns it to the FixedMoney field.
func (o *ElementDefinition) SetFixedMoney(v Money) {
	o.FixedMoney = &v
}

// GetFixedPeriod returns the FixedPeriod field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedPeriod() Period {
	if o == nil || IsNil(o.FixedPeriod) {
		var ret Period
		return ret
	}
	return *o.FixedPeriod
}

// GetFixedPeriodOk returns a tuple with the FixedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.FixedPeriod) {
		return nil, false
	}
	return o.FixedPeriod, true
}

// HasFixedPeriod returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedPeriod() bool {
	if o != nil && !IsNil(o.FixedPeriod) {
		return true
	}

	return false
}

// SetFixedPeriod gets a reference to the given Period and assigns it to the FixedPeriod field.
func (o *ElementDefinition) SetFixedPeriod(v Period) {
	o.FixedPeriod = &v
}

// GetFixedQuantity returns the FixedQuantity field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedQuantity() Quantity {
	if o == nil || IsNil(o.FixedQuantity) {
		var ret Quantity
		return ret
	}
	return *o.FixedQuantity
}

// GetFixedQuantityOk returns a tuple with the FixedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.FixedQuantity) {
		return nil, false
	}
	return o.FixedQuantity, true
}

// HasFixedQuantity returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedQuantity() bool {
	if o != nil && !IsNil(o.FixedQuantity) {
		return true
	}

	return false
}

// SetFixedQuantity gets a reference to the given Quantity and assigns it to the FixedQuantity field.
func (o *ElementDefinition) SetFixedQuantity(v Quantity) {
	o.FixedQuantity = &v
}

// GetFixedRange returns the FixedRange field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedRange() Range {
	if o == nil || IsNil(o.FixedRange) {
		var ret Range
		return ret
	}
	return *o.FixedRange
}

// GetFixedRangeOk returns a tuple with the FixedRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.FixedRange) {
		return nil, false
	}
	return o.FixedRange, true
}

// HasFixedRange returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedRange() bool {
	if o != nil && !IsNil(o.FixedRange) {
		return true
	}

	return false
}

// SetFixedRange gets a reference to the given Range and assigns it to the FixedRange field.
func (o *ElementDefinition) SetFixedRange(v Range) {
	o.FixedRange = &v
}

// GetFixedRatio returns the FixedRatio field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedRatio() Ratio {
	if o == nil || IsNil(o.FixedRatio) {
		var ret Ratio
		return ret
	}
	return *o.FixedRatio
}

// GetFixedRatioOk returns a tuple with the FixedRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.FixedRatio) {
		return nil, false
	}
	return o.FixedRatio, true
}

// HasFixedRatio returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedRatio() bool {
	if o != nil && !IsNil(o.FixedRatio) {
		return true
	}

	return false
}

// SetFixedRatio gets a reference to the given Ratio and assigns it to the FixedRatio field.
func (o *ElementDefinition) SetFixedRatio(v Ratio) {
	o.FixedRatio = &v
}

// GetFixedReference returns the FixedReference field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedReference() Reference {
	if o == nil || IsNil(o.FixedReference) {
		var ret Reference
		return ret
	}
	return *o.FixedReference
}

// GetFixedReferenceOk returns a tuple with the FixedReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.FixedReference) {
		return nil, false
	}
	return o.FixedReference, true
}

// HasFixedReference returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedReference() bool {
	if o != nil && !IsNil(o.FixedReference) {
		return true
	}

	return false
}

// SetFixedReference gets a reference to the given Reference and assigns it to the FixedReference field.
func (o *ElementDefinition) SetFixedReference(v Reference) {
	o.FixedReference = &v
}

// GetFixedSampledData returns the FixedSampledData field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedSampledData() SampledData {
	if o == nil || IsNil(o.FixedSampledData) {
		var ret SampledData
		return ret
	}
	return *o.FixedSampledData
}

// GetFixedSampledDataOk returns a tuple with the FixedSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.FixedSampledData) {
		return nil, false
	}
	return o.FixedSampledData, true
}

// HasFixedSampledData returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedSampledData() bool {
	if o != nil && !IsNil(o.FixedSampledData) {
		return true
	}

	return false
}

// SetFixedSampledData gets a reference to the given SampledData and assigns it to the FixedSampledData field.
func (o *ElementDefinition) SetFixedSampledData(v SampledData) {
	o.FixedSampledData = &v
}

// GetFixedSignature returns the FixedSignature field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedSignature() Signature {
	if o == nil || IsNil(o.FixedSignature) {
		var ret Signature
		return ret
	}
	return *o.FixedSignature
}

// GetFixedSignatureOk returns a tuple with the FixedSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.FixedSignature) {
		return nil, false
	}
	return o.FixedSignature, true
}

// HasFixedSignature returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedSignature() bool {
	if o != nil && !IsNil(o.FixedSignature) {
		return true
	}

	return false
}

// SetFixedSignature gets a reference to the given Signature and assigns it to the FixedSignature field.
func (o *ElementDefinition) SetFixedSignature(v Signature) {
	o.FixedSignature = &v
}

// GetFixedTiming returns the FixedTiming field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedTiming() Timing {
	if o == nil || IsNil(o.FixedTiming) {
		var ret Timing
		return ret
	}
	return *o.FixedTiming
}

// GetFixedTimingOk returns a tuple with the FixedTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.FixedTiming) {
		return nil, false
	}
	return o.FixedTiming, true
}

// HasFixedTiming returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedTiming() bool {
	if o != nil && !IsNil(o.FixedTiming) {
		return true
	}

	return false
}

// SetFixedTiming gets a reference to the given Timing and assigns it to the FixedTiming field.
func (o *ElementDefinition) SetFixedTiming(v Timing) {
	o.FixedTiming = &v
}

// GetFixedContactDetail returns the FixedContactDetail field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedContactDetail() ContactDetail {
	if o == nil || IsNil(o.FixedContactDetail) {
		var ret ContactDetail
		return ret
	}
	return *o.FixedContactDetail
}

// GetFixedContactDetailOk returns a tuple with the FixedContactDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedContactDetailOk() (*ContactDetail, bool) {
	if o == nil || IsNil(o.FixedContactDetail) {
		return nil, false
	}
	return o.FixedContactDetail, true
}

// HasFixedContactDetail returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedContactDetail() bool {
	if o != nil && !IsNil(o.FixedContactDetail) {
		return true
	}

	return false
}

// SetFixedContactDetail gets a reference to the given ContactDetail and assigns it to the FixedContactDetail field.
func (o *ElementDefinition) SetFixedContactDetail(v ContactDetail) {
	o.FixedContactDetail = &v
}

// GetFixedContributor returns the FixedContributor field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedContributor() Contributor {
	if o == nil || IsNil(o.FixedContributor) {
		var ret Contributor
		return ret
	}
	return *o.FixedContributor
}

// GetFixedContributorOk returns a tuple with the FixedContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedContributorOk() (*Contributor, bool) {
	if o == nil || IsNil(o.FixedContributor) {
		return nil, false
	}
	return o.FixedContributor, true
}

// HasFixedContributor returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedContributor() bool {
	if o != nil && !IsNil(o.FixedContributor) {
		return true
	}

	return false
}

// SetFixedContributor gets a reference to the given Contributor and assigns it to the FixedContributor field.
func (o *ElementDefinition) SetFixedContributor(v Contributor) {
	o.FixedContributor = &v
}

// GetFixedDataRequirement returns the FixedDataRequirement field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDataRequirement() DataRequirement {
	if o == nil || IsNil(o.FixedDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.FixedDataRequirement
}

// GetFixedDataRequirementOk returns a tuple with the FixedDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.FixedDataRequirement) {
		return nil, false
	}
	return o.FixedDataRequirement, true
}

// HasFixedDataRequirement returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDataRequirement() bool {
	if o != nil && !IsNil(o.FixedDataRequirement) {
		return true
	}

	return false
}

// SetFixedDataRequirement gets a reference to the given DataRequirement and assigns it to the FixedDataRequirement field.
func (o *ElementDefinition) SetFixedDataRequirement(v DataRequirement) {
	o.FixedDataRequirement = &v
}

// GetFixedExpression returns the FixedExpression field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedExpression() Expression {
	if o == nil || IsNil(o.FixedExpression) {
		var ret Expression
		return ret
	}
	return *o.FixedExpression
}

// GetFixedExpressionOk returns a tuple with the FixedExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.FixedExpression) {
		return nil, false
	}
	return o.FixedExpression, true
}

// HasFixedExpression returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedExpression() bool {
	if o != nil && !IsNil(o.FixedExpression) {
		return true
	}

	return false
}

// SetFixedExpression gets a reference to the given Expression and assigns it to the FixedExpression field.
func (o *ElementDefinition) SetFixedExpression(v Expression) {
	o.FixedExpression = &v
}

// GetFixedParameterDefinition returns the FixedParameterDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedParameterDefinition() ParameterDefinition {
	if o == nil || IsNil(o.FixedParameterDefinition) {
		var ret ParameterDefinition
		return ret
	}
	return *o.FixedParameterDefinition
}

// GetFixedParameterDefinitionOk returns a tuple with the FixedParameterDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedParameterDefinitionOk() (*ParameterDefinition, bool) {
	if o == nil || IsNil(o.FixedParameterDefinition) {
		return nil, false
	}
	return o.FixedParameterDefinition, true
}

// HasFixedParameterDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedParameterDefinition() bool {
	if o != nil && !IsNil(o.FixedParameterDefinition) {
		return true
	}

	return false
}

// SetFixedParameterDefinition gets a reference to the given ParameterDefinition and assigns it to the FixedParameterDefinition field.
func (o *ElementDefinition) SetFixedParameterDefinition(v ParameterDefinition) {
	o.FixedParameterDefinition = &v
}

// GetFixedRelatedArtifact returns the FixedRelatedArtifact field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedRelatedArtifact() RelatedArtifact {
	if o == nil || IsNil(o.FixedRelatedArtifact) {
		var ret RelatedArtifact
		return ret
	}
	return *o.FixedRelatedArtifact
}

// GetFixedRelatedArtifactOk returns a tuple with the FixedRelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedRelatedArtifactOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.FixedRelatedArtifact) {
		return nil, false
	}
	return o.FixedRelatedArtifact, true
}

// HasFixedRelatedArtifact returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedRelatedArtifact() bool {
	if o != nil && !IsNil(o.FixedRelatedArtifact) {
		return true
	}

	return false
}

// SetFixedRelatedArtifact gets a reference to the given RelatedArtifact and assigns it to the FixedRelatedArtifact field.
func (o *ElementDefinition) SetFixedRelatedArtifact(v RelatedArtifact) {
	o.FixedRelatedArtifact = &v
}

// GetFixedTriggerDefinition returns the FixedTriggerDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.FixedTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.FixedTriggerDefinition
}

// GetFixedTriggerDefinitionOk returns a tuple with the FixedTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.FixedTriggerDefinition) {
		return nil, false
	}
	return o.FixedTriggerDefinition, true
}

// HasFixedTriggerDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedTriggerDefinition() bool {
	if o != nil && !IsNil(o.FixedTriggerDefinition) {
		return true
	}

	return false
}

// SetFixedTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the FixedTriggerDefinition field.
func (o *ElementDefinition) SetFixedTriggerDefinition(v TriggerDefinition) {
	o.FixedTriggerDefinition = &v
}

// GetFixedUsageContext returns the FixedUsageContext field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedUsageContext() UsageContext {
	if o == nil || IsNil(o.FixedUsageContext) {
		var ret UsageContext
		return ret
	}
	return *o.FixedUsageContext
}

// GetFixedUsageContextOk returns a tuple with the FixedUsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedUsageContextOk() (*UsageContext, bool) {
	if o == nil || IsNil(o.FixedUsageContext) {
		return nil, false
	}
	return o.FixedUsageContext, true
}

// HasFixedUsageContext returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedUsageContext() bool {
	if o != nil && !IsNil(o.FixedUsageContext) {
		return true
	}

	return false
}

// SetFixedUsageContext gets a reference to the given UsageContext and assigns it to the FixedUsageContext field.
func (o *ElementDefinition) SetFixedUsageContext(v UsageContext) {
	o.FixedUsageContext = &v
}

// GetFixedDosage returns the FixedDosage field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedDosage() Dosage {
	if o == nil || IsNil(o.FixedDosage) {
		var ret Dosage
		return ret
	}
	return *o.FixedDosage
}

// GetFixedDosageOk returns a tuple with the FixedDosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedDosageOk() (*Dosage, bool) {
	if o == nil || IsNil(o.FixedDosage) {
		return nil, false
	}
	return o.FixedDosage, true
}

// HasFixedDosage returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedDosage() bool {
	if o != nil && !IsNil(o.FixedDosage) {
		return true
	}

	return false
}

// SetFixedDosage gets a reference to the given Dosage and assigns it to the FixedDosage field.
func (o *ElementDefinition) SetFixedDosage(v Dosage) {
	o.FixedDosage = &v
}

// GetFixedMeta returns the FixedMeta field value if set, zero value otherwise.
func (o *ElementDefinition) GetFixedMeta() Meta {
	if o == nil || IsNil(o.FixedMeta) {
		var ret Meta
		return ret
	}
	return *o.FixedMeta
}

// GetFixedMetaOk returns a tuple with the FixedMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetFixedMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.FixedMeta) {
		return nil, false
	}
	return o.FixedMeta, true
}

// HasFixedMeta returns a boolean if a field has been set.
func (o *ElementDefinition) HasFixedMeta() bool {
	if o != nil && !IsNil(o.FixedMeta) {
		return true
	}

	return false
}

// SetFixedMeta gets a reference to the given Meta and assigns it to the FixedMeta field.
func (o *ElementDefinition) SetFixedMeta(v Meta) {
	o.FixedMeta = &v
}

// GetPatternBase64Binary returns the PatternBase64Binary field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternBase64Binary() string {
	if o == nil || IsNil(o.PatternBase64Binary) {
		var ret string
		return ret
	}
	return *o.PatternBase64Binary
}

// GetPatternBase64BinaryOk returns a tuple with the PatternBase64Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternBase64BinaryOk() (*string, bool) {
	if o == nil || IsNil(o.PatternBase64Binary) {
		return nil, false
	}
	return o.PatternBase64Binary, true
}

// HasPatternBase64Binary returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternBase64Binary() bool {
	if o != nil && !IsNil(o.PatternBase64Binary) {
		return true
	}

	return false
}

// SetPatternBase64Binary gets a reference to the given string and assigns it to the PatternBase64Binary field.
func (o *ElementDefinition) SetPatternBase64Binary(v string) {
	o.PatternBase64Binary = &v
}

// GetPatternBoolean returns the PatternBoolean field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternBoolean() bool {
	if o == nil || IsNil(o.PatternBoolean) {
		var ret bool
		return ret
	}
	return *o.PatternBoolean
}

// GetPatternBooleanOk returns a tuple with the PatternBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.PatternBoolean) {
		return nil, false
	}
	return o.PatternBoolean, true
}

// HasPatternBoolean returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternBoolean() bool {
	if o != nil && !IsNil(o.PatternBoolean) {
		return true
	}

	return false
}

// SetPatternBoolean gets a reference to the given bool and assigns it to the PatternBoolean field.
func (o *ElementDefinition) SetPatternBoolean(v bool) {
	o.PatternBoolean = &v
}

// GetPatternCanonical returns the PatternCanonical field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternCanonical() string {
	if o == nil || IsNil(o.PatternCanonical) {
		var ret string
		return ret
	}
	return *o.PatternCanonical
}

// GetPatternCanonicalOk returns a tuple with the PatternCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.PatternCanonical) {
		return nil, false
	}
	return o.PatternCanonical, true
}

// HasPatternCanonical returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternCanonical() bool {
	if o != nil && !IsNil(o.PatternCanonical) {
		return true
	}

	return false
}

// SetPatternCanonical gets a reference to the given string and assigns it to the PatternCanonical field.
func (o *ElementDefinition) SetPatternCanonical(v string) {
	o.PatternCanonical = &v
}

// GetPatternCode returns the PatternCode field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternCode() string {
	if o == nil || IsNil(o.PatternCode) {
		var ret string
		return ret
	}
	return *o.PatternCode
}

// GetPatternCodeOk returns a tuple with the PatternCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PatternCode) {
		return nil, false
	}
	return o.PatternCode, true
}

// HasPatternCode returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternCode() bool {
	if o != nil && !IsNil(o.PatternCode) {
		return true
	}

	return false
}

// SetPatternCode gets a reference to the given string and assigns it to the PatternCode field.
func (o *ElementDefinition) SetPatternCode(v string) {
	o.PatternCode = &v
}

// GetPatternDate returns the PatternDate field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDate() string {
	if o == nil || IsNil(o.PatternDate) {
		var ret string
		return ret
	}
	return *o.PatternDate
}

// GetPatternDateOk returns a tuple with the PatternDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDateOk() (*string, bool) {
	if o == nil || IsNil(o.PatternDate) {
		return nil, false
	}
	return o.PatternDate, true
}

// HasPatternDate returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDate() bool {
	if o != nil && !IsNil(o.PatternDate) {
		return true
	}

	return false
}

// SetPatternDate gets a reference to the given string and assigns it to the PatternDate field.
func (o *ElementDefinition) SetPatternDate(v string) {
	o.PatternDate = &v
}

// GetPatternDateTime returns the PatternDateTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDateTime() string {
	if o == nil || IsNil(o.PatternDateTime) {
		var ret string
		return ret
	}
	return *o.PatternDateTime
}

// GetPatternDateTimeOk returns a tuple with the PatternDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PatternDateTime) {
		return nil, false
	}
	return o.PatternDateTime, true
}

// HasPatternDateTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDateTime() bool {
	if o != nil && !IsNil(o.PatternDateTime) {
		return true
	}

	return false
}

// SetPatternDateTime gets a reference to the given string and assigns it to the PatternDateTime field.
func (o *ElementDefinition) SetPatternDateTime(v string) {
	o.PatternDateTime = &v
}

// GetPatternDecimal returns the PatternDecimal field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDecimal() float32 {
	if o == nil || IsNil(o.PatternDecimal) {
		var ret float32
		return ret
	}
	return *o.PatternDecimal
}

// GetPatternDecimalOk returns a tuple with the PatternDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.PatternDecimal) {
		return nil, false
	}
	return o.PatternDecimal, true
}

// HasPatternDecimal returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDecimal() bool {
	if o != nil && !IsNil(o.PatternDecimal) {
		return true
	}

	return false
}

// SetPatternDecimal gets a reference to the given float32 and assigns it to the PatternDecimal field.
func (o *ElementDefinition) SetPatternDecimal(v float32) {
	o.PatternDecimal = &v
}

// GetPatternId returns the PatternId field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternId() string {
	if o == nil || IsNil(o.PatternId) {
		var ret string
		return ret
	}
	return *o.PatternId
}

// GetPatternIdOk returns a tuple with the PatternId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternIdOk() (*string, bool) {
	if o == nil || IsNil(o.PatternId) {
		return nil, false
	}
	return o.PatternId, true
}

// HasPatternId returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternId() bool {
	if o != nil && !IsNil(o.PatternId) {
		return true
	}

	return false
}

// SetPatternId gets a reference to the given string and assigns it to the PatternId field.
func (o *ElementDefinition) SetPatternId(v string) {
	o.PatternId = &v
}

// GetPatternInstant returns the PatternInstant field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternInstant() string {
	if o == nil || IsNil(o.PatternInstant) {
		var ret string
		return ret
	}
	return *o.PatternInstant
}

// GetPatternInstantOk returns a tuple with the PatternInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternInstantOk() (*string, bool) {
	if o == nil || IsNil(o.PatternInstant) {
		return nil, false
	}
	return o.PatternInstant, true
}

// HasPatternInstant returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternInstant() bool {
	if o != nil && !IsNil(o.PatternInstant) {
		return true
	}

	return false
}

// SetPatternInstant gets a reference to the given string and assigns it to the PatternInstant field.
func (o *ElementDefinition) SetPatternInstant(v string) {
	o.PatternInstant = &v
}

// GetPatternInteger returns the PatternInteger field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternInteger() float32 {
	if o == nil || IsNil(o.PatternInteger) {
		var ret float32
		return ret
	}
	return *o.PatternInteger
}

// GetPatternIntegerOk returns a tuple with the PatternInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.PatternInteger) {
		return nil, false
	}
	return o.PatternInteger, true
}

// HasPatternInteger returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternInteger() bool {
	if o != nil && !IsNil(o.PatternInteger) {
		return true
	}

	return false
}

// SetPatternInteger gets a reference to the given float32 and assigns it to the PatternInteger field.
func (o *ElementDefinition) SetPatternInteger(v float32) {
	o.PatternInteger = &v
}

// GetPatternMarkdown returns the PatternMarkdown field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternMarkdown() string {
	if o == nil || IsNil(o.PatternMarkdown) {
		var ret string
		return ret
	}
	return *o.PatternMarkdown
}

// GetPatternMarkdownOk returns a tuple with the PatternMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.PatternMarkdown) {
		return nil, false
	}
	return o.PatternMarkdown, true
}

// HasPatternMarkdown returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternMarkdown() bool {
	if o != nil && !IsNil(o.PatternMarkdown) {
		return true
	}

	return false
}

// SetPatternMarkdown gets a reference to the given string and assigns it to the PatternMarkdown field.
func (o *ElementDefinition) SetPatternMarkdown(v string) {
	o.PatternMarkdown = &v
}

// GetPatternOid returns the PatternOid field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternOid() string {
	if o == nil || IsNil(o.PatternOid) {
		var ret string
		return ret
	}
	return *o.PatternOid
}

// GetPatternOidOk returns a tuple with the PatternOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternOidOk() (*string, bool) {
	if o == nil || IsNil(o.PatternOid) {
		return nil, false
	}
	return o.PatternOid, true
}

// HasPatternOid returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternOid() bool {
	if o != nil && !IsNil(o.PatternOid) {
		return true
	}

	return false
}

// SetPatternOid gets a reference to the given string and assigns it to the PatternOid field.
func (o *ElementDefinition) SetPatternOid(v string) {
	o.PatternOid = &v
}

// GetPatternPositiveInt returns the PatternPositiveInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternPositiveInt() float32 {
	if o == nil || IsNil(o.PatternPositiveInt) {
		var ret float32
		return ret
	}
	return *o.PatternPositiveInt
}

// GetPatternPositiveIntOk returns a tuple with the PatternPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.PatternPositiveInt) {
		return nil, false
	}
	return o.PatternPositiveInt, true
}

// HasPatternPositiveInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternPositiveInt() bool {
	if o != nil && !IsNil(o.PatternPositiveInt) {
		return true
	}

	return false
}

// SetPatternPositiveInt gets a reference to the given float32 and assigns it to the PatternPositiveInt field.
func (o *ElementDefinition) SetPatternPositiveInt(v float32) {
	o.PatternPositiveInt = &v
}

// GetPatternString returns the PatternString field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternString() string {
	if o == nil || IsNil(o.PatternString) {
		var ret string
		return ret
	}
	return *o.PatternString
}

// GetPatternStringOk returns a tuple with the PatternString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternStringOk() (*string, bool) {
	if o == nil || IsNil(o.PatternString) {
		return nil, false
	}
	return o.PatternString, true
}

// HasPatternString returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternString() bool {
	if o != nil && !IsNil(o.PatternString) {
		return true
	}

	return false
}

// SetPatternString gets a reference to the given string and assigns it to the PatternString field.
func (o *ElementDefinition) SetPatternString(v string) {
	o.PatternString = &v
}

// GetPatternTime returns the PatternTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternTime() string {
	if o == nil || IsNil(o.PatternTime) {
		var ret string
		return ret
	}
	return *o.PatternTime
}

// GetPatternTimeOk returns a tuple with the PatternTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PatternTime) {
		return nil, false
	}
	return o.PatternTime, true
}

// HasPatternTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternTime() bool {
	if o != nil && !IsNil(o.PatternTime) {
		return true
	}

	return false
}

// SetPatternTime gets a reference to the given string and assigns it to the PatternTime field.
func (o *ElementDefinition) SetPatternTime(v string) {
	o.PatternTime = &v
}

// GetPatternUnsignedInt returns the PatternUnsignedInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternUnsignedInt() float32 {
	if o == nil || IsNil(o.PatternUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.PatternUnsignedInt
}

// GetPatternUnsignedIntOk returns a tuple with the PatternUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.PatternUnsignedInt) {
		return nil, false
	}
	return o.PatternUnsignedInt, true
}

// HasPatternUnsignedInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternUnsignedInt() bool {
	if o != nil && !IsNil(o.PatternUnsignedInt) {
		return true
	}

	return false
}

// SetPatternUnsignedInt gets a reference to the given float32 and assigns it to the PatternUnsignedInt field.
func (o *ElementDefinition) SetPatternUnsignedInt(v float32) {
	o.PatternUnsignedInt = &v
}

// GetPatternUri returns the PatternUri field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternUri() string {
	if o == nil || IsNil(o.PatternUri) {
		var ret string
		return ret
	}
	return *o.PatternUri
}

// GetPatternUriOk returns a tuple with the PatternUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternUriOk() (*string, bool) {
	if o == nil || IsNil(o.PatternUri) {
		return nil, false
	}
	return o.PatternUri, true
}

// HasPatternUri returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternUri() bool {
	if o != nil && !IsNil(o.PatternUri) {
		return true
	}

	return false
}

// SetPatternUri gets a reference to the given string and assigns it to the PatternUri field.
func (o *ElementDefinition) SetPatternUri(v string) {
	o.PatternUri = &v
}

// GetPatternUrl returns the PatternUrl field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternUrl() string {
	if o == nil || IsNil(o.PatternUrl) {
		var ret string
		return ret
	}
	return *o.PatternUrl
}

// GetPatternUrlOk returns a tuple with the PatternUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PatternUrl) {
		return nil, false
	}
	return o.PatternUrl, true
}

// HasPatternUrl returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternUrl() bool {
	if o != nil && !IsNil(o.PatternUrl) {
		return true
	}

	return false
}

// SetPatternUrl gets a reference to the given string and assigns it to the PatternUrl field.
func (o *ElementDefinition) SetPatternUrl(v string) {
	o.PatternUrl = &v
}

// GetPatternUuid returns the PatternUuid field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternUuid() string {
	if o == nil || IsNil(o.PatternUuid) {
		var ret string
		return ret
	}
	return *o.PatternUuid
}

// GetPatternUuidOk returns a tuple with the PatternUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternUuidOk() (*string, bool) {
	if o == nil || IsNil(o.PatternUuid) {
		return nil, false
	}
	return o.PatternUuid, true
}

// HasPatternUuid returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternUuid() bool {
	if o != nil && !IsNil(o.PatternUuid) {
		return true
	}

	return false
}

// SetPatternUuid gets a reference to the given string and assigns it to the PatternUuid field.
func (o *ElementDefinition) SetPatternUuid(v string) {
	o.PatternUuid = &v
}

// GetPatternAddress returns the PatternAddress field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternAddress() Address {
	if o == nil || IsNil(o.PatternAddress) {
		var ret Address
		return ret
	}
	return *o.PatternAddress
}

// GetPatternAddressOk returns a tuple with the PatternAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.PatternAddress) {
		return nil, false
	}
	return o.PatternAddress, true
}

// HasPatternAddress returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternAddress() bool {
	if o != nil && !IsNil(o.PatternAddress) {
		return true
	}

	return false
}

// SetPatternAddress gets a reference to the given Address and assigns it to the PatternAddress field.
func (o *ElementDefinition) SetPatternAddress(v Address) {
	o.PatternAddress = &v
}

// GetPatternAge returns the PatternAge field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternAge() Age {
	if o == nil || IsNil(o.PatternAge) {
		var ret Age
		return ret
	}
	return *o.PatternAge
}

// GetPatternAgeOk returns a tuple with the PatternAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.PatternAge) {
		return nil, false
	}
	return o.PatternAge, true
}

// HasPatternAge returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternAge() bool {
	if o != nil && !IsNil(o.PatternAge) {
		return true
	}

	return false
}

// SetPatternAge gets a reference to the given Age and assigns it to the PatternAge field.
func (o *ElementDefinition) SetPatternAge(v Age) {
	o.PatternAge = &v
}

// GetPatternAnnotation returns the PatternAnnotation field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternAnnotation() Annotation {
	if o == nil || IsNil(o.PatternAnnotation) {
		var ret Annotation
		return ret
	}
	return *o.PatternAnnotation
}

// GetPatternAnnotationOk returns a tuple with the PatternAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternAnnotationOk() (*Annotation, bool) {
	if o == nil || IsNil(o.PatternAnnotation) {
		return nil, false
	}
	return o.PatternAnnotation, true
}

// HasPatternAnnotation returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternAnnotation() bool {
	if o != nil && !IsNil(o.PatternAnnotation) {
		return true
	}

	return false
}

// SetPatternAnnotation gets a reference to the given Annotation and assigns it to the PatternAnnotation field.
func (o *ElementDefinition) SetPatternAnnotation(v Annotation) {
	o.PatternAnnotation = &v
}

// GetPatternAttachment returns the PatternAttachment field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternAttachment() Attachment {
	if o == nil || IsNil(o.PatternAttachment) {
		var ret Attachment
		return ret
	}
	return *o.PatternAttachment
}

// GetPatternAttachmentOk returns a tuple with the PatternAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.PatternAttachment) {
		return nil, false
	}
	return o.PatternAttachment, true
}

// HasPatternAttachment returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternAttachment() bool {
	if o != nil && !IsNil(o.PatternAttachment) {
		return true
	}

	return false
}

// SetPatternAttachment gets a reference to the given Attachment and assigns it to the PatternAttachment field.
func (o *ElementDefinition) SetPatternAttachment(v Attachment) {
	o.PatternAttachment = &v
}

// GetPatternCodeableConcept returns the PatternCodeableConcept field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.PatternCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.PatternCodeableConcept
}

// GetPatternCodeableConceptOk returns a tuple with the PatternCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PatternCodeableConcept) {
		return nil, false
	}
	return o.PatternCodeableConcept, true
}

// HasPatternCodeableConcept returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternCodeableConcept() bool {
	if o != nil && !IsNil(o.PatternCodeableConcept) {
		return true
	}

	return false
}

// SetPatternCodeableConcept gets a reference to the given CodeableConcept and assigns it to the PatternCodeableConcept field.
func (o *ElementDefinition) SetPatternCodeableConcept(v CodeableConcept) {
	o.PatternCodeableConcept = &v
}

// GetPatternCoding returns the PatternCoding field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternCoding() Coding {
	if o == nil || IsNil(o.PatternCoding) {
		var ret Coding
		return ret
	}
	return *o.PatternCoding
}

// GetPatternCodingOk returns a tuple with the PatternCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.PatternCoding) {
		return nil, false
	}
	return o.PatternCoding, true
}

// HasPatternCoding returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternCoding() bool {
	if o != nil && !IsNil(o.PatternCoding) {
		return true
	}

	return false
}

// SetPatternCoding gets a reference to the given Coding and assigns it to the PatternCoding field.
func (o *ElementDefinition) SetPatternCoding(v Coding) {
	o.PatternCoding = &v
}

// GetPatternContactPoint returns the PatternContactPoint field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternContactPoint() ContactPoint {
	if o == nil || IsNil(o.PatternContactPoint) {
		var ret ContactPoint
		return ret
	}
	return *o.PatternContactPoint
}

// GetPatternContactPointOk returns a tuple with the PatternContactPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternContactPointOk() (*ContactPoint, bool) {
	if o == nil || IsNil(o.PatternContactPoint) {
		return nil, false
	}
	return o.PatternContactPoint, true
}

// HasPatternContactPoint returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternContactPoint() bool {
	if o != nil && !IsNil(o.PatternContactPoint) {
		return true
	}

	return false
}

// SetPatternContactPoint gets a reference to the given ContactPoint and assigns it to the PatternContactPoint field.
func (o *ElementDefinition) SetPatternContactPoint(v ContactPoint) {
	o.PatternContactPoint = &v
}

// GetPatternCount returns the PatternCount field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternCount() Count {
	if o == nil || IsNil(o.PatternCount) {
		var ret Count
		return ret
	}
	return *o.PatternCount
}

// GetPatternCountOk returns a tuple with the PatternCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternCountOk() (*Count, bool) {
	if o == nil || IsNil(o.PatternCount) {
		return nil, false
	}
	return o.PatternCount, true
}

// HasPatternCount returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternCount() bool {
	if o != nil && !IsNil(o.PatternCount) {
		return true
	}

	return false
}

// SetPatternCount gets a reference to the given Count and assigns it to the PatternCount field.
func (o *ElementDefinition) SetPatternCount(v Count) {
	o.PatternCount = &v
}

// GetPatternDistance returns the PatternDistance field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDistance() Distance {
	if o == nil || IsNil(o.PatternDistance) {
		var ret Distance
		return ret
	}
	return *o.PatternDistance
}

// GetPatternDistanceOk returns a tuple with the PatternDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDistanceOk() (*Distance, bool) {
	if o == nil || IsNil(o.PatternDistance) {
		return nil, false
	}
	return o.PatternDistance, true
}

// HasPatternDistance returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDistance() bool {
	if o != nil && !IsNil(o.PatternDistance) {
		return true
	}

	return false
}

// SetPatternDistance gets a reference to the given Distance and assigns it to the PatternDistance field.
func (o *ElementDefinition) SetPatternDistance(v Distance) {
	o.PatternDistance = &v
}

// GetPatternDuration returns the PatternDuration field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDuration() Duration {
	if o == nil || IsNil(o.PatternDuration) {
		var ret Duration
		return ret
	}
	return *o.PatternDuration
}

// GetPatternDurationOk returns a tuple with the PatternDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.PatternDuration) {
		return nil, false
	}
	return o.PatternDuration, true
}

// HasPatternDuration returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDuration() bool {
	if o != nil && !IsNil(o.PatternDuration) {
		return true
	}

	return false
}

// SetPatternDuration gets a reference to the given Duration and assigns it to the PatternDuration field.
func (o *ElementDefinition) SetPatternDuration(v Duration) {
	o.PatternDuration = &v
}

// GetPatternHumanName returns the PatternHumanName field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternHumanName() HumanName {
	if o == nil || IsNil(o.PatternHumanName) {
		var ret HumanName
		return ret
	}
	return *o.PatternHumanName
}

// GetPatternHumanNameOk returns a tuple with the PatternHumanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternHumanNameOk() (*HumanName, bool) {
	if o == nil || IsNil(o.PatternHumanName) {
		return nil, false
	}
	return o.PatternHumanName, true
}

// HasPatternHumanName returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternHumanName() bool {
	if o != nil && !IsNil(o.PatternHumanName) {
		return true
	}

	return false
}

// SetPatternHumanName gets a reference to the given HumanName and assigns it to the PatternHumanName field.
func (o *ElementDefinition) SetPatternHumanName(v HumanName) {
	o.PatternHumanName = &v
}

// GetPatternIdentifier returns the PatternIdentifier field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternIdentifier() Identifier {
	if o == nil || IsNil(o.PatternIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.PatternIdentifier
}

// GetPatternIdentifierOk returns a tuple with the PatternIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.PatternIdentifier) {
		return nil, false
	}
	return o.PatternIdentifier, true
}

// HasPatternIdentifier returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternIdentifier() bool {
	if o != nil && !IsNil(o.PatternIdentifier) {
		return true
	}

	return false
}

// SetPatternIdentifier gets a reference to the given Identifier and assigns it to the PatternIdentifier field.
func (o *ElementDefinition) SetPatternIdentifier(v Identifier) {
	o.PatternIdentifier = &v
}

// GetPatternMoney returns the PatternMoney field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternMoney() Money {
	if o == nil || IsNil(o.PatternMoney) {
		var ret Money
		return ret
	}
	return *o.PatternMoney
}

// GetPatternMoneyOk returns a tuple with the PatternMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.PatternMoney) {
		return nil, false
	}
	return o.PatternMoney, true
}

// HasPatternMoney returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternMoney() bool {
	if o != nil && !IsNil(o.PatternMoney) {
		return true
	}

	return false
}

// SetPatternMoney gets a reference to the given Money and assigns it to the PatternMoney field.
func (o *ElementDefinition) SetPatternMoney(v Money) {
	o.PatternMoney = &v
}

// GetPatternPeriod returns the PatternPeriod field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternPeriod() Period {
	if o == nil || IsNil(o.PatternPeriod) {
		var ret Period
		return ret
	}
	return *o.PatternPeriod
}

// GetPatternPeriodOk returns a tuple with the PatternPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.PatternPeriod) {
		return nil, false
	}
	return o.PatternPeriod, true
}

// HasPatternPeriod returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternPeriod() bool {
	if o != nil && !IsNil(o.PatternPeriod) {
		return true
	}

	return false
}

// SetPatternPeriod gets a reference to the given Period and assigns it to the PatternPeriod field.
func (o *ElementDefinition) SetPatternPeriod(v Period) {
	o.PatternPeriod = &v
}

// GetPatternQuantity returns the PatternQuantity field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternQuantity() Quantity {
	if o == nil || IsNil(o.PatternQuantity) {
		var ret Quantity
		return ret
	}
	return *o.PatternQuantity
}

// GetPatternQuantityOk returns a tuple with the PatternQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.PatternQuantity) {
		return nil, false
	}
	return o.PatternQuantity, true
}

// HasPatternQuantity returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternQuantity() bool {
	if o != nil && !IsNil(o.PatternQuantity) {
		return true
	}

	return false
}

// SetPatternQuantity gets a reference to the given Quantity and assigns it to the PatternQuantity field.
func (o *ElementDefinition) SetPatternQuantity(v Quantity) {
	o.PatternQuantity = &v
}

// GetPatternRange returns the PatternRange field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternRange() Range {
	if o == nil || IsNil(o.PatternRange) {
		var ret Range
		return ret
	}
	return *o.PatternRange
}

// GetPatternRangeOk returns a tuple with the PatternRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.PatternRange) {
		return nil, false
	}
	return o.PatternRange, true
}

// HasPatternRange returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternRange() bool {
	if o != nil && !IsNil(o.PatternRange) {
		return true
	}

	return false
}

// SetPatternRange gets a reference to the given Range and assigns it to the PatternRange field.
func (o *ElementDefinition) SetPatternRange(v Range) {
	o.PatternRange = &v
}

// GetPatternRatio returns the PatternRatio field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternRatio() Ratio {
	if o == nil || IsNil(o.PatternRatio) {
		var ret Ratio
		return ret
	}
	return *o.PatternRatio
}

// GetPatternRatioOk returns a tuple with the PatternRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.PatternRatio) {
		return nil, false
	}
	return o.PatternRatio, true
}

// HasPatternRatio returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternRatio() bool {
	if o != nil && !IsNil(o.PatternRatio) {
		return true
	}

	return false
}

// SetPatternRatio gets a reference to the given Ratio and assigns it to the PatternRatio field.
func (o *ElementDefinition) SetPatternRatio(v Ratio) {
	o.PatternRatio = &v
}

// GetPatternReference returns the PatternReference field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternReference() Reference {
	if o == nil || IsNil(o.PatternReference) {
		var ret Reference
		return ret
	}
	return *o.PatternReference
}

// GetPatternReferenceOk returns a tuple with the PatternReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.PatternReference) {
		return nil, false
	}
	return o.PatternReference, true
}

// HasPatternReference returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternReference() bool {
	if o != nil && !IsNil(o.PatternReference) {
		return true
	}

	return false
}

// SetPatternReference gets a reference to the given Reference and assigns it to the PatternReference field.
func (o *ElementDefinition) SetPatternReference(v Reference) {
	o.PatternReference = &v
}

// GetPatternSampledData returns the PatternSampledData field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternSampledData() SampledData {
	if o == nil || IsNil(o.PatternSampledData) {
		var ret SampledData
		return ret
	}
	return *o.PatternSampledData
}

// GetPatternSampledDataOk returns a tuple with the PatternSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.PatternSampledData) {
		return nil, false
	}
	return o.PatternSampledData, true
}

// HasPatternSampledData returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternSampledData() bool {
	if o != nil && !IsNil(o.PatternSampledData) {
		return true
	}

	return false
}

// SetPatternSampledData gets a reference to the given SampledData and assigns it to the PatternSampledData field.
func (o *ElementDefinition) SetPatternSampledData(v SampledData) {
	o.PatternSampledData = &v
}

// GetPatternSignature returns the PatternSignature field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternSignature() Signature {
	if o == nil || IsNil(o.PatternSignature) {
		var ret Signature
		return ret
	}
	return *o.PatternSignature
}

// GetPatternSignatureOk returns a tuple with the PatternSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.PatternSignature) {
		return nil, false
	}
	return o.PatternSignature, true
}

// HasPatternSignature returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternSignature() bool {
	if o != nil && !IsNil(o.PatternSignature) {
		return true
	}

	return false
}

// SetPatternSignature gets a reference to the given Signature and assigns it to the PatternSignature field.
func (o *ElementDefinition) SetPatternSignature(v Signature) {
	o.PatternSignature = &v
}

// GetPatternTiming returns the PatternTiming field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternTiming() Timing {
	if o == nil || IsNil(o.PatternTiming) {
		var ret Timing
		return ret
	}
	return *o.PatternTiming
}

// GetPatternTimingOk returns a tuple with the PatternTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.PatternTiming) {
		return nil, false
	}
	return o.PatternTiming, true
}

// HasPatternTiming returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternTiming() bool {
	if o != nil && !IsNil(o.PatternTiming) {
		return true
	}

	return false
}

// SetPatternTiming gets a reference to the given Timing and assigns it to the PatternTiming field.
func (o *ElementDefinition) SetPatternTiming(v Timing) {
	o.PatternTiming = &v
}

// GetPatternContactDetail returns the PatternContactDetail field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternContactDetail() ContactDetail {
	if o == nil || IsNil(o.PatternContactDetail) {
		var ret ContactDetail
		return ret
	}
	return *o.PatternContactDetail
}

// GetPatternContactDetailOk returns a tuple with the PatternContactDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternContactDetailOk() (*ContactDetail, bool) {
	if o == nil || IsNil(o.PatternContactDetail) {
		return nil, false
	}
	return o.PatternContactDetail, true
}

// HasPatternContactDetail returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternContactDetail() bool {
	if o != nil && !IsNil(o.PatternContactDetail) {
		return true
	}

	return false
}

// SetPatternContactDetail gets a reference to the given ContactDetail and assigns it to the PatternContactDetail field.
func (o *ElementDefinition) SetPatternContactDetail(v ContactDetail) {
	o.PatternContactDetail = &v
}

// GetPatternContributor returns the PatternContributor field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternContributor() Contributor {
	if o == nil || IsNil(o.PatternContributor) {
		var ret Contributor
		return ret
	}
	return *o.PatternContributor
}

// GetPatternContributorOk returns a tuple with the PatternContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternContributorOk() (*Contributor, bool) {
	if o == nil || IsNil(o.PatternContributor) {
		return nil, false
	}
	return o.PatternContributor, true
}

// HasPatternContributor returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternContributor() bool {
	if o != nil && !IsNil(o.PatternContributor) {
		return true
	}

	return false
}

// SetPatternContributor gets a reference to the given Contributor and assigns it to the PatternContributor field.
func (o *ElementDefinition) SetPatternContributor(v Contributor) {
	o.PatternContributor = &v
}

// GetPatternDataRequirement returns the PatternDataRequirement field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDataRequirement() DataRequirement {
	if o == nil || IsNil(o.PatternDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.PatternDataRequirement
}

// GetPatternDataRequirementOk returns a tuple with the PatternDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.PatternDataRequirement) {
		return nil, false
	}
	return o.PatternDataRequirement, true
}

// HasPatternDataRequirement returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDataRequirement() bool {
	if o != nil && !IsNil(o.PatternDataRequirement) {
		return true
	}

	return false
}

// SetPatternDataRequirement gets a reference to the given DataRequirement and assigns it to the PatternDataRequirement field.
func (o *ElementDefinition) SetPatternDataRequirement(v DataRequirement) {
	o.PatternDataRequirement = &v
}

// GetPatternExpression returns the PatternExpression field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternExpression() Expression {
	if o == nil || IsNil(o.PatternExpression) {
		var ret Expression
		return ret
	}
	return *o.PatternExpression
}

// GetPatternExpressionOk returns a tuple with the PatternExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.PatternExpression) {
		return nil, false
	}
	return o.PatternExpression, true
}

// HasPatternExpression returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternExpression() bool {
	if o != nil && !IsNil(o.PatternExpression) {
		return true
	}

	return false
}

// SetPatternExpression gets a reference to the given Expression and assigns it to the PatternExpression field.
func (o *ElementDefinition) SetPatternExpression(v Expression) {
	o.PatternExpression = &v
}

// GetPatternParameterDefinition returns the PatternParameterDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternParameterDefinition() ParameterDefinition {
	if o == nil || IsNil(o.PatternParameterDefinition) {
		var ret ParameterDefinition
		return ret
	}
	return *o.PatternParameterDefinition
}

// GetPatternParameterDefinitionOk returns a tuple with the PatternParameterDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternParameterDefinitionOk() (*ParameterDefinition, bool) {
	if o == nil || IsNil(o.PatternParameterDefinition) {
		return nil, false
	}
	return o.PatternParameterDefinition, true
}

// HasPatternParameterDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternParameterDefinition() bool {
	if o != nil && !IsNil(o.PatternParameterDefinition) {
		return true
	}

	return false
}

// SetPatternParameterDefinition gets a reference to the given ParameterDefinition and assigns it to the PatternParameterDefinition field.
func (o *ElementDefinition) SetPatternParameterDefinition(v ParameterDefinition) {
	o.PatternParameterDefinition = &v
}

// GetPatternRelatedArtifact returns the PatternRelatedArtifact field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternRelatedArtifact() RelatedArtifact {
	if o == nil || IsNil(o.PatternRelatedArtifact) {
		var ret RelatedArtifact
		return ret
	}
	return *o.PatternRelatedArtifact
}

// GetPatternRelatedArtifactOk returns a tuple with the PatternRelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternRelatedArtifactOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.PatternRelatedArtifact) {
		return nil, false
	}
	return o.PatternRelatedArtifact, true
}

// HasPatternRelatedArtifact returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternRelatedArtifact() bool {
	if o != nil && !IsNil(o.PatternRelatedArtifact) {
		return true
	}

	return false
}

// SetPatternRelatedArtifact gets a reference to the given RelatedArtifact and assigns it to the PatternRelatedArtifact field.
func (o *ElementDefinition) SetPatternRelatedArtifact(v RelatedArtifact) {
	o.PatternRelatedArtifact = &v
}

// GetPatternTriggerDefinition returns the PatternTriggerDefinition field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.PatternTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.PatternTriggerDefinition
}

// GetPatternTriggerDefinitionOk returns a tuple with the PatternTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.PatternTriggerDefinition) {
		return nil, false
	}
	return o.PatternTriggerDefinition, true
}

// HasPatternTriggerDefinition returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternTriggerDefinition() bool {
	if o != nil && !IsNil(o.PatternTriggerDefinition) {
		return true
	}

	return false
}

// SetPatternTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the PatternTriggerDefinition field.
func (o *ElementDefinition) SetPatternTriggerDefinition(v TriggerDefinition) {
	o.PatternTriggerDefinition = &v
}

// GetPatternUsageContext returns the PatternUsageContext field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternUsageContext() UsageContext {
	if o == nil || IsNil(o.PatternUsageContext) {
		var ret UsageContext
		return ret
	}
	return *o.PatternUsageContext
}

// GetPatternUsageContextOk returns a tuple with the PatternUsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternUsageContextOk() (*UsageContext, bool) {
	if o == nil || IsNil(o.PatternUsageContext) {
		return nil, false
	}
	return o.PatternUsageContext, true
}

// HasPatternUsageContext returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternUsageContext() bool {
	if o != nil && !IsNil(o.PatternUsageContext) {
		return true
	}

	return false
}

// SetPatternUsageContext gets a reference to the given UsageContext and assigns it to the PatternUsageContext field.
func (o *ElementDefinition) SetPatternUsageContext(v UsageContext) {
	o.PatternUsageContext = &v
}

// GetPatternDosage returns the PatternDosage field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternDosage() Dosage {
	if o == nil || IsNil(o.PatternDosage) {
		var ret Dosage
		return ret
	}
	return *o.PatternDosage
}

// GetPatternDosageOk returns a tuple with the PatternDosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternDosageOk() (*Dosage, bool) {
	if o == nil || IsNil(o.PatternDosage) {
		return nil, false
	}
	return o.PatternDosage, true
}

// HasPatternDosage returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternDosage() bool {
	if o != nil && !IsNil(o.PatternDosage) {
		return true
	}

	return false
}

// SetPatternDosage gets a reference to the given Dosage and assigns it to the PatternDosage field.
func (o *ElementDefinition) SetPatternDosage(v Dosage) {
	o.PatternDosage = &v
}

// GetPatternMeta returns the PatternMeta field value if set, zero value otherwise.
func (o *ElementDefinition) GetPatternMeta() Meta {
	if o == nil || IsNil(o.PatternMeta) {
		var ret Meta
		return ret
	}
	return *o.PatternMeta
}

// GetPatternMetaOk returns a tuple with the PatternMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetPatternMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.PatternMeta) {
		return nil, false
	}
	return o.PatternMeta, true
}

// HasPatternMeta returns a boolean if a field has been set.
func (o *ElementDefinition) HasPatternMeta() bool {
	if o != nil && !IsNil(o.PatternMeta) {
		return true
	}

	return false
}

// SetPatternMeta gets a reference to the given Meta and assigns it to the PatternMeta field.
func (o *ElementDefinition) SetPatternMeta(v Meta) {
	o.PatternMeta = &v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *ElementDefinition) GetExample() []ElementDefinitionExample {
	if o == nil || IsNil(o.Example) {
		var ret []ElementDefinitionExample
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetExampleOk() ([]ElementDefinitionExample, bool) {
	if o == nil || IsNil(o.Example) {
		return nil, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *ElementDefinition) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given []ElementDefinitionExample and assigns it to the Example field.
func (o *ElementDefinition) SetExample(v []ElementDefinitionExample) {
	o.Example = v
}

// GetMinValueDate returns the MinValueDate field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueDate() string {
	if o == nil || IsNil(o.MinValueDate) {
		var ret string
		return ret
	}
	return *o.MinValueDate
}

// GetMinValueDateOk returns a tuple with the MinValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueDateOk() (*string, bool) {
	if o == nil || IsNil(o.MinValueDate) {
		return nil, false
	}
	return o.MinValueDate, true
}

// HasMinValueDate returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueDate() bool {
	if o != nil && !IsNil(o.MinValueDate) {
		return true
	}

	return false
}

// SetMinValueDate gets a reference to the given string and assigns it to the MinValueDate field.
func (o *ElementDefinition) SetMinValueDate(v string) {
	o.MinValueDate = &v
}

// GetMinValueDateTime returns the MinValueDateTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueDateTime() string {
	if o == nil || IsNil(o.MinValueDateTime) {
		var ret string
		return ret
	}
	return *o.MinValueDateTime
}

// GetMinValueDateTimeOk returns a tuple with the MinValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MinValueDateTime) {
		return nil, false
	}
	return o.MinValueDateTime, true
}

// HasMinValueDateTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueDateTime() bool {
	if o != nil && !IsNil(o.MinValueDateTime) {
		return true
	}

	return false
}

// SetMinValueDateTime gets a reference to the given string and assigns it to the MinValueDateTime field.
func (o *ElementDefinition) SetMinValueDateTime(v string) {
	o.MinValueDateTime = &v
}

// GetMinValueInstant returns the MinValueInstant field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueInstant() string {
	if o == nil || IsNil(o.MinValueInstant) {
		var ret string
		return ret
	}
	return *o.MinValueInstant
}

// GetMinValueInstantOk returns a tuple with the MinValueInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueInstantOk() (*string, bool) {
	if o == nil || IsNil(o.MinValueInstant) {
		return nil, false
	}
	return o.MinValueInstant, true
}

// HasMinValueInstant returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueInstant() bool {
	if o != nil && !IsNil(o.MinValueInstant) {
		return true
	}

	return false
}

// SetMinValueInstant gets a reference to the given string and assigns it to the MinValueInstant field.
func (o *ElementDefinition) SetMinValueInstant(v string) {
	o.MinValueInstant = &v
}

// GetMinValueTime returns the MinValueTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueTime() string {
	if o == nil || IsNil(o.MinValueTime) {
		var ret string
		return ret
	}
	return *o.MinValueTime
}

// GetMinValueTimeOk returns a tuple with the MinValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MinValueTime) {
		return nil, false
	}
	return o.MinValueTime, true
}

// HasMinValueTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueTime() bool {
	if o != nil && !IsNil(o.MinValueTime) {
		return true
	}

	return false
}

// SetMinValueTime gets a reference to the given string and assigns it to the MinValueTime field.
func (o *ElementDefinition) SetMinValueTime(v string) {
	o.MinValueTime = &v
}

// GetMinValueDecimal returns the MinValueDecimal field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueDecimal() float32 {
	if o == nil || IsNil(o.MinValueDecimal) {
		var ret float32
		return ret
	}
	return *o.MinValueDecimal
}

// GetMinValueDecimalOk returns a tuple with the MinValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.MinValueDecimal) {
		return nil, false
	}
	return o.MinValueDecimal, true
}

// HasMinValueDecimal returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueDecimal() bool {
	if o != nil && !IsNil(o.MinValueDecimal) {
		return true
	}

	return false
}

// SetMinValueDecimal gets a reference to the given float32 and assigns it to the MinValueDecimal field.
func (o *ElementDefinition) SetMinValueDecimal(v float32) {
	o.MinValueDecimal = &v
}

// GetMinValueInteger returns the MinValueInteger field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueInteger() float32 {
	if o == nil || IsNil(o.MinValueInteger) {
		var ret float32
		return ret
	}
	return *o.MinValueInteger
}

// GetMinValueIntegerOk returns a tuple with the MinValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.MinValueInteger) {
		return nil, false
	}
	return o.MinValueInteger, true
}

// HasMinValueInteger returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueInteger() bool {
	if o != nil && !IsNil(o.MinValueInteger) {
		return true
	}

	return false
}

// SetMinValueInteger gets a reference to the given float32 and assigns it to the MinValueInteger field.
func (o *ElementDefinition) SetMinValueInteger(v float32) {
	o.MinValueInteger = &v
}

// GetMinValuePositiveInt returns the MinValuePositiveInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValuePositiveInt() float32 {
	if o == nil || IsNil(o.MinValuePositiveInt) {
		var ret float32
		return ret
	}
	return *o.MinValuePositiveInt
}

// GetMinValuePositiveIntOk returns a tuple with the MinValuePositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValuePositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.MinValuePositiveInt) {
		return nil, false
	}
	return o.MinValuePositiveInt, true
}

// HasMinValuePositiveInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValuePositiveInt() bool {
	if o != nil && !IsNil(o.MinValuePositiveInt) {
		return true
	}

	return false
}

// SetMinValuePositiveInt gets a reference to the given float32 and assigns it to the MinValuePositiveInt field.
func (o *ElementDefinition) SetMinValuePositiveInt(v float32) {
	o.MinValuePositiveInt = &v
}

// GetMinValueUnsignedInt returns the MinValueUnsignedInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueUnsignedInt() float32 {
	if o == nil || IsNil(o.MinValueUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.MinValueUnsignedInt
}

// GetMinValueUnsignedIntOk returns a tuple with the MinValueUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.MinValueUnsignedInt) {
		return nil, false
	}
	return o.MinValueUnsignedInt, true
}

// HasMinValueUnsignedInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueUnsignedInt() bool {
	if o != nil && !IsNil(o.MinValueUnsignedInt) {
		return true
	}

	return false
}

// SetMinValueUnsignedInt gets a reference to the given float32 and assigns it to the MinValueUnsignedInt field.
func (o *ElementDefinition) SetMinValueUnsignedInt(v float32) {
	o.MinValueUnsignedInt = &v
}

// GetMinValueQuantity returns the MinValueQuantity field value if set, zero value otherwise.
func (o *ElementDefinition) GetMinValueQuantity() Quantity {
	if o == nil || IsNil(o.MinValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.MinValueQuantity
}

// GetMinValueQuantityOk returns a tuple with the MinValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMinValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MinValueQuantity) {
		return nil, false
	}
	return o.MinValueQuantity, true
}

// HasMinValueQuantity returns a boolean if a field has been set.
func (o *ElementDefinition) HasMinValueQuantity() bool {
	if o != nil && !IsNil(o.MinValueQuantity) {
		return true
	}

	return false
}

// SetMinValueQuantity gets a reference to the given Quantity and assigns it to the MinValueQuantity field.
func (o *ElementDefinition) SetMinValueQuantity(v Quantity) {
	o.MinValueQuantity = &v
}

// GetMaxValueDate returns the MaxValueDate field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueDate() string {
	if o == nil || IsNil(o.MaxValueDate) {
		var ret string
		return ret
	}
	return *o.MaxValueDate
}

// GetMaxValueDateOk returns a tuple with the MaxValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueDateOk() (*string, bool) {
	if o == nil || IsNil(o.MaxValueDate) {
		return nil, false
	}
	return o.MaxValueDate, true
}

// HasMaxValueDate returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueDate() bool {
	if o != nil && !IsNil(o.MaxValueDate) {
		return true
	}

	return false
}

// SetMaxValueDate gets a reference to the given string and assigns it to the MaxValueDate field.
func (o *ElementDefinition) SetMaxValueDate(v string) {
	o.MaxValueDate = &v
}

// GetMaxValueDateTime returns the MaxValueDateTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueDateTime() string {
	if o == nil || IsNil(o.MaxValueDateTime) {
		var ret string
		return ret
	}
	return *o.MaxValueDateTime
}

// GetMaxValueDateTimeOk returns a tuple with the MaxValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxValueDateTime) {
		return nil, false
	}
	return o.MaxValueDateTime, true
}

// HasMaxValueDateTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueDateTime() bool {
	if o != nil && !IsNil(o.MaxValueDateTime) {
		return true
	}

	return false
}

// SetMaxValueDateTime gets a reference to the given string and assigns it to the MaxValueDateTime field.
func (o *ElementDefinition) SetMaxValueDateTime(v string) {
	o.MaxValueDateTime = &v
}

// GetMaxValueInstant returns the MaxValueInstant field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueInstant() string {
	if o == nil || IsNil(o.MaxValueInstant) {
		var ret string
		return ret
	}
	return *o.MaxValueInstant
}

// GetMaxValueInstantOk returns a tuple with the MaxValueInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueInstantOk() (*string, bool) {
	if o == nil || IsNil(o.MaxValueInstant) {
		return nil, false
	}
	return o.MaxValueInstant, true
}

// HasMaxValueInstant returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueInstant() bool {
	if o != nil && !IsNil(o.MaxValueInstant) {
		return true
	}

	return false
}

// SetMaxValueInstant gets a reference to the given string and assigns it to the MaxValueInstant field.
func (o *ElementDefinition) SetMaxValueInstant(v string) {
	o.MaxValueInstant = &v
}

// GetMaxValueTime returns the MaxValueTime field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueTime() string {
	if o == nil || IsNil(o.MaxValueTime) {
		var ret string
		return ret
	}
	return *o.MaxValueTime
}

// GetMaxValueTimeOk returns a tuple with the MaxValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxValueTime) {
		return nil, false
	}
	return o.MaxValueTime, true
}

// HasMaxValueTime returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueTime() bool {
	if o != nil && !IsNil(o.MaxValueTime) {
		return true
	}

	return false
}

// SetMaxValueTime gets a reference to the given string and assigns it to the MaxValueTime field.
func (o *ElementDefinition) SetMaxValueTime(v string) {
	o.MaxValueTime = &v
}

// GetMaxValueDecimal returns the MaxValueDecimal field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueDecimal() float32 {
	if o == nil || IsNil(o.MaxValueDecimal) {
		var ret float32
		return ret
	}
	return *o.MaxValueDecimal
}

// GetMaxValueDecimalOk returns a tuple with the MaxValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxValueDecimal) {
		return nil, false
	}
	return o.MaxValueDecimal, true
}

// HasMaxValueDecimal returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueDecimal() bool {
	if o != nil && !IsNil(o.MaxValueDecimal) {
		return true
	}

	return false
}

// SetMaxValueDecimal gets a reference to the given float32 and assigns it to the MaxValueDecimal field.
func (o *ElementDefinition) SetMaxValueDecimal(v float32) {
	o.MaxValueDecimal = &v
}

// GetMaxValueInteger returns the MaxValueInteger field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueInteger() float32 {
	if o == nil || IsNil(o.MaxValueInteger) {
		var ret float32
		return ret
	}
	return *o.MaxValueInteger
}

// GetMaxValueIntegerOk returns a tuple with the MaxValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxValueInteger) {
		return nil, false
	}
	return o.MaxValueInteger, true
}

// HasMaxValueInteger returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueInteger() bool {
	if o != nil && !IsNil(o.MaxValueInteger) {
		return true
	}

	return false
}

// SetMaxValueInteger gets a reference to the given float32 and assigns it to the MaxValueInteger field.
func (o *ElementDefinition) SetMaxValueInteger(v float32) {
	o.MaxValueInteger = &v
}

// GetMaxValuePositiveInt returns the MaxValuePositiveInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValuePositiveInt() float32 {
	if o == nil || IsNil(o.MaxValuePositiveInt) {
		var ret float32
		return ret
	}
	return *o.MaxValuePositiveInt
}

// GetMaxValuePositiveIntOk returns a tuple with the MaxValuePositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValuePositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxValuePositiveInt) {
		return nil, false
	}
	return o.MaxValuePositiveInt, true
}

// HasMaxValuePositiveInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValuePositiveInt() bool {
	if o != nil && !IsNil(o.MaxValuePositiveInt) {
		return true
	}

	return false
}

// SetMaxValuePositiveInt gets a reference to the given float32 and assigns it to the MaxValuePositiveInt field.
func (o *ElementDefinition) SetMaxValuePositiveInt(v float32) {
	o.MaxValuePositiveInt = &v
}

// GetMaxValueUnsignedInt returns the MaxValueUnsignedInt field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueUnsignedInt() float32 {
	if o == nil || IsNil(o.MaxValueUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.MaxValueUnsignedInt
}

// GetMaxValueUnsignedIntOk returns a tuple with the MaxValueUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxValueUnsignedInt) {
		return nil, false
	}
	return o.MaxValueUnsignedInt, true
}

// HasMaxValueUnsignedInt returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueUnsignedInt() bool {
	if o != nil && !IsNil(o.MaxValueUnsignedInt) {
		return true
	}

	return false
}

// SetMaxValueUnsignedInt gets a reference to the given float32 and assigns it to the MaxValueUnsignedInt field.
func (o *ElementDefinition) SetMaxValueUnsignedInt(v float32) {
	o.MaxValueUnsignedInt = &v
}

// GetMaxValueQuantity returns the MaxValueQuantity field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxValueQuantity() Quantity {
	if o == nil || IsNil(o.MaxValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.MaxValueQuantity
}

// GetMaxValueQuantityOk returns a tuple with the MaxValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxValueQuantity) {
		return nil, false
	}
	return o.MaxValueQuantity, true
}

// HasMaxValueQuantity returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxValueQuantity() bool {
	if o != nil && !IsNil(o.MaxValueQuantity) {
		return true
	}

	return false
}

// SetMaxValueQuantity gets a reference to the given Quantity and assigns it to the MaxValueQuantity field.
func (o *ElementDefinition) SetMaxValueQuantity(v Quantity) {
	o.MaxValueQuantity = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *ElementDefinition) GetMaxLength() float32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret float32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMaxLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *ElementDefinition) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given float32 and assigns it to the MaxLength field.
func (o *ElementDefinition) SetMaxLength(v float32) {
	o.MaxLength = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ElementDefinition) GetCondition() []string {
	if o == nil || IsNil(o.Condition) {
		var ret []string
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetConditionOk() ([]string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ElementDefinition) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []string and assigns it to the Condition field.
func (o *ElementDefinition) SetCondition(v []string) {
	o.Condition = v
}

// GetConstraint returns the Constraint field value if set, zero value otherwise.
func (o *ElementDefinition) GetConstraint() []ElementDefinitionConstraint {
	if o == nil || IsNil(o.Constraint) {
		var ret []ElementDefinitionConstraint
		return ret
	}
	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetConstraintOk() ([]ElementDefinitionConstraint, bool) {
	if o == nil || IsNil(o.Constraint) {
		return nil, false
	}
	return o.Constraint, true
}

// HasConstraint returns a boolean if a field has been set.
func (o *ElementDefinition) HasConstraint() bool {
	if o != nil && !IsNil(o.Constraint) {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given []ElementDefinitionConstraint and assigns it to the Constraint field.
func (o *ElementDefinition) SetConstraint(v []ElementDefinitionConstraint) {
	o.Constraint = v
}

// GetMustSupport returns the MustSupport field value if set, zero value otherwise.
func (o *ElementDefinition) GetMustSupport() bool {
	if o == nil || IsNil(o.MustSupport) {
		var ret bool
		return ret
	}
	return *o.MustSupport
}

// GetMustSupportOk returns a tuple with the MustSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMustSupportOk() (*bool, bool) {
	if o == nil || IsNil(o.MustSupport) {
		return nil, false
	}
	return o.MustSupport, true
}

// HasMustSupport returns a boolean if a field has been set.
func (o *ElementDefinition) HasMustSupport() bool {
	if o != nil && !IsNil(o.MustSupport) {
		return true
	}

	return false
}

// SetMustSupport gets a reference to the given bool and assigns it to the MustSupport field.
func (o *ElementDefinition) SetMustSupport(v bool) {
	o.MustSupport = &v
}

// GetIsModifier returns the IsModifier field value if set, zero value otherwise.
func (o *ElementDefinition) GetIsModifier() bool {
	if o == nil || IsNil(o.IsModifier) {
		var ret bool
		return ret
	}
	return *o.IsModifier
}

// GetIsModifierOk returns a tuple with the IsModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetIsModifierOk() (*bool, bool) {
	if o == nil || IsNil(o.IsModifier) {
		return nil, false
	}
	return o.IsModifier, true
}

// HasIsModifier returns a boolean if a field has been set.
func (o *ElementDefinition) HasIsModifier() bool {
	if o != nil && !IsNil(o.IsModifier) {
		return true
	}

	return false
}

// SetIsModifier gets a reference to the given bool and assigns it to the IsModifier field.
func (o *ElementDefinition) SetIsModifier(v bool) {
	o.IsModifier = &v
}

// GetIsModifierReason returns the IsModifierReason field value if set, zero value otherwise.
func (o *ElementDefinition) GetIsModifierReason() string {
	if o == nil || IsNil(o.IsModifierReason) {
		var ret string
		return ret
	}
	return *o.IsModifierReason
}

// GetIsModifierReasonOk returns a tuple with the IsModifierReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetIsModifierReasonOk() (*string, bool) {
	if o == nil || IsNil(o.IsModifierReason) {
		return nil, false
	}
	return o.IsModifierReason, true
}

// HasIsModifierReason returns a boolean if a field has been set.
func (o *ElementDefinition) HasIsModifierReason() bool {
	if o != nil && !IsNil(o.IsModifierReason) {
		return true
	}

	return false
}

// SetIsModifierReason gets a reference to the given string and assigns it to the IsModifierReason field.
func (o *ElementDefinition) SetIsModifierReason(v string) {
	o.IsModifierReason = &v
}

// GetIsSummary returns the IsSummary field value if set, zero value otherwise.
func (o *ElementDefinition) GetIsSummary() bool {
	if o == nil || IsNil(o.IsSummary) {
		var ret bool
		return ret
	}
	return *o.IsSummary
}

// GetIsSummaryOk returns a tuple with the IsSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetIsSummaryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSummary) {
		return nil, false
	}
	return o.IsSummary, true
}

// HasIsSummary returns a boolean if a field has been set.
func (o *ElementDefinition) HasIsSummary() bool {
	if o != nil && !IsNil(o.IsSummary) {
		return true
	}

	return false
}

// SetIsSummary gets a reference to the given bool and assigns it to the IsSummary field.
func (o *ElementDefinition) SetIsSummary(v bool) {
	o.IsSummary = &v
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *ElementDefinition) GetBinding() ElementDefinitionBinding {
	if o == nil || IsNil(o.Binding) {
		var ret ElementDefinitionBinding
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetBindingOk() (*ElementDefinitionBinding, bool) {
	if o == nil || IsNil(o.Binding) {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *ElementDefinition) HasBinding() bool {
	if o != nil && !IsNil(o.Binding) {
		return true
	}

	return false
}

// SetBinding gets a reference to the given ElementDefinitionBinding and assigns it to the Binding field.
func (o *ElementDefinition) SetBinding(v ElementDefinitionBinding) {
	o.Binding = &v
}

// GetMapping returns the Mapping field value if set, zero value otherwise.
func (o *ElementDefinition) GetMapping() []ElementDefinitionMapping {
	if o == nil || IsNil(o.Mapping) {
		var ret []ElementDefinitionMapping
		return ret
	}
	return o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinition) GetMappingOk() ([]ElementDefinitionMapping, bool) {
	if o == nil || IsNil(o.Mapping) {
		return nil, false
	}
	return o.Mapping, true
}

// HasMapping returns a boolean if a field has been set.
func (o *ElementDefinition) HasMapping() bool {
	if o != nil && !IsNil(o.Mapping) {
		return true
	}

	return false
}

// SetMapping gets a reference to the given []ElementDefinitionMapping and assigns it to the Mapping field.
func (o *ElementDefinition) SetMapping(v []ElementDefinitionMapping) {
	o.Mapping = v
}

func (o ElementDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Representation) {
		toSerialize["representation"] = o.Representation
	}
	if !IsNil(o.SliceName) {
		toSerialize["sliceName"] = o.SliceName
	}
	if !IsNil(o.SliceIsConstraining) {
		toSerialize["sliceIsConstraining"] = o.SliceIsConstraining
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Slicing) {
		toSerialize["slicing"] = o.Slicing
	}
	if !IsNil(o.Short) {
		toSerialize["short"] = o.Short
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Requirements) {
		toSerialize["requirements"] = o.Requirements
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.ContentReference) {
		toSerialize["contentReference"] = o.ContentReference
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DefaultValueBase64Binary) {
		toSerialize["defaultValueBase64Binary"] = o.DefaultValueBase64Binary
	}
	if !IsNil(o.DefaultValueBoolean) {
		toSerialize["defaultValueBoolean"] = o.DefaultValueBoolean
	}
	if !IsNil(o.DefaultValueCanonical) {
		toSerialize["defaultValueCanonical"] = o.DefaultValueCanonical
	}
	if !IsNil(o.DefaultValueCode) {
		toSerialize["defaultValueCode"] = o.DefaultValueCode
	}
	if !IsNil(o.DefaultValueDate) {
		toSerialize["defaultValueDate"] = o.DefaultValueDate
	}
	if !IsNil(o.DefaultValueDateTime) {
		toSerialize["defaultValueDateTime"] = o.DefaultValueDateTime
	}
	if !IsNil(o.DefaultValueDecimal) {
		toSerialize["defaultValueDecimal"] = o.DefaultValueDecimal
	}
	if !IsNil(o.DefaultValueId) {
		toSerialize["defaultValueId"] = o.DefaultValueId
	}
	if !IsNil(o.DefaultValueInstant) {
		toSerialize["defaultValueInstant"] = o.DefaultValueInstant
	}
	if !IsNil(o.DefaultValueInteger) {
		toSerialize["defaultValueInteger"] = o.DefaultValueInteger
	}
	if !IsNil(o.DefaultValueMarkdown) {
		toSerialize["defaultValueMarkdown"] = o.DefaultValueMarkdown
	}
	if !IsNil(o.DefaultValueOid) {
		toSerialize["defaultValueOid"] = o.DefaultValueOid
	}
	if !IsNil(o.DefaultValuePositiveInt) {
		toSerialize["defaultValuePositiveInt"] = o.DefaultValuePositiveInt
	}
	if !IsNil(o.DefaultValueString) {
		toSerialize["defaultValueString"] = o.DefaultValueString
	}
	if !IsNil(o.DefaultValueTime) {
		toSerialize["defaultValueTime"] = o.DefaultValueTime
	}
	if !IsNil(o.DefaultValueUnsignedInt) {
		toSerialize["defaultValueUnsignedInt"] = o.DefaultValueUnsignedInt
	}
	if !IsNil(o.DefaultValueUri) {
		toSerialize["defaultValueUri"] = o.DefaultValueUri
	}
	if !IsNil(o.DefaultValueUrl) {
		toSerialize["defaultValueUrl"] = o.DefaultValueUrl
	}
	if !IsNil(o.DefaultValueUuid) {
		toSerialize["defaultValueUuid"] = o.DefaultValueUuid
	}
	if !IsNil(o.DefaultValueAddress) {
		toSerialize["defaultValueAddress"] = o.DefaultValueAddress
	}
	if !IsNil(o.DefaultValueAge) {
		toSerialize["defaultValueAge"] = o.DefaultValueAge
	}
	if !IsNil(o.DefaultValueAnnotation) {
		toSerialize["defaultValueAnnotation"] = o.DefaultValueAnnotation
	}
	if !IsNil(o.DefaultValueAttachment) {
		toSerialize["defaultValueAttachment"] = o.DefaultValueAttachment
	}
	if !IsNil(o.DefaultValueCodeableConcept) {
		toSerialize["defaultValueCodeableConcept"] = o.DefaultValueCodeableConcept
	}
	if !IsNil(o.DefaultValueCoding) {
		toSerialize["defaultValueCoding"] = o.DefaultValueCoding
	}
	if !IsNil(o.DefaultValueContactPoint) {
		toSerialize["defaultValueContactPoint"] = o.DefaultValueContactPoint
	}
	if !IsNil(o.DefaultValueCount) {
		toSerialize["defaultValueCount"] = o.DefaultValueCount
	}
	if !IsNil(o.DefaultValueDistance) {
		toSerialize["defaultValueDistance"] = o.DefaultValueDistance
	}
	if !IsNil(o.DefaultValueDuration) {
		toSerialize["defaultValueDuration"] = o.DefaultValueDuration
	}
	if !IsNil(o.DefaultValueHumanName) {
		toSerialize["defaultValueHumanName"] = o.DefaultValueHumanName
	}
	if !IsNil(o.DefaultValueIdentifier) {
		toSerialize["defaultValueIdentifier"] = o.DefaultValueIdentifier
	}
	if !IsNil(o.DefaultValueMoney) {
		toSerialize["defaultValueMoney"] = o.DefaultValueMoney
	}
	if !IsNil(o.DefaultValuePeriod) {
		toSerialize["defaultValuePeriod"] = o.DefaultValuePeriod
	}
	if !IsNil(o.DefaultValueQuantity) {
		toSerialize["defaultValueQuantity"] = o.DefaultValueQuantity
	}
	if !IsNil(o.DefaultValueRange) {
		toSerialize["defaultValueRange"] = o.DefaultValueRange
	}
	if !IsNil(o.DefaultValueRatio) {
		toSerialize["defaultValueRatio"] = o.DefaultValueRatio
	}
	if !IsNil(o.DefaultValueReference) {
		toSerialize["defaultValueReference"] = o.DefaultValueReference
	}
	if !IsNil(o.DefaultValueSampledData) {
		toSerialize["defaultValueSampledData"] = o.DefaultValueSampledData
	}
	if !IsNil(o.DefaultValueSignature) {
		toSerialize["defaultValueSignature"] = o.DefaultValueSignature
	}
	if !IsNil(o.DefaultValueTiming) {
		toSerialize["defaultValueTiming"] = o.DefaultValueTiming
	}
	if !IsNil(o.DefaultValueContactDetail) {
		toSerialize["defaultValueContactDetail"] = o.DefaultValueContactDetail
	}
	if !IsNil(o.DefaultValueContributor) {
		toSerialize["defaultValueContributor"] = o.DefaultValueContributor
	}
	if !IsNil(o.DefaultValueDataRequirement) {
		toSerialize["defaultValueDataRequirement"] = o.DefaultValueDataRequirement
	}
	if !IsNil(o.DefaultValueExpression) {
		toSerialize["defaultValueExpression"] = o.DefaultValueExpression
	}
	if !IsNil(o.DefaultValueParameterDefinition) {
		toSerialize["defaultValueParameterDefinition"] = o.DefaultValueParameterDefinition
	}
	if !IsNil(o.DefaultValueRelatedArtifact) {
		toSerialize["defaultValueRelatedArtifact"] = o.DefaultValueRelatedArtifact
	}
	if !IsNil(o.DefaultValueTriggerDefinition) {
		toSerialize["defaultValueTriggerDefinition"] = o.DefaultValueTriggerDefinition
	}
	if !IsNil(o.DefaultValueUsageContext) {
		toSerialize["defaultValueUsageContext"] = o.DefaultValueUsageContext
	}
	if !IsNil(o.DefaultValueDosage) {
		toSerialize["defaultValueDosage"] = o.DefaultValueDosage
	}
	if !IsNil(o.DefaultValueMeta) {
		toSerialize["defaultValueMeta"] = o.DefaultValueMeta
	}
	if !IsNil(o.MeaningWhenMissing) {
		toSerialize["meaningWhenMissing"] = o.MeaningWhenMissing
	}
	if !IsNil(o.OrderMeaning) {
		toSerialize["orderMeaning"] = o.OrderMeaning
	}
	if !IsNil(o.FixedBase64Binary) {
		toSerialize["fixedBase64Binary"] = o.FixedBase64Binary
	}
	if !IsNil(o.FixedBoolean) {
		toSerialize["fixedBoolean"] = o.FixedBoolean
	}
	if !IsNil(o.FixedCanonical) {
		toSerialize["fixedCanonical"] = o.FixedCanonical
	}
	if !IsNil(o.FixedCode) {
		toSerialize["fixedCode"] = o.FixedCode
	}
	if !IsNil(o.FixedDate) {
		toSerialize["fixedDate"] = o.FixedDate
	}
	if !IsNil(o.FixedDateTime) {
		toSerialize["fixedDateTime"] = o.FixedDateTime
	}
	if !IsNil(o.FixedDecimal) {
		toSerialize["fixedDecimal"] = o.FixedDecimal
	}
	if !IsNil(o.FixedId) {
		toSerialize["fixedId"] = o.FixedId
	}
	if !IsNil(o.FixedInstant) {
		toSerialize["fixedInstant"] = o.FixedInstant
	}
	if !IsNil(o.FixedInteger) {
		toSerialize["fixedInteger"] = o.FixedInteger
	}
	if !IsNil(o.FixedMarkdown) {
		toSerialize["fixedMarkdown"] = o.FixedMarkdown
	}
	if !IsNil(o.FixedOid) {
		toSerialize["fixedOid"] = o.FixedOid
	}
	if !IsNil(o.FixedPositiveInt) {
		toSerialize["fixedPositiveInt"] = o.FixedPositiveInt
	}
	if !IsNil(o.FixedString) {
		toSerialize["fixedString"] = o.FixedString
	}
	if !IsNil(o.FixedTime) {
		toSerialize["fixedTime"] = o.FixedTime
	}
	if !IsNil(o.FixedUnsignedInt) {
		toSerialize["fixedUnsignedInt"] = o.FixedUnsignedInt
	}
	if !IsNil(o.FixedUri) {
		toSerialize["fixedUri"] = o.FixedUri
	}
	if !IsNil(o.FixedUrl) {
		toSerialize["fixedUrl"] = o.FixedUrl
	}
	if !IsNil(o.FixedUuid) {
		toSerialize["fixedUuid"] = o.FixedUuid
	}
	if !IsNil(o.FixedAddress) {
		toSerialize["fixedAddress"] = o.FixedAddress
	}
	if !IsNil(o.FixedAge) {
		toSerialize["fixedAge"] = o.FixedAge
	}
	if !IsNil(o.FixedAnnotation) {
		toSerialize["fixedAnnotation"] = o.FixedAnnotation
	}
	if !IsNil(o.FixedAttachment) {
		toSerialize["fixedAttachment"] = o.FixedAttachment
	}
	if !IsNil(o.FixedCodeableConcept) {
		toSerialize["fixedCodeableConcept"] = o.FixedCodeableConcept
	}
	if !IsNil(o.FixedCoding) {
		toSerialize["fixedCoding"] = o.FixedCoding
	}
	if !IsNil(o.FixedContactPoint) {
		toSerialize["fixedContactPoint"] = o.FixedContactPoint
	}
	if !IsNil(o.FixedCount) {
		toSerialize["fixedCount"] = o.FixedCount
	}
	if !IsNil(o.FixedDistance) {
		toSerialize["fixedDistance"] = o.FixedDistance
	}
	if !IsNil(o.FixedDuration) {
		toSerialize["fixedDuration"] = o.FixedDuration
	}
	if !IsNil(o.FixedHumanName) {
		toSerialize["fixedHumanName"] = o.FixedHumanName
	}
	if !IsNil(o.FixedIdentifier) {
		toSerialize["fixedIdentifier"] = o.FixedIdentifier
	}
	if !IsNil(o.FixedMoney) {
		toSerialize["fixedMoney"] = o.FixedMoney
	}
	if !IsNil(o.FixedPeriod) {
		toSerialize["fixedPeriod"] = o.FixedPeriod
	}
	if !IsNil(o.FixedQuantity) {
		toSerialize["fixedQuantity"] = o.FixedQuantity
	}
	if !IsNil(o.FixedRange) {
		toSerialize["fixedRange"] = o.FixedRange
	}
	if !IsNil(o.FixedRatio) {
		toSerialize["fixedRatio"] = o.FixedRatio
	}
	if !IsNil(o.FixedReference) {
		toSerialize["fixedReference"] = o.FixedReference
	}
	if !IsNil(o.FixedSampledData) {
		toSerialize["fixedSampledData"] = o.FixedSampledData
	}
	if !IsNil(o.FixedSignature) {
		toSerialize["fixedSignature"] = o.FixedSignature
	}
	if !IsNil(o.FixedTiming) {
		toSerialize["fixedTiming"] = o.FixedTiming
	}
	if !IsNil(o.FixedContactDetail) {
		toSerialize["fixedContactDetail"] = o.FixedContactDetail
	}
	if !IsNil(o.FixedContributor) {
		toSerialize["fixedContributor"] = o.FixedContributor
	}
	if !IsNil(o.FixedDataRequirement) {
		toSerialize["fixedDataRequirement"] = o.FixedDataRequirement
	}
	if !IsNil(o.FixedExpression) {
		toSerialize["fixedExpression"] = o.FixedExpression
	}
	if !IsNil(o.FixedParameterDefinition) {
		toSerialize["fixedParameterDefinition"] = o.FixedParameterDefinition
	}
	if !IsNil(o.FixedRelatedArtifact) {
		toSerialize["fixedRelatedArtifact"] = o.FixedRelatedArtifact
	}
	if !IsNil(o.FixedTriggerDefinition) {
		toSerialize["fixedTriggerDefinition"] = o.FixedTriggerDefinition
	}
	if !IsNil(o.FixedUsageContext) {
		toSerialize["fixedUsageContext"] = o.FixedUsageContext
	}
	if !IsNil(o.FixedDosage) {
		toSerialize["fixedDosage"] = o.FixedDosage
	}
	if !IsNil(o.FixedMeta) {
		toSerialize["fixedMeta"] = o.FixedMeta
	}
	if !IsNil(o.PatternBase64Binary) {
		toSerialize["patternBase64Binary"] = o.PatternBase64Binary
	}
	if !IsNil(o.PatternBoolean) {
		toSerialize["patternBoolean"] = o.PatternBoolean
	}
	if !IsNil(o.PatternCanonical) {
		toSerialize["patternCanonical"] = o.PatternCanonical
	}
	if !IsNil(o.PatternCode) {
		toSerialize["patternCode"] = o.PatternCode
	}
	if !IsNil(o.PatternDate) {
		toSerialize["patternDate"] = o.PatternDate
	}
	if !IsNil(o.PatternDateTime) {
		toSerialize["patternDateTime"] = o.PatternDateTime
	}
	if !IsNil(o.PatternDecimal) {
		toSerialize["patternDecimal"] = o.PatternDecimal
	}
	if !IsNil(o.PatternId) {
		toSerialize["patternId"] = o.PatternId
	}
	if !IsNil(o.PatternInstant) {
		toSerialize["patternInstant"] = o.PatternInstant
	}
	if !IsNil(o.PatternInteger) {
		toSerialize["patternInteger"] = o.PatternInteger
	}
	if !IsNil(o.PatternMarkdown) {
		toSerialize["patternMarkdown"] = o.PatternMarkdown
	}
	if !IsNil(o.PatternOid) {
		toSerialize["patternOid"] = o.PatternOid
	}
	if !IsNil(o.PatternPositiveInt) {
		toSerialize["patternPositiveInt"] = o.PatternPositiveInt
	}
	if !IsNil(o.PatternString) {
		toSerialize["patternString"] = o.PatternString
	}
	if !IsNil(o.PatternTime) {
		toSerialize["patternTime"] = o.PatternTime
	}
	if !IsNil(o.PatternUnsignedInt) {
		toSerialize["patternUnsignedInt"] = o.PatternUnsignedInt
	}
	if !IsNil(o.PatternUri) {
		toSerialize["patternUri"] = o.PatternUri
	}
	if !IsNil(o.PatternUrl) {
		toSerialize["patternUrl"] = o.PatternUrl
	}
	if !IsNil(o.PatternUuid) {
		toSerialize["patternUuid"] = o.PatternUuid
	}
	if !IsNil(o.PatternAddress) {
		toSerialize["patternAddress"] = o.PatternAddress
	}
	if !IsNil(o.PatternAge) {
		toSerialize["patternAge"] = o.PatternAge
	}
	if !IsNil(o.PatternAnnotation) {
		toSerialize["patternAnnotation"] = o.PatternAnnotation
	}
	if !IsNil(o.PatternAttachment) {
		toSerialize["patternAttachment"] = o.PatternAttachment
	}
	if !IsNil(o.PatternCodeableConcept) {
		toSerialize["patternCodeableConcept"] = o.PatternCodeableConcept
	}
	if !IsNil(o.PatternCoding) {
		toSerialize["patternCoding"] = o.PatternCoding
	}
	if !IsNil(o.PatternContactPoint) {
		toSerialize["patternContactPoint"] = o.PatternContactPoint
	}
	if !IsNil(o.PatternCount) {
		toSerialize["patternCount"] = o.PatternCount
	}
	if !IsNil(o.PatternDistance) {
		toSerialize["patternDistance"] = o.PatternDistance
	}
	if !IsNil(o.PatternDuration) {
		toSerialize["patternDuration"] = o.PatternDuration
	}
	if !IsNil(o.PatternHumanName) {
		toSerialize["patternHumanName"] = o.PatternHumanName
	}
	if !IsNil(o.PatternIdentifier) {
		toSerialize["patternIdentifier"] = o.PatternIdentifier
	}
	if !IsNil(o.PatternMoney) {
		toSerialize["patternMoney"] = o.PatternMoney
	}
	if !IsNil(o.PatternPeriod) {
		toSerialize["patternPeriod"] = o.PatternPeriod
	}
	if !IsNil(o.PatternQuantity) {
		toSerialize["patternQuantity"] = o.PatternQuantity
	}
	if !IsNil(o.PatternRange) {
		toSerialize["patternRange"] = o.PatternRange
	}
	if !IsNil(o.PatternRatio) {
		toSerialize["patternRatio"] = o.PatternRatio
	}
	if !IsNil(o.PatternReference) {
		toSerialize["patternReference"] = o.PatternReference
	}
	if !IsNil(o.PatternSampledData) {
		toSerialize["patternSampledData"] = o.PatternSampledData
	}
	if !IsNil(o.PatternSignature) {
		toSerialize["patternSignature"] = o.PatternSignature
	}
	if !IsNil(o.PatternTiming) {
		toSerialize["patternTiming"] = o.PatternTiming
	}
	if !IsNil(o.PatternContactDetail) {
		toSerialize["patternContactDetail"] = o.PatternContactDetail
	}
	if !IsNil(o.PatternContributor) {
		toSerialize["patternContributor"] = o.PatternContributor
	}
	if !IsNil(o.PatternDataRequirement) {
		toSerialize["patternDataRequirement"] = o.PatternDataRequirement
	}
	if !IsNil(o.PatternExpression) {
		toSerialize["patternExpression"] = o.PatternExpression
	}
	if !IsNil(o.PatternParameterDefinition) {
		toSerialize["patternParameterDefinition"] = o.PatternParameterDefinition
	}
	if !IsNil(o.PatternRelatedArtifact) {
		toSerialize["patternRelatedArtifact"] = o.PatternRelatedArtifact
	}
	if !IsNil(o.PatternTriggerDefinition) {
		toSerialize["patternTriggerDefinition"] = o.PatternTriggerDefinition
	}
	if !IsNil(o.PatternUsageContext) {
		toSerialize["patternUsageContext"] = o.PatternUsageContext
	}
	if !IsNil(o.PatternDosage) {
		toSerialize["patternDosage"] = o.PatternDosage
	}
	if !IsNil(o.PatternMeta) {
		toSerialize["patternMeta"] = o.PatternMeta
	}
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	if !IsNil(o.MinValueDate) {
		toSerialize["minValueDate"] = o.MinValueDate
	}
	if !IsNil(o.MinValueDateTime) {
		toSerialize["minValueDateTime"] = o.MinValueDateTime
	}
	if !IsNil(o.MinValueInstant) {
		toSerialize["minValueInstant"] = o.MinValueInstant
	}
	if !IsNil(o.MinValueTime) {
		toSerialize["minValueTime"] = o.MinValueTime
	}
	if !IsNil(o.MinValueDecimal) {
		toSerialize["minValueDecimal"] = o.MinValueDecimal
	}
	if !IsNil(o.MinValueInteger) {
		toSerialize["minValueInteger"] = o.MinValueInteger
	}
	if !IsNil(o.MinValuePositiveInt) {
		toSerialize["minValuePositiveInt"] = o.MinValuePositiveInt
	}
	if !IsNil(o.MinValueUnsignedInt) {
		toSerialize["minValueUnsignedInt"] = o.MinValueUnsignedInt
	}
	if !IsNil(o.MinValueQuantity) {
		toSerialize["minValueQuantity"] = o.MinValueQuantity
	}
	if !IsNil(o.MaxValueDate) {
		toSerialize["maxValueDate"] = o.MaxValueDate
	}
	if !IsNil(o.MaxValueDateTime) {
		toSerialize["maxValueDateTime"] = o.MaxValueDateTime
	}
	if !IsNil(o.MaxValueInstant) {
		toSerialize["maxValueInstant"] = o.MaxValueInstant
	}
	if !IsNil(o.MaxValueTime) {
		toSerialize["maxValueTime"] = o.MaxValueTime
	}
	if !IsNil(o.MaxValueDecimal) {
		toSerialize["maxValueDecimal"] = o.MaxValueDecimal
	}
	if !IsNil(o.MaxValueInteger) {
		toSerialize["maxValueInteger"] = o.MaxValueInteger
	}
	if !IsNil(o.MaxValuePositiveInt) {
		toSerialize["maxValuePositiveInt"] = o.MaxValuePositiveInt
	}
	if !IsNil(o.MaxValueUnsignedInt) {
		toSerialize["maxValueUnsignedInt"] = o.MaxValueUnsignedInt
	}
	if !IsNil(o.MaxValueQuantity) {
		toSerialize["maxValueQuantity"] = o.MaxValueQuantity
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Constraint) {
		toSerialize["constraint"] = o.Constraint
	}
	if !IsNil(o.MustSupport) {
		toSerialize["mustSupport"] = o.MustSupport
	}
	if !IsNil(o.IsModifier) {
		toSerialize["isModifier"] = o.IsModifier
	}
	if !IsNil(o.IsModifierReason) {
		toSerialize["isModifierReason"] = o.IsModifierReason
	}
	if !IsNil(o.IsSummary) {
		toSerialize["isSummary"] = o.IsSummary
	}
	if !IsNil(o.Binding) {
		toSerialize["binding"] = o.Binding
	}
	if !IsNil(o.Mapping) {
		toSerialize["mapping"] = o.Mapping
	}
	return toSerialize, nil
}

type NullableElementDefinition struct {
	value *ElementDefinition
	isSet bool
}

func (v NullableElementDefinition) Get() *ElementDefinition {
	return v.value
}

func (v *NullableElementDefinition) Set(val *ElementDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableElementDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableElementDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementDefinition(val *ElementDefinition) *NullableElementDefinition {
	return &NullableElementDefinition{value: val, isSet: true}
}

func (v NullableElementDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


