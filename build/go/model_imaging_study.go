/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImagingStudy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImagingStudy{}

// ImagingStudy Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
type ImagingStudy struct {
	// This is a ImagingStudy resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession Number.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The current state of the ImagingStudy.
	Status *string `json:"status,omitempty"`
	// A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
	Modality []Coding `json:"modality,omitempty"`
	// The subject, typically a patient, of the imaging study.
	Subject Reference `json:"subject"`
	// The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
	Encounter *Reference `json:"encounter,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Started *string `json:"started,omitempty"`
	// A list of the diagnostic requests that resulted in this imaging study being performed.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// The requesting/referring physician.
	Referrer *Reference `json:"referrer,omitempty"`
	// Who read the study and interpreted the images or other content.
	Interpreter []Reference `json:"interpreter,omitempty"`
	// The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
	Endpoint []Reference `json:"endpoint,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	NumberOfSeries *float32 `json:"numberOfSeries,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	NumberOfInstances *float32 `json:"numberOfInstances,omitempty"`
	// The procedure which this ImagingStudy was part of.
	ProcedureReference *Reference `json:"procedureReference,omitempty"`
	// The code for the performed procedure type.
	ProcedureCode []CodeableConcept `json:"procedureCode,omitempty"`
	// The principal physical location where the ImagingStudy was performed.
	Location *Reference `json:"location,omitempty"`
	// Description of clinical condition indicating why the ImagingStudy was requested.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Indicates another resource whose existence justifies this Study.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
	Note []Annotation `json:"note,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Each study has one or more series of images or other content.
	Series []ImagingStudySeries `json:"series,omitempty"`
}

type _ImagingStudy ImagingStudy

// NewImagingStudy instantiates a new ImagingStudy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImagingStudy(resourceType string, subject Reference) *ImagingStudy {
	this := ImagingStudy{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewImagingStudyWithDefaults instantiates a new ImagingStudy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagingStudyWithDefaults() *ImagingStudy {
	this := ImagingStudy{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ImagingStudy) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ImagingStudy) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImagingStudy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImagingStudy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImagingStudy) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ImagingStudy) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ImagingStudy) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ImagingStudy) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ImagingStudy) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ImagingStudy) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ImagingStudy) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ImagingStudy) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ImagingStudy) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ImagingStudy) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ImagingStudy) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ImagingStudy) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ImagingStudy) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ImagingStudy) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ImagingStudy) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ImagingStudy) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImagingStudy) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImagingStudy) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImagingStudy) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImagingStudy) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImagingStudy) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImagingStudy) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ImagingStudy) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ImagingStudy) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ImagingStudy) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ImagingStudy) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ImagingStudy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ImagingStudy) SetStatus(v string) {
	o.Status = &v
}

// GetModality returns the Modality field value if set, zero value otherwise.
func (o *ImagingStudy) GetModality() []Coding {
	if o == nil || IsNil(o.Modality) {
		var ret []Coding
		return ret
	}
	return o.Modality
}

// GetModalityOk returns a tuple with the Modality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetModalityOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Modality) {
		return nil, false
	}
	return o.Modality, true
}

// HasModality returns a boolean if a field has been set.
func (o *ImagingStudy) HasModality() bool {
	if o != nil && !IsNil(o.Modality) {
		return true
	}

	return false
}

// SetModality gets a reference to the given []Coding and assigns it to the Modality field.
func (o *ImagingStudy) SetModality(v []Coding) {
	o.Modality = v
}

// GetSubject returns the Subject field value
func (o *ImagingStudy) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *ImagingStudy) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *ImagingStudy) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *ImagingStudy) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *ImagingStudy) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ImagingStudy) GetStarted() string {
	if o == nil || IsNil(o.Started) {
		var ret string
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetStartedOk() (*string, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ImagingStudy) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given string and assigns it to the Started field.
func (o *ImagingStudy) SetStarted(v string) {
	o.Started = &v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *ImagingStudy) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *ImagingStudy) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *ImagingStudy) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *ImagingStudy) GetReferrer() Reference {
	if o == nil || IsNil(o.Referrer) {
		var ret Reference
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetReferrerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *ImagingStudy) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given Reference and assigns it to the Referrer field.
func (o *ImagingStudy) SetReferrer(v Reference) {
	o.Referrer = &v
}

// GetInterpreter returns the Interpreter field value if set, zero value otherwise.
func (o *ImagingStudy) GetInterpreter() []Reference {
	if o == nil || IsNil(o.Interpreter) {
		var ret []Reference
		return ret
	}
	return o.Interpreter
}

// GetInterpreterOk returns a tuple with the Interpreter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetInterpreterOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Interpreter) {
		return nil, false
	}
	return o.Interpreter, true
}

// HasInterpreter returns a boolean if a field has been set.
func (o *ImagingStudy) HasInterpreter() bool {
	if o != nil && !IsNil(o.Interpreter) {
		return true
	}

	return false
}

// SetInterpreter gets a reference to the given []Reference and assigns it to the Interpreter field.
func (o *ImagingStudy) SetInterpreter(v []Reference) {
	o.Interpreter = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ImagingStudy) GetEndpoint() []Reference {
	if o == nil || IsNil(o.Endpoint) {
		var ret []Reference
		return ret
	}
	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetEndpointOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ImagingStudy) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given []Reference and assigns it to the Endpoint field.
func (o *ImagingStudy) SetEndpoint(v []Reference) {
	o.Endpoint = v
}

// GetNumberOfSeries returns the NumberOfSeries field value if set, zero value otherwise.
func (o *ImagingStudy) GetNumberOfSeries() float32 {
	if o == nil || IsNil(o.NumberOfSeries) {
		var ret float32
		return ret
	}
	return *o.NumberOfSeries
}

// GetNumberOfSeriesOk returns a tuple with the NumberOfSeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetNumberOfSeriesOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfSeries) {
		return nil, false
	}
	return o.NumberOfSeries, true
}

// HasNumberOfSeries returns a boolean if a field has been set.
func (o *ImagingStudy) HasNumberOfSeries() bool {
	if o != nil && !IsNil(o.NumberOfSeries) {
		return true
	}

	return false
}

// SetNumberOfSeries gets a reference to the given float32 and assigns it to the NumberOfSeries field.
func (o *ImagingStudy) SetNumberOfSeries(v float32) {
	o.NumberOfSeries = &v
}

// GetNumberOfInstances returns the NumberOfInstances field value if set, zero value otherwise.
func (o *ImagingStudy) GetNumberOfInstances() float32 {
	if o == nil || IsNil(o.NumberOfInstances) {
		var ret float32
		return ret
	}
	return *o.NumberOfInstances
}

// GetNumberOfInstancesOk returns a tuple with the NumberOfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetNumberOfInstancesOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfInstances) {
		return nil, false
	}
	return o.NumberOfInstances, true
}

// HasNumberOfInstances returns a boolean if a field has been set.
func (o *ImagingStudy) HasNumberOfInstances() bool {
	if o != nil && !IsNil(o.NumberOfInstances) {
		return true
	}

	return false
}

// SetNumberOfInstances gets a reference to the given float32 and assigns it to the NumberOfInstances field.
func (o *ImagingStudy) SetNumberOfInstances(v float32) {
	o.NumberOfInstances = &v
}

// GetProcedureReference returns the ProcedureReference field value if set, zero value otherwise.
func (o *ImagingStudy) GetProcedureReference() Reference {
	if o == nil || IsNil(o.ProcedureReference) {
		var ret Reference
		return ret
	}
	return *o.ProcedureReference
}

// GetProcedureReferenceOk returns a tuple with the ProcedureReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetProcedureReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProcedureReference) {
		return nil, false
	}
	return o.ProcedureReference, true
}

// HasProcedureReference returns a boolean if a field has been set.
func (o *ImagingStudy) HasProcedureReference() bool {
	if o != nil && !IsNil(o.ProcedureReference) {
		return true
	}

	return false
}

// SetProcedureReference gets a reference to the given Reference and assigns it to the ProcedureReference field.
func (o *ImagingStudy) SetProcedureReference(v Reference) {
	o.ProcedureReference = &v
}

// GetProcedureCode returns the ProcedureCode field value if set, zero value otherwise.
func (o *ImagingStudy) GetProcedureCode() []CodeableConcept {
	if o == nil || IsNil(o.ProcedureCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProcedureCode
}

// GetProcedureCodeOk returns a tuple with the ProcedureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetProcedureCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProcedureCode) {
		return nil, false
	}
	return o.ProcedureCode, true
}

// HasProcedureCode returns a boolean if a field has been set.
func (o *ImagingStudy) HasProcedureCode() bool {
	if o != nil && !IsNil(o.ProcedureCode) {
		return true
	}

	return false
}

// SetProcedureCode gets a reference to the given []CodeableConcept and assigns it to the ProcedureCode field.
func (o *ImagingStudy) SetProcedureCode(v []CodeableConcept) {
	o.ProcedureCode = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ImagingStudy) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ImagingStudy) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *ImagingStudy) SetLocation(v Reference) {
	o.Location = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ImagingStudy) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ImagingStudy) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *ImagingStudy) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *ImagingStudy) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *ImagingStudy) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *ImagingStudy) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ImagingStudy) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ImagingStudy) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *ImagingStudy) SetNote(v []Annotation) {
	o.Note = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImagingStudy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImagingStudy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImagingStudy) SetDescription(v string) {
	o.Description = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ImagingStudy) GetSeries() []ImagingStudySeries {
	if o == nil || IsNil(o.Series) {
		var ret []ImagingStudySeries
		return ret
	}
	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagingStudy) GetSeriesOk() ([]ImagingStudySeries, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ImagingStudy) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given []ImagingStudySeries and assigns it to the Series field.
func (o *ImagingStudy) SetSeries(v []ImagingStudySeries) {
	o.Series = v
}

func (o ImagingStudy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImagingStudy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Modality) {
		toSerialize["modality"] = o.Modality
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.Interpreter) {
		toSerialize["interpreter"] = o.Interpreter
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.NumberOfSeries) {
		toSerialize["numberOfSeries"] = o.NumberOfSeries
	}
	if !IsNil(o.NumberOfInstances) {
		toSerialize["numberOfInstances"] = o.NumberOfInstances
	}
	if !IsNil(o.ProcedureReference) {
		toSerialize["procedureReference"] = o.ProcedureReference
	}
	if !IsNil(o.ProcedureCode) {
		toSerialize["procedureCode"] = o.ProcedureCode
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	return toSerialize, nil
}

func (o *ImagingStudy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImagingStudy := _ImagingStudy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImagingStudy)

	if err != nil {
		return err
	}

	*o = ImagingStudy(varImagingStudy)

	return err
}

type NullableImagingStudy struct {
	value *ImagingStudy
	isSet bool
}

func (v NullableImagingStudy) Get() *ImagingStudy {
	return v.value
}

func (v *NullableImagingStudy) Set(val *ImagingStudy) {
	v.value = val
	v.isSet = true
}

func (v NullableImagingStudy) IsSet() bool {
	return v.isSet
}

func (v *NullableImagingStudy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImagingStudy(val *ImagingStudy) *NullableImagingStudy {
	return &NullableImagingStudy{value: val, isSet: true}
}

func (v NullableImagingStudy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImagingStudy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


