/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CompositionSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositionSection{}

// CompositionSection A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
type CompositionSection struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A code identifying the kind of content contained within the section. This must be consistent with the section title.
	Code *CodeableConcept `json:"code,omitempty"`
	// Identifies who is responsible for the information in this section, not necessarily who typed it in.
	Author []Reference `json:"author,omitempty"`
	// The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
	Focus *Reference `json:"focus,omitempty"`
	// A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative.
	Text *Narrative `json:"text,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Mode *string `json:"mode,omitempty"`
	// Specifies the order applied to the items in the section entries.
	OrderedBy *CodeableConcept `json:"orderedBy,omitempty"`
	// A reference to the actual resource from which the narrative in the section is derived.
	Entry []Reference `json:"entry,omitempty"`
	// If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
	EmptyReason *CodeableConcept `json:"emptyReason,omitempty"`
	// A nested sub-section within this section.
	Section []CompositionSection `json:"section,omitempty"`
}

// NewCompositionSection instantiates a new CompositionSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositionSection() *CompositionSection {
	this := CompositionSection{}
	return &this
}

// NewCompositionSectionWithDefaults instantiates a new CompositionSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositionSectionWithDefaults() *CompositionSection {
	this := CompositionSection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompositionSection) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompositionSection) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompositionSection) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CompositionSection) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CompositionSection) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CompositionSection) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CompositionSection) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CompositionSection) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CompositionSection) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CompositionSection) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CompositionSection) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CompositionSection) SetTitle(v string) {
	o.Title = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CompositionSection) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CompositionSection) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *CompositionSection) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CompositionSection) GetAuthor() []Reference {
	if o == nil || IsNil(o.Author) {
		var ret []Reference
		return ret
	}
	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetAuthorOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CompositionSection) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given []Reference and assigns it to the Author field.
func (o *CompositionSection) SetAuthor(v []Reference) {
	o.Author = v
}

// GetFocus returns the Focus field value if set, zero value otherwise.
func (o *CompositionSection) GetFocus() Reference {
	if o == nil || IsNil(o.Focus) {
		var ret Reference
		return ret
	}
	return *o.Focus
}

// GetFocusOk returns a tuple with the Focus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetFocusOk() (*Reference, bool) {
	if o == nil || IsNil(o.Focus) {
		return nil, false
	}
	return o.Focus, true
}

// HasFocus returns a boolean if a field has been set.
func (o *CompositionSection) HasFocus() bool {
	if o != nil && !IsNil(o.Focus) {
		return true
	}

	return false
}

// SetFocus gets a reference to the given Reference and assigns it to the Focus field.
func (o *CompositionSection) SetFocus(v Reference) {
	o.Focus = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CompositionSection) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CompositionSection) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *CompositionSection) SetText(v Narrative) {
	o.Text = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CompositionSection) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CompositionSection) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *CompositionSection) SetMode(v string) {
	o.Mode = &v
}

// GetOrderedBy returns the OrderedBy field value if set, zero value otherwise.
func (o *CompositionSection) GetOrderedBy() CodeableConcept {
	if o == nil || IsNil(o.OrderedBy) {
		var ret CodeableConcept
		return ret
	}
	return *o.OrderedBy
}

// GetOrderedByOk returns a tuple with the OrderedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetOrderedByOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OrderedBy) {
		return nil, false
	}
	return o.OrderedBy, true
}

// HasOrderedBy returns a boolean if a field has been set.
func (o *CompositionSection) HasOrderedBy() bool {
	if o != nil && !IsNil(o.OrderedBy) {
		return true
	}

	return false
}

// SetOrderedBy gets a reference to the given CodeableConcept and assigns it to the OrderedBy field.
func (o *CompositionSection) SetOrderedBy(v CodeableConcept) {
	o.OrderedBy = &v
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *CompositionSection) GetEntry() []Reference {
	if o == nil || IsNil(o.Entry) {
		var ret []Reference
		return ret
	}
	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetEntryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *CompositionSection) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given []Reference and assigns it to the Entry field.
func (o *CompositionSection) SetEntry(v []Reference) {
	o.Entry = v
}

// GetEmptyReason returns the EmptyReason field value if set, zero value otherwise.
func (o *CompositionSection) GetEmptyReason() CodeableConcept {
	if o == nil || IsNil(o.EmptyReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.EmptyReason
}

// GetEmptyReasonOk returns a tuple with the EmptyReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetEmptyReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.EmptyReason) {
		return nil, false
	}
	return o.EmptyReason, true
}

// HasEmptyReason returns a boolean if a field has been set.
func (o *CompositionSection) HasEmptyReason() bool {
	if o != nil && !IsNil(o.EmptyReason) {
		return true
	}

	return false
}

// SetEmptyReason gets a reference to the given CodeableConcept and assigns it to the EmptyReason field.
func (o *CompositionSection) SetEmptyReason(v CodeableConcept) {
	o.EmptyReason = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *CompositionSection) GetSection() []CompositionSection {
	if o == nil || IsNil(o.Section) {
		var ret []CompositionSection
		return ret
	}
	return o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionSection) GetSectionOk() ([]CompositionSection, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *CompositionSection) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given []CompositionSection and assigns it to the Section field.
func (o *CompositionSection) SetSection(v []CompositionSection) {
	o.Section = v
}

func (o CompositionSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositionSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Focus) {
		toSerialize["focus"] = o.Focus
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.OrderedBy) {
		toSerialize["orderedBy"] = o.OrderedBy
	}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	if !IsNil(o.EmptyReason) {
		toSerialize["emptyReason"] = o.EmptyReason
	}
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}
	return toSerialize, nil
}

type NullableCompositionSection struct {
	value *CompositionSection
	isSet bool
}

func (v NullableCompositionSection) Get() *CompositionSection {
	return v.value
}

func (v *NullableCompositionSection) Set(val *CompositionSection) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositionSection) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositionSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositionSection(val *CompositionSection) *NullableCompositionSection {
	return &NullableCompositionSection{value: val, isSet: true}
}

func (v NullableCompositionSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositionSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


