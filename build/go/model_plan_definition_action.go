/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the PlanDefinitionAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDefinitionAction{}

// PlanDefinitionAction This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
type PlanDefinitionAction struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Prefix *string `json:"prefix,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A sequence of Unicode characters
	TextEquivalent *string `json:"textEquivalent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.
	Code []CodeableConcept `json:"code,omitempty"`
	// A description of why this action is necessary or appropriate.
	Reason []CodeableConcept `json:"reason,omitempty"`
	// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
	Documentation []RelatedArtifact `json:"documentation,omitempty"`
	// Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
	GoalId []string `json:"goalId,omitempty"`
	// A code or group definition that describes the intended subject of the action and its children, if any.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept,omitempty"`
	// A code or group definition that describes the intended subject of the action and its children, if any.
	SubjectReference *Reference `json:"subjectReference,omitempty"`
	// A description of when the action should be triggered.
	Trigger []TriggerDefinition `json:"trigger,omitempty"`
	// An expression that describes applicability criteria or start/stop conditions for the action.
	Condition []PlanDefinitionCondition `json:"condition,omitempty"`
	// Defines input data requirements for the action.
	Input []DataRequirement `json:"input,omitempty"`
	// Defines the outputs of the action, if any.
	Output []DataRequirement `json:"output,omitempty"`
	// A relationship to another action such as \"before\" or \"30-60 minutes after start of\".
	RelatedAction []PlanDefinitionRelatedAction `json:"relatedAction,omitempty"`
	// An optional value describing when the action should be performed.
	TimingDateTime *string `json:"timingDateTime,omitempty"`
	// An optional value describing when the action should be performed.
	TimingAge *Age `json:"timingAge,omitempty"`
	// An optional value describing when the action should be performed.
	TimingPeriod *Period `json:"timingPeriod,omitempty"`
	// An optional value describing when the action should be performed.
	TimingDuration *Duration `json:"timingDuration,omitempty"`
	// An optional value describing when the action should be performed.
	TimingRange *Range `json:"timingRange,omitempty"`
	// An optional value describing when the action should be performed.
	TimingTiming *Timing `json:"timingTiming,omitempty"`
	// Indicates who should participate in performing the action described.
	Participant []PlanDefinitionParticipant `json:"participant,omitempty"`
	// The type of action to perform (create, update, remove).
	Type *CodeableConcept `json:"type,omitempty"`
	// Defines the grouping behavior for the action and its children.
	GroupingBehavior *string `json:"groupingBehavior,omitempty"`
	// Defines the selection behavior for the action and its children.
	SelectionBehavior *string `json:"selectionBehavior,omitempty"`
	// Defines the required behavior for the action.
	RequiredBehavior *string `json:"requiredBehavior,omitempty"`
	// Defines whether the action should usually be preselected.
	PrecheckBehavior *string `json:"precheckBehavior,omitempty"`
	// Defines whether the action can be selected multiple times.
	CardinalityBehavior *string `json:"cardinalityBehavior,omitempty"`
	// A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
	DefinitionCanonical *string `json:"definitionCanonical,omitempty"`
	// A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
	DefinitionUri *string `json:"definitionUri,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Transform *string `json:"transform,omitempty"`
	// Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
	DynamicValue []PlanDefinitionDynamicValue `json:"dynamicValue,omitempty"`
	// Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
	Action []PlanDefinitionAction `json:"action,omitempty"`
}

// NewPlanDefinitionAction instantiates a new PlanDefinitionAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDefinitionAction() *PlanDefinitionAction {
	this := PlanDefinitionAction{}
	return &this
}

// NewPlanDefinitionActionWithDefaults instantiates a new PlanDefinitionAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDefinitionActionWithDefaults() *PlanDefinitionAction {
	this := PlanDefinitionAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanDefinitionAction) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *PlanDefinitionAction) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *PlanDefinitionAction) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *PlanDefinitionAction) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PlanDefinitionAction) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanDefinitionAction) SetDescription(v string) {
	o.Description = &v
}

// GetTextEquivalent returns the TextEquivalent field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTextEquivalent() string {
	if o == nil || IsNil(o.TextEquivalent) {
		var ret string
		return ret
	}
	return *o.TextEquivalent
}

// GetTextEquivalentOk returns a tuple with the TextEquivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTextEquivalentOk() (*string, bool) {
	if o == nil || IsNil(o.TextEquivalent) {
		return nil, false
	}
	return o.TextEquivalent, true
}

// HasTextEquivalent returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTextEquivalent() bool {
	if o != nil && !IsNil(o.TextEquivalent) {
		return true
	}

	return false
}

// SetTextEquivalent gets a reference to the given string and assigns it to the TextEquivalent field.
func (o *PlanDefinitionAction) SetTextEquivalent(v string) {
	o.TextEquivalent = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *PlanDefinitionAction) SetPriority(v string) {
	o.Priority = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetCode() []CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret []CodeableConcept
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []CodeableConcept and assigns it to the Code field.
func (o *PlanDefinitionAction) SetCode(v []CodeableConcept) {
	o.Code = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetReason() []CodeableConcept {
	if o == nil || IsNil(o.Reason) {
		var ret []CodeableConcept
		return ret
	}
	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given []CodeableConcept and assigns it to the Reason field.
func (o *PlanDefinitionAction) SetReason(v []CodeableConcept) {
	o.Reason = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetDocumentation() []RelatedArtifact {
	if o == nil || IsNil(o.Documentation) {
		var ret []RelatedArtifact
		return ret
	}
	return o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetDocumentationOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given []RelatedArtifact and assigns it to the Documentation field.
func (o *PlanDefinitionAction) SetDocumentation(v []RelatedArtifact) {
	o.Documentation = v
}

// GetGoalId returns the GoalId field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetGoalId() []string {
	if o == nil || IsNil(o.GoalId) {
		var ret []string
		return ret
	}
	return o.GoalId
}

// GetGoalIdOk returns a tuple with the GoalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetGoalIdOk() ([]string, bool) {
	if o == nil || IsNil(o.GoalId) {
		return nil, false
	}
	return o.GoalId, true
}

// HasGoalId returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasGoalId() bool {
	if o != nil && !IsNil(o.GoalId) {
		return true
	}

	return false
}

// SetGoalId gets a reference to the given []string and assigns it to the GoalId field.
func (o *PlanDefinitionAction) SetGoalId(v []string) {
	o.GoalId = v
}

// GetSubjectCodeableConcept returns the SubjectCodeableConcept field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetSubjectCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubjectCodeableConcept
}

// GetSubjectCodeableConceptOk returns a tuple with the SubjectCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetSubjectCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		return nil, false
	}
	return o.SubjectCodeableConcept, true
}

// HasSubjectCodeableConcept returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasSubjectCodeableConcept() bool {
	if o != nil && !IsNil(o.SubjectCodeableConcept) {
		return true
	}

	return false
}

// SetSubjectCodeableConcept gets a reference to the given CodeableConcept and assigns it to the SubjectCodeableConcept field.
func (o *PlanDefinitionAction) SetSubjectCodeableConcept(v CodeableConcept) {
	o.SubjectCodeableConcept = &v
}

// GetSubjectReference returns the SubjectReference field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetSubjectReference() Reference {
	if o == nil || IsNil(o.SubjectReference) {
		var ret Reference
		return ret
	}
	return *o.SubjectReference
}

// GetSubjectReferenceOk returns a tuple with the SubjectReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetSubjectReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SubjectReference) {
		return nil, false
	}
	return o.SubjectReference, true
}

// HasSubjectReference returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasSubjectReference() bool {
	if o != nil && !IsNil(o.SubjectReference) {
		return true
	}

	return false
}

// SetSubjectReference gets a reference to the given Reference and assigns it to the SubjectReference field.
func (o *PlanDefinitionAction) SetSubjectReference(v Reference) {
	o.SubjectReference = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTrigger() []TriggerDefinition {
	if o == nil || IsNil(o.Trigger) {
		var ret []TriggerDefinition
		return ret
	}
	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTriggerOk() ([]TriggerDefinition, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given []TriggerDefinition and assigns it to the Trigger field.
func (o *PlanDefinitionAction) SetTrigger(v []TriggerDefinition) {
	o.Trigger = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetCondition() []PlanDefinitionCondition {
	if o == nil || IsNil(o.Condition) {
		var ret []PlanDefinitionCondition
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetConditionOk() ([]PlanDefinitionCondition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []PlanDefinitionCondition and assigns it to the Condition field.
func (o *PlanDefinitionAction) SetCondition(v []PlanDefinitionCondition) {
	o.Condition = v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetInput() []DataRequirement {
	if o == nil || IsNil(o.Input) {
		var ret []DataRequirement
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetInputOk() ([]DataRequirement, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given []DataRequirement and assigns it to the Input field.
func (o *PlanDefinitionAction) SetInput(v []DataRequirement) {
	o.Input = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetOutput() []DataRequirement {
	if o == nil || IsNil(o.Output) {
		var ret []DataRequirement
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetOutputOk() ([]DataRequirement, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given []DataRequirement and assigns it to the Output field.
func (o *PlanDefinitionAction) SetOutput(v []DataRequirement) {
	o.Output = v
}

// GetRelatedAction returns the RelatedAction field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetRelatedAction() []PlanDefinitionRelatedAction {
	if o == nil || IsNil(o.RelatedAction) {
		var ret []PlanDefinitionRelatedAction
		return ret
	}
	return o.RelatedAction
}

// GetRelatedActionOk returns a tuple with the RelatedAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetRelatedActionOk() ([]PlanDefinitionRelatedAction, bool) {
	if o == nil || IsNil(o.RelatedAction) {
		return nil, false
	}
	return o.RelatedAction, true
}

// HasRelatedAction returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasRelatedAction() bool {
	if o != nil && !IsNil(o.RelatedAction) {
		return true
	}

	return false
}

// SetRelatedAction gets a reference to the given []PlanDefinitionRelatedAction and assigns it to the RelatedAction field.
func (o *PlanDefinitionAction) SetRelatedAction(v []PlanDefinitionRelatedAction) {
	o.RelatedAction = v
}

// GetTimingDateTime returns the TimingDateTime field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingDateTime() string {
	if o == nil || IsNil(o.TimingDateTime) {
		var ret string
		return ret
	}
	return *o.TimingDateTime
}

// GetTimingDateTimeOk returns a tuple with the TimingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDateTime) {
		return nil, false
	}
	return o.TimingDateTime, true
}

// HasTimingDateTime returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingDateTime() bool {
	if o != nil && !IsNil(o.TimingDateTime) {
		return true
	}

	return false
}

// SetTimingDateTime gets a reference to the given string and assigns it to the TimingDateTime field.
func (o *PlanDefinitionAction) SetTimingDateTime(v string) {
	o.TimingDateTime = &v
}

// GetTimingAge returns the TimingAge field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingAge() Age {
	if o == nil || IsNil(o.TimingAge) {
		var ret Age
		return ret
	}
	return *o.TimingAge
}

// GetTimingAgeOk returns a tuple with the TimingAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.TimingAge) {
		return nil, false
	}
	return o.TimingAge, true
}

// HasTimingAge returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingAge() bool {
	if o != nil && !IsNil(o.TimingAge) {
		return true
	}

	return false
}

// SetTimingAge gets a reference to the given Age and assigns it to the TimingAge field.
func (o *PlanDefinitionAction) SetTimingAge(v Age) {
	o.TimingAge = &v
}

// GetTimingPeriod returns the TimingPeriod field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingPeriod() Period {
	if o == nil || IsNil(o.TimingPeriod) {
		var ret Period
		return ret
	}
	return *o.TimingPeriod
}

// GetTimingPeriodOk returns a tuple with the TimingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.TimingPeriod) {
		return nil, false
	}
	return o.TimingPeriod, true
}

// HasTimingPeriod returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingPeriod() bool {
	if o != nil && !IsNil(o.TimingPeriod) {
		return true
	}

	return false
}

// SetTimingPeriod gets a reference to the given Period and assigns it to the TimingPeriod field.
func (o *PlanDefinitionAction) SetTimingPeriod(v Period) {
	o.TimingPeriod = &v
}

// GetTimingDuration returns the TimingDuration field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingDuration() Duration {
	if o == nil || IsNil(o.TimingDuration) {
		var ret Duration
		return ret
	}
	return *o.TimingDuration
}

// GetTimingDurationOk returns a tuple with the TimingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.TimingDuration) {
		return nil, false
	}
	return o.TimingDuration, true
}

// HasTimingDuration returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingDuration() bool {
	if o != nil && !IsNil(o.TimingDuration) {
		return true
	}

	return false
}

// SetTimingDuration gets a reference to the given Duration and assigns it to the TimingDuration field.
func (o *PlanDefinitionAction) SetTimingDuration(v Duration) {
	o.TimingDuration = &v
}

// GetTimingRange returns the TimingRange field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingRange() Range {
	if o == nil || IsNil(o.TimingRange) {
		var ret Range
		return ret
	}
	return *o.TimingRange
}

// GetTimingRangeOk returns a tuple with the TimingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.TimingRange) {
		return nil, false
	}
	return o.TimingRange, true
}

// HasTimingRange returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingRange() bool {
	if o != nil && !IsNil(o.TimingRange) {
		return true
	}

	return false
}

// SetTimingRange gets a reference to the given Range and assigns it to the TimingRange field.
func (o *PlanDefinitionAction) SetTimingRange(v Range) {
	o.TimingRange = &v
}

// GetTimingTiming returns the TimingTiming field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTimingTiming() Timing {
	if o == nil || IsNil(o.TimingTiming) {
		var ret Timing
		return ret
	}
	return *o.TimingTiming
}

// GetTimingTimingOk returns a tuple with the TimingTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTimingTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.TimingTiming) {
		return nil, false
	}
	return o.TimingTiming, true
}

// HasTimingTiming returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTimingTiming() bool {
	if o != nil && !IsNil(o.TimingTiming) {
		return true
	}

	return false
}

// SetTimingTiming gets a reference to the given Timing and assigns it to the TimingTiming field.
func (o *PlanDefinitionAction) SetTimingTiming(v Timing) {
	o.TimingTiming = &v
}

// GetParticipant returns the Participant field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetParticipant() []PlanDefinitionParticipant {
	if o == nil || IsNil(o.Participant) {
		var ret []PlanDefinitionParticipant
		return ret
	}
	return o.Participant
}

// GetParticipantOk returns a tuple with the Participant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetParticipantOk() ([]PlanDefinitionParticipant, bool) {
	if o == nil || IsNil(o.Participant) {
		return nil, false
	}
	return o.Participant, true
}

// HasParticipant returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasParticipant() bool {
	if o != nil && !IsNil(o.Participant) {
		return true
	}

	return false
}

// SetParticipant gets a reference to the given []PlanDefinitionParticipant and assigns it to the Participant field.
func (o *PlanDefinitionAction) SetParticipant(v []PlanDefinitionParticipant) {
	o.Participant = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *PlanDefinitionAction) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetGroupingBehavior returns the GroupingBehavior field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetGroupingBehavior() string {
	if o == nil || IsNil(o.GroupingBehavior) {
		var ret string
		return ret
	}
	return *o.GroupingBehavior
}

// GetGroupingBehaviorOk returns a tuple with the GroupingBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetGroupingBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.GroupingBehavior) {
		return nil, false
	}
	return o.GroupingBehavior, true
}

// HasGroupingBehavior returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasGroupingBehavior() bool {
	if o != nil && !IsNil(o.GroupingBehavior) {
		return true
	}

	return false
}

// SetGroupingBehavior gets a reference to the given string and assigns it to the GroupingBehavior field.
func (o *PlanDefinitionAction) SetGroupingBehavior(v string) {
	o.GroupingBehavior = &v
}

// GetSelectionBehavior returns the SelectionBehavior field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetSelectionBehavior() string {
	if o == nil || IsNil(o.SelectionBehavior) {
		var ret string
		return ret
	}
	return *o.SelectionBehavior
}

// GetSelectionBehaviorOk returns a tuple with the SelectionBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetSelectionBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.SelectionBehavior) {
		return nil, false
	}
	return o.SelectionBehavior, true
}

// HasSelectionBehavior returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasSelectionBehavior() bool {
	if o != nil && !IsNil(o.SelectionBehavior) {
		return true
	}

	return false
}

// SetSelectionBehavior gets a reference to the given string and assigns it to the SelectionBehavior field.
func (o *PlanDefinitionAction) SetSelectionBehavior(v string) {
	o.SelectionBehavior = &v
}

// GetRequiredBehavior returns the RequiredBehavior field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetRequiredBehavior() string {
	if o == nil || IsNil(o.RequiredBehavior) {
		var ret string
		return ret
	}
	return *o.RequiredBehavior
}

// GetRequiredBehaviorOk returns a tuple with the RequiredBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetRequiredBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredBehavior) {
		return nil, false
	}
	return o.RequiredBehavior, true
}

// HasRequiredBehavior returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasRequiredBehavior() bool {
	if o != nil && !IsNil(o.RequiredBehavior) {
		return true
	}

	return false
}

// SetRequiredBehavior gets a reference to the given string and assigns it to the RequiredBehavior field.
func (o *PlanDefinitionAction) SetRequiredBehavior(v string) {
	o.RequiredBehavior = &v
}

// GetPrecheckBehavior returns the PrecheckBehavior field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetPrecheckBehavior() string {
	if o == nil || IsNil(o.PrecheckBehavior) {
		var ret string
		return ret
	}
	return *o.PrecheckBehavior
}

// GetPrecheckBehaviorOk returns a tuple with the PrecheckBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetPrecheckBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.PrecheckBehavior) {
		return nil, false
	}
	return o.PrecheckBehavior, true
}

// HasPrecheckBehavior returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasPrecheckBehavior() bool {
	if o != nil && !IsNil(o.PrecheckBehavior) {
		return true
	}

	return false
}

// SetPrecheckBehavior gets a reference to the given string and assigns it to the PrecheckBehavior field.
func (o *PlanDefinitionAction) SetPrecheckBehavior(v string) {
	o.PrecheckBehavior = &v
}

// GetCardinalityBehavior returns the CardinalityBehavior field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetCardinalityBehavior() string {
	if o == nil || IsNil(o.CardinalityBehavior) {
		var ret string
		return ret
	}
	return *o.CardinalityBehavior
}

// GetCardinalityBehaviorOk returns a tuple with the CardinalityBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetCardinalityBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.CardinalityBehavior) {
		return nil, false
	}
	return o.CardinalityBehavior, true
}

// HasCardinalityBehavior returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasCardinalityBehavior() bool {
	if o != nil && !IsNil(o.CardinalityBehavior) {
		return true
	}

	return false
}

// SetCardinalityBehavior gets a reference to the given string and assigns it to the CardinalityBehavior field.
func (o *PlanDefinitionAction) SetCardinalityBehavior(v string) {
	o.CardinalityBehavior = &v
}

// GetDefinitionCanonical returns the DefinitionCanonical field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetDefinitionCanonical() string {
	if o == nil || IsNil(o.DefinitionCanonical) {
		var ret string
		return ret
	}
	return *o.DefinitionCanonical
}

// GetDefinitionCanonicalOk returns a tuple with the DefinitionCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetDefinitionCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionCanonical) {
		return nil, false
	}
	return o.DefinitionCanonical, true
}

// HasDefinitionCanonical returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasDefinitionCanonical() bool {
	if o != nil && !IsNil(o.DefinitionCanonical) {
		return true
	}

	return false
}

// SetDefinitionCanonical gets a reference to the given string and assigns it to the DefinitionCanonical field.
func (o *PlanDefinitionAction) SetDefinitionCanonical(v string) {
	o.DefinitionCanonical = &v
}

// GetDefinitionUri returns the DefinitionUri field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetDefinitionUri() string {
	if o == nil || IsNil(o.DefinitionUri) {
		var ret string
		return ret
	}
	return *o.DefinitionUri
}

// GetDefinitionUriOk returns a tuple with the DefinitionUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetDefinitionUriOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionUri) {
		return nil, false
	}
	return o.DefinitionUri, true
}

// HasDefinitionUri returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasDefinitionUri() bool {
	if o != nil && !IsNil(o.DefinitionUri) {
		return true
	}

	return false
}

// SetDefinitionUri gets a reference to the given string and assigns it to the DefinitionUri field.
func (o *PlanDefinitionAction) SetDefinitionUri(v string) {
	o.DefinitionUri = &v
}

// GetTransform returns the Transform field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetTransform() string {
	if o == nil || IsNil(o.Transform) {
		var ret string
		return ret
	}
	return *o.Transform
}

// GetTransformOk returns a tuple with the Transform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetTransformOk() (*string, bool) {
	if o == nil || IsNil(o.Transform) {
		return nil, false
	}
	return o.Transform, true
}

// HasTransform returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasTransform() bool {
	if o != nil && !IsNil(o.Transform) {
		return true
	}

	return false
}

// SetTransform gets a reference to the given string and assigns it to the Transform field.
func (o *PlanDefinitionAction) SetTransform(v string) {
	o.Transform = &v
}

// GetDynamicValue returns the DynamicValue field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetDynamicValue() []PlanDefinitionDynamicValue {
	if o == nil || IsNil(o.DynamicValue) {
		var ret []PlanDefinitionDynamicValue
		return ret
	}
	return o.DynamicValue
}

// GetDynamicValueOk returns a tuple with the DynamicValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetDynamicValueOk() ([]PlanDefinitionDynamicValue, bool) {
	if o == nil || IsNil(o.DynamicValue) {
		return nil, false
	}
	return o.DynamicValue, true
}

// HasDynamicValue returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasDynamicValue() bool {
	if o != nil && !IsNil(o.DynamicValue) {
		return true
	}

	return false
}

// SetDynamicValue gets a reference to the given []PlanDefinitionDynamicValue and assigns it to the DynamicValue field.
func (o *PlanDefinitionAction) SetDynamicValue(v []PlanDefinitionDynamicValue) {
	o.DynamicValue = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PlanDefinitionAction) GetAction() []PlanDefinitionAction {
	if o == nil || IsNil(o.Action) {
		var ret []PlanDefinitionAction
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionAction) GetActionOk() ([]PlanDefinitionAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PlanDefinitionAction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []PlanDefinitionAction and assigns it to the Action field.
func (o *PlanDefinitionAction) SetAction(v []PlanDefinitionAction) {
	o.Action = v
}

func (o PlanDefinitionAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDefinitionAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TextEquivalent) {
		toSerialize["textEquivalent"] = o.TextEquivalent
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.GoalId) {
		toSerialize["goalId"] = o.GoalId
	}
	if !IsNil(o.SubjectCodeableConcept) {
		toSerialize["subjectCodeableConcept"] = o.SubjectCodeableConcept
	}
	if !IsNil(o.SubjectReference) {
		toSerialize["subjectReference"] = o.SubjectReference
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.RelatedAction) {
		toSerialize["relatedAction"] = o.RelatedAction
	}
	if !IsNil(o.TimingDateTime) {
		toSerialize["timingDateTime"] = o.TimingDateTime
	}
	if !IsNil(o.TimingAge) {
		toSerialize["timingAge"] = o.TimingAge
	}
	if !IsNil(o.TimingPeriod) {
		toSerialize["timingPeriod"] = o.TimingPeriod
	}
	if !IsNil(o.TimingDuration) {
		toSerialize["timingDuration"] = o.TimingDuration
	}
	if !IsNil(o.TimingRange) {
		toSerialize["timingRange"] = o.TimingRange
	}
	if !IsNil(o.TimingTiming) {
		toSerialize["timingTiming"] = o.TimingTiming
	}
	if !IsNil(o.Participant) {
		toSerialize["participant"] = o.Participant
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.GroupingBehavior) {
		toSerialize["groupingBehavior"] = o.GroupingBehavior
	}
	if !IsNil(o.SelectionBehavior) {
		toSerialize["selectionBehavior"] = o.SelectionBehavior
	}
	if !IsNil(o.RequiredBehavior) {
		toSerialize["requiredBehavior"] = o.RequiredBehavior
	}
	if !IsNil(o.PrecheckBehavior) {
		toSerialize["precheckBehavior"] = o.PrecheckBehavior
	}
	if !IsNil(o.CardinalityBehavior) {
		toSerialize["cardinalityBehavior"] = o.CardinalityBehavior
	}
	if !IsNil(o.DefinitionCanonical) {
		toSerialize["definitionCanonical"] = o.DefinitionCanonical
	}
	if !IsNil(o.DefinitionUri) {
		toSerialize["definitionUri"] = o.DefinitionUri
	}
	if !IsNil(o.Transform) {
		toSerialize["transform"] = o.Transform
	}
	if !IsNil(o.DynamicValue) {
		toSerialize["dynamicValue"] = o.DynamicValue
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullablePlanDefinitionAction struct {
	value *PlanDefinitionAction
	isSet bool
}

func (v NullablePlanDefinitionAction) Get() *PlanDefinitionAction {
	return v.value
}

func (v *NullablePlanDefinitionAction) Set(val *PlanDefinitionAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDefinitionAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDefinitionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDefinitionAction(val *PlanDefinitionAction) *NullablePlanDefinitionAction {
	return &NullablePlanDefinitionAction{value: val, isSet: true}
}

func (v NullablePlanDefinitionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDefinitionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


