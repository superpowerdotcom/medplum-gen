/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProvenanceEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvenanceEntity{}

// ProvenanceEntity Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
type ProvenanceEntity struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// How the entity was used during the activity.
	Role *string `json:"role,omitempty"`
	// Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
	What Reference `json:"what"`
	// The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
	Agent []ProvenanceAgent `json:"agent,omitempty"`
}

type _ProvenanceEntity ProvenanceEntity

// NewProvenanceEntity instantiates a new ProvenanceEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceEntity(what Reference) *ProvenanceEntity {
	this := ProvenanceEntity{}
	this.What = what
	return &this
}

// NewProvenanceEntityWithDefaults instantiates a new ProvenanceEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceEntityWithDefaults() *ProvenanceEntity {
	this := ProvenanceEntity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProvenanceEntity) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ProvenanceEntity) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ProvenanceEntity) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ProvenanceEntity) SetRole(v string) {
	o.Role = &v
}

// GetWhat returns the What field value
func (o *ProvenanceEntity) GetWhat() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.What
}

// GetWhatOk returns a tuple with the What field value
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetWhatOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.What, true
}

// SetWhat sets field value
func (o *ProvenanceEntity) SetWhat(v Reference) {
	o.What = v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetAgent() []ProvenanceAgent {
	if o == nil || IsNil(o.Agent) {
		var ret []ProvenanceAgent
		return ret
	}
	return o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetAgentOk() ([]ProvenanceAgent, bool) {
	if o == nil || IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasAgent() bool {
	if o != nil && !IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given []ProvenanceAgent and assigns it to the Agent field.
func (o *ProvenanceEntity) SetAgent(v []ProvenanceAgent) {
	o.Agent = v
}

func (o ProvenanceEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvenanceEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["what"] = o.What
	if !IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	return toSerialize, nil
}

func (o *ProvenanceEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"what",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProvenanceEntity := _ProvenanceEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProvenanceEntity)

	if err != nil {
		return err
	}

	*o = ProvenanceEntity(varProvenanceEntity)

	return err
}

type NullableProvenanceEntity struct {
	value *ProvenanceEntity
	isSet bool
}

func (v NullableProvenanceEntity) Get() *ProvenanceEntity {
	return v.value
}

func (v *NullableProvenanceEntity) Set(val *ProvenanceEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceEntity(val *ProvenanceEntity) *NullableProvenanceEntity {
	return &NullableProvenanceEntity{value: val, isSet: true}
}

func (v NullableProvenanceEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


