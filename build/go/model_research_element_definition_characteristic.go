/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ResearchElementDefinitionCharacteristic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResearchElementDefinitionCharacteristic{}

// ResearchElementDefinitionCharacteristic The ResearchElementDefinition resource describes a \"PICO\" element that knowledge (evidence, assertion, recommendation) is about.
type ResearchElementDefinitionCharacteristic struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCodeableConcept *CodeableConcept `json:"definitionCodeableConcept,omitempty"`
	// Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCanonical *string `json:"definitionCanonical,omitempty"`
	// Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionExpression *Expression `json:"definitionExpression,omitempty"`
	// Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionDataRequirement *DataRequirement `json:"definitionDataRequirement,omitempty"`
	// Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
	UsageContext []UsageContext `json:"usageContext,omitempty"`
	// Value of \"true\" or \"false\"
	Exclude *bool `json:"exclude,omitempty"`
	// Specifies the UCUM unit for the outcome.
	UnitOfMeasure *CodeableConcept `json:"unitOfMeasure,omitempty"`
	// A sequence of Unicode characters
	StudyEffectiveDescription *string `json:"studyEffectiveDescription,omitempty"`
	// Indicates what effective period the study covers.
	StudyEffectiveDateTime *string `json:"studyEffectiveDateTime,omitempty"`
	// Indicates what effective period the study covers.
	StudyEffectivePeriod *Period `json:"studyEffectivePeriod,omitempty"`
	// Indicates what effective period the study covers.
	StudyEffectiveDuration *Duration `json:"studyEffectiveDuration,omitempty"`
	// Indicates what effective period the study covers.
	StudyEffectiveTiming *Timing `json:"studyEffectiveTiming,omitempty"`
	// Indicates duration from the study initiation.
	StudyEffectiveTimeFromStart *Duration `json:"studyEffectiveTimeFromStart,omitempty"`
	// Indicates how elements are aggregated within the study effective period.
	StudyEffectiveGroupMeasure *string `json:"studyEffectiveGroupMeasure,omitempty"`
	// A sequence of Unicode characters
	ParticipantEffectiveDescription *string `json:"participantEffectiveDescription,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDateTime *string `json:"participantEffectiveDateTime,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectivePeriod *Period `json:"participantEffectivePeriod,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDuration *Duration `json:"participantEffectiveDuration,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveTiming *Timing `json:"participantEffectiveTiming,omitempty"`
	// Indicates duration from the participant's study entry.
	ParticipantEffectiveTimeFromStart *Duration `json:"participantEffectiveTimeFromStart,omitempty"`
	// Indicates how elements are aggregated within the study effective period.
	ParticipantEffectiveGroupMeasure *string `json:"participantEffectiveGroupMeasure,omitempty"`
}

// NewResearchElementDefinitionCharacteristic instantiates a new ResearchElementDefinitionCharacteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResearchElementDefinitionCharacteristic() *ResearchElementDefinitionCharacteristic {
	this := ResearchElementDefinitionCharacteristic{}
	return &this
}

// NewResearchElementDefinitionCharacteristicWithDefaults instantiates a new ResearchElementDefinitionCharacteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResearchElementDefinitionCharacteristicWithDefaults() *ResearchElementDefinitionCharacteristic {
	this := ResearchElementDefinitionCharacteristic{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResearchElementDefinitionCharacteristic) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ResearchElementDefinitionCharacteristic) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ResearchElementDefinitionCharacteristic) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDefinitionCodeableConcept returns the DefinitionCodeableConcept field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DefinitionCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DefinitionCodeableConcept
}

// GetDefinitionCodeableConceptOk returns a tuple with the DefinitionCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DefinitionCodeableConcept) {
		return nil, false
	}
	return o.DefinitionCodeableConcept, true
}

// HasDefinitionCodeableConcept returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasDefinitionCodeableConcept() bool {
	if o != nil && !IsNil(o.DefinitionCodeableConcept) {
		return true
	}

	return false
}

// SetDefinitionCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DefinitionCodeableConcept field.
func (o *ResearchElementDefinitionCharacteristic) SetDefinitionCodeableConcept(v CodeableConcept) {
	o.DefinitionCodeableConcept = &v
}

// GetDefinitionCanonical returns the DefinitionCanonical field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionCanonical() string {
	if o == nil || IsNil(o.DefinitionCanonical) {
		var ret string
		return ret
	}
	return *o.DefinitionCanonical
}

// GetDefinitionCanonicalOk returns a tuple with the DefinitionCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionCanonical) {
		return nil, false
	}
	return o.DefinitionCanonical, true
}

// HasDefinitionCanonical returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasDefinitionCanonical() bool {
	if o != nil && !IsNil(o.DefinitionCanonical) {
		return true
	}

	return false
}

// SetDefinitionCanonical gets a reference to the given string and assigns it to the DefinitionCanonical field.
func (o *ResearchElementDefinitionCharacteristic) SetDefinitionCanonical(v string) {
	o.DefinitionCanonical = &v
}

// GetDefinitionExpression returns the DefinitionExpression field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionExpression() Expression {
	if o == nil || IsNil(o.DefinitionExpression) {
		var ret Expression
		return ret
	}
	return *o.DefinitionExpression
}

// GetDefinitionExpressionOk returns a tuple with the DefinitionExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.DefinitionExpression) {
		return nil, false
	}
	return o.DefinitionExpression, true
}

// HasDefinitionExpression returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasDefinitionExpression() bool {
	if o != nil && !IsNil(o.DefinitionExpression) {
		return true
	}

	return false
}

// SetDefinitionExpression gets a reference to the given Expression and assigns it to the DefinitionExpression field.
func (o *ResearchElementDefinitionCharacteristic) SetDefinitionExpression(v Expression) {
	o.DefinitionExpression = &v
}

// GetDefinitionDataRequirement returns the DefinitionDataRequirement field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionDataRequirement() DataRequirement {
	if o == nil || IsNil(o.DefinitionDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.DefinitionDataRequirement
}

// GetDefinitionDataRequirementOk returns a tuple with the DefinitionDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetDefinitionDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.DefinitionDataRequirement) {
		return nil, false
	}
	return o.DefinitionDataRequirement, true
}

// HasDefinitionDataRequirement returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasDefinitionDataRequirement() bool {
	if o != nil && !IsNil(o.DefinitionDataRequirement) {
		return true
	}

	return false
}

// SetDefinitionDataRequirement gets a reference to the given DataRequirement and assigns it to the DefinitionDataRequirement field.
func (o *ResearchElementDefinitionCharacteristic) SetDefinitionDataRequirement(v DataRequirement) {
	o.DefinitionDataRequirement = &v
}

// GetUsageContext returns the UsageContext field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetUsageContext() []UsageContext {
	if o == nil || IsNil(o.UsageContext) {
		var ret []UsageContext
		return ret
	}
	return o.UsageContext
}

// GetUsageContextOk returns a tuple with the UsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetUsageContextOk() ([]UsageContext, bool) {
	if o == nil || IsNil(o.UsageContext) {
		return nil, false
	}
	return o.UsageContext, true
}

// HasUsageContext returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasUsageContext() bool {
	if o != nil && !IsNil(o.UsageContext) {
		return true
	}

	return false
}

// SetUsageContext gets a reference to the given []UsageContext and assigns it to the UsageContext field.
func (o *ResearchElementDefinitionCharacteristic) SetUsageContext(v []UsageContext) {
	o.UsageContext = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *ResearchElementDefinitionCharacteristic) SetExclude(v bool) {
	o.Exclude = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetUnitOfMeasure() CodeableConcept {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret CodeableConcept
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetUnitOfMeasureOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given CodeableConcept and assigns it to the UnitOfMeasure field.
func (o *ResearchElementDefinitionCharacteristic) SetUnitOfMeasure(v CodeableConcept) {
	o.UnitOfMeasure = &v
}

// GetStudyEffectiveDescription returns the StudyEffectiveDescription field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDescription() string {
	if o == nil || IsNil(o.StudyEffectiveDescription) {
		var ret string
		return ret
	}
	return *o.StudyEffectiveDescription
}

// GetStudyEffectiveDescriptionOk returns a tuple with the StudyEffectiveDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.StudyEffectiveDescription) {
		return nil, false
	}
	return o.StudyEffectiveDescription, true
}

// HasStudyEffectiveDescription returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveDescription() bool {
	if o != nil && !IsNil(o.StudyEffectiveDescription) {
		return true
	}

	return false
}

// SetStudyEffectiveDescription gets a reference to the given string and assigns it to the StudyEffectiveDescription field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveDescription(v string) {
	o.StudyEffectiveDescription = &v
}

// GetStudyEffectiveDateTime returns the StudyEffectiveDateTime field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDateTime() string {
	if o == nil || IsNil(o.StudyEffectiveDateTime) {
		var ret string
		return ret
	}
	return *o.StudyEffectiveDateTime
}

// GetStudyEffectiveDateTimeOk returns a tuple with the StudyEffectiveDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StudyEffectiveDateTime) {
		return nil, false
	}
	return o.StudyEffectiveDateTime, true
}

// HasStudyEffectiveDateTime returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveDateTime() bool {
	if o != nil && !IsNil(o.StudyEffectiveDateTime) {
		return true
	}

	return false
}

// SetStudyEffectiveDateTime gets a reference to the given string and assigns it to the StudyEffectiveDateTime field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveDateTime(v string) {
	o.StudyEffectiveDateTime = &v
}

// GetStudyEffectivePeriod returns the StudyEffectivePeriod field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectivePeriod() Period {
	if o == nil || IsNil(o.StudyEffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.StudyEffectivePeriod
}

// GetStudyEffectivePeriodOk returns a tuple with the StudyEffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.StudyEffectivePeriod) {
		return nil, false
	}
	return o.StudyEffectivePeriod, true
}

// HasStudyEffectivePeriod returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectivePeriod() bool {
	if o != nil && !IsNil(o.StudyEffectivePeriod) {
		return true
	}

	return false
}

// SetStudyEffectivePeriod gets a reference to the given Period and assigns it to the StudyEffectivePeriod field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectivePeriod(v Period) {
	o.StudyEffectivePeriod = &v
}

// GetStudyEffectiveDuration returns the StudyEffectiveDuration field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDuration() Duration {
	if o == nil || IsNil(o.StudyEffectiveDuration) {
		var ret Duration
		return ret
	}
	return *o.StudyEffectiveDuration
}

// GetStudyEffectiveDurationOk returns a tuple with the StudyEffectiveDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.StudyEffectiveDuration) {
		return nil, false
	}
	return o.StudyEffectiveDuration, true
}

// HasStudyEffectiveDuration returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveDuration() bool {
	if o != nil && !IsNil(o.StudyEffectiveDuration) {
		return true
	}

	return false
}

// SetStudyEffectiveDuration gets a reference to the given Duration and assigns it to the StudyEffectiveDuration field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveDuration(v Duration) {
	o.StudyEffectiveDuration = &v
}

// GetStudyEffectiveTiming returns the StudyEffectiveTiming field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveTiming() Timing {
	if o == nil || IsNil(o.StudyEffectiveTiming) {
		var ret Timing
		return ret
	}
	return *o.StudyEffectiveTiming
}

// GetStudyEffectiveTimingOk returns a tuple with the StudyEffectiveTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.StudyEffectiveTiming) {
		return nil, false
	}
	return o.StudyEffectiveTiming, true
}

// HasStudyEffectiveTiming returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveTiming() bool {
	if o != nil && !IsNil(o.StudyEffectiveTiming) {
		return true
	}

	return false
}

// SetStudyEffectiveTiming gets a reference to the given Timing and assigns it to the StudyEffectiveTiming field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveTiming(v Timing) {
	o.StudyEffectiveTiming = &v
}

// GetStudyEffectiveTimeFromStart returns the StudyEffectiveTimeFromStart field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveTimeFromStart() Duration {
	if o == nil || IsNil(o.StudyEffectiveTimeFromStart) {
		var ret Duration
		return ret
	}
	return *o.StudyEffectiveTimeFromStart
}

// GetStudyEffectiveTimeFromStartOk returns a tuple with the StudyEffectiveTimeFromStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveTimeFromStartOk() (*Duration, bool) {
	if o == nil || IsNil(o.StudyEffectiveTimeFromStart) {
		return nil, false
	}
	return o.StudyEffectiveTimeFromStart, true
}

// HasStudyEffectiveTimeFromStart returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveTimeFromStart() bool {
	if o != nil && !IsNil(o.StudyEffectiveTimeFromStart) {
		return true
	}

	return false
}

// SetStudyEffectiveTimeFromStart gets a reference to the given Duration and assigns it to the StudyEffectiveTimeFromStart field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveTimeFromStart(v Duration) {
	o.StudyEffectiveTimeFromStart = &v
}

// GetStudyEffectiveGroupMeasure returns the StudyEffectiveGroupMeasure field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveGroupMeasure() string {
	if o == nil || IsNil(o.StudyEffectiveGroupMeasure) {
		var ret string
		return ret
	}
	return *o.StudyEffectiveGroupMeasure
}

// GetStudyEffectiveGroupMeasureOk returns a tuple with the StudyEffectiveGroupMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetStudyEffectiveGroupMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.StudyEffectiveGroupMeasure) {
		return nil, false
	}
	return o.StudyEffectiveGroupMeasure, true
}

// HasStudyEffectiveGroupMeasure returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasStudyEffectiveGroupMeasure() bool {
	if o != nil && !IsNil(o.StudyEffectiveGroupMeasure) {
		return true
	}

	return false
}

// SetStudyEffectiveGroupMeasure gets a reference to the given string and assigns it to the StudyEffectiveGroupMeasure field.
func (o *ResearchElementDefinitionCharacteristic) SetStudyEffectiveGroupMeasure(v string) {
	o.StudyEffectiveGroupMeasure = &v
}

// GetParticipantEffectiveDescription returns the ParticipantEffectiveDescription field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDescription() string {
	if o == nil || IsNil(o.ParticipantEffectiveDescription) {
		var ret string
		return ret
	}
	return *o.ParticipantEffectiveDescription
}

// GetParticipantEffectiveDescriptionOk returns a tuple with the ParticipantEffectiveDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveDescription) {
		return nil, false
	}
	return o.ParticipantEffectiveDescription, true
}

// HasParticipantEffectiveDescription returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveDescription() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveDescription) {
		return true
	}

	return false
}

// SetParticipantEffectiveDescription gets a reference to the given string and assigns it to the ParticipantEffectiveDescription field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveDescription(v string) {
	o.ParticipantEffectiveDescription = &v
}

// GetParticipantEffectiveDateTime returns the ParticipantEffectiveDateTime field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDateTime() string {
	if o == nil || IsNil(o.ParticipantEffectiveDateTime) {
		var ret string
		return ret
	}
	return *o.ParticipantEffectiveDateTime
}

// GetParticipantEffectiveDateTimeOk returns a tuple with the ParticipantEffectiveDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveDateTime) {
		return nil, false
	}
	return o.ParticipantEffectiveDateTime, true
}

// HasParticipantEffectiveDateTime returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveDateTime() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveDateTime) {
		return true
	}

	return false
}

// SetParticipantEffectiveDateTime gets a reference to the given string and assigns it to the ParticipantEffectiveDateTime field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveDateTime(v string) {
	o.ParticipantEffectiveDateTime = &v
}

// GetParticipantEffectivePeriod returns the ParticipantEffectivePeriod field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectivePeriod() Period {
	if o == nil || IsNil(o.ParticipantEffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.ParticipantEffectivePeriod
}

// GetParticipantEffectivePeriodOk returns a tuple with the ParticipantEffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ParticipantEffectivePeriod) {
		return nil, false
	}
	return o.ParticipantEffectivePeriod, true
}

// HasParticipantEffectivePeriod returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectivePeriod() bool {
	if o != nil && !IsNil(o.ParticipantEffectivePeriod) {
		return true
	}

	return false
}

// SetParticipantEffectivePeriod gets a reference to the given Period and assigns it to the ParticipantEffectivePeriod field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectivePeriod(v Period) {
	o.ParticipantEffectivePeriod = &v
}

// GetParticipantEffectiveDuration returns the ParticipantEffectiveDuration field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDuration() Duration {
	if o == nil || IsNil(o.ParticipantEffectiveDuration) {
		var ret Duration
		return ret
	}
	return *o.ParticipantEffectiveDuration
}

// GetParticipantEffectiveDurationOk returns a tuple with the ParticipantEffectiveDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveDuration) {
		return nil, false
	}
	return o.ParticipantEffectiveDuration, true
}

// HasParticipantEffectiveDuration returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveDuration() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveDuration) {
		return true
	}

	return false
}

// SetParticipantEffectiveDuration gets a reference to the given Duration and assigns it to the ParticipantEffectiveDuration field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveDuration(v Duration) {
	o.ParticipantEffectiveDuration = &v
}

// GetParticipantEffectiveTiming returns the ParticipantEffectiveTiming field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveTiming() Timing {
	if o == nil || IsNil(o.ParticipantEffectiveTiming) {
		var ret Timing
		return ret
	}
	return *o.ParticipantEffectiveTiming
}

// GetParticipantEffectiveTimingOk returns a tuple with the ParticipantEffectiveTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveTiming) {
		return nil, false
	}
	return o.ParticipantEffectiveTiming, true
}

// HasParticipantEffectiveTiming returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveTiming() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveTiming) {
		return true
	}

	return false
}

// SetParticipantEffectiveTiming gets a reference to the given Timing and assigns it to the ParticipantEffectiveTiming field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveTiming(v Timing) {
	o.ParticipantEffectiveTiming = &v
}

// GetParticipantEffectiveTimeFromStart returns the ParticipantEffectiveTimeFromStart field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveTimeFromStart() Duration {
	if o == nil || IsNil(o.ParticipantEffectiveTimeFromStart) {
		var ret Duration
		return ret
	}
	return *o.ParticipantEffectiveTimeFromStart
}

// GetParticipantEffectiveTimeFromStartOk returns a tuple with the ParticipantEffectiveTimeFromStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveTimeFromStartOk() (*Duration, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveTimeFromStart) {
		return nil, false
	}
	return o.ParticipantEffectiveTimeFromStart, true
}

// HasParticipantEffectiveTimeFromStart returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveTimeFromStart() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveTimeFromStart) {
		return true
	}

	return false
}

// SetParticipantEffectiveTimeFromStart gets a reference to the given Duration and assigns it to the ParticipantEffectiveTimeFromStart field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveTimeFromStart(v Duration) {
	o.ParticipantEffectiveTimeFromStart = &v
}

// GetParticipantEffectiveGroupMeasure returns the ParticipantEffectiveGroupMeasure field value if set, zero value otherwise.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveGroupMeasure() string {
	if o == nil || IsNil(o.ParticipantEffectiveGroupMeasure) {
		var ret string
		return ret
	}
	return *o.ParticipantEffectiveGroupMeasure
}

// GetParticipantEffectiveGroupMeasureOk returns a tuple with the ParticipantEffectiveGroupMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchElementDefinitionCharacteristic) GetParticipantEffectiveGroupMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveGroupMeasure) {
		return nil, false
	}
	return o.ParticipantEffectiveGroupMeasure, true
}

// HasParticipantEffectiveGroupMeasure returns a boolean if a field has been set.
func (o *ResearchElementDefinitionCharacteristic) HasParticipantEffectiveGroupMeasure() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveGroupMeasure) {
		return true
	}

	return false
}

// SetParticipantEffectiveGroupMeasure gets a reference to the given string and assigns it to the ParticipantEffectiveGroupMeasure field.
func (o *ResearchElementDefinitionCharacteristic) SetParticipantEffectiveGroupMeasure(v string) {
	o.ParticipantEffectiveGroupMeasure = &v
}

func (o ResearchElementDefinitionCharacteristic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResearchElementDefinitionCharacteristic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.DefinitionCodeableConcept) {
		toSerialize["definitionCodeableConcept"] = o.DefinitionCodeableConcept
	}
	if !IsNil(o.DefinitionCanonical) {
		toSerialize["definitionCanonical"] = o.DefinitionCanonical
	}
	if !IsNil(o.DefinitionExpression) {
		toSerialize["definitionExpression"] = o.DefinitionExpression
	}
	if !IsNil(o.DefinitionDataRequirement) {
		toSerialize["definitionDataRequirement"] = o.DefinitionDataRequirement
	}
	if !IsNil(o.UsageContext) {
		toSerialize["usageContext"] = o.UsageContext
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if !IsNil(o.StudyEffectiveDescription) {
		toSerialize["studyEffectiveDescription"] = o.StudyEffectiveDescription
	}
	if !IsNil(o.StudyEffectiveDateTime) {
		toSerialize["studyEffectiveDateTime"] = o.StudyEffectiveDateTime
	}
	if !IsNil(o.StudyEffectivePeriod) {
		toSerialize["studyEffectivePeriod"] = o.StudyEffectivePeriod
	}
	if !IsNil(o.StudyEffectiveDuration) {
		toSerialize["studyEffectiveDuration"] = o.StudyEffectiveDuration
	}
	if !IsNil(o.StudyEffectiveTiming) {
		toSerialize["studyEffectiveTiming"] = o.StudyEffectiveTiming
	}
	if !IsNil(o.StudyEffectiveTimeFromStart) {
		toSerialize["studyEffectiveTimeFromStart"] = o.StudyEffectiveTimeFromStart
	}
	if !IsNil(o.StudyEffectiveGroupMeasure) {
		toSerialize["studyEffectiveGroupMeasure"] = o.StudyEffectiveGroupMeasure
	}
	if !IsNil(o.ParticipantEffectiveDescription) {
		toSerialize["participantEffectiveDescription"] = o.ParticipantEffectiveDescription
	}
	if !IsNil(o.ParticipantEffectiveDateTime) {
		toSerialize["participantEffectiveDateTime"] = o.ParticipantEffectiveDateTime
	}
	if !IsNil(o.ParticipantEffectivePeriod) {
		toSerialize["participantEffectivePeriod"] = o.ParticipantEffectivePeriod
	}
	if !IsNil(o.ParticipantEffectiveDuration) {
		toSerialize["participantEffectiveDuration"] = o.ParticipantEffectiveDuration
	}
	if !IsNil(o.ParticipantEffectiveTiming) {
		toSerialize["participantEffectiveTiming"] = o.ParticipantEffectiveTiming
	}
	if !IsNil(o.ParticipantEffectiveTimeFromStart) {
		toSerialize["participantEffectiveTimeFromStart"] = o.ParticipantEffectiveTimeFromStart
	}
	if !IsNil(o.ParticipantEffectiveGroupMeasure) {
		toSerialize["participantEffectiveGroupMeasure"] = o.ParticipantEffectiveGroupMeasure
	}
	return toSerialize, nil
}

type NullableResearchElementDefinitionCharacteristic struct {
	value *ResearchElementDefinitionCharacteristic
	isSet bool
}

func (v NullableResearchElementDefinitionCharacteristic) Get() *ResearchElementDefinitionCharacteristic {
	return v.value
}

func (v *NullableResearchElementDefinitionCharacteristic) Set(val *ResearchElementDefinitionCharacteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableResearchElementDefinitionCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableResearchElementDefinitionCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResearchElementDefinitionCharacteristic(val *ResearchElementDefinitionCharacteristic) *NullableResearchElementDefinitionCharacteristic {
	return &NullableResearchElementDefinitionCharacteristic{value: val, isSet: true}
}

func (v NullableResearchElementDefinitionCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResearchElementDefinitionCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


