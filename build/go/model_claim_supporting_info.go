/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimSupportingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimSupportingInfo{}

// ClaimSupportingInfo A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type ClaimSupportingInfo struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// The general class of the information supplied: information; exception; accident, employment; onset, etc.
	Category CodeableConcept `json:"category"`
	// System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
	Code *CodeableConcept `json:"code,omitempty"`
	// The date when or period to which this information refers.
	TimingDate *string `json:"timingDate,omitempty"`
	// The date when or period to which this information refers.
	TimingPeriod *Period `json:"timingPeriod,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	ValueString *string `json:"valueString,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	ValueAttachment *Attachment `json:"valueAttachment,omitempty"`
	// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
	ValueReference *Reference `json:"valueReference,omitempty"`
	// Provides the reason in the situation where a reason code is required in addition to the content.
	Reason *CodeableConcept `json:"reason,omitempty"`
}

type _ClaimSupportingInfo ClaimSupportingInfo

// NewClaimSupportingInfo instantiates a new ClaimSupportingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimSupportingInfo(category CodeableConcept) *ClaimSupportingInfo {
	this := ClaimSupportingInfo{}
	this.Category = category
	return &this
}

// NewClaimSupportingInfoWithDefaults instantiates a new ClaimSupportingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimSupportingInfoWithDefaults() *ClaimSupportingInfo {
	this := ClaimSupportingInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClaimSupportingInfo) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ClaimSupportingInfo) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ClaimSupportingInfo) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ClaimSupportingInfo) SetSequence(v float32) {
	o.Sequence = &v
}

// GetCategory returns the Category field value
func (o *ClaimSupportingInfo) GetCategory() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ClaimSupportingInfo) SetCategory(v CodeableConcept) {
	o.Category = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *ClaimSupportingInfo) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetTimingDate returns the TimingDate field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetTimingDate() string {
	if o == nil || IsNil(o.TimingDate) {
		var ret string
		return ret
	}
	return *o.TimingDate
}

// GetTimingDateOk returns a tuple with the TimingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetTimingDateOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDate) {
		return nil, false
	}
	return o.TimingDate, true
}

// HasTimingDate returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasTimingDate() bool {
	if o != nil && !IsNil(o.TimingDate) {
		return true
	}

	return false
}

// SetTimingDate gets a reference to the given string and assigns it to the TimingDate field.
func (o *ClaimSupportingInfo) SetTimingDate(v string) {
	o.TimingDate = &v
}

// GetTimingPeriod returns the TimingPeriod field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetTimingPeriod() Period {
	if o == nil || IsNil(o.TimingPeriod) {
		var ret Period
		return ret
	}
	return *o.TimingPeriod
}

// GetTimingPeriodOk returns a tuple with the TimingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetTimingPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.TimingPeriod) {
		return nil, false
	}
	return o.TimingPeriod, true
}

// HasTimingPeriod returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasTimingPeriod() bool {
	if o != nil && !IsNil(o.TimingPeriod) {
		return true
	}

	return false
}

// SetTimingPeriod gets a reference to the given Period and assigns it to the TimingPeriod field.
func (o *ClaimSupportingInfo) SetTimingPeriod(v Period) {
	o.TimingPeriod = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *ClaimSupportingInfo) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *ClaimSupportingInfo) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *ClaimSupportingInfo) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueAttachment returns the ValueAttachment field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetValueAttachment() Attachment {
	if o == nil || IsNil(o.ValueAttachment) {
		var ret Attachment
		return ret
	}
	return *o.ValueAttachment
}

// GetValueAttachmentOk returns a tuple with the ValueAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetValueAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.ValueAttachment) {
		return nil, false
	}
	return o.ValueAttachment, true
}

// HasValueAttachment returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasValueAttachment() bool {
	if o != nil && !IsNil(o.ValueAttachment) {
		return true
	}

	return false
}

// SetValueAttachment gets a reference to the given Attachment and assigns it to the ValueAttachment field.
func (o *ClaimSupportingInfo) SetValueAttachment(v Attachment) {
	o.ValueAttachment = &v
}

// GetValueReference returns the ValueReference field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetValueReference() Reference {
	if o == nil || IsNil(o.ValueReference) {
		var ret Reference
		return ret
	}
	return *o.ValueReference
}

// GetValueReferenceOk returns a tuple with the ValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ValueReference) {
		return nil, false
	}
	return o.ValueReference, true
}

// HasValueReference returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasValueReference() bool {
	if o != nil && !IsNil(o.ValueReference) {
		return true
	}

	return false
}

// SetValueReference gets a reference to the given Reference and assigns it to the ValueReference field.
func (o *ClaimSupportingInfo) SetValueReference(v Reference) {
	o.ValueReference = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ClaimSupportingInfo) GetReason() CodeableConcept {
	if o == nil || IsNil(o.Reason) {
		var ret CodeableConcept
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimSupportingInfo) GetReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ClaimSupportingInfo) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CodeableConcept and assigns it to the Reason field.
func (o *ClaimSupportingInfo) SetReason(v CodeableConcept) {
	o.Reason = &v
}

func (o ClaimSupportingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimSupportingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	toSerialize["category"] = o.Category
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.TimingDate) {
		toSerialize["timingDate"] = o.TimingDate
	}
	if !IsNil(o.TimingPeriod) {
		toSerialize["timingPeriod"] = o.TimingPeriod
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueString) {
		toSerialize["valueString"] = o.ValueString
	}
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueAttachment) {
		toSerialize["valueAttachment"] = o.ValueAttachment
	}
	if !IsNil(o.ValueReference) {
		toSerialize["valueReference"] = o.ValueReference
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

func (o *ClaimSupportingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimSupportingInfo := _ClaimSupportingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimSupportingInfo)

	if err != nil {
		return err
	}

	*o = ClaimSupportingInfo(varClaimSupportingInfo)

	return err
}

type NullableClaimSupportingInfo struct {
	value *ClaimSupportingInfo
	isSet bool
}

func (v NullableClaimSupportingInfo) Get() *ClaimSupportingInfo {
	return v.value
}

func (v *NullableClaimSupportingInfo) Set(val *ClaimSupportingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimSupportingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimSupportingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimSupportingInfo(val *ClaimSupportingInfo) *NullableClaimSupportingInfo {
	return &NullableClaimSupportingInfo{value: val, isSet: true}
}

func (v NullableClaimSupportingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimSupportingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


