/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceNucleicAcidSubunit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceNucleicAcidSubunit{}

// SubstanceNucleicAcidSubunit Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcidSubunit struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A whole number
	Subunit *float32 `json:"subunit,omitempty"`
	// A sequence of Unicode characters
	Sequence *string `json:"sequence,omitempty"`
	// A whole number
	Length *float32 `json:"length,omitempty"`
	// (TBC).
	SequenceAttachment *Attachment `json:"sequenceAttachment,omitempty"`
	// The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
	FivePrime *CodeableConcept `json:"fivePrime,omitempty"`
	// The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
	ThreePrime *CodeableConcept `json:"threePrime,omitempty"`
	// The linkages between sugar residues will also be captured.
	Linkage []SubstanceNucleicAcidLinkage `json:"linkage,omitempty"`
	// 5.3.6.8.1 Sugar ID (Mandatory).
	Sugar []SubstanceNucleicAcidSugar `json:"sugar,omitempty"`
}

// NewSubstanceNucleicAcidSubunit instantiates a new SubstanceNucleicAcidSubunit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceNucleicAcidSubunit() *SubstanceNucleicAcidSubunit {
	this := SubstanceNucleicAcidSubunit{}
	return &this
}

// NewSubstanceNucleicAcidSubunitWithDefaults instantiates a new SubstanceNucleicAcidSubunit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceNucleicAcidSubunitWithDefaults() *SubstanceNucleicAcidSubunit {
	this := SubstanceNucleicAcidSubunit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceNucleicAcidSubunit) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceNucleicAcidSubunit) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceNucleicAcidSubunit) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubunit returns the Subunit field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetSubunit() float32 {
	if o == nil || IsNil(o.Subunit) {
		var ret float32
		return ret
	}
	return *o.Subunit
}

// GetSubunitOk returns a tuple with the Subunit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetSubunitOk() (*float32, bool) {
	if o == nil || IsNil(o.Subunit) {
		return nil, false
	}
	return o.Subunit, true
}

// HasSubunit returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasSubunit() bool {
	if o != nil && !IsNil(o.Subunit) {
		return true
	}

	return false
}

// SetSubunit gets a reference to the given float32 and assigns it to the Subunit field.
func (o *SubstanceNucleicAcidSubunit) SetSubunit(v float32) {
	o.Subunit = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetSequence() string {
	if o == nil || IsNil(o.Sequence) {
		var ret string
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given string and assigns it to the Sequence field.
func (o *SubstanceNucleicAcidSubunit) SetSequence(v string) {
	o.Sequence = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *SubstanceNucleicAcidSubunit) SetLength(v float32) {
	o.Length = &v
}

// GetSequenceAttachment returns the SequenceAttachment field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetSequenceAttachment() Attachment {
	if o == nil || IsNil(o.SequenceAttachment) {
		var ret Attachment
		return ret
	}
	return *o.SequenceAttachment
}

// GetSequenceAttachmentOk returns a tuple with the SequenceAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetSequenceAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.SequenceAttachment) {
		return nil, false
	}
	return o.SequenceAttachment, true
}

// HasSequenceAttachment returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasSequenceAttachment() bool {
	if o != nil && !IsNil(o.SequenceAttachment) {
		return true
	}

	return false
}

// SetSequenceAttachment gets a reference to the given Attachment and assigns it to the SequenceAttachment field.
func (o *SubstanceNucleicAcidSubunit) SetSequenceAttachment(v Attachment) {
	o.SequenceAttachment = &v
}

// GetFivePrime returns the FivePrime field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetFivePrime() CodeableConcept {
	if o == nil || IsNil(o.FivePrime) {
		var ret CodeableConcept
		return ret
	}
	return *o.FivePrime
}

// GetFivePrimeOk returns a tuple with the FivePrime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetFivePrimeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FivePrime) {
		return nil, false
	}
	return o.FivePrime, true
}

// HasFivePrime returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasFivePrime() bool {
	if o != nil && !IsNil(o.FivePrime) {
		return true
	}

	return false
}

// SetFivePrime gets a reference to the given CodeableConcept and assigns it to the FivePrime field.
func (o *SubstanceNucleicAcidSubunit) SetFivePrime(v CodeableConcept) {
	o.FivePrime = &v
}

// GetThreePrime returns the ThreePrime field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetThreePrime() CodeableConcept {
	if o == nil || IsNil(o.ThreePrime) {
		var ret CodeableConcept
		return ret
	}
	return *o.ThreePrime
}

// GetThreePrimeOk returns a tuple with the ThreePrime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetThreePrimeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ThreePrime) {
		return nil, false
	}
	return o.ThreePrime, true
}

// HasThreePrime returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasThreePrime() bool {
	if o != nil && !IsNil(o.ThreePrime) {
		return true
	}

	return false
}

// SetThreePrime gets a reference to the given CodeableConcept and assigns it to the ThreePrime field.
func (o *SubstanceNucleicAcidSubunit) SetThreePrime(v CodeableConcept) {
	o.ThreePrime = &v
}

// GetLinkage returns the Linkage field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetLinkage() []SubstanceNucleicAcidLinkage {
	if o == nil || IsNil(o.Linkage) {
		var ret []SubstanceNucleicAcidLinkage
		return ret
	}
	return o.Linkage
}

// GetLinkageOk returns a tuple with the Linkage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetLinkageOk() ([]SubstanceNucleicAcidLinkage, bool) {
	if o == nil || IsNil(o.Linkage) {
		return nil, false
	}
	return o.Linkage, true
}

// HasLinkage returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasLinkage() bool {
	if o != nil && !IsNil(o.Linkage) {
		return true
	}

	return false
}

// SetLinkage gets a reference to the given []SubstanceNucleicAcidLinkage and assigns it to the Linkage field.
func (o *SubstanceNucleicAcidSubunit) SetLinkage(v []SubstanceNucleicAcidLinkage) {
	o.Linkage = v
}

// GetSugar returns the Sugar field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidSubunit) GetSugar() []SubstanceNucleicAcidSugar {
	if o == nil || IsNil(o.Sugar) {
		var ret []SubstanceNucleicAcidSugar
		return ret
	}
	return o.Sugar
}

// GetSugarOk returns a tuple with the Sugar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidSubunit) GetSugarOk() ([]SubstanceNucleicAcidSugar, bool) {
	if o == nil || IsNil(o.Sugar) {
		return nil, false
	}
	return o.Sugar, true
}

// HasSugar returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidSubunit) HasSugar() bool {
	if o != nil && !IsNil(o.Sugar) {
		return true
	}

	return false
}

// SetSugar gets a reference to the given []SubstanceNucleicAcidSugar and assigns it to the Sugar field.
func (o *SubstanceNucleicAcidSubunit) SetSugar(v []SubstanceNucleicAcidSugar) {
	o.Sugar = v
}

func (o SubstanceNucleicAcidSubunit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceNucleicAcidSubunit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Subunit) {
		toSerialize["subunit"] = o.Subunit
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.SequenceAttachment) {
		toSerialize["sequenceAttachment"] = o.SequenceAttachment
	}
	if !IsNil(o.FivePrime) {
		toSerialize["fivePrime"] = o.FivePrime
	}
	if !IsNil(o.ThreePrime) {
		toSerialize["threePrime"] = o.ThreePrime
	}
	if !IsNil(o.Linkage) {
		toSerialize["linkage"] = o.Linkage
	}
	if !IsNil(o.Sugar) {
		toSerialize["sugar"] = o.Sugar
	}
	return toSerialize, nil
}

type NullableSubstanceNucleicAcidSubunit struct {
	value *SubstanceNucleicAcidSubunit
	isSet bool
}

func (v NullableSubstanceNucleicAcidSubunit) Get() *SubstanceNucleicAcidSubunit {
	return v.value
}

func (v *NullableSubstanceNucleicAcidSubunit) Set(val *SubstanceNucleicAcidSubunit) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceNucleicAcidSubunit) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceNucleicAcidSubunit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceNucleicAcidSubunit(val *SubstanceNucleicAcidSubunit) *NullableSubstanceNucleicAcidSubunit {
	return &NullableSubstanceNucleicAcidSubunit{value: val, isSet: true}
}

func (v NullableSubstanceNucleicAcidSubunit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceNucleicAcidSubunit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


