/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExplanationOfBenefitAddItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplanationOfBenefitAddItem{}

// ExplanationOfBenefitAddItem This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
type ExplanationOfBenefitAddItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Claim items which this service line is intended to replace.
	ItemSequence []float32 `json:"itemSequence,omitempty"`
	// The sequence number of the details within the claim item which this line is intended to replace.
	DetailSequence []float32 `json:"detailSequence,omitempty"`
	// The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
	SubDetailSequence []float32 `json:"subDetailSequence,omitempty"`
	// The providers who are authorized for the services rendered to the patient.
	Provider []Reference `json:"provider,omitempty"`
	// When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
	ProductOrService CodeableConcept `json:"productOrService"`
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// Identifies the program under which this may be recovered.
	ProgramCode []CodeableConcept `json:"programCode,omitempty"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedDate *string `json:"servicedDate,omitempty"`
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod *Period `json:"servicedPeriod,omitempty"`
	// Where the product or service was provided.
	LocationCodeableConcept *CodeableConcept `json:"locationCodeableConcept,omitempty"`
	// Where the product or service was provided.
	LocationAddress *Address `json:"locationAddress,omitempty"`
	// Where the product or service was provided.
	LocationReference *Reference `json:"locationReference,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity,omitempty"`
	// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice,omitempty"`
	// A rational number with implicit precision
	Factor *float32 `json:"factor,omitempty"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net,omitempty"`
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite *CodeableConcept `json:"bodySite,omitempty"`
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []CodeableConcept `json:"subSite,omitempty"`
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []float32 `json:"noteNumber,omitempty"`
	// The adjudication results.
	Adjudication []ExplanationOfBenefitAdjudication `json:"adjudication,omitempty"`
	// The second-tier service adjudications for payor added services.
	Detail []ExplanationOfBenefitDetail1 `json:"detail,omitempty"`
}

type _ExplanationOfBenefitAddItem ExplanationOfBenefitAddItem

// NewExplanationOfBenefitAddItem instantiates a new ExplanationOfBenefitAddItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanationOfBenefitAddItem(productOrService CodeableConcept) *ExplanationOfBenefitAddItem {
	this := ExplanationOfBenefitAddItem{}
	this.ProductOrService = productOrService
	return &this
}

// NewExplanationOfBenefitAddItemWithDefaults instantiates a new ExplanationOfBenefitAddItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationOfBenefitAddItemWithDefaults() *ExplanationOfBenefitAddItem {
	this := ExplanationOfBenefitAddItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExplanationOfBenefitAddItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ExplanationOfBenefitAddItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ExplanationOfBenefitAddItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetItemSequence returns the ItemSequence field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetItemSequence() []float32 {
	if o == nil || IsNil(o.ItemSequence) {
		var ret []float32
		return ret
	}
	return o.ItemSequence
}

// GetItemSequenceOk returns a tuple with the ItemSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetItemSequenceOk() ([]float32, bool) {
	if o == nil || IsNil(o.ItemSequence) {
		return nil, false
	}
	return o.ItemSequence, true
}

// HasItemSequence returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasItemSequence() bool {
	if o != nil && !IsNil(o.ItemSequence) {
		return true
	}

	return false
}

// SetItemSequence gets a reference to the given []float32 and assigns it to the ItemSequence field.
func (o *ExplanationOfBenefitAddItem) SetItemSequence(v []float32) {
	o.ItemSequence = v
}

// GetDetailSequence returns the DetailSequence field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetDetailSequence() []float32 {
	if o == nil || IsNil(o.DetailSequence) {
		var ret []float32
		return ret
	}
	return o.DetailSequence
}

// GetDetailSequenceOk returns a tuple with the DetailSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetDetailSequenceOk() ([]float32, bool) {
	if o == nil || IsNil(o.DetailSequence) {
		return nil, false
	}
	return o.DetailSequence, true
}

// HasDetailSequence returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasDetailSequence() bool {
	if o != nil && !IsNil(o.DetailSequence) {
		return true
	}

	return false
}

// SetDetailSequence gets a reference to the given []float32 and assigns it to the DetailSequence field.
func (o *ExplanationOfBenefitAddItem) SetDetailSequence(v []float32) {
	o.DetailSequence = v
}

// GetSubDetailSequence returns the SubDetailSequence field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetSubDetailSequence() []float32 {
	if o == nil || IsNil(o.SubDetailSequence) {
		var ret []float32
		return ret
	}
	return o.SubDetailSequence
}

// GetSubDetailSequenceOk returns a tuple with the SubDetailSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetSubDetailSequenceOk() ([]float32, bool) {
	if o == nil || IsNil(o.SubDetailSequence) {
		return nil, false
	}
	return o.SubDetailSequence, true
}

// HasSubDetailSequence returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasSubDetailSequence() bool {
	if o != nil && !IsNil(o.SubDetailSequence) {
		return true
	}

	return false
}

// SetSubDetailSequence gets a reference to the given []float32 and assigns it to the SubDetailSequence field.
func (o *ExplanationOfBenefitAddItem) SetSubDetailSequence(v []float32) {
	o.SubDetailSequence = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetProvider() []Reference {
	if o == nil || IsNil(o.Provider) {
		var ret []Reference
		return ret
	}
	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetProviderOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given []Reference and assigns it to the Provider field.
func (o *ExplanationOfBenefitAddItem) SetProvider(v []Reference) {
	o.Provider = v
}

// GetProductOrService returns the ProductOrService field value
func (o *ExplanationOfBenefitAddItem) GetProductOrService() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.ProductOrService
}

// GetProductOrServiceOk returns a tuple with the ProductOrService field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetProductOrServiceOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductOrService, true
}

// SetProductOrService sets field value
func (o *ExplanationOfBenefitAddItem) SetProductOrService(v CodeableConcept) {
	o.ProductOrService = v
}

// GetModifier returns the Modifier field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetModifier() []CodeableConcept {
	if o == nil || IsNil(o.Modifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.Modifier
}

// GetModifierOk returns a tuple with the Modifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Modifier) {
		return nil, false
	}
	return o.Modifier, true
}

// HasModifier returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasModifier() bool {
	if o != nil && !IsNil(o.Modifier) {
		return true
	}

	return false
}

// SetModifier gets a reference to the given []CodeableConcept and assigns it to the Modifier field.
func (o *ExplanationOfBenefitAddItem) SetModifier(v []CodeableConcept) {
	o.Modifier = v
}

// GetProgramCode returns the ProgramCode field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetProgramCode() []CodeableConcept {
	if o == nil || IsNil(o.ProgramCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProgramCode
}

// GetProgramCodeOk returns a tuple with the ProgramCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetProgramCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProgramCode) {
		return nil, false
	}
	return o.ProgramCode, true
}

// HasProgramCode returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasProgramCode() bool {
	if o != nil && !IsNil(o.ProgramCode) {
		return true
	}

	return false
}

// SetProgramCode gets a reference to the given []CodeableConcept and assigns it to the ProgramCode field.
func (o *ExplanationOfBenefitAddItem) SetProgramCode(v []CodeableConcept) {
	o.ProgramCode = v
}

// GetServicedDate returns the ServicedDate field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetServicedDate() string {
	if o == nil || IsNil(o.ServicedDate) {
		var ret string
		return ret
	}
	return *o.ServicedDate
}

// GetServicedDateOk returns a tuple with the ServicedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetServicedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ServicedDate) {
		return nil, false
	}
	return o.ServicedDate, true
}

// HasServicedDate returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasServicedDate() bool {
	if o != nil && !IsNil(o.ServicedDate) {
		return true
	}

	return false
}

// SetServicedDate gets a reference to the given string and assigns it to the ServicedDate field.
func (o *ExplanationOfBenefitAddItem) SetServicedDate(v string) {
	o.ServicedDate = &v
}

// GetServicedPeriod returns the ServicedPeriod field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetServicedPeriod() Period {
	if o == nil || IsNil(o.ServicedPeriod) {
		var ret Period
		return ret
	}
	return *o.ServicedPeriod
}

// GetServicedPeriodOk returns a tuple with the ServicedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetServicedPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ServicedPeriod) {
		return nil, false
	}
	return o.ServicedPeriod, true
}

// HasServicedPeriod returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasServicedPeriod() bool {
	if o != nil && !IsNil(o.ServicedPeriod) {
		return true
	}

	return false
}

// SetServicedPeriod gets a reference to the given Period and assigns it to the ServicedPeriod field.
func (o *ExplanationOfBenefitAddItem) SetServicedPeriod(v Period) {
	o.ServicedPeriod = &v
}

// GetLocationCodeableConcept returns the LocationCodeableConcept field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetLocationCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.LocationCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.LocationCodeableConcept
}

// GetLocationCodeableConceptOk returns a tuple with the LocationCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetLocationCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.LocationCodeableConcept) {
		return nil, false
	}
	return o.LocationCodeableConcept, true
}

// HasLocationCodeableConcept returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasLocationCodeableConcept() bool {
	if o != nil && !IsNil(o.LocationCodeableConcept) {
		return true
	}

	return false
}

// SetLocationCodeableConcept gets a reference to the given CodeableConcept and assigns it to the LocationCodeableConcept field.
func (o *ExplanationOfBenefitAddItem) SetLocationCodeableConcept(v CodeableConcept) {
	o.LocationCodeableConcept = &v
}

// GetLocationAddress returns the LocationAddress field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetLocationAddress() Address {
	if o == nil || IsNil(o.LocationAddress) {
		var ret Address
		return ret
	}
	return *o.LocationAddress
}

// GetLocationAddressOk returns a tuple with the LocationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetLocationAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.LocationAddress) {
		return nil, false
	}
	return o.LocationAddress, true
}

// HasLocationAddress returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasLocationAddress() bool {
	if o != nil && !IsNil(o.LocationAddress) {
		return true
	}

	return false
}

// SetLocationAddress gets a reference to the given Address and assigns it to the LocationAddress field.
func (o *ExplanationOfBenefitAddItem) SetLocationAddress(v Address) {
	o.LocationAddress = &v
}

// GetLocationReference returns the LocationReference field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetLocationReference() Reference {
	if o == nil || IsNil(o.LocationReference) {
		var ret Reference
		return ret
	}
	return *o.LocationReference
}

// GetLocationReferenceOk returns a tuple with the LocationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetLocationReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.LocationReference) {
		return nil, false
	}
	return o.LocationReference, true
}

// HasLocationReference returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasLocationReference() bool {
	if o != nil && !IsNil(o.LocationReference) {
		return true
	}

	return false
}

// SetLocationReference gets a reference to the given Reference and assigns it to the LocationReference field.
func (o *ExplanationOfBenefitAddItem) SetLocationReference(v Reference) {
	o.LocationReference = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *ExplanationOfBenefitAddItem) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetUnitPrice() Money {
	if o == nil || IsNil(o.UnitPrice) {
		var ret Money
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetUnitPriceOk() (*Money, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given Money and assigns it to the UnitPrice field.
func (o *ExplanationOfBenefitAddItem) SetUnitPrice(v Money) {
	o.UnitPrice = &v
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetFactor() float32 {
	if o == nil || IsNil(o.Factor) {
		var ret float32
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float32 and assigns it to the Factor field.
func (o *ExplanationOfBenefitAddItem) SetFactor(v float32) {
	o.Factor = &v
}

// GetNet returns the Net field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetNet() Money {
	if o == nil || IsNil(o.Net) {
		var ret Money
		return ret
	}
	return *o.Net
}

// GetNetOk returns a tuple with the Net field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetNetOk() (*Money, bool) {
	if o == nil || IsNil(o.Net) {
		return nil, false
	}
	return o.Net, true
}

// HasNet returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasNet() bool {
	if o != nil && !IsNil(o.Net) {
		return true
	}

	return false
}

// SetNet gets a reference to the given Money and assigns it to the Net field.
func (o *ExplanationOfBenefitAddItem) SetNet(v Money) {
	o.Net = &v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetBodySite() CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret CodeableConcept
		return ret
	}
	return *o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetBodySiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given CodeableConcept and assigns it to the BodySite field.
func (o *ExplanationOfBenefitAddItem) SetBodySite(v CodeableConcept) {
	o.BodySite = &v
}

// GetSubSite returns the SubSite field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetSubSite() []CodeableConcept {
	if o == nil || IsNil(o.SubSite) {
		var ret []CodeableConcept
		return ret
	}
	return o.SubSite
}

// GetSubSiteOk returns a tuple with the SubSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetSubSiteOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.SubSite) {
		return nil, false
	}
	return o.SubSite, true
}

// HasSubSite returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasSubSite() bool {
	if o != nil && !IsNil(o.SubSite) {
		return true
	}

	return false
}

// SetSubSite gets a reference to the given []CodeableConcept and assigns it to the SubSite field.
func (o *ExplanationOfBenefitAddItem) SetSubSite(v []CodeableConcept) {
	o.SubSite = v
}

// GetNoteNumber returns the NoteNumber field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetNoteNumber() []float32 {
	if o == nil || IsNil(o.NoteNumber) {
		var ret []float32
		return ret
	}
	return o.NoteNumber
}

// GetNoteNumberOk returns a tuple with the NoteNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetNoteNumberOk() ([]float32, bool) {
	if o == nil || IsNil(o.NoteNumber) {
		return nil, false
	}
	return o.NoteNumber, true
}

// HasNoteNumber returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasNoteNumber() bool {
	if o != nil && !IsNil(o.NoteNumber) {
		return true
	}

	return false
}

// SetNoteNumber gets a reference to the given []float32 and assigns it to the NoteNumber field.
func (o *ExplanationOfBenefitAddItem) SetNoteNumber(v []float32) {
	o.NoteNumber = v
}

// GetAdjudication returns the Adjudication field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetAdjudication() []ExplanationOfBenefitAdjudication {
	if o == nil || IsNil(o.Adjudication) {
		var ret []ExplanationOfBenefitAdjudication
		return ret
	}
	return o.Adjudication
}

// GetAdjudicationOk returns a tuple with the Adjudication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetAdjudicationOk() ([]ExplanationOfBenefitAdjudication, bool) {
	if o == nil || IsNil(o.Adjudication) {
		return nil, false
	}
	return o.Adjudication, true
}

// HasAdjudication returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasAdjudication() bool {
	if o != nil && !IsNil(o.Adjudication) {
		return true
	}

	return false
}

// SetAdjudication gets a reference to the given []ExplanationOfBenefitAdjudication and assigns it to the Adjudication field.
func (o *ExplanationOfBenefitAddItem) SetAdjudication(v []ExplanationOfBenefitAdjudication) {
	o.Adjudication = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ExplanationOfBenefitAddItem) GetDetail() []ExplanationOfBenefitDetail1 {
	if o == nil || IsNil(o.Detail) {
		var ret []ExplanationOfBenefitDetail1
		return ret
	}
	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitAddItem) GetDetailOk() ([]ExplanationOfBenefitDetail1, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ExplanationOfBenefitAddItem) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given []ExplanationOfBenefitDetail1 and assigns it to the Detail field.
func (o *ExplanationOfBenefitAddItem) SetDetail(v []ExplanationOfBenefitDetail1) {
	o.Detail = v
}

func (o ExplanationOfBenefitAddItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplanationOfBenefitAddItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.ItemSequence) {
		toSerialize["itemSequence"] = o.ItemSequence
	}
	if !IsNil(o.DetailSequence) {
		toSerialize["detailSequence"] = o.DetailSequence
	}
	if !IsNil(o.SubDetailSequence) {
		toSerialize["subDetailSequence"] = o.SubDetailSequence
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	toSerialize["productOrService"] = o.ProductOrService
	if !IsNil(o.Modifier) {
		toSerialize["modifier"] = o.Modifier
	}
	if !IsNil(o.ProgramCode) {
		toSerialize["programCode"] = o.ProgramCode
	}
	if !IsNil(o.ServicedDate) {
		toSerialize["servicedDate"] = o.ServicedDate
	}
	if !IsNil(o.ServicedPeriod) {
		toSerialize["servicedPeriod"] = o.ServicedPeriod
	}
	if !IsNil(o.LocationCodeableConcept) {
		toSerialize["locationCodeableConcept"] = o.LocationCodeableConcept
	}
	if !IsNil(o.LocationAddress) {
		toSerialize["locationAddress"] = o.LocationAddress
	}
	if !IsNil(o.LocationReference) {
		toSerialize["locationReference"] = o.LocationReference
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Net) {
		toSerialize["net"] = o.Net
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.SubSite) {
		toSerialize["subSite"] = o.SubSite
	}
	if !IsNil(o.NoteNumber) {
		toSerialize["noteNumber"] = o.NoteNumber
	}
	if !IsNil(o.Adjudication) {
		toSerialize["adjudication"] = o.Adjudication
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

func (o *ExplanationOfBenefitAddItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productOrService",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExplanationOfBenefitAddItem := _ExplanationOfBenefitAddItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExplanationOfBenefitAddItem)

	if err != nil {
		return err
	}

	*o = ExplanationOfBenefitAddItem(varExplanationOfBenefitAddItem)

	return err
}

type NullableExplanationOfBenefitAddItem struct {
	value *ExplanationOfBenefitAddItem
	isSet bool
}

func (v NullableExplanationOfBenefitAddItem) Get() *ExplanationOfBenefitAddItem {
	return v.value
}

func (v *NullableExplanationOfBenefitAddItem) Set(val *ExplanationOfBenefitAddItem) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanationOfBenefitAddItem) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanationOfBenefitAddItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanationOfBenefitAddItem(val *ExplanationOfBenefitAddItem) *NullableExplanationOfBenefitAddItem {
	return &NullableExplanationOfBenefitAddItem{value: val, isSet: true}
}

func (v NullableExplanationOfBenefitAddItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanationOfBenefitAddItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


