/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MedicinalProductName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductName{}

// MedicinalProductName Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
type MedicinalProductName struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	ProductName *string `json:"productName,omitempty"`
	// Coding words or phrases of the name.
	NamePart []MedicinalProductNamePart `json:"namePart,omitempty"`
	// Country where the name applies.
	CountryLanguage []MedicinalProductCountryLanguage `json:"countryLanguage,omitempty"`
}

// NewMedicinalProductName instantiates a new MedicinalProductName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductName() *MedicinalProductName {
	this := MedicinalProductName{}
	return &this
}

// NewMedicinalProductNameWithDefaults instantiates a new MedicinalProductName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductNameWithDefaults() *MedicinalProductName {
	this := MedicinalProductName{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductName) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductName) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductName) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductName) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductName) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductName) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductName) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductName) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductName) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *MedicinalProductName) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *MedicinalProductName) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *MedicinalProductName) SetProductName(v string) {
	o.ProductName = &v
}

// GetNamePart returns the NamePart field value if set, zero value otherwise.
func (o *MedicinalProductName) GetNamePart() []MedicinalProductNamePart {
	if o == nil || IsNil(o.NamePart) {
		var ret []MedicinalProductNamePart
		return ret
	}
	return o.NamePart
}

// GetNamePartOk returns a tuple with the NamePart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetNamePartOk() ([]MedicinalProductNamePart, bool) {
	if o == nil || IsNil(o.NamePart) {
		return nil, false
	}
	return o.NamePart, true
}

// HasNamePart returns a boolean if a field has been set.
func (o *MedicinalProductName) HasNamePart() bool {
	if o != nil && !IsNil(o.NamePart) {
		return true
	}

	return false
}

// SetNamePart gets a reference to the given []MedicinalProductNamePart and assigns it to the NamePart field.
func (o *MedicinalProductName) SetNamePart(v []MedicinalProductNamePart) {
	o.NamePart = v
}

// GetCountryLanguage returns the CountryLanguage field value if set, zero value otherwise.
func (o *MedicinalProductName) GetCountryLanguage() []MedicinalProductCountryLanguage {
	if o == nil || IsNil(o.CountryLanguage) {
		var ret []MedicinalProductCountryLanguage
		return ret
	}
	return o.CountryLanguage
}

// GetCountryLanguageOk returns a tuple with the CountryLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductName) GetCountryLanguageOk() ([]MedicinalProductCountryLanguage, bool) {
	if o == nil || IsNil(o.CountryLanguage) {
		return nil, false
	}
	return o.CountryLanguage, true
}

// HasCountryLanguage returns a boolean if a field has been set.
func (o *MedicinalProductName) HasCountryLanguage() bool {
	if o != nil && !IsNil(o.CountryLanguage) {
		return true
	}

	return false
}

// SetCountryLanguage gets a reference to the given []MedicinalProductCountryLanguage and assigns it to the CountryLanguage field.
func (o *MedicinalProductName) SetCountryLanguage(v []MedicinalProductCountryLanguage) {
	o.CountryLanguage = v
}

func (o MedicinalProductName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !IsNil(o.NamePart) {
		toSerialize["namePart"] = o.NamePart
	}
	if !IsNil(o.CountryLanguage) {
		toSerialize["countryLanguage"] = o.CountryLanguage
	}
	return toSerialize, nil
}

type NullableMedicinalProductName struct {
	value *MedicinalProductName
	isSet bool
}

func (v NullableMedicinalProductName) Get() *MedicinalProductName {
	return v.value
}

func (v *NullableMedicinalProductName) Set(val *MedicinalProductName) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductName) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductName(val *MedicinalProductName) *NullableMedicinalProductName {
	return &NullableMedicinalProductName{value: val, isSet: true}
}

func (v NullableMedicinalProductName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


