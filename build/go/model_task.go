/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task A task to be performed.
type Task struct {
	// This is a Task resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The business identifier for this task.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	InstantiatesCanonical *string `json:"instantiatesCanonical,omitempty"`
	// String of characters used to identify a name or a resource
	InstantiatesUri *string `json:"instantiatesUri,omitempty"`
	// BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// An identifier that links together multiple tasks and other requests that were created in the same context.
	GroupIdentifier *Identifier `json:"groupIdentifier,omitempty"`
	// Task that this particular task is part of.
	PartOf []Reference `json:"partOf,omitempty"`
	// The current status of the task.
	Status *string `json:"status,omitempty"`
	// An explanation as to why this task is held, failed, was refused, etc.
	StatusReason *CodeableConcept `json:"statusReason,omitempty"`
	// Contains business-specific nuances of the business state.
	BusinessStatus *CodeableConcept `json:"businessStatus,omitempty"`
	// Indicates the \"level\" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
	Intent *string `json:"intent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// A name or code (or both) briefly describing what the task involves.
	Code *CodeableConcept `json:"code,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// The request being actioned or the resource being manipulated by this task.
	Focus *Reference `json:"focus,omitempty"`
	// The entity who benefits from the performance of the service specified in the task (e.g., the patient).
	For *Reference `json:"for,omitempty"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
	Encounter *Reference `json:"encounter,omitempty"`
	// Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
	ExecutionPeriod *Period `json:"executionPeriod,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	AuthoredOn *string `json:"authoredOn,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	LastModified *string `json:"lastModified,omitempty"`
	// The creator of the task.
	Requester *Reference `json:"requester,omitempty"`
	// The kind of participant that should perform the task.
	PerformerType []CodeableConcept `json:"performerType,omitempty"`
	// Individual organization or Device currently responsible for task execution.
	Owner *Reference `json:"owner,omitempty"`
	// Principal physical location where the this task is performed.
	Location *Reference `json:"location,omitempty"`
	// A description or code indicating why this task needs to be performed.
	ReasonCode *CodeableConcept `json:"reasonCode,omitempty"`
	// A resource reference indicating why this task needs to be performed.
	ReasonReference *Reference `json:"reasonReference,omitempty"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
	Insurance []Reference `json:"insurance,omitempty"`
	// Free-text information captured about the task as it progresses.
	Note []Annotation `json:"note,omitempty"`
	// Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
	RelevantHistory []Reference `json:"relevantHistory,omitempty"`
	// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
	Restriction *TaskRestriction `json:"restriction,omitempty"`
	// Additional information that may be needed in the execution of the task.
	Input []TaskInput `json:"input,omitempty"`
	// Outputs produced by the Task.
	Output []TaskOutput `json:"output,omitempty"`
}

type _Task Task

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(resourceType string) *Task {
	this := Task{}
	this.ResourceType = resourceType
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Task) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Task) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Task) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Task) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Task) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Task) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Task) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Task) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Task) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Task) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Task) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Task) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Task) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Task) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Task) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Task) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Task) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Task) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Task) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Task) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Task) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Task) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Task) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Task) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Task) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Task) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Task) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Task) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Task) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Task) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *Task) GetInstantiatesCanonical() string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret string
		return ret
	}
	return *o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInstantiatesCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *Task) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given string and assigns it to the InstantiatesCanonical field.
func (o *Task) SetInstantiatesCanonical(v string) {
	o.InstantiatesCanonical = &v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *Task) GetInstantiatesUri() string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret string
		return ret
	}
	return *o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInstantiatesUriOk() (*string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *Task) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given string and assigns it to the InstantiatesUri field.
func (o *Task) SetInstantiatesUri(v string) {
	o.InstantiatesUri = &v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *Task) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *Task) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *Task) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetGroupIdentifier returns the GroupIdentifier field value if set, zero value otherwise.
func (o *Task) GetGroupIdentifier() Identifier {
	if o == nil || IsNil(o.GroupIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetGroupIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.GroupIdentifier) {
		return nil, false
	}
	return o.GroupIdentifier, true
}

// HasGroupIdentifier returns a boolean if a field has been set.
func (o *Task) HasGroupIdentifier() bool {
	if o != nil && !IsNil(o.GroupIdentifier) {
		return true
	}

	return false
}

// SetGroupIdentifier gets a reference to the given Identifier and assigns it to the GroupIdentifier field.
func (o *Task) SetGroupIdentifier(v Identifier) {
	o.GroupIdentifier = &v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *Task) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *Task) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *Task) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Task) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *Task) GetStatusReason() CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *Task) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given CodeableConcept and assigns it to the StatusReason field.
func (o *Task) SetStatusReason(v CodeableConcept) {
	o.StatusReason = &v
}

// GetBusinessStatus returns the BusinessStatus field value if set, zero value otherwise.
func (o *Task) GetBusinessStatus() CodeableConcept {
	if o == nil || IsNil(o.BusinessStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.BusinessStatus
}

// GetBusinessStatusOk returns a tuple with the BusinessStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBusinessStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BusinessStatus) {
		return nil, false
	}
	return o.BusinessStatus, true
}

// HasBusinessStatus returns a boolean if a field has been set.
func (o *Task) HasBusinessStatus() bool {
	if o != nil && !IsNil(o.BusinessStatus) {
		return true
	}

	return false
}

// SetBusinessStatus gets a reference to the given CodeableConcept and assigns it to the BusinessStatus field.
func (o *Task) SetBusinessStatus(v CodeableConcept) {
	o.BusinessStatus = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *Task) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *Task) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *Task) SetIntent(v string) {
	o.Intent = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Task) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Task) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Task) SetPriority(v string) {
	o.Priority = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Task) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Task) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *Task) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetFocus returns the Focus field value if set, zero value otherwise.
func (o *Task) GetFocus() Reference {
	if o == nil || IsNil(o.Focus) {
		var ret Reference
		return ret
	}
	return *o.Focus
}

// GetFocusOk returns a tuple with the Focus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFocusOk() (*Reference, bool) {
	if o == nil || IsNil(o.Focus) {
		return nil, false
	}
	return o.Focus, true
}

// HasFocus returns a boolean if a field has been set.
func (o *Task) HasFocus() bool {
	if o != nil && !IsNil(o.Focus) {
		return true
	}

	return false
}

// SetFocus gets a reference to the given Reference and assigns it to the Focus field.
func (o *Task) SetFocus(v Reference) {
	o.Focus = &v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *Task) GetFor() Reference {
	if o == nil || IsNil(o.For) {
		var ret Reference
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetForOk() (*Reference, bool) {
	if o == nil || IsNil(o.For) {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *Task) HasFor() bool {
	if o != nil && !IsNil(o.For) {
		return true
	}

	return false
}

// SetFor gets a reference to the given Reference and assigns it to the For field.
func (o *Task) SetFor(v Reference) {
	o.For = &v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *Task) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *Task) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *Task) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetExecutionPeriod returns the ExecutionPeriod field value if set, zero value otherwise.
func (o *Task) GetExecutionPeriod() Period {
	if o == nil || IsNil(o.ExecutionPeriod) {
		var ret Period
		return ret
	}
	return *o.ExecutionPeriod
}

// GetExecutionPeriodOk returns a tuple with the ExecutionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetExecutionPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ExecutionPeriod) {
		return nil, false
	}
	return o.ExecutionPeriod, true
}

// HasExecutionPeriod returns a boolean if a field has been set.
func (o *Task) HasExecutionPeriod() bool {
	if o != nil && !IsNil(o.ExecutionPeriod) {
		return true
	}

	return false
}

// SetExecutionPeriod gets a reference to the given Period and assigns it to the ExecutionPeriod field.
func (o *Task) SetExecutionPeriod(v Period) {
	o.ExecutionPeriod = &v
}

// GetAuthoredOn returns the AuthoredOn field value if set, zero value otherwise.
func (o *Task) GetAuthoredOn() string {
	if o == nil || IsNil(o.AuthoredOn) {
		var ret string
		return ret
	}
	return *o.AuthoredOn
}

// GetAuthoredOnOk returns a tuple with the AuthoredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAuthoredOnOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoredOn) {
		return nil, false
	}
	return o.AuthoredOn, true
}

// HasAuthoredOn returns a boolean if a field has been set.
func (o *Task) HasAuthoredOn() bool {
	if o != nil && !IsNil(o.AuthoredOn) {
		return true
	}

	return false
}

// SetAuthoredOn gets a reference to the given string and assigns it to the AuthoredOn field.
func (o *Task) SetAuthoredOn(v string) {
	o.AuthoredOn = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *Task) GetLastModified() string {
	if o == nil || IsNil(o.LastModified) {
		var ret string
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLastModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *Task) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given string and assigns it to the LastModified field.
func (o *Task) SetLastModified(v string) {
	o.LastModified = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *Task) GetRequester() Reference {
	if o == nil || IsNil(o.Requester) {
		var ret Reference
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRequesterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Requester) {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *Task) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given Reference and assigns it to the Requester field.
func (o *Task) SetRequester(v Reference) {
	o.Requester = &v
}

// GetPerformerType returns the PerformerType field value if set, zero value otherwise.
func (o *Task) GetPerformerType() []CodeableConcept {
	if o == nil || IsNil(o.PerformerType) {
		var ret []CodeableConcept
		return ret
	}
	return o.PerformerType
}

// GetPerformerTypeOk returns a tuple with the PerformerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPerformerTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.PerformerType) {
		return nil, false
	}
	return o.PerformerType, true
}

// HasPerformerType returns a boolean if a field has been set.
func (o *Task) HasPerformerType() bool {
	if o != nil && !IsNil(o.PerformerType) {
		return true
	}

	return false
}

// SetPerformerType gets a reference to the given []CodeableConcept and assigns it to the PerformerType field.
func (o *Task) SetPerformerType(v []CodeableConcept) {
	o.PerformerType = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Task) GetOwner() Reference {
	if o == nil || IsNil(o.Owner) {
		var ret Reference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOwnerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Task) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Reference and assigns it to the Owner field.
func (o *Task) SetOwner(v Reference) {
	o.Owner = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Task) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Task) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *Task) SetLocation(v Reference) {
	o.Location = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *Task) GetReasonCode() CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret CodeableConcept
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReasonCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *Task) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given CodeableConcept and assigns it to the ReasonCode field.
func (o *Task) SetReasonCode(v CodeableConcept) {
	o.ReasonCode = &v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *Task) GetReasonReference() Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret Reference
		return ret
	}
	return *o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetReasonReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *Task) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given Reference and assigns it to the ReasonReference field.
func (o *Task) SetReasonReference(v Reference) {
	o.ReasonReference = &v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *Task) GetInsurance() []Reference {
	if o == nil || IsNil(o.Insurance) {
		var ret []Reference
		return ret
	}
	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInsuranceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Insurance) {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *Task) HasInsurance() bool {
	if o != nil && !IsNil(o.Insurance) {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given []Reference and assigns it to the Insurance field.
func (o *Task) SetInsurance(v []Reference) {
	o.Insurance = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Task) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Task) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *Task) SetNote(v []Annotation) {
	o.Note = v
}

// GetRelevantHistory returns the RelevantHistory field value if set, zero value otherwise.
func (o *Task) GetRelevantHistory() []Reference {
	if o == nil || IsNil(o.RelevantHistory) {
		var ret []Reference
		return ret
	}
	return o.RelevantHistory
}

// GetRelevantHistoryOk returns a tuple with the RelevantHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRelevantHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.RelevantHistory) {
		return nil, false
	}
	return o.RelevantHistory, true
}

// HasRelevantHistory returns a boolean if a field has been set.
func (o *Task) HasRelevantHistory() bool {
	if o != nil && !IsNil(o.RelevantHistory) {
		return true
	}

	return false
}

// SetRelevantHistory gets a reference to the given []Reference and assigns it to the RelevantHistory field.
func (o *Task) SetRelevantHistory(v []Reference) {
	o.RelevantHistory = v
}

// GetRestriction returns the Restriction field value if set, zero value otherwise.
func (o *Task) GetRestriction() TaskRestriction {
	if o == nil || IsNil(o.Restriction) {
		var ret TaskRestriction
		return ret
	}
	return *o.Restriction
}

// GetRestrictionOk returns a tuple with the Restriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRestrictionOk() (*TaskRestriction, bool) {
	if o == nil || IsNil(o.Restriction) {
		return nil, false
	}
	return o.Restriction, true
}

// HasRestriction returns a boolean if a field has been set.
func (o *Task) HasRestriction() bool {
	if o != nil && !IsNil(o.Restriction) {
		return true
	}

	return false
}

// SetRestriction gets a reference to the given TaskRestriction and assigns it to the Restriction field.
func (o *Task) SetRestriction(v TaskRestriction) {
	o.Restriction = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *Task) GetInput() []TaskInput {
	if o == nil || IsNil(o.Input) {
		var ret []TaskInput
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInputOk() ([]TaskInput, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Task) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given []TaskInput and assigns it to the Input field.
func (o *Task) SetInput(v []TaskInput) {
	o.Input = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *Task) GetOutput() []TaskOutput {
	if o == nil || IsNil(o.Output) {
		var ret []TaskOutput
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOutputOk() ([]TaskOutput, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *Task) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given []TaskOutput and assigns it to the Output field.
func (o *Task) SetOutput(v []TaskOutput) {
	o.Output = v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.GroupIdentifier) {
		toSerialize["groupIdentifier"] = o.GroupIdentifier
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.BusinessStatus) {
		toSerialize["businessStatus"] = o.BusinessStatus
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Focus) {
		toSerialize["focus"] = o.Focus
	}
	if !IsNil(o.For) {
		toSerialize["for"] = o.For
	}
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.ExecutionPeriod) {
		toSerialize["executionPeriod"] = o.ExecutionPeriod
	}
	if !IsNil(o.AuthoredOn) {
		toSerialize["authoredOn"] = o.AuthoredOn
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.PerformerType) {
		toSerialize["performerType"] = o.PerformerType
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Insurance) {
		toSerialize["insurance"] = o.Insurance
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.RelevantHistory) {
		toSerialize["relevantHistory"] = o.RelevantHistory
	}
	if !IsNil(o.Restriction) {
		toSerialize["restriction"] = o.Restriction
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

func (o *Task) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTask := _Task{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTask)

	if err != nil {
		return err
	}

	*o = Task(varTask)

	return err
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


