/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CapabilityStatementResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapabilityStatementResource{}

// CapabilityStatementResource A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
type CapabilityStatementResource struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Type *string `json:"type,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Profile *string `json:"profile,omitempty"`
	// A list of profiles that represent different use cases supported by the system. For a server, \"supported by the system\" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
	SupportedProfile []string `json:"supportedProfile,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Documentation *string `json:"documentation,omitempty"`
	// Identifies a restful operation supported by the solution.
	Interaction []CapabilityStatementInteraction `json:"interaction,omitempty"`
	// This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
	Versioning *string `json:"versioning,omitempty"`
	// Value of \"true\" or \"false\"
	ReadHistory *bool `json:"readHistory,omitempty"`
	// Value of \"true\" or \"false\"
	UpdateCreate *bool `json:"updateCreate,omitempty"`
	// Value of \"true\" or \"false\"
	ConditionalCreate *bool `json:"conditionalCreate,omitempty"`
	// A code that indicates how the server supports conditional read.
	ConditionalRead *string `json:"conditionalRead,omitempty"`
	// Value of \"true\" or \"false\"
	ConditionalUpdate *bool `json:"conditionalUpdate,omitempty"`
	// A code that indicates how the server supports conditional delete.
	ConditionalDelete *string `json:"conditionalDelete,omitempty"`
	// A set of flags that defines how references are supported.
	ReferencePolicy []string `json:"referencePolicy,omitempty"`
	// A list of _include values supported by the server.
	SearchInclude []string `json:"searchInclude,omitempty"`
	// A list of _revinclude (reverse include) values supported by the server.
	SearchRevInclude []string `json:"searchRevInclude,omitempty"`
	// Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
	SearchParam []CapabilityStatementSearchParam `json:"searchParam,omitempty"`
	// Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
	Operation []CapabilityStatementOperation `json:"operation,omitempty"`
}

// NewCapabilityStatementResource instantiates a new CapabilityStatementResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityStatementResource() *CapabilityStatementResource {
	this := CapabilityStatementResource{}
	return &this
}

// NewCapabilityStatementResourceWithDefaults instantiates a new CapabilityStatementResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityStatementResourceWithDefaults() *CapabilityStatementResource {
	this := CapabilityStatementResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CapabilityStatementResource) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CapabilityStatementResource) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CapabilityStatementResource) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CapabilityStatementResource) SetType(v string) {
	o.Type = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *CapabilityStatementResource) SetProfile(v string) {
	o.Profile = &v
}

// GetSupportedProfile returns the SupportedProfile field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetSupportedProfile() []string {
	if o == nil || IsNil(o.SupportedProfile) {
		var ret []string
		return ret
	}
	return o.SupportedProfile
}

// GetSupportedProfileOk returns a tuple with the SupportedProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetSupportedProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedProfile) {
		return nil, false
	}
	return o.SupportedProfile, true
}

// HasSupportedProfile returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasSupportedProfile() bool {
	if o != nil && !IsNil(o.SupportedProfile) {
		return true
	}

	return false
}

// SetSupportedProfile gets a reference to the given []string and assigns it to the SupportedProfile field.
func (o *CapabilityStatementResource) SetSupportedProfile(v []string) {
	o.SupportedProfile = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *CapabilityStatementResource) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetInteraction returns the Interaction field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetInteraction() []CapabilityStatementInteraction {
	if o == nil || IsNil(o.Interaction) {
		var ret []CapabilityStatementInteraction
		return ret
	}
	return o.Interaction
}

// GetInteractionOk returns a tuple with the Interaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetInteractionOk() ([]CapabilityStatementInteraction, bool) {
	if o == nil || IsNil(o.Interaction) {
		return nil, false
	}
	return o.Interaction, true
}

// HasInteraction returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasInteraction() bool {
	if o != nil && !IsNil(o.Interaction) {
		return true
	}

	return false
}

// SetInteraction gets a reference to the given []CapabilityStatementInteraction and assigns it to the Interaction field.
func (o *CapabilityStatementResource) SetInteraction(v []CapabilityStatementInteraction) {
	o.Interaction = v
}

// GetVersioning returns the Versioning field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetVersioning() string {
	if o == nil || IsNil(o.Versioning) {
		var ret string
		return ret
	}
	return *o.Versioning
}

// GetVersioningOk returns a tuple with the Versioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetVersioningOk() (*string, bool) {
	if o == nil || IsNil(o.Versioning) {
		return nil, false
	}
	return o.Versioning, true
}

// HasVersioning returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasVersioning() bool {
	if o != nil && !IsNil(o.Versioning) {
		return true
	}

	return false
}

// SetVersioning gets a reference to the given string and assigns it to the Versioning field.
func (o *CapabilityStatementResource) SetVersioning(v string) {
	o.Versioning = &v
}

// GetReadHistory returns the ReadHistory field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetReadHistory() bool {
	if o == nil || IsNil(o.ReadHistory) {
		var ret bool
		return ret
	}
	return *o.ReadHistory
}

// GetReadHistoryOk returns a tuple with the ReadHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetReadHistoryOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadHistory) {
		return nil, false
	}
	return o.ReadHistory, true
}

// HasReadHistory returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasReadHistory() bool {
	if o != nil && !IsNil(o.ReadHistory) {
		return true
	}

	return false
}

// SetReadHistory gets a reference to the given bool and assigns it to the ReadHistory field.
func (o *CapabilityStatementResource) SetReadHistory(v bool) {
	o.ReadHistory = &v
}

// GetUpdateCreate returns the UpdateCreate field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetUpdateCreate() bool {
	if o == nil || IsNil(o.UpdateCreate) {
		var ret bool
		return ret
	}
	return *o.UpdateCreate
}

// GetUpdateCreateOk returns a tuple with the UpdateCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetUpdateCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateCreate) {
		return nil, false
	}
	return o.UpdateCreate, true
}

// HasUpdateCreate returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasUpdateCreate() bool {
	if o != nil && !IsNil(o.UpdateCreate) {
		return true
	}

	return false
}

// SetUpdateCreate gets a reference to the given bool and assigns it to the UpdateCreate field.
func (o *CapabilityStatementResource) SetUpdateCreate(v bool) {
	o.UpdateCreate = &v
}

// GetConditionalCreate returns the ConditionalCreate field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetConditionalCreate() bool {
	if o == nil || IsNil(o.ConditionalCreate) {
		var ret bool
		return ret
	}
	return *o.ConditionalCreate
}

// GetConditionalCreateOk returns a tuple with the ConditionalCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetConditionalCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.ConditionalCreate) {
		return nil, false
	}
	return o.ConditionalCreate, true
}

// HasConditionalCreate returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasConditionalCreate() bool {
	if o != nil && !IsNil(o.ConditionalCreate) {
		return true
	}

	return false
}

// SetConditionalCreate gets a reference to the given bool and assigns it to the ConditionalCreate field.
func (o *CapabilityStatementResource) SetConditionalCreate(v bool) {
	o.ConditionalCreate = &v
}

// GetConditionalRead returns the ConditionalRead field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetConditionalRead() string {
	if o == nil || IsNil(o.ConditionalRead) {
		var ret string
		return ret
	}
	return *o.ConditionalRead
}

// GetConditionalReadOk returns a tuple with the ConditionalRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetConditionalReadOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionalRead) {
		return nil, false
	}
	return o.ConditionalRead, true
}

// HasConditionalRead returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasConditionalRead() bool {
	if o != nil && !IsNil(o.ConditionalRead) {
		return true
	}

	return false
}

// SetConditionalRead gets a reference to the given string and assigns it to the ConditionalRead field.
func (o *CapabilityStatementResource) SetConditionalRead(v string) {
	o.ConditionalRead = &v
}

// GetConditionalUpdate returns the ConditionalUpdate field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetConditionalUpdate() bool {
	if o == nil || IsNil(o.ConditionalUpdate) {
		var ret bool
		return ret
	}
	return *o.ConditionalUpdate
}

// GetConditionalUpdateOk returns a tuple with the ConditionalUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetConditionalUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.ConditionalUpdate) {
		return nil, false
	}
	return o.ConditionalUpdate, true
}

// HasConditionalUpdate returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasConditionalUpdate() bool {
	if o != nil && !IsNil(o.ConditionalUpdate) {
		return true
	}

	return false
}

// SetConditionalUpdate gets a reference to the given bool and assigns it to the ConditionalUpdate field.
func (o *CapabilityStatementResource) SetConditionalUpdate(v bool) {
	o.ConditionalUpdate = &v
}

// GetConditionalDelete returns the ConditionalDelete field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetConditionalDelete() string {
	if o == nil || IsNil(o.ConditionalDelete) {
		var ret string
		return ret
	}
	return *o.ConditionalDelete
}

// GetConditionalDeleteOk returns a tuple with the ConditionalDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetConditionalDeleteOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionalDelete) {
		return nil, false
	}
	return o.ConditionalDelete, true
}

// HasConditionalDelete returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasConditionalDelete() bool {
	if o != nil && !IsNil(o.ConditionalDelete) {
		return true
	}

	return false
}

// SetConditionalDelete gets a reference to the given string and assigns it to the ConditionalDelete field.
func (o *CapabilityStatementResource) SetConditionalDelete(v string) {
	o.ConditionalDelete = &v
}

// GetReferencePolicy returns the ReferencePolicy field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetReferencePolicy() []string {
	if o == nil || IsNil(o.ReferencePolicy) {
		var ret []string
		return ret
	}
	return o.ReferencePolicy
}

// GetReferencePolicyOk returns a tuple with the ReferencePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetReferencePolicyOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferencePolicy) {
		return nil, false
	}
	return o.ReferencePolicy, true
}

// HasReferencePolicy returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasReferencePolicy() bool {
	if o != nil && !IsNil(o.ReferencePolicy) {
		return true
	}

	return false
}

// SetReferencePolicy gets a reference to the given []string and assigns it to the ReferencePolicy field.
func (o *CapabilityStatementResource) SetReferencePolicy(v []string) {
	o.ReferencePolicy = v
}

// GetSearchInclude returns the SearchInclude field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetSearchInclude() []string {
	if o == nil || IsNil(o.SearchInclude) {
		var ret []string
		return ret
	}
	return o.SearchInclude
}

// GetSearchIncludeOk returns a tuple with the SearchInclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetSearchIncludeOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchInclude) {
		return nil, false
	}
	return o.SearchInclude, true
}

// HasSearchInclude returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasSearchInclude() bool {
	if o != nil && !IsNil(o.SearchInclude) {
		return true
	}

	return false
}

// SetSearchInclude gets a reference to the given []string and assigns it to the SearchInclude field.
func (o *CapabilityStatementResource) SetSearchInclude(v []string) {
	o.SearchInclude = v
}

// GetSearchRevInclude returns the SearchRevInclude field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetSearchRevInclude() []string {
	if o == nil || IsNil(o.SearchRevInclude) {
		var ret []string
		return ret
	}
	return o.SearchRevInclude
}

// GetSearchRevIncludeOk returns a tuple with the SearchRevInclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetSearchRevIncludeOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchRevInclude) {
		return nil, false
	}
	return o.SearchRevInclude, true
}

// HasSearchRevInclude returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasSearchRevInclude() bool {
	if o != nil && !IsNil(o.SearchRevInclude) {
		return true
	}

	return false
}

// SetSearchRevInclude gets a reference to the given []string and assigns it to the SearchRevInclude field.
func (o *CapabilityStatementResource) SetSearchRevInclude(v []string) {
	o.SearchRevInclude = v
}

// GetSearchParam returns the SearchParam field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetSearchParam() []CapabilityStatementSearchParam {
	if o == nil || IsNil(o.SearchParam) {
		var ret []CapabilityStatementSearchParam
		return ret
	}
	return o.SearchParam
}

// GetSearchParamOk returns a tuple with the SearchParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetSearchParamOk() ([]CapabilityStatementSearchParam, bool) {
	if o == nil || IsNil(o.SearchParam) {
		return nil, false
	}
	return o.SearchParam, true
}

// HasSearchParam returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasSearchParam() bool {
	if o != nil && !IsNil(o.SearchParam) {
		return true
	}

	return false
}

// SetSearchParam gets a reference to the given []CapabilityStatementSearchParam and assigns it to the SearchParam field.
func (o *CapabilityStatementResource) SetSearchParam(v []CapabilityStatementSearchParam) {
	o.SearchParam = v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *CapabilityStatementResource) GetOperation() []CapabilityStatementOperation {
	if o == nil || IsNil(o.Operation) {
		var ret []CapabilityStatementOperation
		return ret
	}
	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementResource) GetOperationOk() ([]CapabilityStatementOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *CapabilityStatementResource) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given []CapabilityStatementOperation and assigns it to the Operation field.
func (o *CapabilityStatementResource) SetOperation(v []CapabilityStatementOperation) {
	o.Operation = v
}

func (o CapabilityStatementResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapabilityStatementResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.SupportedProfile) {
		toSerialize["supportedProfile"] = o.SupportedProfile
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Interaction) {
		toSerialize["interaction"] = o.Interaction
	}
	if !IsNil(o.Versioning) {
		toSerialize["versioning"] = o.Versioning
	}
	if !IsNil(o.ReadHistory) {
		toSerialize["readHistory"] = o.ReadHistory
	}
	if !IsNil(o.UpdateCreate) {
		toSerialize["updateCreate"] = o.UpdateCreate
	}
	if !IsNil(o.ConditionalCreate) {
		toSerialize["conditionalCreate"] = o.ConditionalCreate
	}
	if !IsNil(o.ConditionalRead) {
		toSerialize["conditionalRead"] = o.ConditionalRead
	}
	if !IsNil(o.ConditionalUpdate) {
		toSerialize["conditionalUpdate"] = o.ConditionalUpdate
	}
	if !IsNil(o.ConditionalDelete) {
		toSerialize["conditionalDelete"] = o.ConditionalDelete
	}
	if !IsNil(o.ReferencePolicy) {
		toSerialize["referencePolicy"] = o.ReferencePolicy
	}
	if !IsNil(o.SearchInclude) {
		toSerialize["searchInclude"] = o.SearchInclude
	}
	if !IsNil(o.SearchRevInclude) {
		toSerialize["searchRevInclude"] = o.SearchRevInclude
	}
	if !IsNil(o.SearchParam) {
		toSerialize["searchParam"] = o.SearchParam
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	return toSerialize, nil
}

type NullableCapabilityStatementResource struct {
	value *CapabilityStatementResource
	isSet bool
}

func (v NullableCapabilityStatementResource) Get() *CapabilityStatementResource {
	return v.value
}

func (v *NullableCapabilityStatementResource) Set(val *CapabilityStatementResource) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityStatementResource) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityStatementResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityStatementResource(val *CapabilityStatementResource) *NullableCapabilityStatementResource {
	return &NullableCapabilityStatementResource{value: val, isSet: true}
}

func (v NullableCapabilityStatementResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityStatementResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


