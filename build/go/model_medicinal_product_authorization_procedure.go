/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductAuthorizationProcedure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductAuthorizationProcedure{}

// MedicinalProductAuthorizationProcedure The regulatory authorization of a medicinal product.
type MedicinalProductAuthorizationProcedure struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifier for this procedure.
	Identifier *Identifier `json:"identifier,omitempty"`
	// Type of procedure.
	Type CodeableConcept `json:"type"`
	// Date of procedure.
	DatePeriod *Period `json:"datePeriod,omitempty"`
	// Date of procedure.
	DateDateTime *string `json:"dateDateTime,omitempty"`
	// Applcations submitted to obtain a marketing authorization.
	Application []MedicinalProductAuthorizationProcedure `json:"application,omitempty"`
}

type _MedicinalProductAuthorizationProcedure MedicinalProductAuthorizationProcedure

// NewMedicinalProductAuthorizationProcedure instantiates a new MedicinalProductAuthorizationProcedure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductAuthorizationProcedure(type_ CodeableConcept) *MedicinalProductAuthorizationProcedure {
	this := MedicinalProductAuthorizationProcedure{}
	this.Type = type_
	return &this
}

// NewMedicinalProductAuthorizationProcedureWithDefaults instantiates a new MedicinalProductAuthorizationProcedure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductAuthorizationProcedureWithDefaults() *MedicinalProductAuthorizationProcedure {
	this := MedicinalProductAuthorizationProcedure{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductAuthorizationProcedure) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductAuthorizationProcedure) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductAuthorizationProcedure) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *MedicinalProductAuthorizationProcedure) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetType returns the Type field value
func (o *MedicinalProductAuthorizationProcedure) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MedicinalProductAuthorizationProcedure) SetType(v CodeableConcept) {
	o.Type = v
}

// GetDatePeriod returns the DatePeriod field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetDatePeriod() Period {
	if o == nil || IsNil(o.DatePeriod) {
		var ret Period
		return ret
	}
	return *o.DatePeriod
}

// GetDatePeriodOk returns a tuple with the DatePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetDatePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.DatePeriod) {
		return nil, false
	}
	return o.DatePeriod, true
}

// HasDatePeriod returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasDatePeriod() bool {
	if o != nil && !IsNil(o.DatePeriod) {
		return true
	}

	return false
}

// SetDatePeriod gets a reference to the given Period and assigns it to the DatePeriod field.
func (o *MedicinalProductAuthorizationProcedure) SetDatePeriod(v Period) {
	o.DatePeriod = &v
}

// GetDateDateTime returns the DateDateTime field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetDateDateTime() string {
	if o == nil || IsNil(o.DateDateTime) {
		var ret string
		return ret
	}
	return *o.DateDateTime
}

// GetDateDateTimeOk returns a tuple with the DateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetDateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateDateTime) {
		return nil, false
	}
	return o.DateDateTime, true
}

// HasDateDateTime returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasDateDateTime() bool {
	if o != nil && !IsNil(o.DateDateTime) {
		return true
	}

	return false
}

// SetDateDateTime gets a reference to the given string and assigns it to the DateDateTime field.
func (o *MedicinalProductAuthorizationProcedure) SetDateDateTime(v string) {
	o.DateDateTime = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *MedicinalProductAuthorizationProcedure) GetApplication() []MedicinalProductAuthorizationProcedure {
	if o == nil || IsNil(o.Application) {
		var ret []MedicinalProductAuthorizationProcedure
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductAuthorizationProcedure) GetApplicationOk() ([]MedicinalProductAuthorizationProcedure, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *MedicinalProductAuthorizationProcedure) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given []MedicinalProductAuthorizationProcedure and assigns it to the Application field.
func (o *MedicinalProductAuthorizationProcedure) SetApplication(v []MedicinalProductAuthorizationProcedure) {
	o.Application = v
}

func (o MedicinalProductAuthorizationProcedure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductAuthorizationProcedure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.DatePeriod) {
		toSerialize["datePeriod"] = o.DatePeriod
	}
	if !IsNil(o.DateDateTime) {
		toSerialize["dateDateTime"] = o.DateDateTime
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	return toSerialize, nil
}

func (o *MedicinalProductAuthorizationProcedure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductAuthorizationProcedure := _MedicinalProductAuthorizationProcedure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductAuthorizationProcedure)

	if err != nil {
		return err
	}

	*o = MedicinalProductAuthorizationProcedure(varMedicinalProductAuthorizationProcedure)

	return err
}

type NullableMedicinalProductAuthorizationProcedure struct {
	value *MedicinalProductAuthorizationProcedure
	isSet bool
}

func (v NullableMedicinalProductAuthorizationProcedure) Get() *MedicinalProductAuthorizationProcedure {
	return v.value
}

func (v *NullableMedicinalProductAuthorizationProcedure) Set(val *MedicinalProductAuthorizationProcedure) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductAuthorizationProcedure) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductAuthorizationProcedure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductAuthorizationProcedure(val *MedicinalProductAuthorizationProcedure) *NullableMedicinalProductAuthorizationProcedure {
	return &NullableMedicinalProductAuthorizationProcedure{value: val, isSet: true}
}

func (v NullableMedicinalProductAuthorizationProcedure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductAuthorizationProcedure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


