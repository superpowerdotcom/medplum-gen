/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisionPrescriptionLensSpecification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisionPrescriptionLensSpecification{}

// VisionPrescriptionLensSpecification An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescriptionLensSpecification struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifies the type of vision correction product which is required for the patient.
	Product CodeableConcept `json:"product"`
	// The eye for which the lens specification applies.
	Eye *string `json:"eye,omitempty"`
	// A rational number with implicit precision
	Sphere *float32 `json:"sphere,omitempty"`
	// A rational number with implicit precision
	Cylinder *float32 `json:"cylinder,omitempty"`
	// A whole number
	Axis *float32 `json:"axis,omitempty"`
	// Allows for adjustment on two axis.
	Prism []VisionPrescriptionPrism `json:"prism,omitempty"`
	// A rational number with implicit precision
	Add *float32 `json:"add,omitempty"`
	// A rational number with implicit precision
	Power *float32 `json:"power,omitempty"`
	// A rational number with implicit precision
	BackCurve *float32 `json:"backCurve,omitempty"`
	// A rational number with implicit precision
	Diameter *float32 `json:"diameter,omitempty"`
	// The recommended maximum wear period for the lens.
	Duration *Quantity `json:"duration,omitempty"`
	// A sequence of Unicode characters
	Color *string `json:"color,omitempty"`
	// A sequence of Unicode characters
	Brand *string `json:"brand,omitempty"`
	// Notes for special requirements such as coatings and lens materials.
	Note []Annotation `json:"note,omitempty"`
}

type _VisionPrescriptionLensSpecification VisionPrescriptionLensSpecification

// NewVisionPrescriptionLensSpecification instantiates a new VisionPrescriptionLensSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisionPrescriptionLensSpecification(product CodeableConcept) *VisionPrescriptionLensSpecification {
	this := VisionPrescriptionLensSpecification{}
	this.Product = product
	return &this
}

// NewVisionPrescriptionLensSpecificationWithDefaults instantiates a new VisionPrescriptionLensSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisionPrescriptionLensSpecificationWithDefaults() *VisionPrescriptionLensSpecification {
	this := VisionPrescriptionLensSpecification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VisionPrescriptionLensSpecification) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *VisionPrescriptionLensSpecification) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *VisionPrescriptionLensSpecification) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetProduct returns the Product field value
func (o *VisionPrescriptionLensSpecification) GetProduct() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetProductOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *VisionPrescriptionLensSpecification) SetProduct(v CodeableConcept) {
	o.Product = v
}

// GetEye returns the Eye field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetEye() string {
	if o == nil || IsNil(o.Eye) {
		var ret string
		return ret
	}
	return *o.Eye
}

// GetEyeOk returns a tuple with the Eye field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetEyeOk() (*string, bool) {
	if o == nil || IsNil(o.Eye) {
		return nil, false
	}
	return o.Eye, true
}

// HasEye returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasEye() bool {
	if o != nil && !IsNil(o.Eye) {
		return true
	}

	return false
}

// SetEye gets a reference to the given string and assigns it to the Eye field.
func (o *VisionPrescriptionLensSpecification) SetEye(v string) {
	o.Eye = &v
}

// GetSphere returns the Sphere field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetSphere() float32 {
	if o == nil || IsNil(o.Sphere) {
		var ret float32
		return ret
	}
	return *o.Sphere
}

// GetSphereOk returns a tuple with the Sphere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetSphereOk() (*float32, bool) {
	if o == nil || IsNil(o.Sphere) {
		return nil, false
	}
	return o.Sphere, true
}

// HasSphere returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasSphere() bool {
	if o != nil && !IsNil(o.Sphere) {
		return true
	}

	return false
}

// SetSphere gets a reference to the given float32 and assigns it to the Sphere field.
func (o *VisionPrescriptionLensSpecification) SetSphere(v float32) {
	o.Sphere = &v
}

// GetCylinder returns the Cylinder field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetCylinder() float32 {
	if o == nil || IsNil(o.Cylinder) {
		var ret float32
		return ret
	}
	return *o.Cylinder
}

// GetCylinderOk returns a tuple with the Cylinder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetCylinderOk() (*float32, bool) {
	if o == nil || IsNil(o.Cylinder) {
		return nil, false
	}
	return o.Cylinder, true
}

// HasCylinder returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasCylinder() bool {
	if o != nil && !IsNil(o.Cylinder) {
		return true
	}

	return false
}

// SetCylinder gets a reference to the given float32 and assigns it to the Cylinder field.
func (o *VisionPrescriptionLensSpecification) SetCylinder(v float32) {
	o.Cylinder = &v
}

// GetAxis returns the Axis field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetAxis() float32 {
	if o == nil || IsNil(o.Axis) {
		var ret float32
		return ret
	}
	return *o.Axis
}

// GetAxisOk returns a tuple with the Axis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetAxisOk() (*float32, bool) {
	if o == nil || IsNil(o.Axis) {
		return nil, false
	}
	return o.Axis, true
}

// HasAxis returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasAxis() bool {
	if o != nil && !IsNil(o.Axis) {
		return true
	}

	return false
}

// SetAxis gets a reference to the given float32 and assigns it to the Axis field.
func (o *VisionPrescriptionLensSpecification) SetAxis(v float32) {
	o.Axis = &v
}

// GetPrism returns the Prism field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetPrism() []VisionPrescriptionPrism {
	if o == nil || IsNil(o.Prism) {
		var ret []VisionPrescriptionPrism
		return ret
	}
	return o.Prism
}

// GetPrismOk returns a tuple with the Prism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetPrismOk() ([]VisionPrescriptionPrism, bool) {
	if o == nil || IsNil(o.Prism) {
		return nil, false
	}
	return o.Prism, true
}

// HasPrism returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasPrism() bool {
	if o != nil && !IsNil(o.Prism) {
		return true
	}

	return false
}

// SetPrism gets a reference to the given []VisionPrescriptionPrism and assigns it to the Prism field.
func (o *VisionPrescriptionLensSpecification) SetPrism(v []VisionPrescriptionPrism) {
	o.Prism = v
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetAdd() float32 {
	if o == nil || IsNil(o.Add) {
		var ret float32
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetAddOk() (*float32, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given float32 and assigns it to the Add field.
func (o *VisionPrescriptionLensSpecification) SetAdd(v float32) {
	o.Add = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetPower() float32 {
	if o == nil || IsNil(o.Power) {
		var ret float32
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetPowerOk() (*float32, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given float32 and assigns it to the Power field.
func (o *VisionPrescriptionLensSpecification) SetPower(v float32) {
	o.Power = &v
}

// GetBackCurve returns the BackCurve field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetBackCurve() float32 {
	if o == nil || IsNil(o.BackCurve) {
		var ret float32
		return ret
	}
	return *o.BackCurve
}

// GetBackCurveOk returns a tuple with the BackCurve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetBackCurveOk() (*float32, bool) {
	if o == nil || IsNil(o.BackCurve) {
		return nil, false
	}
	return o.BackCurve, true
}

// HasBackCurve returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasBackCurve() bool {
	if o != nil && !IsNil(o.BackCurve) {
		return true
	}

	return false
}

// SetBackCurve gets a reference to the given float32 and assigns it to the BackCurve field.
func (o *VisionPrescriptionLensSpecification) SetBackCurve(v float32) {
	o.BackCurve = &v
}

// GetDiameter returns the Diameter field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetDiameter() float32 {
	if o == nil || IsNil(o.Diameter) {
		var ret float32
		return ret
	}
	return *o.Diameter
}

// GetDiameterOk returns a tuple with the Diameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetDiameterOk() (*float32, bool) {
	if o == nil || IsNil(o.Diameter) {
		return nil, false
	}
	return o.Diameter, true
}

// HasDiameter returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasDiameter() bool {
	if o != nil && !IsNil(o.Diameter) {
		return true
	}

	return false
}

// SetDiameter gets a reference to the given float32 and assigns it to the Diameter field.
func (o *VisionPrescriptionLensSpecification) SetDiameter(v float32) {
	o.Diameter = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetDuration() Quantity {
	if o == nil || IsNil(o.Duration) {
		var ret Quantity
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetDurationOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Quantity and assigns it to the Duration field.
func (o *VisionPrescriptionLensSpecification) SetDuration(v Quantity) {
	o.Duration = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *VisionPrescriptionLensSpecification) SetColor(v string) {
	o.Color = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *VisionPrescriptionLensSpecification) SetBrand(v string) {
	o.Brand = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *VisionPrescriptionLensSpecification) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisionPrescriptionLensSpecification) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *VisionPrescriptionLensSpecification) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *VisionPrescriptionLensSpecification) SetNote(v []Annotation) {
	o.Note = v
}

func (o VisionPrescriptionLensSpecification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisionPrescriptionLensSpecification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["product"] = o.Product
	if !IsNil(o.Eye) {
		toSerialize["eye"] = o.Eye
	}
	if !IsNil(o.Sphere) {
		toSerialize["sphere"] = o.Sphere
	}
	if !IsNil(o.Cylinder) {
		toSerialize["cylinder"] = o.Cylinder
	}
	if !IsNil(o.Axis) {
		toSerialize["axis"] = o.Axis
	}
	if !IsNil(o.Prism) {
		toSerialize["prism"] = o.Prism
	}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.BackCurve) {
		toSerialize["backCurve"] = o.BackCurve
	}
	if !IsNil(o.Diameter) {
		toSerialize["diameter"] = o.Diameter
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *VisionPrescriptionLensSpecification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisionPrescriptionLensSpecification := _VisionPrescriptionLensSpecification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisionPrescriptionLensSpecification)

	if err != nil {
		return err
	}

	*o = VisionPrescriptionLensSpecification(varVisionPrescriptionLensSpecification)

	return err
}

type NullableVisionPrescriptionLensSpecification struct {
	value *VisionPrescriptionLensSpecification
	isSet bool
}

func (v NullableVisionPrescriptionLensSpecification) Get() *VisionPrescriptionLensSpecification {
	return v.value
}

func (v *NullableVisionPrescriptionLensSpecification) Set(val *VisionPrescriptionLensSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableVisionPrescriptionLensSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableVisionPrescriptionLensSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisionPrescriptionLensSpecification(val *VisionPrescriptionLensSpecification) *NullableVisionPrescriptionLensSpecification {
	return &NullableVisionPrescriptionLensSpecification{value: val, isSet: true}
}

func (v NullableVisionPrescriptionLensSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisionPrescriptionLensSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


