/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SpecimenDefinitionTypeTested type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecimenDefinitionTypeTested{}

// SpecimenDefinitionTypeTested A kind of specimen with associated set of requirements.
type SpecimenDefinitionTypeTested struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Value of \"true\" or \"false\"
	IsDerived *bool `json:"isDerived,omitempty"`
	// The kind of specimen conditioned for testing expected by lab.
	Type *CodeableConcept `json:"type,omitempty"`
	// The preference for this type of conditioned specimen.
	Preference *string `json:"preference,omitempty"`
	// The specimen's container.
	Container *SpecimenDefinitionContainer `json:"container,omitempty"`
	// A sequence of Unicode characters
	Requirement *string `json:"requirement,omitempty"`
	// The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
	RetentionTime *Duration `json:"retentionTime,omitempty"`
	// Criterion for rejection of the specimen in its container by the laboratory.
	RejectionCriterion []CodeableConcept `json:"rejectionCriterion,omitempty"`
	// Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
	Handling []SpecimenDefinitionHandling `json:"handling,omitempty"`
}

// NewSpecimenDefinitionTypeTested instantiates a new SpecimenDefinitionTypeTested object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecimenDefinitionTypeTested() *SpecimenDefinitionTypeTested {
	this := SpecimenDefinitionTypeTested{}
	return &this
}

// NewSpecimenDefinitionTypeTestedWithDefaults instantiates a new SpecimenDefinitionTypeTested object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecimenDefinitionTypeTestedWithDefaults() *SpecimenDefinitionTypeTested {
	this := SpecimenDefinitionTypeTested{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpecimenDefinitionTypeTested) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SpecimenDefinitionTypeTested) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SpecimenDefinitionTypeTested) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIsDerived returns the IsDerived field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetIsDerived() bool {
	if o == nil || IsNil(o.IsDerived) {
		var ret bool
		return ret
	}
	return *o.IsDerived
}

// GetIsDerivedOk returns a tuple with the IsDerived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetIsDerivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDerived) {
		return nil, false
	}
	return o.IsDerived, true
}

// HasIsDerived returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasIsDerived() bool {
	if o != nil && !IsNil(o.IsDerived) {
		return true
	}

	return false
}

// SetIsDerived gets a reference to the given bool and assigns it to the IsDerived field.
func (o *SpecimenDefinitionTypeTested) SetIsDerived(v bool) {
	o.IsDerived = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SpecimenDefinitionTypeTested) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetPreference() string {
	if o == nil || IsNil(o.Preference) {
		var ret string
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given string and assigns it to the Preference field.
func (o *SpecimenDefinitionTypeTested) SetPreference(v string) {
	o.Preference = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetContainer() SpecimenDefinitionContainer {
	if o == nil || IsNil(o.Container) {
		var ret SpecimenDefinitionContainer
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetContainerOk() (*SpecimenDefinitionContainer, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given SpecimenDefinitionContainer and assigns it to the Container field.
func (o *SpecimenDefinitionTypeTested) SetContainer(v SpecimenDefinitionContainer) {
	o.Container = &v
}

// GetRequirement returns the Requirement field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetRequirement() string {
	if o == nil || IsNil(o.Requirement) {
		var ret string
		return ret
	}
	return *o.Requirement
}

// GetRequirementOk returns a tuple with the Requirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetRequirementOk() (*string, bool) {
	if o == nil || IsNil(o.Requirement) {
		return nil, false
	}
	return o.Requirement, true
}

// HasRequirement returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasRequirement() bool {
	if o != nil && !IsNil(o.Requirement) {
		return true
	}

	return false
}

// SetRequirement gets a reference to the given string and assigns it to the Requirement field.
func (o *SpecimenDefinitionTypeTested) SetRequirement(v string) {
	o.Requirement = &v
}

// GetRetentionTime returns the RetentionTime field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetRetentionTime() Duration {
	if o == nil || IsNil(o.RetentionTime) {
		var ret Duration
		return ret
	}
	return *o.RetentionTime
}

// GetRetentionTimeOk returns a tuple with the RetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetRetentionTimeOk() (*Duration, bool) {
	if o == nil || IsNil(o.RetentionTime) {
		return nil, false
	}
	return o.RetentionTime, true
}

// HasRetentionTime returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasRetentionTime() bool {
	if o != nil && !IsNil(o.RetentionTime) {
		return true
	}

	return false
}

// SetRetentionTime gets a reference to the given Duration and assigns it to the RetentionTime field.
func (o *SpecimenDefinitionTypeTested) SetRetentionTime(v Duration) {
	o.RetentionTime = &v
}

// GetRejectionCriterion returns the RejectionCriterion field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetRejectionCriterion() []CodeableConcept {
	if o == nil || IsNil(o.RejectionCriterion) {
		var ret []CodeableConcept
		return ret
	}
	return o.RejectionCriterion
}

// GetRejectionCriterionOk returns a tuple with the RejectionCriterion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetRejectionCriterionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.RejectionCriterion) {
		return nil, false
	}
	return o.RejectionCriterion, true
}

// HasRejectionCriterion returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasRejectionCriterion() bool {
	if o != nil && !IsNil(o.RejectionCriterion) {
		return true
	}

	return false
}

// SetRejectionCriterion gets a reference to the given []CodeableConcept and assigns it to the RejectionCriterion field.
func (o *SpecimenDefinitionTypeTested) SetRejectionCriterion(v []CodeableConcept) {
	o.RejectionCriterion = v
}

// GetHandling returns the Handling field value if set, zero value otherwise.
func (o *SpecimenDefinitionTypeTested) GetHandling() []SpecimenDefinitionHandling {
	if o == nil || IsNil(o.Handling) {
		var ret []SpecimenDefinitionHandling
		return ret
	}
	return o.Handling
}

// GetHandlingOk returns a tuple with the Handling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenDefinitionTypeTested) GetHandlingOk() ([]SpecimenDefinitionHandling, bool) {
	if o == nil || IsNil(o.Handling) {
		return nil, false
	}
	return o.Handling, true
}

// HasHandling returns a boolean if a field has been set.
func (o *SpecimenDefinitionTypeTested) HasHandling() bool {
	if o != nil && !IsNil(o.Handling) {
		return true
	}

	return false
}

// SetHandling gets a reference to the given []SpecimenDefinitionHandling and assigns it to the Handling field.
func (o *SpecimenDefinitionTypeTested) SetHandling(v []SpecimenDefinitionHandling) {
	o.Handling = v
}

func (o SpecimenDefinitionTypeTested) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecimenDefinitionTypeTested) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.IsDerived) {
		toSerialize["isDerived"] = o.IsDerived
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.Requirement) {
		toSerialize["requirement"] = o.Requirement
	}
	if !IsNil(o.RetentionTime) {
		toSerialize["retentionTime"] = o.RetentionTime
	}
	if !IsNil(o.RejectionCriterion) {
		toSerialize["rejectionCriterion"] = o.RejectionCriterion
	}
	if !IsNil(o.Handling) {
		toSerialize["handling"] = o.Handling
	}
	return toSerialize, nil
}

type NullableSpecimenDefinitionTypeTested struct {
	value *SpecimenDefinitionTypeTested
	isSet bool
}

func (v NullableSpecimenDefinitionTypeTested) Get() *SpecimenDefinitionTypeTested {
	return v.value
}

func (v *NullableSpecimenDefinitionTypeTested) Set(val *SpecimenDefinitionTypeTested) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecimenDefinitionTypeTested) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecimenDefinitionTypeTested) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecimenDefinitionTypeTested(val *SpecimenDefinitionTypeTested) *NullableSpecimenDefinitionTypeTested {
	return &NullableSpecimenDefinitionTypeTested{value: val, isSet: true}
}

func (v NullableSpecimenDefinitionTypeTested) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecimenDefinitionTypeTested) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


