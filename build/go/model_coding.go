/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Coding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coding{}

// Coding A reference to a code defined by a terminology system.
type Coding struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// String of characters used to identify a name or a resource
	System *string `json:"system,omitempty"`
	// A sequence of Unicode characters
	Version *string `json:"version,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Code *string `json:"code,omitempty"`
	// A sequence of Unicode characters
	Display *string `json:"display,omitempty"`
	// Value of \"true\" or \"false\"
	UserSelected *bool `json:"userSelected,omitempty"`
}

// NewCoding instantiates a new Coding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoding() *Coding {
	this := Coding{}
	return &this
}

// NewCodingWithDefaults instantiates a new Coding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingWithDefaults() *Coding {
	this := Coding{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Coding) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Coding) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Coding) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Coding) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Coding) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Coding) SetExtension(v []Extension) {
	o.Extension = v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Coding) GetSystem() string {
	if o == nil || IsNil(o.System) {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSystemOk() (*string, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Coding) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *Coding) SetSystem(v string) {
	o.System = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Coding) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Coding) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Coding) SetVersion(v string) {
	o.Version = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Coding) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Coding) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Coding) SetCode(v string) {
	o.Code = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Coding) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Coding) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *Coding) SetDisplay(v string) {
	o.Display = &v
}

// GetUserSelected returns the UserSelected field value if set, zero value otherwise.
func (o *Coding) GetUserSelected() bool {
	if o == nil || IsNil(o.UserSelected) {
		var ret bool
		return ret
	}
	return *o.UserSelected
}

// GetUserSelectedOk returns a tuple with the UserSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetUserSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.UserSelected) {
		return nil, false
	}
	return o.UserSelected, true
}

// HasUserSelected returns a boolean if a field has been set.
func (o *Coding) HasUserSelected() bool {
	if o != nil && !IsNil(o.UserSelected) {
		return true
	}

	return false
}

// SetUserSelected gets a reference to the given bool and assigns it to the UserSelected field.
func (o *Coding) SetUserSelected(v bool) {
	o.UserSelected = &v
}

func (o Coding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.UserSelected) {
		toSerialize["userSelected"] = o.UserSelected
	}
	return toSerialize, nil
}

type NullableCoding struct {
	value *Coding
	isSet bool
}

func (v NullableCoding) Get() *Coding {
	return v.value
}

func (v *NullableCoding) Set(val *Coding) {
	v.value = val
	v.isSet = true
}

func (v NullableCoding) IsSet() bool {
	return v.isSet
}

func (v *NullableCoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoding(val *Coding) *NullableCoding {
	return &NullableCoding{value: val, isSet: true}
}

func (v NullableCoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


