/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivityDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityDefinition{}

// ActivityDefinition This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition struct {
	// This is a ActivityDefinition resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// String of characters used to identify a name or a resource
	Url *string `json:"url,omitempty"`
	// A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Version *string `json:"version,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A sequence of Unicode characters
	Subtitle *string `json:"subtitle,omitempty"`
	// The status of this activity definition. Enables tracking the life-cycle of the content.
	Status *string `json:"status,omitempty"`
	// Value of \"true\" or \"false\"
	Experimental *bool `json:"experimental,omitempty"`
	// A code or group definition that describes the intended subject of the activity being defined.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept,omitempty"`
	// A code or group definition that describes the intended subject of the activity being defined.
	SubjectReference *Reference `json:"subjectReference,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// A sequence of Unicode characters
	Publisher *string `json:"publisher,omitempty"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []ContactDetail `json:"contact,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Description *string `json:"description,omitempty"`
	// The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
	UseContext []UsageContext `json:"useContext,omitempty"`
	// A legal or geographic region in which the activity definition is intended to be used.
	Jurisdiction []CodeableConcept `json:"jurisdiction,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Purpose *string `json:"purpose,omitempty"`
	// A sequence of Unicode characters
	Usage *string `json:"usage,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Copyright *string `json:"copyright,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	ApprovalDate *string `json:"approvalDate,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	LastReviewDate *string `json:"lastReviewDate,omitempty"`
	// The period during which the activity definition content was or is planned to be in active use.
	EffectivePeriod *Period `json:"effectivePeriod,omitempty"`
	// Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
	Topic []CodeableConcept `json:"topic,omitempty"`
	// An individiual or organization primarily involved in the creation and maintenance of the content.
	Author []ContactDetail `json:"author,omitempty"`
	// An individual or organization primarily responsible for internal coherence of the content.
	Editor []ContactDetail `json:"editor,omitempty"`
	// An individual or organization primarily responsible for review of some aspect of the content.
	Reviewer []ContactDetail `json:"reviewer,omitempty"`
	// An individual or organization responsible for officially endorsing the content for use in some setting.
	Endorser []ContactDetail `json:"endorser,omitempty"`
	// Related artifacts such as additional documentation, justification, or bibliographic references.
	RelatedArtifact []RelatedArtifact `json:"relatedArtifact,omitempty"`
	// A reference to a Library resource containing any formal logic used by the activity definition.
	Library []string `json:"library,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Kind *string `json:"kind,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Profile *string `json:"profile,omitempty"`
	// Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
	Code *CodeableConcept `json:"code,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Intent *string `json:"intent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// Value of \"true\" or \"false\"
	DoNotPerform *bool `json:"doNotPerform,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingTiming *Timing `json:"timingTiming,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingDateTime *string `json:"timingDateTime,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingAge *Age `json:"timingAge,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingPeriod *Period `json:"timingPeriod,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingRange *Range `json:"timingRange,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	TimingDuration *Duration `json:"timingDuration,omitempty"`
	// Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
	Location *Reference `json:"location,omitempty"`
	// Indicates who should participate in performing the action described.
	Participant []ActivityDefinitionParticipant `json:"participant,omitempty"`
	// Identifies the food, drug or other product being consumed or supplied in the activity.
	ProductReference *Reference `json:"productReference,omitempty"`
	// Identifies the food, drug or other product being consumed or supplied in the activity.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept,omitempty"`
	// Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
	Quantity *Quantity `json:"quantity,omitempty"`
	// Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
	Dosage []Dosage `json:"dosage,omitempty"`
	// Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
	BodySite []CodeableConcept `json:"bodySite,omitempty"`
	// Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
	SpecimenRequirement []Reference `json:"specimenRequirement,omitempty"`
	// Defines observation requirements for the action to be performed, such as body weight or surface area.
	ObservationRequirement []Reference `json:"observationRequirement,omitempty"`
	// Defines the observations that are expected to be produced by the action.
	ObservationResultRequirement []Reference `json:"observationResultRequirement,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Transform *string `json:"transform,omitempty"`
	// Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
	DynamicValue []ActivityDefinitionDynamicValue `json:"dynamicValue,omitempty"`
}

type _ActivityDefinition ActivityDefinition

// NewActivityDefinition instantiates a new ActivityDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityDefinition(resourceType string) *ActivityDefinition {
	this := ActivityDefinition{}
	this.ResourceType = resourceType
	return &this
}

// NewActivityDefinitionWithDefaults instantiates a new ActivityDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityDefinitionWithDefaults() *ActivityDefinition {
	this := ActivityDefinition{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ActivityDefinition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ActivityDefinition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActivityDefinition) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ActivityDefinition) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ActivityDefinition) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ActivityDefinition) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ActivityDefinition) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ActivityDefinition) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ActivityDefinition) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ActivityDefinition) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ActivityDefinition) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ActivityDefinition) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ActivityDefinition) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ActivityDefinition) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ActivityDefinition) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ActivityDefinition) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ActivityDefinition) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ActivityDefinition) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ActivityDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ActivityDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ActivityDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ActivityDefinition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ActivityDefinition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ActivityDefinition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ActivityDefinition) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ActivityDefinition) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ActivityDefinition) SetUrl(v string) {
	o.Url = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ActivityDefinition) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ActivityDefinition) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ActivityDefinition) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ActivityDefinition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ActivityDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ActivityDefinition) SetVersion(v string) {
	o.Version = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActivityDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActivityDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActivityDefinition) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ActivityDefinition) SetTitle(v string) {
	o.Title = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *ActivityDefinition) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *ActivityDefinition) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *ActivityDefinition) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActivityDefinition) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActivityDefinition) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActivityDefinition) SetStatus(v string) {
	o.Status = &v
}

// GetExperimental returns the Experimental field value if set, zero value otherwise.
func (o *ActivityDefinition) GetExperimental() bool {
	if o == nil || IsNil(o.Experimental) {
		var ret bool
		return ret
	}
	return *o.Experimental
}

// GetExperimentalOk returns a tuple with the Experimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetExperimentalOk() (*bool, bool) {
	if o == nil || IsNil(o.Experimental) {
		return nil, false
	}
	return o.Experimental, true
}

// HasExperimental returns a boolean if a field has been set.
func (o *ActivityDefinition) HasExperimental() bool {
	if o != nil && !IsNil(o.Experimental) {
		return true
	}

	return false
}

// SetExperimental gets a reference to the given bool and assigns it to the Experimental field.
func (o *ActivityDefinition) SetExperimental(v bool) {
	o.Experimental = &v
}

// GetSubjectCodeableConcept returns the SubjectCodeableConcept field value if set, zero value otherwise.
func (o *ActivityDefinition) GetSubjectCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubjectCodeableConcept
}

// GetSubjectCodeableConceptOk returns a tuple with the SubjectCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetSubjectCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		return nil, false
	}
	return o.SubjectCodeableConcept, true
}

// HasSubjectCodeableConcept returns a boolean if a field has been set.
func (o *ActivityDefinition) HasSubjectCodeableConcept() bool {
	if o != nil && !IsNil(o.SubjectCodeableConcept) {
		return true
	}

	return false
}

// SetSubjectCodeableConcept gets a reference to the given CodeableConcept and assigns it to the SubjectCodeableConcept field.
func (o *ActivityDefinition) SetSubjectCodeableConcept(v CodeableConcept) {
	o.SubjectCodeableConcept = &v
}

// GetSubjectReference returns the SubjectReference field value if set, zero value otherwise.
func (o *ActivityDefinition) GetSubjectReference() Reference {
	if o == nil || IsNil(o.SubjectReference) {
		var ret Reference
		return ret
	}
	return *o.SubjectReference
}

// GetSubjectReferenceOk returns a tuple with the SubjectReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetSubjectReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SubjectReference) {
		return nil, false
	}
	return o.SubjectReference, true
}

// HasSubjectReference returns a boolean if a field has been set.
func (o *ActivityDefinition) HasSubjectReference() bool {
	if o != nil && !IsNil(o.SubjectReference) {
		return true
	}

	return false
}

// SetSubjectReference gets a reference to the given Reference and assigns it to the SubjectReference field.
func (o *ActivityDefinition) SetSubjectReference(v Reference) {
	o.SubjectReference = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ActivityDefinition) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ActivityDefinition) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ActivityDefinition) SetDate(v string) {
	o.Date = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ActivityDefinition) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ActivityDefinition) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *ActivityDefinition) SetPublisher(v string) {
	o.Publisher = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ActivityDefinition) GetContact() []ContactDetail {
	if o == nil || IsNil(o.Contact) {
		var ret []ContactDetail
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetContactOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ActivityDefinition) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []ContactDetail and assigns it to the Contact field.
func (o *ActivityDefinition) SetContact(v []ContactDetail) {
	o.Contact = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActivityDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActivityDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActivityDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetUseContext returns the UseContext field value if set, zero value otherwise.
func (o *ActivityDefinition) GetUseContext() []UsageContext {
	if o == nil || IsNil(o.UseContext) {
		var ret []UsageContext
		return ret
	}
	return o.UseContext
}

// GetUseContextOk returns a tuple with the UseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetUseContextOk() ([]UsageContext, bool) {
	if o == nil || IsNil(o.UseContext) {
		return nil, false
	}
	return o.UseContext, true
}

// HasUseContext returns a boolean if a field has been set.
func (o *ActivityDefinition) HasUseContext() bool {
	if o != nil && !IsNil(o.UseContext) {
		return true
	}

	return false
}

// SetUseContext gets a reference to the given []UsageContext and assigns it to the UseContext field.
func (o *ActivityDefinition) SetUseContext(v []UsageContext) {
	o.UseContext = v
}

// GetJurisdiction returns the Jurisdiction field value if set, zero value otherwise.
func (o *ActivityDefinition) GetJurisdiction() []CodeableConcept {
	if o == nil || IsNil(o.Jurisdiction) {
		var ret []CodeableConcept
		return ret
	}
	return o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetJurisdictionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Jurisdiction) {
		return nil, false
	}
	return o.Jurisdiction, true
}

// HasJurisdiction returns a boolean if a field has been set.
func (o *ActivityDefinition) HasJurisdiction() bool {
	if o != nil && !IsNil(o.Jurisdiction) {
		return true
	}

	return false
}

// SetJurisdiction gets a reference to the given []CodeableConcept and assigns it to the Jurisdiction field.
func (o *ActivityDefinition) SetJurisdiction(v []CodeableConcept) {
	o.Jurisdiction = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *ActivityDefinition) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *ActivityDefinition) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *ActivityDefinition) SetPurpose(v string) {
	o.Purpose = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ActivityDefinition) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ActivityDefinition) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *ActivityDefinition) SetUsage(v string) {
	o.Usage = &v
}

// GetCopyright returns the Copyright field value if set, zero value otherwise.
func (o *ActivityDefinition) GetCopyright() string {
	if o == nil || IsNil(o.Copyright) {
		var ret string
		return ret
	}
	return *o.Copyright
}

// GetCopyrightOk returns a tuple with the Copyright field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetCopyrightOk() (*string, bool) {
	if o == nil || IsNil(o.Copyright) {
		return nil, false
	}
	return o.Copyright, true
}

// HasCopyright returns a boolean if a field has been set.
func (o *ActivityDefinition) HasCopyright() bool {
	if o != nil && !IsNil(o.Copyright) {
		return true
	}

	return false
}

// SetCopyright gets a reference to the given string and assigns it to the Copyright field.
func (o *ActivityDefinition) SetCopyright(v string) {
	o.Copyright = &v
}

// GetApprovalDate returns the ApprovalDate field value if set, zero value otherwise.
func (o *ActivityDefinition) GetApprovalDate() string {
	if o == nil || IsNil(o.ApprovalDate) {
		var ret string
		return ret
	}
	return *o.ApprovalDate
}

// GetApprovalDateOk returns a tuple with the ApprovalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetApprovalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalDate) {
		return nil, false
	}
	return o.ApprovalDate, true
}

// HasApprovalDate returns a boolean if a field has been set.
func (o *ActivityDefinition) HasApprovalDate() bool {
	if o != nil && !IsNil(o.ApprovalDate) {
		return true
	}

	return false
}

// SetApprovalDate gets a reference to the given string and assigns it to the ApprovalDate field.
func (o *ActivityDefinition) SetApprovalDate(v string) {
	o.ApprovalDate = &v
}

// GetLastReviewDate returns the LastReviewDate field value if set, zero value otherwise.
func (o *ActivityDefinition) GetLastReviewDate() string {
	if o == nil || IsNil(o.LastReviewDate) {
		var ret string
		return ret
	}
	return *o.LastReviewDate
}

// GetLastReviewDateOk returns a tuple with the LastReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetLastReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastReviewDate) {
		return nil, false
	}
	return o.LastReviewDate, true
}

// HasLastReviewDate returns a boolean if a field has been set.
func (o *ActivityDefinition) HasLastReviewDate() bool {
	if o != nil && !IsNil(o.LastReviewDate) {
		return true
	}

	return false
}

// SetLastReviewDate gets a reference to the given string and assigns it to the LastReviewDate field.
func (o *ActivityDefinition) SetLastReviewDate(v string) {
	o.LastReviewDate = &v
}

// GetEffectivePeriod returns the EffectivePeriod field value if set, zero value otherwise.
func (o *ActivityDefinition) GetEffectivePeriod() Period {
	if o == nil || IsNil(o.EffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.EffectivePeriod
}

// GetEffectivePeriodOk returns a tuple with the EffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.EffectivePeriod) {
		return nil, false
	}
	return o.EffectivePeriod, true
}

// HasEffectivePeriod returns a boolean if a field has been set.
func (o *ActivityDefinition) HasEffectivePeriod() bool {
	if o != nil && !IsNil(o.EffectivePeriod) {
		return true
	}

	return false
}

// SetEffectivePeriod gets a reference to the given Period and assigns it to the EffectivePeriod field.
func (o *ActivityDefinition) SetEffectivePeriod(v Period) {
	o.EffectivePeriod = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTopic() []CodeableConcept {
	if o == nil || IsNil(o.Topic) {
		var ret []CodeableConcept
		return ret
	}
	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTopicOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given []CodeableConcept and assigns it to the Topic field.
func (o *ActivityDefinition) SetTopic(v []CodeableConcept) {
	o.Topic = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ActivityDefinition) GetAuthor() []ContactDetail {
	if o == nil || IsNil(o.Author) {
		var ret []ContactDetail
		return ret
	}
	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetAuthorOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ActivityDefinition) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given []ContactDetail and assigns it to the Author field.
func (o *ActivityDefinition) SetAuthor(v []ContactDetail) {
	o.Author = v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *ActivityDefinition) GetEditor() []ContactDetail {
	if o == nil || IsNil(o.Editor) {
		var ret []ContactDetail
		return ret
	}
	return o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetEditorOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Editor) {
		return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *ActivityDefinition) HasEditor() bool {
	if o != nil && !IsNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given []ContactDetail and assigns it to the Editor field.
func (o *ActivityDefinition) SetEditor(v []ContactDetail) {
	o.Editor = v
}

// GetReviewer returns the Reviewer field value if set, zero value otherwise.
func (o *ActivityDefinition) GetReviewer() []ContactDetail {
	if o == nil || IsNil(o.Reviewer) {
		var ret []ContactDetail
		return ret
	}
	return o.Reviewer
}

// GetReviewerOk returns a tuple with the Reviewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetReviewerOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Reviewer) {
		return nil, false
	}
	return o.Reviewer, true
}

// HasReviewer returns a boolean if a field has been set.
func (o *ActivityDefinition) HasReviewer() bool {
	if o != nil && !IsNil(o.Reviewer) {
		return true
	}

	return false
}

// SetReviewer gets a reference to the given []ContactDetail and assigns it to the Reviewer field.
func (o *ActivityDefinition) SetReviewer(v []ContactDetail) {
	o.Reviewer = v
}

// GetEndorser returns the Endorser field value if set, zero value otherwise.
func (o *ActivityDefinition) GetEndorser() []ContactDetail {
	if o == nil || IsNil(o.Endorser) {
		var ret []ContactDetail
		return ret
	}
	return o.Endorser
}

// GetEndorserOk returns a tuple with the Endorser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetEndorserOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Endorser) {
		return nil, false
	}
	return o.Endorser, true
}

// HasEndorser returns a boolean if a field has been set.
func (o *ActivityDefinition) HasEndorser() bool {
	if o != nil && !IsNil(o.Endorser) {
		return true
	}

	return false
}

// SetEndorser gets a reference to the given []ContactDetail and assigns it to the Endorser field.
func (o *ActivityDefinition) SetEndorser(v []ContactDetail) {
	o.Endorser = v
}

// GetRelatedArtifact returns the RelatedArtifact field value if set, zero value otherwise.
func (o *ActivityDefinition) GetRelatedArtifact() []RelatedArtifact {
	if o == nil || IsNil(o.RelatedArtifact) {
		var ret []RelatedArtifact
		return ret
	}
	return o.RelatedArtifact
}

// GetRelatedArtifactOk returns a tuple with the RelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetRelatedArtifactOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.RelatedArtifact) {
		return nil, false
	}
	return o.RelatedArtifact, true
}

// HasRelatedArtifact returns a boolean if a field has been set.
func (o *ActivityDefinition) HasRelatedArtifact() bool {
	if o != nil && !IsNil(o.RelatedArtifact) {
		return true
	}

	return false
}

// SetRelatedArtifact gets a reference to the given []RelatedArtifact and assigns it to the RelatedArtifact field.
func (o *ActivityDefinition) SetRelatedArtifact(v []RelatedArtifact) {
	o.RelatedArtifact = v
}

// GetLibrary returns the Library field value if set, zero value otherwise.
func (o *ActivityDefinition) GetLibrary() []string {
	if o == nil || IsNil(o.Library) {
		var ret []string
		return ret
	}
	return o.Library
}

// GetLibraryOk returns a tuple with the Library field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetLibraryOk() ([]string, bool) {
	if o == nil || IsNil(o.Library) {
		return nil, false
	}
	return o.Library, true
}

// HasLibrary returns a boolean if a field has been set.
func (o *ActivityDefinition) HasLibrary() bool {
	if o != nil && !IsNil(o.Library) {
		return true
	}

	return false
}

// SetLibrary gets a reference to the given []string and assigns it to the Library field.
func (o *ActivityDefinition) SetLibrary(v []string) {
	o.Library = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ActivityDefinition) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ActivityDefinition) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ActivityDefinition) SetKind(v string) {
	o.Kind = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ActivityDefinition) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ActivityDefinition) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *ActivityDefinition) SetProfile(v string) {
	o.Profile = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ActivityDefinition) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ActivityDefinition) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *ActivityDefinition) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *ActivityDefinition) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *ActivityDefinition) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *ActivityDefinition) SetIntent(v string) {
	o.Intent = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ActivityDefinition) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ActivityDefinition) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *ActivityDefinition) SetPriority(v string) {
	o.Priority = &v
}

// GetDoNotPerform returns the DoNotPerform field value if set, zero value otherwise.
func (o *ActivityDefinition) GetDoNotPerform() bool {
	if o == nil || IsNil(o.DoNotPerform) {
		var ret bool
		return ret
	}
	return *o.DoNotPerform
}

// GetDoNotPerformOk returns a tuple with the DoNotPerform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetDoNotPerformOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotPerform) {
		return nil, false
	}
	return o.DoNotPerform, true
}

// HasDoNotPerform returns a boolean if a field has been set.
func (o *ActivityDefinition) HasDoNotPerform() bool {
	if o != nil && !IsNil(o.DoNotPerform) {
		return true
	}

	return false
}

// SetDoNotPerform gets a reference to the given bool and assigns it to the DoNotPerform field.
func (o *ActivityDefinition) SetDoNotPerform(v bool) {
	o.DoNotPerform = &v
}

// GetTimingTiming returns the TimingTiming field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingTiming() Timing {
	if o == nil || IsNil(o.TimingTiming) {
		var ret Timing
		return ret
	}
	return *o.TimingTiming
}

// GetTimingTimingOk returns a tuple with the TimingTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.TimingTiming) {
		return nil, false
	}
	return o.TimingTiming, true
}

// HasTimingTiming returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingTiming() bool {
	if o != nil && !IsNil(o.TimingTiming) {
		return true
	}

	return false
}

// SetTimingTiming gets a reference to the given Timing and assigns it to the TimingTiming field.
func (o *ActivityDefinition) SetTimingTiming(v Timing) {
	o.TimingTiming = &v
}

// GetTimingDateTime returns the TimingDateTime field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingDateTime() string {
	if o == nil || IsNil(o.TimingDateTime) {
		var ret string
		return ret
	}
	return *o.TimingDateTime
}

// GetTimingDateTimeOk returns a tuple with the TimingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDateTime) {
		return nil, false
	}
	return o.TimingDateTime, true
}

// HasTimingDateTime returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingDateTime() bool {
	if o != nil && !IsNil(o.TimingDateTime) {
		return true
	}

	return false
}

// SetTimingDateTime gets a reference to the given string and assigns it to the TimingDateTime field.
func (o *ActivityDefinition) SetTimingDateTime(v string) {
	o.TimingDateTime = &v
}

// GetTimingAge returns the TimingAge field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingAge() Age {
	if o == nil || IsNil(o.TimingAge) {
		var ret Age
		return ret
	}
	return *o.TimingAge
}

// GetTimingAgeOk returns a tuple with the TimingAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.TimingAge) {
		return nil, false
	}
	return o.TimingAge, true
}

// HasTimingAge returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingAge() bool {
	if o != nil && !IsNil(o.TimingAge) {
		return true
	}

	return false
}

// SetTimingAge gets a reference to the given Age and assigns it to the TimingAge field.
func (o *ActivityDefinition) SetTimingAge(v Age) {
	o.TimingAge = &v
}

// GetTimingPeriod returns the TimingPeriod field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingPeriod() Period {
	if o == nil || IsNil(o.TimingPeriod) {
		var ret Period
		return ret
	}
	return *o.TimingPeriod
}

// GetTimingPeriodOk returns a tuple with the TimingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.TimingPeriod) {
		return nil, false
	}
	return o.TimingPeriod, true
}

// HasTimingPeriod returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingPeriod() bool {
	if o != nil && !IsNil(o.TimingPeriod) {
		return true
	}

	return false
}

// SetTimingPeriod gets a reference to the given Period and assigns it to the TimingPeriod field.
func (o *ActivityDefinition) SetTimingPeriod(v Period) {
	o.TimingPeriod = &v
}

// GetTimingRange returns the TimingRange field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingRange() Range {
	if o == nil || IsNil(o.TimingRange) {
		var ret Range
		return ret
	}
	return *o.TimingRange
}

// GetTimingRangeOk returns a tuple with the TimingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.TimingRange) {
		return nil, false
	}
	return o.TimingRange, true
}

// HasTimingRange returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingRange() bool {
	if o != nil && !IsNil(o.TimingRange) {
		return true
	}

	return false
}

// SetTimingRange gets a reference to the given Range and assigns it to the TimingRange field.
func (o *ActivityDefinition) SetTimingRange(v Range) {
	o.TimingRange = &v
}

// GetTimingDuration returns the TimingDuration field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTimingDuration() Duration {
	if o == nil || IsNil(o.TimingDuration) {
		var ret Duration
		return ret
	}
	return *o.TimingDuration
}

// GetTimingDurationOk returns a tuple with the TimingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTimingDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.TimingDuration) {
		return nil, false
	}
	return o.TimingDuration, true
}

// HasTimingDuration returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTimingDuration() bool {
	if o != nil && !IsNil(o.TimingDuration) {
		return true
	}

	return false
}

// SetTimingDuration gets a reference to the given Duration and assigns it to the TimingDuration field.
func (o *ActivityDefinition) SetTimingDuration(v Duration) {
	o.TimingDuration = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ActivityDefinition) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ActivityDefinition) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *ActivityDefinition) SetLocation(v Reference) {
	o.Location = &v
}

// GetParticipant returns the Participant field value if set, zero value otherwise.
func (o *ActivityDefinition) GetParticipant() []ActivityDefinitionParticipant {
	if o == nil || IsNil(o.Participant) {
		var ret []ActivityDefinitionParticipant
		return ret
	}
	return o.Participant
}

// GetParticipantOk returns a tuple with the Participant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetParticipantOk() ([]ActivityDefinitionParticipant, bool) {
	if o == nil || IsNil(o.Participant) {
		return nil, false
	}
	return o.Participant, true
}

// HasParticipant returns a boolean if a field has been set.
func (o *ActivityDefinition) HasParticipant() bool {
	if o != nil && !IsNil(o.Participant) {
		return true
	}

	return false
}

// SetParticipant gets a reference to the given []ActivityDefinitionParticipant and assigns it to the Participant field.
func (o *ActivityDefinition) SetParticipant(v []ActivityDefinitionParticipant) {
	o.Participant = v
}

// GetProductReference returns the ProductReference field value if set, zero value otherwise.
func (o *ActivityDefinition) GetProductReference() Reference {
	if o == nil || IsNil(o.ProductReference) {
		var ret Reference
		return ret
	}
	return *o.ProductReference
}

// GetProductReferenceOk returns a tuple with the ProductReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetProductReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProductReference) {
		return nil, false
	}
	return o.ProductReference, true
}

// HasProductReference returns a boolean if a field has been set.
func (o *ActivityDefinition) HasProductReference() bool {
	if o != nil && !IsNil(o.ProductReference) {
		return true
	}

	return false
}

// SetProductReference gets a reference to the given Reference and assigns it to the ProductReference field.
func (o *ActivityDefinition) SetProductReference(v Reference) {
	o.ProductReference = &v
}

// GetProductCodeableConcept returns the ProductCodeableConcept field value if set, zero value otherwise.
func (o *ActivityDefinition) GetProductCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductCodeableConcept
}

// GetProductCodeableConceptOk returns a tuple with the ProductCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetProductCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		return nil, false
	}
	return o.ProductCodeableConcept, true
}

// HasProductCodeableConcept returns a boolean if a field has been set.
func (o *ActivityDefinition) HasProductCodeableConcept() bool {
	if o != nil && !IsNil(o.ProductCodeableConcept) {
		return true
	}

	return false
}

// SetProductCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ProductCodeableConcept field.
func (o *ActivityDefinition) SetProductCodeableConcept(v CodeableConcept) {
	o.ProductCodeableConcept = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ActivityDefinition) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ActivityDefinition) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *ActivityDefinition) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetDosage returns the Dosage field value if set, zero value otherwise.
func (o *ActivityDefinition) GetDosage() []Dosage {
	if o == nil || IsNil(o.Dosage) {
		var ret []Dosage
		return ret
	}
	return o.Dosage
}

// GetDosageOk returns a tuple with the Dosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetDosageOk() ([]Dosage, bool) {
	if o == nil || IsNil(o.Dosage) {
		return nil, false
	}
	return o.Dosage, true
}

// HasDosage returns a boolean if a field has been set.
func (o *ActivityDefinition) HasDosage() bool {
	if o != nil && !IsNil(o.Dosage) {
		return true
	}

	return false
}

// SetDosage gets a reference to the given []Dosage and assigns it to the Dosage field.
func (o *ActivityDefinition) SetDosage(v []Dosage) {
	o.Dosage = v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *ActivityDefinition) GetBodySite() []CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret []CodeableConcept
		return ret
	}
	return o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetBodySiteOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *ActivityDefinition) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given []CodeableConcept and assigns it to the BodySite field.
func (o *ActivityDefinition) SetBodySite(v []CodeableConcept) {
	o.BodySite = v
}

// GetSpecimenRequirement returns the SpecimenRequirement field value if set, zero value otherwise.
func (o *ActivityDefinition) GetSpecimenRequirement() []Reference {
	if o == nil || IsNil(o.SpecimenRequirement) {
		var ret []Reference
		return ret
	}
	return o.SpecimenRequirement
}

// GetSpecimenRequirementOk returns a tuple with the SpecimenRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetSpecimenRequirementOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SpecimenRequirement) {
		return nil, false
	}
	return o.SpecimenRequirement, true
}

// HasSpecimenRequirement returns a boolean if a field has been set.
func (o *ActivityDefinition) HasSpecimenRequirement() bool {
	if o != nil && !IsNil(o.SpecimenRequirement) {
		return true
	}

	return false
}

// SetSpecimenRequirement gets a reference to the given []Reference and assigns it to the SpecimenRequirement field.
func (o *ActivityDefinition) SetSpecimenRequirement(v []Reference) {
	o.SpecimenRequirement = v
}

// GetObservationRequirement returns the ObservationRequirement field value if set, zero value otherwise.
func (o *ActivityDefinition) GetObservationRequirement() []Reference {
	if o == nil || IsNil(o.ObservationRequirement) {
		var ret []Reference
		return ret
	}
	return o.ObservationRequirement
}

// GetObservationRequirementOk returns a tuple with the ObservationRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetObservationRequirementOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ObservationRequirement) {
		return nil, false
	}
	return o.ObservationRequirement, true
}

// HasObservationRequirement returns a boolean if a field has been set.
func (o *ActivityDefinition) HasObservationRequirement() bool {
	if o != nil && !IsNil(o.ObservationRequirement) {
		return true
	}

	return false
}

// SetObservationRequirement gets a reference to the given []Reference and assigns it to the ObservationRequirement field.
func (o *ActivityDefinition) SetObservationRequirement(v []Reference) {
	o.ObservationRequirement = v
}

// GetObservationResultRequirement returns the ObservationResultRequirement field value if set, zero value otherwise.
func (o *ActivityDefinition) GetObservationResultRequirement() []Reference {
	if o == nil || IsNil(o.ObservationResultRequirement) {
		var ret []Reference
		return ret
	}
	return o.ObservationResultRequirement
}

// GetObservationResultRequirementOk returns a tuple with the ObservationResultRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetObservationResultRequirementOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ObservationResultRequirement) {
		return nil, false
	}
	return o.ObservationResultRequirement, true
}

// HasObservationResultRequirement returns a boolean if a field has been set.
func (o *ActivityDefinition) HasObservationResultRequirement() bool {
	if o != nil && !IsNil(o.ObservationResultRequirement) {
		return true
	}

	return false
}

// SetObservationResultRequirement gets a reference to the given []Reference and assigns it to the ObservationResultRequirement field.
func (o *ActivityDefinition) SetObservationResultRequirement(v []Reference) {
	o.ObservationResultRequirement = v
}

// GetTransform returns the Transform field value if set, zero value otherwise.
func (o *ActivityDefinition) GetTransform() string {
	if o == nil || IsNil(o.Transform) {
		var ret string
		return ret
	}
	return *o.Transform
}

// GetTransformOk returns a tuple with the Transform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetTransformOk() (*string, bool) {
	if o == nil || IsNil(o.Transform) {
		return nil, false
	}
	return o.Transform, true
}

// HasTransform returns a boolean if a field has been set.
func (o *ActivityDefinition) HasTransform() bool {
	if o != nil && !IsNil(o.Transform) {
		return true
	}

	return false
}

// SetTransform gets a reference to the given string and assigns it to the Transform field.
func (o *ActivityDefinition) SetTransform(v string) {
	o.Transform = &v
}

// GetDynamicValue returns the DynamicValue field value if set, zero value otherwise.
func (o *ActivityDefinition) GetDynamicValue() []ActivityDefinitionDynamicValue {
	if o == nil || IsNil(o.DynamicValue) {
		var ret []ActivityDefinitionDynamicValue
		return ret
	}
	return o.DynamicValue
}

// GetDynamicValueOk returns a tuple with the DynamicValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityDefinition) GetDynamicValueOk() ([]ActivityDefinitionDynamicValue, bool) {
	if o == nil || IsNil(o.DynamicValue) {
		return nil, false
	}
	return o.DynamicValue, true
}

// HasDynamicValue returns a boolean if a field has been set.
func (o *ActivityDefinition) HasDynamicValue() bool {
	if o != nil && !IsNil(o.DynamicValue) {
		return true
	}

	return false
}

// SetDynamicValue gets a reference to the given []ActivityDefinitionDynamicValue and assigns it to the DynamicValue field.
func (o *ActivityDefinition) SetDynamicValue(v []ActivityDefinitionDynamicValue) {
	o.DynamicValue = v
}

func (o ActivityDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Experimental) {
		toSerialize["experimental"] = o.Experimental
	}
	if !IsNil(o.SubjectCodeableConcept) {
		toSerialize["subjectCodeableConcept"] = o.SubjectCodeableConcept
	}
	if !IsNil(o.SubjectReference) {
		toSerialize["subjectReference"] = o.SubjectReference
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.UseContext) {
		toSerialize["useContext"] = o.UseContext
	}
	if !IsNil(o.Jurisdiction) {
		toSerialize["jurisdiction"] = o.Jurisdiction
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Copyright) {
		toSerialize["copyright"] = o.Copyright
	}
	if !IsNil(o.ApprovalDate) {
		toSerialize["approvalDate"] = o.ApprovalDate
	}
	if !IsNil(o.LastReviewDate) {
		toSerialize["lastReviewDate"] = o.LastReviewDate
	}
	if !IsNil(o.EffectivePeriod) {
		toSerialize["effectivePeriod"] = o.EffectivePeriod
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	if !IsNil(o.Reviewer) {
		toSerialize["reviewer"] = o.Reviewer
	}
	if !IsNil(o.Endorser) {
		toSerialize["endorser"] = o.Endorser
	}
	if !IsNil(o.RelatedArtifact) {
		toSerialize["relatedArtifact"] = o.RelatedArtifact
	}
	if !IsNil(o.Library) {
		toSerialize["library"] = o.Library
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.DoNotPerform) {
		toSerialize["doNotPerform"] = o.DoNotPerform
	}
	if !IsNil(o.TimingTiming) {
		toSerialize["timingTiming"] = o.TimingTiming
	}
	if !IsNil(o.TimingDateTime) {
		toSerialize["timingDateTime"] = o.TimingDateTime
	}
	if !IsNil(o.TimingAge) {
		toSerialize["timingAge"] = o.TimingAge
	}
	if !IsNil(o.TimingPeriod) {
		toSerialize["timingPeriod"] = o.TimingPeriod
	}
	if !IsNil(o.TimingRange) {
		toSerialize["timingRange"] = o.TimingRange
	}
	if !IsNil(o.TimingDuration) {
		toSerialize["timingDuration"] = o.TimingDuration
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Participant) {
		toSerialize["participant"] = o.Participant
	}
	if !IsNil(o.ProductReference) {
		toSerialize["productReference"] = o.ProductReference
	}
	if !IsNil(o.ProductCodeableConcept) {
		toSerialize["productCodeableConcept"] = o.ProductCodeableConcept
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Dosage) {
		toSerialize["dosage"] = o.Dosage
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.SpecimenRequirement) {
		toSerialize["specimenRequirement"] = o.SpecimenRequirement
	}
	if !IsNil(o.ObservationRequirement) {
		toSerialize["observationRequirement"] = o.ObservationRequirement
	}
	if !IsNil(o.ObservationResultRequirement) {
		toSerialize["observationResultRequirement"] = o.ObservationResultRequirement
	}
	if !IsNil(o.Transform) {
		toSerialize["transform"] = o.Transform
	}
	if !IsNil(o.DynamicValue) {
		toSerialize["dynamicValue"] = o.DynamicValue
	}
	return toSerialize, nil
}

func (o *ActivityDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityDefinition := _ActivityDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityDefinition)

	if err != nil {
		return err
	}

	*o = ActivityDefinition(varActivityDefinition)

	return err
}

type NullableActivityDefinition struct {
	value *ActivityDefinition
	isSet bool
}

func (v NullableActivityDefinition) Get() *ActivityDefinition {
	return v.value
}

func (v *NullableActivityDefinition) Set(val *ActivityDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityDefinition(val *ActivityDefinition) *NullableActivityDefinition {
	return &NullableActivityDefinition{value: val, isSet: true}
}

func (v NullableActivityDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


