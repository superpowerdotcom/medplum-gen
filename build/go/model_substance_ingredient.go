/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceIngredient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceIngredient{}

// SubstanceIngredient A homogeneous material with a definite composition.
type SubstanceIngredient struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The amount of the ingredient in the substance - a concentration ratio.
	Quantity *Ratio `json:"quantity,omitempty"`
	// Another substance that is a component of this substance.
	SubstanceCodeableConcept *CodeableConcept `json:"substanceCodeableConcept,omitempty"`
	// Another substance that is a component of this substance.
	SubstanceReference *Reference `json:"substanceReference,omitempty"`
}

// NewSubstanceIngredient instantiates a new SubstanceIngredient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceIngredient() *SubstanceIngredient {
	this := SubstanceIngredient{}
	return &this
}

// NewSubstanceIngredientWithDefaults instantiates a new SubstanceIngredient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceIngredientWithDefaults() *SubstanceIngredient {
	this := SubstanceIngredient{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceIngredient) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceIngredient) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceIngredient) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetQuantity() Ratio {
	if o == nil || IsNil(o.Quantity) {
		var ret Ratio
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetQuantityOk() (*Ratio, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Ratio and assigns it to the Quantity field.
func (o *SubstanceIngredient) SetQuantity(v Ratio) {
	o.Quantity = &v
}

// GetSubstanceCodeableConcept returns the SubstanceCodeableConcept field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetSubstanceCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.SubstanceCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubstanceCodeableConcept
}

// GetSubstanceCodeableConceptOk returns a tuple with the SubstanceCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetSubstanceCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubstanceCodeableConcept) {
		return nil, false
	}
	return o.SubstanceCodeableConcept, true
}

// HasSubstanceCodeableConcept returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasSubstanceCodeableConcept() bool {
	if o != nil && !IsNil(o.SubstanceCodeableConcept) {
		return true
	}

	return false
}

// SetSubstanceCodeableConcept gets a reference to the given CodeableConcept and assigns it to the SubstanceCodeableConcept field.
func (o *SubstanceIngredient) SetSubstanceCodeableConcept(v CodeableConcept) {
	o.SubstanceCodeableConcept = &v
}

// GetSubstanceReference returns the SubstanceReference field value if set, zero value otherwise.
func (o *SubstanceIngredient) GetSubstanceReference() Reference {
	if o == nil || IsNil(o.SubstanceReference) {
		var ret Reference
		return ret
	}
	return *o.SubstanceReference
}

// GetSubstanceReferenceOk returns a tuple with the SubstanceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceIngredient) GetSubstanceReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SubstanceReference) {
		return nil, false
	}
	return o.SubstanceReference, true
}

// HasSubstanceReference returns a boolean if a field has been set.
func (o *SubstanceIngredient) HasSubstanceReference() bool {
	if o != nil && !IsNil(o.SubstanceReference) {
		return true
	}

	return false
}

// SetSubstanceReference gets a reference to the given Reference and assigns it to the SubstanceReference field.
func (o *SubstanceIngredient) SetSubstanceReference(v Reference) {
	o.SubstanceReference = &v
}

func (o SubstanceIngredient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceIngredient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.SubstanceCodeableConcept) {
		toSerialize["substanceCodeableConcept"] = o.SubstanceCodeableConcept
	}
	if !IsNil(o.SubstanceReference) {
		toSerialize["substanceReference"] = o.SubstanceReference
	}
	return toSerialize, nil
}

type NullableSubstanceIngredient struct {
	value *SubstanceIngredient
	isSet bool
}

func (v NullableSubstanceIngredient) Get() *SubstanceIngredient {
	return v.value
}

func (v *NullableSubstanceIngredient) Set(val *SubstanceIngredient) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceIngredient) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceIngredient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceIngredient(val *SubstanceIngredient) *NullableSubstanceIngredient {
	return &NullableSubstanceIngredient{value: val, isSet: true}
}

func (v NullableSubstanceIngredient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceIngredient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


