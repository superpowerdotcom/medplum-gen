/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the VerificationResultPrimarySource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationResultPrimarySource{}

// VerificationResultPrimarySource Describes validation requirements, source(s), status and dates for one or more elements.
type VerificationResultPrimarySource struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Reference to the primary source.
	Who *Reference `json:"who,omitempty"`
	// Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
	Type []CodeableConcept `json:"type,omitempty"`
	// Method for communicating with the primary source (manual; API; Push).
	CommunicationMethod []CodeableConcept `json:"communicationMethod,omitempty"`
	// Status of the validation of the target against the primary source (successful; failed; unknown).
	ValidationStatus *CodeableConcept `json:"validationStatus,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	ValidationDate *string `json:"validationDate,omitempty"`
	// Ability of the primary source to push updates/alerts (yes; no; undetermined).
	CanPushUpdates *CodeableConcept `json:"canPushUpdates,omitempty"`
	// Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
	PushTypeAvailable []CodeableConcept `json:"pushTypeAvailable,omitempty"`
}

// NewVerificationResultPrimarySource instantiates a new VerificationResultPrimarySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationResultPrimarySource() *VerificationResultPrimarySource {
	this := VerificationResultPrimarySource{}
	return &this
}

// NewVerificationResultPrimarySourceWithDefaults instantiates a new VerificationResultPrimarySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationResultPrimarySourceWithDefaults() *VerificationResultPrimarySource {
	this := VerificationResultPrimarySource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VerificationResultPrimarySource) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *VerificationResultPrimarySource) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *VerificationResultPrimarySource) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetWho returns the Who field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetWho() Reference {
	if o == nil || IsNil(o.Who) {
		var ret Reference
		return ret
	}
	return *o.Who
}

// GetWhoOk returns a tuple with the Who field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetWhoOk() (*Reference, bool) {
	if o == nil || IsNil(o.Who) {
		return nil, false
	}
	return o.Who, true
}

// HasWho returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasWho() bool {
	if o != nil && !IsNil(o.Who) {
		return true
	}

	return false
}

// SetWho gets a reference to the given Reference and assigns it to the Who field.
func (o *VerificationResultPrimarySource) SetWho(v Reference) {
	o.Who = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetType() []CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret []CodeableConcept
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []CodeableConcept and assigns it to the Type field.
func (o *VerificationResultPrimarySource) SetType(v []CodeableConcept) {
	o.Type = v
}

// GetCommunicationMethod returns the CommunicationMethod field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetCommunicationMethod() []CodeableConcept {
	if o == nil || IsNil(o.CommunicationMethod) {
		var ret []CodeableConcept
		return ret
	}
	return o.CommunicationMethod
}

// GetCommunicationMethodOk returns a tuple with the CommunicationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetCommunicationMethodOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.CommunicationMethod) {
		return nil, false
	}
	return o.CommunicationMethod, true
}

// HasCommunicationMethod returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasCommunicationMethod() bool {
	if o != nil && !IsNil(o.CommunicationMethod) {
		return true
	}

	return false
}

// SetCommunicationMethod gets a reference to the given []CodeableConcept and assigns it to the CommunicationMethod field.
func (o *VerificationResultPrimarySource) SetCommunicationMethod(v []CodeableConcept) {
	o.CommunicationMethod = v
}

// GetValidationStatus returns the ValidationStatus field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetValidationStatus() CodeableConcept {
	if o == nil || IsNil(o.ValidationStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetValidationStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValidationStatus) {
		return nil, false
	}
	return o.ValidationStatus, true
}

// HasValidationStatus returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasValidationStatus() bool {
	if o != nil && !IsNil(o.ValidationStatus) {
		return true
	}

	return false
}

// SetValidationStatus gets a reference to the given CodeableConcept and assigns it to the ValidationStatus field.
func (o *VerificationResultPrimarySource) SetValidationStatus(v CodeableConcept) {
	o.ValidationStatus = &v
}

// GetValidationDate returns the ValidationDate field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetValidationDate() string {
	if o == nil || IsNil(o.ValidationDate) {
		var ret string
		return ret
	}
	return *o.ValidationDate
}

// GetValidationDateOk returns a tuple with the ValidationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetValidationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationDate) {
		return nil, false
	}
	return o.ValidationDate, true
}

// HasValidationDate returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasValidationDate() bool {
	if o != nil && !IsNil(o.ValidationDate) {
		return true
	}

	return false
}

// SetValidationDate gets a reference to the given string and assigns it to the ValidationDate field.
func (o *VerificationResultPrimarySource) SetValidationDate(v string) {
	o.ValidationDate = &v
}

// GetCanPushUpdates returns the CanPushUpdates field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetCanPushUpdates() CodeableConcept {
	if o == nil || IsNil(o.CanPushUpdates) {
		var ret CodeableConcept
		return ret
	}
	return *o.CanPushUpdates
}

// GetCanPushUpdatesOk returns a tuple with the CanPushUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetCanPushUpdatesOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CanPushUpdates) {
		return nil, false
	}
	return o.CanPushUpdates, true
}

// HasCanPushUpdates returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasCanPushUpdates() bool {
	if o != nil && !IsNil(o.CanPushUpdates) {
		return true
	}

	return false
}

// SetCanPushUpdates gets a reference to the given CodeableConcept and assigns it to the CanPushUpdates field.
func (o *VerificationResultPrimarySource) SetCanPushUpdates(v CodeableConcept) {
	o.CanPushUpdates = &v
}

// GetPushTypeAvailable returns the PushTypeAvailable field value if set, zero value otherwise.
func (o *VerificationResultPrimarySource) GetPushTypeAvailable() []CodeableConcept {
	if o == nil || IsNil(o.PushTypeAvailable) {
		var ret []CodeableConcept
		return ret
	}
	return o.PushTypeAvailable
}

// GetPushTypeAvailableOk returns a tuple with the PushTypeAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultPrimarySource) GetPushTypeAvailableOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.PushTypeAvailable) {
		return nil, false
	}
	return o.PushTypeAvailable, true
}

// HasPushTypeAvailable returns a boolean if a field has been set.
func (o *VerificationResultPrimarySource) HasPushTypeAvailable() bool {
	if o != nil && !IsNil(o.PushTypeAvailable) {
		return true
	}

	return false
}

// SetPushTypeAvailable gets a reference to the given []CodeableConcept and assigns it to the PushTypeAvailable field.
func (o *VerificationResultPrimarySource) SetPushTypeAvailable(v []CodeableConcept) {
	o.PushTypeAvailable = v
}

func (o VerificationResultPrimarySource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationResultPrimarySource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Who) {
		toSerialize["who"] = o.Who
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CommunicationMethod) {
		toSerialize["communicationMethod"] = o.CommunicationMethod
	}
	if !IsNil(o.ValidationStatus) {
		toSerialize["validationStatus"] = o.ValidationStatus
	}
	if !IsNil(o.ValidationDate) {
		toSerialize["validationDate"] = o.ValidationDate
	}
	if !IsNil(o.CanPushUpdates) {
		toSerialize["canPushUpdates"] = o.CanPushUpdates
	}
	if !IsNil(o.PushTypeAvailable) {
		toSerialize["pushTypeAvailable"] = o.PushTypeAvailable
	}
	return toSerialize, nil
}

type NullableVerificationResultPrimarySource struct {
	value *VerificationResultPrimarySource
	isSet bool
}

func (v NullableVerificationResultPrimarySource) Get() *VerificationResultPrimarySource {
	return v.value
}

func (v *NullableVerificationResultPrimarySource) Set(val *VerificationResultPrimarySource) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationResultPrimarySource) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationResultPrimarySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationResultPrimarySource(val *VerificationResultPrimarySource) *NullableVerificationResultPrimarySource {
	return &NullableVerificationResultPrimarySource{value: val, isSet: true}
}

func (v NullableVerificationResultPrimarySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationResultPrimarySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


