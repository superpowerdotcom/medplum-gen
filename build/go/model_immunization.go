/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Immunization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Immunization{}

// Immunization Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
type Immunization struct {
	// This is a Immunization resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this immunization record.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Indicates the reason the immunization event was not performed.
	StatusReason *CodeableConcept `json:"statusReason,omitempty"`
	// Vaccine that was administered or was to be administered.
	VaccineCode CodeableConcept `json:"vaccineCode"`
	// The patient who either received or did not receive the immunization.
	Patient Reference `json:"patient"`
	// The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
	Encounter *Reference `json:"encounter,omitempty"`
	// Date vaccine administered or was to be administered.
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// Date vaccine administered or was to be administered.
	OccurrenceString *string `json:"occurrenceString,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Recorded *string `json:"recorded,omitempty"`
	// Value of \"true\" or \"false\"
	PrimarySource *bool `json:"primarySource,omitempty"`
	// The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
	ReportOrigin *CodeableConcept `json:"reportOrigin,omitempty"`
	// The service delivery location where the vaccine administration occurred.
	Location *Reference `json:"location,omitempty"`
	// Name of vaccine manufacturer.
	Manufacturer *Reference `json:"manufacturer,omitempty"`
	// A sequence of Unicode characters
	LotNumber *string `json:"lotNumber,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// Body site where vaccine was administered.
	Site *CodeableConcept `json:"site,omitempty"`
	// The path by which the vaccine product is taken into the body.
	Route *CodeableConcept `json:"route,omitempty"`
	// The quantity of vaccine product that was administered.
	DoseQuantity *Quantity `json:"doseQuantity,omitempty"`
	// Indicates who performed the immunization event.
	Performer []ImmunizationPerformer `json:"performer,omitempty"`
	// Extra information about the immunization that is not conveyed by the other attributes.
	Note []Annotation `json:"note,omitempty"`
	// Reasons why the vaccine was administered.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Condition, Observation or DiagnosticReport that supports why the immunization was administered.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Value of \"true\" or \"false\"
	IsSubpotent *bool `json:"isSubpotent,omitempty"`
	// Reason why a dose is considered to be subpotent.
	SubpotentReason []CodeableConcept `json:"subpotentReason,omitempty"`
	// Educational material presented to the patient (or guardian) at the time of vaccine administration.
	Education []ImmunizationEducation `json:"education,omitempty"`
	// Indicates a patient's eligibility for a funding program.
	ProgramEligibility []CodeableConcept `json:"programEligibility,omitempty"`
	// Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
	FundingSource *CodeableConcept `json:"fundingSource,omitempty"`
	// Categorical data indicating that an adverse event is associated in time to an immunization.
	Reaction []ImmunizationReaction `json:"reaction,omitempty"`
	// The protocol (set of recommendations) being followed by the provider who administered the dose.
	ProtocolApplied []ImmunizationProtocolApplied `json:"protocolApplied,omitempty"`
}

type _Immunization Immunization

// NewImmunization instantiates a new Immunization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImmunization(resourceType string, vaccineCode CodeableConcept, patient Reference) *Immunization {
	this := Immunization{}
	this.ResourceType = resourceType
	this.VaccineCode = vaccineCode
	this.Patient = patient
	return &this
}

// NewImmunizationWithDefaults instantiates a new Immunization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImmunizationWithDefaults() *Immunization {
	this := Immunization{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Immunization) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Immunization) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Immunization) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Immunization) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Immunization) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Immunization) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Immunization) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Immunization) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Immunization) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Immunization) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Immunization) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Immunization) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Immunization) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Immunization) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Immunization) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Immunization) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Immunization) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Immunization) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Immunization) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Immunization) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Immunization) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Immunization) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Immunization) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Immunization) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Immunization) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Immunization) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Immunization) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Immunization) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Immunization) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Immunization) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Immunization) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Immunization) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Immunization) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *Immunization) GetStatusReason() CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetStatusReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *Immunization) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given CodeableConcept and assigns it to the StatusReason field.
func (o *Immunization) SetStatusReason(v CodeableConcept) {
	o.StatusReason = &v
}

// GetVaccineCode returns the VaccineCode field value
func (o *Immunization) GetVaccineCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.VaccineCode
}

// GetVaccineCodeOk returns a tuple with the VaccineCode field value
// and a boolean to check if the value has been set.
func (o *Immunization) GetVaccineCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaccineCode, true
}

// SetVaccineCode sets field value
func (o *Immunization) SetVaccineCode(v CodeableConcept) {
	o.VaccineCode = v
}

// GetPatient returns the Patient field value
func (o *Immunization) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *Immunization) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *Immunization) SetPatient(v Reference) {
	o.Patient = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *Immunization) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *Immunization) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *Immunization) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *Immunization) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *Immunization) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *Immunization) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrenceString returns the OccurrenceString field value if set, zero value otherwise.
func (o *Immunization) GetOccurrenceString() string {
	if o == nil || IsNil(o.OccurrenceString) {
		var ret string
		return ret
	}
	return *o.OccurrenceString
}

// GetOccurrenceStringOk returns a tuple with the OccurrenceString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetOccurrenceStringOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceString) {
		return nil, false
	}
	return o.OccurrenceString, true
}

// HasOccurrenceString returns a boolean if a field has been set.
func (o *Immunization) HasOccurrenceString() bool {
	if o != nil && !IsNil(o.OccurrenceString) {
		return true
	}

	return false
}

// SetOccurrenceString gets a reference to the given string and assigns it to the OccurrenceString field.
func (o *Immunization) SetOccurrenceString(v string) {
	o.OccurrenceString = &v
}

// GetRecorded returns the Recorded field value if set, zero value otherwise.
func (o *Immunization) GetRecorded() string {
	if o == nil || IsNil(o.Recorded) {
		var ret string
		return ret
	}
	return *o.Recorded
}

// GetRecordedOk returns a tuple with the Recorded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetRecordedOk() (*string, bool) {
	if o == nil || IsNil(o.Recorded) {
		return nil, false
	}
	return o.Recorded, true
}

// HasRecorded returns a boolean if a field has been set.
func (o *Immunization) HasRecorded() bool {
	if o != nil && !IsNil(o.Recorded) {
		return true
	}

	return false
}

// SetRecorded gets a reference to the given string and assigns it to the Recorded field.
func (o *Immunization) SetRecorded(v string) {
	o.Recorded = &v
}

// GetPrimarySource returns the PrimarySource field value if set, zero value otherwise.
func (o *Immunization) GetPrimarySource() bool {
	if o == nil || IsNil(o.PrimarySource) {
		var ret bool
		return ret
	}
	return *o.PrimarySource
}

// GetPrimarySourceOk returns a tuple with the PrimarySource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetPrimarySourceOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimarySource) {
		return nil, false
	}
	return o.PrimarySource, true
}

// HasPrimarySource returns a boolean if a field has been set.
func (o *Immunization) HasPrimarySource() bool {
	if o != nil && !IsNil(o.PrimarySource) {
		return true
	}

	return false
}

// SetPrimarySource gets a reference to the given bool and assigns it to the PrimarySource field.
func (o *Immunization) SetPrimarySource(v bool) {
	o.PrimarySource = &v
}

// GetReportOrigin returns the ReportOrigin field value if set, zero value otherwise.
func (o *Immunization) GetReportOrigin() CodeableConcept {
	if o == nil || IsNil(o.ReportOrigin) {
		var ret CodeableConcept
		return ret
	}
	return *o.ReportOrigin
}

// GetReportOriginOk returns a tuple with the ReportOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetReportOriginOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ReportOrigin) {
		return nil, false
	}
	return o.ReportOrigin, true
}

// HasReportOrigin returns a boolean if a field has been set.
func (o *Immunization) HasReportOrigin() bool {
	if o != nil && !IsNil(o.ReportOrigin) {
		return true
	}

	return false
}

// SetReportOrigin gets a reference to the given CodeableConcept and assigns it to the ReportOrigin field.
func (o *Immunization) SetReportOrigin(v CodeableConcept) {
	o.ReportOrigin = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Immunization) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Immunization) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *Immunization) SetLocation(v Reference) {
	o.Location = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *Immunization) GetManufacturer() Reference {
	if o == nil || IsNil(o.Manufacturer) {
		var ret Reference
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetManufacturerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *Immunization) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given Reference and assigns it to the Manufacturer field.
func (o *Immunization) SetManufacturer(v Reference) {
	o.Manufacturer = &v
}

// GetLotNumber returns the LotNumber field value if set, zero value otherwise.
func (o *Immunization) GetLotNumber() string {
	if o == nil || IsNil(o.LotNumber) {
		var ret string
		return ret
	}
	return *o.LotNumber
}

// GetLotNumberOk returns a tuple with the LotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetLotNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LotNumber) {
		return nil, false
	}
	return o.LotNumber, true
}

// HasLotNumber returns a boolean if a field has been set.
func (o *Immunization) HasLotNumber() bool {
	if o != nil && !IsNil(o.LotNumber) {
		return true
	}

	return false
}

// SetLotNumber gets a reference to the given string and assigns it to the LotNumber field.
func (o *Immunization) SetLotNumber(v string) {
	o.LotNumber = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Immunization) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Immunization) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *Immunization) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Immunization) GetSite() CodeableConcept {
	if o == nil || IsNil(o.Site) {
		var ret CodeableConcept
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetSiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Immunization) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given CodeableConcept and assigns it to the Site field.
func (o *Immunization) SetSite(v CodeableConcept) {
	o.Site = &v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *Immunization) GetRoute() CodeableConcept {
	if o == nil || IsNil(o.Route) {
		var ret CodeableConcept
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetRouteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *Immunization) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given CodeableConcept and assigns it to the Route field.
func (o *Immunization) SetRoute(v CodeableConcept) {
	o.Route = &v
}

// GetDoseQuantity returns the DoseQuantity field value if set, zero value otherwise.
func (o *Immunization) GetDoseQuantity() Quantity {
	if o == nil || IsNil(o.DoseQuantity) {
		var ret Quantity
		return ret
	}
	return *o.DoseQuantity
}

// GetDoseQuantityOk returns a tuple with the DoseQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetDoseQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DoseQuantity) {
		return nil, false
	}
	return o.DoseQuantity, true
}

// HasDoseQuantity returns a boolean if a field has been set.
func (o *Immunization) HasDoseQuantity() bool {
	if o != nil && !IsNil(o.DoseQuantity) {
		return true
	}

	return false
}

// SetDoseQuantity gets a reference to the given Quantity and assigns it to the DoseQuantity field.
func (o *Immunization) SetDoseQuantity(v Quantity) {
	o.DoseQuantity = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *Immunization) GetPerformer() []ImmunizationPerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []ImmunizationPerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetPerformerOk() ([]ImmunizationPerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *Immunization) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []ImmunizationPerformer and assigns it to the Performer field.
func (o *Immunization) SetPerformer(v []ImmunizationPerformer) {
	o.Performer = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Immunization) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Immunization) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *Immunization) SetNote(v []Annotation) {
	o.Note = v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *Immunization) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *Immunization) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *Immunization) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *Immunization) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *Immunization) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *Immunization) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetIsSubpotent returns the IsSubpotent field value if set, zero value otherwise.
func (o *Immunization) GetIsSubpotent() bool {
	if o == nil || IsNil(o.IsSubpotent) {
		var ret bool
		return ret
	}
	return *o.IsSubpotent
}

// GetIsSubpotentOk returns a tuple with the IsSubpotent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetIsSubpotentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSubpotent) {
		return nil, false
	}
	return o.IsSubpotent, true
}

// HasIsSubpotent returns a boolean if a field has been set.
func (o *Immunization) HasIsSubpotent() bool {
	if o != nil && !IsNil(o.IsSubpotent) {
		return true
	}

	return false
}

// SetIsSubpotent gets a reference to the given bool and assigns it to the IsSubpotent field.
func (o *Immunization) SetIsSubpotent(v bool) {
	o.IsSubpotent = &v
}

// GetSubpotentReason returns the SubpotentReason field value if set, zero value otherwise.
func (o *Immunization) GetSubpotentReason() []CodeableConcept {
	if o == nil || IsNil(o.SubpotentReason) {
		var ret []CodeableConcept
		return ret
	}
	return o.SubpotentReason
}

// GetSubpotentReasonOk returns a tuple with the SubpotentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetSubpotentReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.SubpotentReason) {
		return nil, false
	}
	return o.SubpotentReason, true
}

// HasSubpotentReason returns a boolean if a field has been set.
func (o *Immunization) HasSubpotentReason() bool {
	if o != nil && !IsNil(o.SubpotentReason) {
		return true
	}

	return false
}

// SetSubpotentReason gets a reference to the given []CodeableConcept and assigns it to the SubpotentReason field.
func (o *Immunization) SetSubpotentReason(v []CodeableConcept) {
	o.SubpotentReason = v
}

// GetEducation returns the Education field value if set, zero value otherwise.
func (o *Immunization) GetEducation() []ImmunizationEducation {
	if o == nil || IsNil(o.Education) {
		var ret []ImmunizationEducation
		return ret
	}
	return o.Education
}

// GetEducationOk returns a tuple with the Education field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetEducationOk() ([]ImmunizationEducation, bool) {
	if o == nil || IsNil(o.Education) {
		return nil, false
	}
	return o.Education, true
}

// HasEducation returns a boolean if a field has been set.
func (o *Immunization) HasEducation() bool {
	if o != nil && !IsNil(o.Education) {
		return true
	}

	return false
}

// SetEducation gets a reference to the given []ImmunizationEducation and assigns it to the Education field.
func (o *Immunization) SetEducation(v []ImmunizationEducation) {
	o.Education = v
}

// GetProgramEligibility returns the ProgramEligibility field value if set, zero value otherwise.
func (o *Immunization) GetProgramEligibility() []CodeableConcept {
	if o == nil || IsNil(o.ProgramEligibility) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProgramEligibility
}

// GetProgramEligibilityOk returns a tuple with the ProgramEligibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetProgramEligibilityOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProgramEligibility) {
		return nil, false
	}
	return o.ProgramEligibility, true
}

// HasProgramEligibility returns a boolean if a field has been set.
func (o *Immunization) HasProgramEligibility() bool {
	if o != nil && !IsNil(o.ProgramEligibility) {
		return true
	}

	return false
}

// SetProgramEligibility gets a reference to the given []CodeableConcept and assigns it to the ProgramEligibility field.
func (o *Immunization) SetProgramEligibility(v []CodeableConcept) {
	o.ProgramEligibility = v
}

// GetFundingSource returns the FundingSource field value if set, zero value otherwise.
func (o *Immunization) GetFundingSource() CodeableConcept {
	if o == nil || IsNil(o.FundingSource) {
		var ret CodeableConcept
		return ret
	}
	return *o.FundingSource
}

// GetFundingSourceOk returns a tuple with the FundingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetFundingSourceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FundingSource) {
		return nil, false
	}
	return o.FundingSource, true
}

// HasFundingSource returns a boolean if a field has been set.
func (o *Immunization) HasFundingSource() bool {
	if o != nil && !IsNil(o.FundingSource) {
		return true
	}

	return false
}

// SetFundingSource gets a reference to the given CodeableConcept and assigns it to the FundingSource field.
func (o *Immunization) SetFundingSource(v CodeableConcept) {
	o.FundingSource = &v
}

// GetReaction returns the Reaction field value if set, zero value otherwise.
func (o *Immunization) GetReaction() []ImmunizationReaction {
	if o == nil || IsNil(o.Reaction) {
		var ret []ImmunizationReaction
		return ret
	}
	return o.Reaction
}

// GetReactionOk returns a tuple with the Reaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetReactionOk() ([]ImmunizationReaction, bool) {
	if o == nil || IsNil(o.Reaction) {
		return nil, false
	}
	return o.Reaction, true
}

// HasReaction returns a boolean if a field has been set.
func (o *Immunization) HasReaction() bool {
	if o != nil && !IsNil(o.Reaction) {
		return true
	}

	return false
}

// SetReaction gets a reference to the given []ImmunizationReaction and assigns it to the Reaction field.
func (o *Immunization) SetReaction(v []ImmunizationReaction) {
	o.Reaction = v
}

// GetProtocolApplied returns the ProtocolApplied field value if set, zero value otherwise.
func (o *Immunization) GetProtocolApplied() []ImmunizationProtocolApplied {
	if o == nil || IsNil(o.ProtocolApplied) {
		var ret []ImmunizationProtocolApplied
		return ret
	}
	return o.ProtocolApplied
}

// GetProtocolAppliedOk returns a tuple with the ProtocolApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Immunization) GetProtocolAppliedOk() ([]ImmunizationProtocolApplied, bool) {
	if o == nil || IsNil(o.ProtocolApplied) {
		return nil, false
	}
	return o.ProtocolApplied, true
}

// HasProtocolApplied returns a boolean if a field has been set.
func (o *Immunization) HasProtocolApplied() bool {
	if o != nil && !IsNil(o.ProtocolApplied) {
		return true
	}

	return false
}

// SetProtocolApplied gets a reference to the given []ImmunizationProtocolApplied and assigns it to the ProtocolApplied field.
func (o *Immunization) SetProtocolApplied(v []ImmunizationProtocolApplied) {
	o.ProtocolApplied = v
}

func (o Immunization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Immunization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	toSerialize["vaccineCode"] = o.VaccineCode
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrenceString) {
		toSerialize["occurrenceString"] = o.OccurrenceString
	}
	if !IsNil(o.Recorded) {
		toSerialize["recorded"] = o.Recorded
	}
	if !IsNil(o.PrimarySource) {
		toSerialize["primarySource"] = o.PrimarySource
	}
	if !IsNil(o.ReportOrigin) {
		toSerialize["reportOrigin"] = o.ReportOrigin
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.LotNumber) {
		toSerialize["lotNumber"] = o.LotNumber
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.DoseQuantity) {
		toSerialize["doseQuantity"] = o.DoseQuantity
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.IsSubpotent) {
		toSerialize["isSubpotent"] = o.IsSubpotent
	}
	if !IsNil(o.SubpotentReason) {
		toSerialize["subpotentReason"] = o.SubpotentReason
	}
	if !IsNil(o.Education) {
		toSerialize["education"] = o.Education
	}
	if !IsNil(o.ProgramEligibility) {
		toSerialize["programEligibility"] = o.ProgramEligibility
	}
	if !IsNil(o.FundingSource) {
		toSerialize["fundingSource"] = o.FundingSource
	}
	if !IsNil(o.Reaction) {
		toSerialize["reaction"] = o.Reaction
	}
	if !IsNil(o.ProtocolApplied) {
		toSerialize["protocolApplied"] = o.ProtocolApplied
	}
	return toSerialize, nil
}

func (o *Immunization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"vaccineCode",
		"patient",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImmunization := _Immunization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImmunization)

	if err != nil {
		return err
	}

	*o = Immunization(varImmunization)

	return err
}

type NullableImmunization struct {
	value *Immunization
	isSet bool
}

func (v NullableImmunization) Get() *Immunization {
	return v.value
}

func (v *NullableImmunization) Set(val *Immunization) {
	v.value = val
	v.isSet = true
}

func (v NullableImmunization) IsSet() bool {
	return v.isSet
}

func (v *NullableImmunization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImmunization(val *Immunization) *NullableImmunization {
	return &NullableImmunization{value: val, isSet: true}
}

func (v NullableImmunization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImmunization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


