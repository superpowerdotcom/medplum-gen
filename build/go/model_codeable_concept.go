/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CodeableConcept type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeableConcept{}

// CodeableConcept A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
type CodeableConcept struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// A reference to a code defined by a terminology system.
	Coding []Coding `json:"coding,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
}

// NewCodeableConcept instantiates a new CodeableConcept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeableConcept() *CodeableConcept {
	this := CodeableConcept{}
	return &this
}

// NewCodeableConceptWithDefaults instantiates a new CodeableConcept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeableConceptWithDefaults() *CodeableConcept {
	this := CodeableConcept{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodeableConcept) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodeableConcept) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CodeableConcept) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CodeableConcept) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CodeableConcept) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CodeableConcept) SetExtension(v []Extension) {
	o.Extension = v
}

// GetCoding returns the Coding field value if set, zero value otherwise.
func (o *CodeableConcept) GetCoding() []Coding {
	if o == nil || IsNil(o.Coding) {
		var ret []Coding
		return ret
	}
	return o.Coding
}

// GetCodingOk returns a tuple with the Coding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetCodingOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Coding) {
		return nil, false
	}
	return o.Coding, true
}

// HasCoding returns a boolean if a field has been set.
func (o *CodeableConcept) HasCoding() bool {
	if o != nil && !IsNil(o.Coding) {
		return true
	}

	return false
}

// SetCoding gets a reference to the given []Coding and assigns it to the Coding field.
func (o *CodeableConcept) SetCoding(v []Coding) {
	o.Coding = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CodeableConcept) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CodeableConcept) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CodeableConcept) SetText(v string) {
	o.Text = &v
}

func (o CodeableConcept) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeableConcept) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Coding) {
		toSerialize["coding"] = o.Coding
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableCodeableConcept struct {
	value *CodeableConcept
	isSet bool
}

func (v NullableCodeableConcept) Get() *CodeableConcept {
	return v.value
}

func (v *NullableCodeableConcept) Set(val *CodeableConcept) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeableConcept) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeableConcept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeableConcept(val *CodeableConcept) *NullableCodeableConcept {
	return &NullableCodeableConcept{value: val, isSet: true}
}

func (v NullableCodeableConcept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeableConcept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


