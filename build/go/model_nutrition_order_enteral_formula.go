/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the NutritionOrderEnteralFormula type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NutritionOrderEnteralFormula{}

// NutritionOrderEnteralFormula A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
type NutritionOrderEnteralFormula struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
	BaseFormulaType *CodeableConcept `json:"baseFormulaType,omitempty"`
	// A sequence of Unicode characters
	BaseFormulaProductName *string `json:"baseFormulaProductName,omitempty"`
	// Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
	AdditiveType *CodeableConcept `json:"additiveType,omitempty"`
	// A sequence of Unicode characters
	AdditiveProductName *string `json:"additiveProductName,omitempty"`
	// The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
	CaloricDensity *Quantity `json:"caloricDensity,omitempty"`
	// The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
	RouteofAdministration *CodeableConcept `json:"routeofAdministration,omitempty"`
	// Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
	Administration []NutritionOrderAdministration `json:"administration,omitempty"`
	// The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
	MaxVolumeToDeliver *Quantity `json:"maxVolumeToDeliver,omitempty"`
	// A sequence of Unicode characters
	AdministrationInstruction *string `json:"administrationInstruction,omitempty"`
}

// NewNutritionOrderEnteralFormula instantiates a new NutritionOrderEnteralFormula object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNutritionOrderEnteralFormula() *NutritionOrderEnteralFormula {
	this := NutritionOrderEnteralFormula{}
	return &this
}

// NewNutritionOrderEnteralFormulaWithDefaults instantiates a new NutritionOrderEnteralFormula object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNutritionOrderEnteralFormulaWithDefaults() *NutritionOrderEnteralFormula {
	this := NutritionOrderEnteralFormula{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NutritionOrderEnteralFormula) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *NutritionOrderEnteralFormula) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *NutritionOrderEnteralFormula) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetBaseFormulaType returns the BaseFormulaType field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetBaseFormulaType() CodeableConcept {
	if o == nil || IsNil(o.BaseFormulaType) {
		var ret CodeableConcept
		return ret
	}
	return *o.BaseFormulaType
}

// GetBaseFormulaTypeOk returns a tuple with the BaseFormulaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetBaseFormulaTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BaseFormulaType) {
		return nil, false
	}
	return o.BaseFormulaType, true
}

// HasBaseFormulaType returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasBaseFormulaType() bool {
	if o != nil && !IsNil(o.BaseFormulaType) {
		return true
	}

	return false
}

// SetBaseFormulaType gets a reference to the given CodeableConcept and assigns it to the BaseFormulaType field.
func (o *NutritionOrderEnteralFormula) SetBaseFormulaType(v CodeableConcept) {
	o.BaseFormulaType = &v
}

// GetBaseFormulaProductName returns the BaseFormulaProductName field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetBaseFormulaProductName() string {
	if o == nil || IsNil(o.BaseFormulaProductName) {
		var ret string
		return ret
	}
	return *o.BaseFormulaProductName
}

// GetBaseFormulaProductNameOk returns a tuple with the BaseFormulaProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetBaseFormulaProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.BaseFormulaProductName) {
		return nil, false
	}
	return o.BaseFormulaProductName, true
}

// HasBaseFormulaProductName returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasBaseFormulaProductName() bool {
	if o != nil && !IsNil(o.BaseFormulaProductName) {
		return true
	}

	return false
}

// SetBaseFormulaProductName gets a reference to the given string and assigns it to the BaseFormulaProductName field.
func (o *NutritionOrderEnteralFormula) SetBaseFormulaProductName(v string) {
	o.BaseFormulaProductName = &v
}

// GetAdditiveType returns the AdditiveType field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetAdditiveType() CodeableConcept {
	if o == nil || IsNil(o.AdditiveType) {
		var ret CodeableConcept
		return ret
	}
	return *o.AdditiveType
}

// GetAdditiveTypeOk returns a tuple with the AdditiveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetAdditiveTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AdditiveType) {
		return nil, false
	}
	return o.AdditiveType, true
}

// HasAdditiveType returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasAdditiveType() bool {
	if o != nil && !IsNil(o.AdditiveType) {
		return true
	}

	return false
}

// SetAdditiveType gets a reference to the given CodeableConcept and assigns it to the AdditiveType field.
func (o *NutritionOrderEnteralFormula) SetAdditiveType(v CodeableConcept) {
	o.AdditiveType = &v
}

// GetAdditiveProductName returns the AdditiveProductName field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetAdditiveProductName() string {
	if o == nil || IsNil(o.AdditiveProductName) {
		var ret string
		return ret
	}
	return *o.AdditiveProductName
}

// GetAdditiveProductNameOk returns a tuple with the AdditiveProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetAdditiveProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.AdditiveProductName) {
		return nil, false
	}
	return o.AdditiveProductName, true
}

// HasAdditiveProductName returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasAdditiveProductName() bool {
	if o != nil && !IsNil(o.AdditiveProductName) {
		return true
	}

	return false
}

// SetAdditiveProductName gets a reference to the given string and assigns it to the AdditiveProductName field.
func (o *NutritionOrderEnteralFormula) SetAdditiveProductName(v string) {
	o.AdditiveProductName = &v
}

// GetCaloricDensity returns the CaloricDensity field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetCaloricDensity() Quantity {
	if o == nil || IsNil(o.CaloricDensity) {
		var ret Quantity
		return ret
	}
	return *o.CaloricDensity
}

// GetCaloricDensityOk returns a tuple with the CaloricDensity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetCaloricDensityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.CaloricDensity) {
		return nil, false
	}
	return o.CaloricDensity, true
}

// HasCaloricDensity returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasCaloricDensity() bool {
	if o != nil && !IsNil(o.CaloricDensity) {
		return true
	}

	return false
}

// SetCaloricDensity gets a reference to the given Quantity and assigns it to the CaloricDensity field.
func (o *NutritionOrderEnteralFormula) SetCaloricDensity(v Quantity) {
	o.CaloricDensity = &v
}

// GetRouteofAdministration returns the RouteofAdministration field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetRouteofAdministration() CodeableConcept {
	if o == nil || IsNil(o.RouteofAdministration) {
		var ret CodeableConcept
		return ret
	}
	return *o.RouteofAdministration
}

// GetRouteofAdministrationOk returns a tuple with the RouteofAdministration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetRouteofAdministrationOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.RouteofAdministration) {
		return nil, false
	}
	return o.RouteofAdministration, true
}

// HasRouteofAdministration returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasRouteofAdministration() bool {
	if o != nil && !IsNil(o.RouteofAdministration) {
		return true
	}

	return false
}

// SetRouteofAdministration gets a reference to the given CodeableConcept and assigns it to the RouteofAdministration field.
func (o *NutritionOrderEnteralFormula) SetRouteofAdministration(v CodeableConcept) {
	o.RouteofAdministration = &v
}

// GetAdministration returns the Administration field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetAdministration() []NutritionOrderAdministration {
	if o == nil || IsNil(o.Administration) {
		var ret []NutritionOrderAdministration
		return ret
	}
	return o.Administration
}

// GetAdministrationOk returns a tuple with the Administration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetAdministrationOk() ([]NutritionOrderAdministration, bool) {
	if o == nil || IsNil(o.Administration) {
		return nil, false
	}
	return o.Administration, true
}

// HasAdministration returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasAdministration() bool {
	if o != nil && !IsNil(o.Administration) {
		return true
	}

	return false
}

// SetAdministration gets a reference to the given []NutritionOrderAdministration and assigns it to the Administration field.
func (o *NutritionOrderEnteralFormula) SetAdministration(v []NutritionOrderAdministration) {
	o.Administration = v
}

// GetMaxVolumeToDeliver returns the MaxVolumeToDeliver field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetMaxVolumeToDeliver() Quantity {
	if o == nil || IsNil(o.MaxVolumeToDeliver) {
		var ret Quantity
		return ret
	}
	return *o.MaxVolumeToDeliver
}

// GetMaxVolumeToDeliverOk returns a tuple with the MaxVolumeToDeliver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetMaxVolumeToDeliverOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxVolumeToDeliver) {
		return nil, false
	}
	return o.MaxVolumeToDeliver, true
}

// HasMaxVolumeToDeliver returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasMaxVolumeToDeliver() bool {
	if o != nil && !IsNil(o.MaxVolumeToDeliver) {
		return true
	}

	return false
}

// SetMaxVolumeToDeliver gets a reference to the given Quantity and assigns it to the MaxVolumeToDeliver field.
func (o *NutritionOrderEnteralFormula) SetMaxVolumeToDeliver(v Quantity) {
	o.MaxVolumeToDeliver = &v
}

// GetAdministrationInstruction returns the AdministrationInstruction field value if set, zero value otherwise.
func (o *NutritionOrderEnteralFormula) GetAdministrationInstruction() string {
	if o == nil || IsNil(o.AdministrationInstruction) {
		var ret string
		return ret
	}
	return *o.AdministrationInstruction
}

// GetAdministrationInstructionOk returns a tuple with the AdministrationInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderEnteralFormula) GetAdministrationInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrationInstruction) {
		return nil, false
	}
	return o.AdministrationInstruction, true
}

// HasAdministrationInstruction returns a boolean if a field has been set.
func (o *NutritionOrderEnteralFormula) HasAdministrationInstruction() bool {
	if o != nil && !IsNil(o.AdministrationInstruction) {
		return true
	}

	return false
}

// SetAdministrationInstruction gets a reference to the given string and assigns it to the AdministrationInstruction field.
func (o *NutritionOrderEnteralFormula) SetAdministrationInstruction(v string) {
	o.AdministrationInstruction = &v
}

func (o NutritionOrderEnteralFormula) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NutritionOrderEnteralFormula) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.BaseFormulaType) {
		toSerialize["baseFormulaType"] = o.BaseFormulaType
	}
	if !IsNil(o.BaseFormulaProductName) {
		toSerialize["baseFormulaProductName"] = o.BaseFormulaProductName
	}
	if !IsNil(o.AdditiveType) {
		toSerialize["additiveType"] = o.AdditiveType
	}
	if !IsNil(o.AdditiveProductName) {
		toSerialize["additiveProductName"] = o.AdditiveProductName
	}
	if !IsNil(o.CaloricDensity) {
		toSerialize["caloricDensity"] = o.CaloricDensity
	}
	if !IsNil(o.RouteofAdministration) {
		toSerialize["routeofAdministration"] = o.RouteofAdministration
	}
	if !IsNil(o.Administration) {
		toSerialize["administration"] = o.Administration
	}
	if !IsNil(o.MaxVolumeToDeliver) {
		toSerialize["maxVolumeToDeliver"] = o.MaxVolumeToDeliver
	}
	if !IsNil(o.AdministrationInstruction) {
		toSerialize["administrationInstruction"] = o.AdministrationInstruction
	}
	return toSerialize, nil
}

type NullableNutritionOrderEnteralFormula struct {
	value *NutritionOrderEnteralFormula
	isSet bool
}

func (v NullableNutritionOrderEnteralFormula) Get() *NutritionOrderEnteralFormula {
	return v.value
}

func (v *NullableNutritionOrderEnteralFormula) Set(val *NutritionOrderEnteralFormula) {
	v.value = val
	v.isSet = true
}

func (v NullableNutritionOrderEnteralFormula) IsSet() bool {
	return v.isSet
}

func (v *NullableNutritionOrderEnteralFormula) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNutritionOrderEnteralFormula(val *NutritionOrderEnteralFormula) *NullableNutritionOrderEnteralFormula {
	return &NullableNutritionOrderEnteralFormula{value: val, isSet: true}
}

func (v NullableNutritionOrderEnteralFormula) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNutritionOrderEnteralFormula) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


