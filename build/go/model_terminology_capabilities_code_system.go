/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TerminologyCapabilitiesCodeSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerminologyCapabilitiesCodeSystem{}

// TerminologyCapabilitiesCodeSystem A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
type TerminologyCapabilitiesCodeSystem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Uri *string `json:"uri,omitempty"`
	// For the code system, a list of versions that are supported by the server.
	Version []TerminologyCapabilitiesVersion `json:"version,omitempty"`
	// Value of \"true\" or \"false\"
	Subsumption *bool `json:"subsumption,omitempty"`
}

// NewTerminologyCapabilitiesCodeSystem instantiates a new TerminologyCapabilitiesCodeSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminologyCapabilitiesCodeSystem() *TerminologyCapabilitiesCodeSystem {
	this := TerminologyCapabilitiesCodeSystem{}
	return &this
}

// NewTerminologyCapabilitiesCodeSystemWithDefaults instantiates a new TerminologyCapabilitiesCodeSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminologyCapabilitiesCodeSystemWithDefaults() *TerminologyCapabilitiesCodeSystem {
	this := TerminologyCapabilitiesCodeSystem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TerminologyCapabilitiesCodeSystem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TerminologyCapabilitiesCodeSystem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TerminologyCapabilitiesCodeSystem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *TerminologyCapabilitiesCodeSystem) SetUri(v string) {
	o.Uri = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetVersion() []TerminologyCapabilitiesVersion {
	if o == nil || IsNil(o.Version) {
		var ret []TerminologyCapabilitiesVersion
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetVersionOk() ([]TerminologyCapabilitiesVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given []TerminologyCapabilitiesVersion and assigns it to the Version field.
func (o *TerminologyCapabilitiesCodeSystem) SetVersion(v []TerminologyCapabilitiesVersion) {
	o.Version = v
}

// GetSubsumption returns the Subsumption field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesCodeSystem) GetSubsumption() bool {
	if o == nil || IsNil(o.Subsumption) {
		var ret bool
		return ret
	}
	return *o.Subsumption
}

// GetSubsumptionOk returns a tuple with the Subsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesCodeSystem) GetSubsumptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Subsumption) {
		return nil, false
	}
	return o.Subsumption, true
}

// HasSubsumption returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesCodeSystem) HasSubsumption() bool {
	if o != nil && !IsNil(o.Subsumption) {
		return true
	}

	return false
}

// SetSubsumption gets a reference to the given bool and assigns it to the Subsumption field.
func (o *TerminologyCapabilitiesCodeSystem) SetSubsumption(v bool) {
	o.Subsumption = &v
}

func (o TerminologyCapabilitiesCodeSystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminologyCapabilitiesCodeSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Subsumption) {
		toSerialize["subsumption"] = o.Subsumption
	}
	return toSerialize, nil
}

type NullableTerminologyCapabilitiesCodeSystem struct {
	value *TerminologyCapabilitiesCodeSystem
	isSet bool
}

func (v NullableTerminologyCapabilitiesCodeSystem) Get() *TerminologyCapabilitiesCodeSystem {
	return v.value
}

func (v *NullableTerminologyCapabilitiesCodeSystem) Set(val *TerminologyCapabilitiesCodeSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminologyCapabilitiesCodeSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminologyCapabilitiesCodeSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminologyCapabilitiesCodeSystem(val *TerminologyCapabilitiesCodeSystem) *NullableTerminologyCapabilitiesCodeSystem {
	return &NullableTerminologyCapabilitiesCodeSystem{value: val, isSet: true}
}

func (v NullableTerminologyCapabilitiesCodeSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminologyCapabilitiesCodeSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


