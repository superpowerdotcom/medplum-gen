/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the BulkDataExportOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkDataExportOutput{}

// BulkDataExportOutput An array of file items with one entry for each generated file. If no resources are returned from the kick-off request, the server SHOULD return an empty array.
type BulkDataExportOutput struct {
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Type string `json:"type"`
	// String of characters used to identify a name or a resource
	Url string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _BulkDataExportOutput BulkDataExportOutput

// NewBulkDataExportOutput instantiates a new BulkDataExportOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkDataExportOutput(type_ string, url string) *BulkDataExportOutput {
	this := BulkDataExportOutput{}
	this.Type = type_
	this.Url = url
	return &this
}

// NewBulkDataExportOutputWithDefaults instantiates a new BulkDataExportOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkDataExportOutputWithDefaults() *BulkDataExportOutput {
	this := BulkDataExportOutput{}
	return &this
}

// GetType returns the Type field value
func (o *BulkDataExportOutput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BulkDataExportOutput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BulkDataExportOutput) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *BulkDataExportOutput) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BulkDataExportOutput) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BulkDataExportOutput) SetUrl(v string) {
	o.Url = v
}

func (o BulkDataExportOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkDataExportOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BulkDataExportOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkDataExportOutput := _BulkDataExportOutput{}

	err = json.Unmarshal(data, &varBulkDataExportOutput)

	if err != nil {
		return err
	}

	*o = BulkDataExportOutput(varBulkDataExportOutput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBulkDataExportOutput struct {
	value *BulkDataExportOutput
	isSet bool
}

func (v NullableBulkDataExportOutput) Get() *BulkDataExportOutput {
	return v.value
}

func (v *NullableBulkDataExportOutput) Set(val *BulkDataExportOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkDataExportOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkDataExportOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkDataExportOutput(val *BulkDataExportOutput) *NullableBulkDataExportOutput {
	return &NullableBulkDataExportOutput{value: val, isSet: true}
}

func (v NullableBulkDataExportOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkDataExportOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


