/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSpecificationRelationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSpecificationRelationship{}

// SubstanceSpecificationRelationship The detailed description of a substance, typically at a level beyond what is used for prescribing.
type SubstanceSpecificationRelationship struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A pointer to another substance, as a resource or just a representational code.
	SubstanceReference *Reference `json:"substanceReference,omitempty"`
	// A pointer to another substance, as a resource or just a representational code.
	SubstanceCodeableConcept *CodeableConcept `json:"substanceCodeableConcept,omitempty"`
	// For example \"salt to parent\", \"active moiety\", \"starting material\".
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	// Value of \"true\" or \"false\"
	IsDefining *bool `json:"isDefining,omitempty"`
	// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
	AmountQuantity *Quantity `json:"amountQuantity,omitempty"`
	// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
	AmountRange *Range `json:"amountRange,omitempty"`
	// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
	AmountRatio *Ratio `json:"amountRatio,omitempty"`
	// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
	AmountString *string `json:"amountString,omitempty"`
	// For use when the numeric.
	AmountRatioLowLimit *Ratio `json:"amountRatioLowLimit,omitempty"`
	// An operator for the amount, for example \"average\", \"approximately\", \"less than\".
	AmountType *CodeableConcept `json:"amountType,omitempty"`
	// Supporting literature.
	Source []Reference `json:"source,omitempty"`
}

// NewSubstanceSpecificationRelationship instantiates a new SubstanceSpecificationRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSpecificationRelationship() *SubstanceSpecificationRelationship {
	this := SubstanceSpecificationRelationship{}
	return &this
}

// NewSubstanceSpecificationRelationshipWithDefaults instantiates a new SubstanceSpecificationRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSpecificationRelationshipWithDefaults() *SubstanceSpecificationRelationship {
	this := SubstanceSpecificationRelationship{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSpecificationRelationship) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSpecificationRelationship) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSpecificationRelationship) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubstanceReference returns the SubstanceReference field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetSubstanceReference() Reference {
	if o == nil || IsNil(o.SubstanceReference) {
		var ret Reference
		return ret
	}
	return *o.SubstanceReference
}

// GetSubstanceReferenceOk returns a tuple with the SubstanceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetSubstanceReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SubstanceReference) {
		return nil, false
	}
	return o.SubstanceReference, true
}

// HasSubstanceReference returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasSubstanceReference() bool {
	if o != nil && !IsNil(o.SubstanceReference) {
		return true
	}

	return false
}

// SetSubstanceReference gets a reference to the given Reference and assigns it to the SubstanceReference field.
func (o *SubstanceSpecificationRelationship) SetSubstanceReference(v Reference) {
	o.SubstanceReference = &v
}

// GetSubstanceCodeableConcept returns the SubstanceCodeableConcept field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetSubstanceCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.SubstanceCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubstanceCodeableConcept
}

// GetSubstanceCodeableConceptOk returns a tuple with the SubstanceCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetSubstanceCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubstanceCodeableConcept) {
		return nil, false
	}
	return o.SubstanceCodeableConcept, true
}

// HasSubstanceCodeableConcept returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasSubstanceCodeableConcept() bool {
	if o != nil && !IsNil(o.SubstanceCodeableConcept) {
		return true
	}

	return false
}

// SetSubstanceCodeableConcept gets a reference to the given CodeableConcept and assigns it to the SubstanceCodeableConcept field.
func (o *SubstanceSpecificationRelationship) SetSubstanceCodeableConcept(v CodeableConcept) {
	o.SubstanceCodeableConcept = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetRelationship() CodeableConcept {
	if o == nil || IsNil(o.Relationship) {
		var ret CodeableConcept
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetRelationshipOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given CodeableConcept and assigns it to the Relationship field.
func (o *SubstanceSpecificationRelationship) SetRelationship(v CodeableConcept) {
	o.Relationship = &v
}

// GetIsDefining returns the IsDefining field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetIsDefining() bool {
	if o == nil || IsNil(o.IsDefining) {
		var ret bool
		return ret
	}
	return *o.IsDefining
}

// GetIsDefiningOk returns a tuple with the IsDefining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetIsDefiningOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefining) {
		return nil, false
	}
	return o.IsDefining, true
}

// HasIsDefining returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasIsDefining() bool {
	if o != nil && !IsNil(o.IsDefining) {
		return true
	}

	return false
}

// SetIsDefining gets a reference to the given bool and assigns it to the IsDefining field.
func (o *SubstanceSpecificationRelationship) SetIsDefining(v bool) {
	o.IsDefining = &v
}

// GetAmountQuantity returns the AmountQuantity field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountQuantity() Quantity {
	if o == nil || IsNil(o.AmountQuantity) {
		var ret Quantity
		return ret
	}
	return *o.AmountQuantity
}

// GetAmountQuantityOk returns a tuple with the AmountQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.AmountQuantity) {
		return nil, false
	}
	return o.AmountQuantity, true
}

// HasAmountQuantity returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountQuantity() bool {
	if o != nil && !IsNil(o.AmountQuantity) {
		return true
	}

	return false
}

// SetAmountQuantity gets a reference to the given Quantity and assigns it to the AmountQuantity field.
func (o *SubstanceSpecificationRelationship) SetAmountQuantity(v Quantity) {
	o.AmountQuantity = &v
}

// GetAmountRange returns the AmountRange field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountRange() Range {
	if o == nil || IsNil(o.AmountRange) {
		var ret Range
		return ret
	}
	return *o.AmountRange
}

// GetAmountRangeOk returns a tuple with the AmountRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.AmountRange) {
		return nil, false
	}
	return o.AmountRange, true
}

// HasAmountRange returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountRange() bool {
	if o != nil && !IsNil(o.AmountRange) {
		return true
	}

	return false
}

// SetAmountRange gets a reference to the given Range and assigns it to the AmountRange field.
func (o *SubstanceSpecificationRelationship) SetAmountRange(v Range) {
	o.AmountRange = &v
}

// GetAmountRatio returns the AmountRatio field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountRatio() Ratio {
	if o == nil || IsNil(o.AmountRatio) {
		var ret Ratio
		return ret
	}
	return *o.AmountRatio
}

// GetAmountRatioOk returns a tuple with the AmountRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.AmountRatio) {
		return nil, false
	}
	return o.AmountRatio, true
}

// HasAmountRatio returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountRatio() bool {
	if o != nil && !IsNil(o.AmountRatio) {
		return true
	}

	return false
}

// SetAmountRatio gets a reference to the given Ratio and assigns it to the AmountRatio field.
func (o *SubstanceSpecificationRelationship) SetAmountRatio(v Ratio) {
	o.AmountRatio = &v
}

// GetAmountString returns the AmountString field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountString() string {
	if o == nil || IsNil(o.AmountString) {
		var ret string
		return ret
	}
	return *o.AmountString
}

// GetAmountStringOk returns a tuple with the AmountString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountStringOk() (*string, bool) {
	if o == nil || IsNil(o.AmountString) {
		return nil, false
	}
	return o.AmountString, true
}

// HasAmountString returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountString() bool {
	if o != nil && !IsNil(o.AmountString) {
		return true
	}

	return false
}

// SetAmountString gets a reference to the given string and assigns it to the AmountString field.
func (o *SubstanceSpecificationRelationship) SetAmountString(v string) {
	o.AmountString = &v
}

// GetAmountRatioLowLimit returns the AmountRatioLowLimit field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountRatioLowLimit() Ratio {
	if o == nil || IsNil(o.AmountRatioLowLimit) {
		var ret Ratio
		return ret
	}
	return *o.AmountRatioLowLimit
}

// GetAmountRatioLowLimitOk returns a tuple with the AmountRatioLowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountRatioLowLimitOk() (*Ratio, bool) {
	if o == nil || IsNil(o.AmountRatioLowLimit) {
		return nil, false
	}
	return o.AmountRatioLowLimit, true
}

// HasAmountRatioLowLimit returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountRatioLowLimit() bool {
	if o != nil && !IsNil(o.AmountRatioLowLimit) {
		return true
	}

	return false
}

// SetAmountRatioLowLimit gets a reference to the given Ratio and assigns it to the AmountRatioLowLimit field.
func (o *SubstanceSpecificationRelationship) SetAmountRatioLowLimit(v Ratio) {
	o.AmountRatioLowLimit = &v
}

// GetAmountType returns the AmountType field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetAmountType() CodeableConcept {
	if o == nil || IsNil(o.AmountType) {
		var ret CodeableConcept
		return ret
	}
	return *o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetAmountTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AmountType) {
		return nil, false
	}
	return o.AmountType, true
}

// HasAmountType returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasAmountType() bool {
	if o != nil && !IsNil(o.AmountType) {
		return true
	}

	return false
}

// SetAmountType gets a reference to the given CodeableConcept and assigns it to the AmountType field.
func (o *SubstanceSpecificationRelationship) SetAmountType(v CodeableConcept) {
	o.AmountType = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SubstanceSpecificationRelationship) GetSource() []Reference {
	if o == nil || IsNil(o.Source) {
		var ret []Reference
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationRelationship) GetSourceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SubstanceSpecificationRelationship) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []Reference and assigns it to the Source field.
func (o *SubstanceSpecificationRelationship) SetSource(v []Reference) {
	o.Source = v
}

func (o SubstanceSpecificationRelationship) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSpecificationRelationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.SubstanceReference) {
		toSerialize["substanceReference"] = o.SubstanceReference
	}
	if !IsNil(o.SubstanceCodeableConcept) {
		toSerialize["substanceCodeableConcept"] = o.SubstanceCodeableConcept
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.IsDefining) {
		toSerialize["isDefining"] = o.IsDefining
	}
	if !IsNil(o.AmountQuantity) {
		toSerialize["amountQuantity"] = o.AmountQuantity
	}
	if !IsNil(o.AmountRange) {
		toSerialize["amountRange"] = o.AmountRange
	}
	if !IsNil(o.AmountRatio) {
		toSerialize["amountRatio"] = o.AmountRatio
	}
	if !IsNil(o.AmountString) {
		toSerialize["amountString"] = o.AmountString
	}
	if !IsNil(o.AmountRatioLowLimit) {
		toSerialize["amountRatioLowLimit"] = o.AmountRatioLowLimit
	}
	if !IsNil(o.AmountType) {
		toSerialize["amountType"] = o.AmountType
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableSubstanceSpecificationRelationship struct {
	value *SubstanceSpecificationRelationship
	isSet bool
}

func (v NullableSubstanceSpecificationRelationship) Get() *SubstanceSpecificationRelationship {
	return v.value
}

func (v *NullableSubstanceSpecificationRelationship) Set(val *SubstanceSpecificationRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSpecificationRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSpecificationRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSpecificationRelationship(val *SubstanceSpecificationRelationship) *NullableSubstanceSpecificationRelationship {
	return &NullableSubstanceSpecificationRelationship{value: val, isSet: true}
}

func (v NullableSubstanceSpecificationRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSpecificationRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


