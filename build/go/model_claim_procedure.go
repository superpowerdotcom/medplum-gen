/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ClaimProcedure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimProcedure{}

// ClaimProcedure A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type ClaimProcedure struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// When the condition was observed or the relative ranking.
	Type []CodeableConcept `json:"type,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// The code or reference to a Procedure resource which identifies the clinical intervention performed.
	ProcedureCodeableConcept *CodeableConcept `json:"procedureCodeableConcept,omitempty"`
	// The code or reference to a Procedure resource which identifies the clinical intervention performed.
	ProcedureReference *Reference `json:"procedureReference,omitempty"`
	// Unique Device Identifiers associated with this line item.
	Udi []Reference `json:"udi,omitempty"`
}

// NewClaimProcedure instantiates a new ClaimProcedure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimProcedure() *ClaimProcedure {
	this := ClaimProcedure{}
	return &this
}

// NewClaimProcedureWithDefaults instantiates a new ClaimProcedure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimProcedureWithDefaults() *ClaimProcedure {
	this := ClaimProcedure{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClaimProcedure) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClaimProcedure) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClaimProcedure) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ClaimProcedure) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ClaimProcedure) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ClaimProcedure) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ClaimProcedure) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ClaimProcedure) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ClaimProcedure) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ClaimProcedure) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ClaimProcedure) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ClaimProcedure) SetSequence(v float32) {
	o.Sequence = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClaimProcedure) GetType() []CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret []CodeableConcept
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClaimProcedure) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []CodeableConcept and assigns it to the Type field.
func (o *ClaimProcedure) SetType(v []CodeableConcept) {
	o.Type = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ClaimProcedure) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ClaimProcedure) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ClaimProcedure) SetDate(v string) {
	o.Date = &v
}

// GetProcedureCodeableConcept returns the ProcedureCodeableConcept field value if set, zero value otherwise.
func (o *ClaimProcedure) GetProcedureCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ProcedureCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProcedureCodeableConcept
}

// GetProcedureCodeableConceptOk returns a tuple with the ProcedureCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetProcedureCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProcedureCodeableConcept) {
		return nil, false
	}
	return o.ProcedureCodeableConcept, true
}

// HasProcedureCodeableConcept returns a boolean if a field has been set.
func (o *ClaimProcedure) HasProcedureCodeableConcept() bool {
	if o != nil && !IsNil(o.ProcedureCodeableConcept) {
		return true
	}

	return false
}

// SetProcedureCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ProcedureCodeableConcept field.
func (o *ClaimProcedure) SetProcedureCodeableConcept(v CodeableConcept) {
	o.ProcedureCodeableConcept = &v
}

// GetProcedureReference returns the ProcedureReference field value if set, zero value otherwise.
func (o *ClaimProcedure) GetProcedureReference() Reference {
	if o == nil || IsNil(o.ProcedureReference) {
		var ret Reference
		return ret
	}
	return *o.ProcedureReference
}

// GetProcedureReferenceOk returns a tuple with the ProcedureReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetProcedureReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProcedureReference) {
		return nil, false
	}
	return o.ProcedureReference, true
}

// HasProcedureReference returns a boolean if a field has been set.
func (o *ClaimProcedure) HasProcedureReference() bool {
	if o != nil && !IsNil(o.ProcedureReference) {
		return true
	}

	return false
}

// SetProcedureReference gets a reference to the given Reference and assigns it to the ProcedureReference field.
func (o *ClaimProcedure) SetProcedureReference(v Reference) {
	o.ProcedureReference = &v
}

// GetUdi returns the Udi field value if set, zero value otherwise.
func (o *ClaimProcedure) GetUdi() []Reference {
	if o == nil || IsNil(o.Udi) {
		var ret []Reference
		return ret
	}
	return o.Udi
}

// GetUdiOk returns a tuple with the Udi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimProcedure) GetUdiOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Udi) {
		return nil, false
	}
	return o.Udi, true
}

// HasUdi returns a boolean if a field has been set.
func (o *ClaimProcedure) HasUdi() bool {
	if o != nil && !IsNil(o.Udi) {
		return true
	}

	return false
}

// SetUdi gets a reference to the given []Reference and assigns it to the Udi field.
func (o *ClaimProcedure) SetUdi(v []Reference) {
	o.Udi = v
}

func (o ClaimProcedure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimProcedure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.ProcedureCodeableConcept) {
		toSerialize["procedureCodeableConcept"] = o.ProcedureCodeableConcept
	}
	if !IsNil(o.ProcedureReference) {
		toSerialize["procedureReference"] = o.ProcedureReference
	}
	if !IsNil(o.Udi) {
		toSerialize["udi"] = o.Udi
	}
	return toSerialize, nil
}

type NullableClaimProcedure struct {
	value *ClaimProcedure
	isSet bool
}

func (v NullableClaimProcedure) Get() *ClaimProcedure {
	return v.value
}

func (v *NullableClaimProcedure) Set(val *ClaimProcedure) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimProcedure) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimProcedure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimProcedure(val *ClaimProcedure) *NullableClaimProcedure {
	return &NullableClaimProcedure{value: val, isSet: true}
}

func (v NullableClaimProcedure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimProcedure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


