/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubstanceNucleicAcid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceNucleicAcid{}

// SubstanceNucleicAcid Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcid struct {
	// This is a SubstanceNucleicAcid resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The type of the sequence shall be specified based on a controlled vocabulary.
	SequenceType *CodeableConcept `json:"sequenceType,omitempty"`
	// A whole number
	NumberOfSubunits *float32 `json:"numberOfSubunits,omitempty"`
	// A sequence of Unicode characters
	AreaOfHybridisation *string `json:"areaOfHybridisation,omitempty"`
	// (TBC).
	OligoNucleotideType *CodeableConcept `json:"oligoNucleotideType,omitempty"`
	// Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
	Subunit []SubstanceNucleicAcidSubunit `json:"subunit,omitempty"`
}

type _SubstanceNucleicAcid SubstanceNucleicAcid

// NewSubstanceNucleicAcid instantiates a new SubstanceNucleicAcid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceNucleicAcid(resourceType string) *SubstanceNucleicAcid {
	this := SubstanceNucleicAcid{}
	this.ResourceType = resourceType
	return &this
}

// NewSubstanceNucleicAcidWithDefaults instantiates a new SubstanceNucleicAcid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceNucleicAcidWithDefaults() *SubstanceNucleicAcid {
	this := SubstanceNucleicAcid{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *SubstanceNucleicAcid) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SubstanceNucleicAcid) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceNucleicAcid) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SubstanceNucleicAcid) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *SubstanceNucleicAcid) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SubstanceNucleicAcid) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *SubstanceNucleicAcid) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *SubstanceNucleicAcid) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceNucleicAcid) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceNucleicAcid) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequenceType returns the SequenceType field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetSequenceType() CodeableConcept {
	if o == nil || IsNil(o.SequenceType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SequenceType
}

// GetSequenceTypeOk returns a tuple with the SequenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetSequenceTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SequenceType) {
		return nil, false
	}
	return o.SequenceType, true
}

// HasSequenceType returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasSequenceType() bool {
	if o != nil && !IsNil(o.SequenceType) {
		return true
	}

	return false
}

// SetSequenceType gets a reference to the given CodeableConcept and assigns it to the SequenceType field.
func (o *SubstanceNucleicAcid) SetSequenceType(v CodeableConcept) {
	o.SequenceType = &v
}

// GetNumberOfSubunits returns the NumberOfSubunits field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetNumberOfSubunits() float32 {
	if o == nil || IsNil(o.NumberOfSubunits) {
		var ret float32
		return ret
	}
	return *o.NumberOfSubunits
}

// GetNumberOfSubunitsOk returns a tuple with the NumberOfSubunits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetNumberOfSubunitsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfSubunits) {
		return nil, false
	}
	return o.NumberOfSubunits, true
}

// HasNumberOfSubunits returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasNumberOfSubunits() bool {
	if o != nil && !IsNil(o.NumberOfSubunits) {
		return true
	}

	return false
}

// SetNumberOfSubunits gets a reference to the given float32 and assigns it to the NumberOfSubunits field.
func (o *SubstanceNucleicAcid) SetNumberOfSubunits(v float32) {
	o.NumberOfSubunits = &v
}

// GetAreaOfHybridisation returns the AreaOfHybridisation field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetAreaOfHybridisation() string {
	if o == nil || IsNil(o.AreaOfHybridisation) {
		var ret string
		return ret
	}
	return *o.AreaOfHybridisation
}

// GetAreaOfHybridisationOk returns a tuple with the AreaOfHybridisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetAreaOfHybridisationOk() (*string, bool) {
	if o == nil || IsNil(o.AreaOfHybridisation) {
		return nil, false
	}
	return o.AreaOfHybridisation, true
}

// HasAreaOfHybridisation returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasAreaOfHybridisation() bool {
	if o != nil && !IsNil(o.AreaOfHybridisation) {
		return true
	}

	return false
}

// SetAreaOfHybridisation gets a reference to the given string and assigns it to the AreaOfHybridisation field.
func (o *SubstanceNucleicAcid) SetAreaOfHybridisation(v string) {
	o.AreaOfHybridisation = &v
}

// GetOligoNucleotideType returns the OligoNucleotideType field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetOligoNucleotideType() CodeableConcept {
	if o == nil || IsNil(o.OligoNucleotideType) {
		var ret CodeableConcept
		return ret
	}
	return *o.OligoNucleotideType
}

// GetOligoNucleotideTypeOk returns a tuple with the OligoNucleotideType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetOligoNucleotideTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OligoNucleotideType) {
		return nil, false
	}
	return o.OligoNucleotideType, true
}

// HasOligoNucleotideType returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasOligoNucleotideType() bool {
	if o != nil && !IsNil(o.OligoNucleotideType) {
		return true
	}

	return false
}

// SetOligoNucleotideType gets a reference to the given CodeableConcept and assigns it to the OligoNucleotideType field.
func (o *SubstanceNucleicAcid) SetOligoNucleotideType(v CodeableConcept) {
	o.OligoNucleotideType = &v
}

// GetSubunit returns the Subunit field value if set, zero value otherwise.
func (o *SubstanceNucleicAcid) GetSubunit() []SubstanceNucleicAcidSubunit {
	if o == nil || IsNil(o.Subunit) {
		var ret []SubstanceNucleicAcidSubunit
		return ret
	}
	return o.Subunit
}

// GetSubunitOk returns a tuple with the Subunit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcid) GetSubunitOk() ([]SubstanceNucleicAcidSubunit, bool) {
	if o == nil || IsNil(o.Subunit) {
		return nil, false
	}
	return o.Subunit, true
}

// HasSubunit returns a boolean if a field has been set.
func (o *SubstanceNucleicAcid) HasSubunit() bool {
	if o != nil && !IsNil(o.Subunit) {
		return true
	}

	return false
}

// SetSubunit gets a reference to the given []SubstanceNucleicAcidSubunit and assigns it to the Subunit field.
func (o *SubstanceNucleicAcid) SetSubunit(v []SubstanceNucleicAcidSubunit) {
	o.Subunit = v
}

func (o SubstanceNucleicAcid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceNucleicAcid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.SequenceType) {
		toSerialize["sequenceType"] = o.SequenceType
	}
	if !IsNil(o.NumberOfSubunits) {
		toSerialize["numberOfSubunits"] = o.NumberOfSubunits
	}
	if !IsNil(o.AreaOfHybridisation) {
		toSerialize["areaOfHybridisation"] = o.AreaOfHybridisation
	}
	if !IsNil(o.OligoNucleotideType) {
		toSerialize["oligoNucleotideType"] = o.OligoNucleotideType
	}
	if !IsNil(o.Subunit) {
		toSerialize["subunit"] = o.Subunit
	}
	return toSerialize, nil
}

func (o *SubstanceNucleicAcid) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstanceNucleicAcid := _SubstanceNucleicAcid{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstanceNucleicAcid)

	if err != nil {
		return err
	}

	*o = SubstanceNucleicAcid(varSubstanceNucleicAcid)

	return err
}

type NullableSubstanceNucleicAcid struct {
	value *SubstanceNucleicAcid
	isSet bool
}

func (v NullableSubstanceNucleicAcid) Get() *SubstanceNucleicAcid {
	return v.value
}

func (v *NullableSubstanceNucleicAcid) Set(val *SubstanceNucleicAcid) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceNucleicAcid) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceNucleicAcid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceNucleicAcid(val *SubstanceNucleicAcid) *NullableSubstanceNucleicAcid {
	return &NullableSubstanceNucleicAcid{value: val, isSet: true}
}

func (v NullableSubstanceNucleicAcid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceNucleicAcid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


