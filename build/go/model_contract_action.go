/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractAction{}

// ContractAction Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractAction struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Value of \"true\" or \"false\"
	DoNotPerform *bool `json:"doNotPerform,omitempty"`
	// Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
	Type CodeableConcept `json:"type"`
	// Entity of the action.
	Subject []ContractSubject `json:"subject,omitempty"`
	// Reason or purpose for the action stipulated by this Contract Provision.
	Intent CodeableConcept `json:"intent"`
	// Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
	LinkId []string `json:"linkId,omitempty"`
	// Current state of the term action.
	Status CodeableConcept `json:"status"`
	// Encounter or Episode with primary association to specified term activity.
	Context *Reference `json:"context,omitempty"`
	// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
	ContextLinkId []string `json:"contextLinkId,omitempty"`
	// When action happens.
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// When action happens.
	OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`
	// When action happens.
	OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`
	// Who or what initiated the action and has responsibility for its activation.
	Requester []Reference `json:"requester,omitempty"`
	// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
	RequesterLinkId []string `json:"requesterLinkId,omitempty"`
	// The type of individual that is desired or required to perform or not perform the action.
	PerformerType []CodeableConcept `json:"performerType,omitempty"`
	// The type of role or competency of an individual desired or required to perform or not perform the action.
	PerformerRole *CodeableConcept `json:"performerRole,omitempty"`
	// Indicates who or what is being asked to perform (or not perform) the ction.
	Performer *Reference `json:"performer,omitempty"`
	// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
	PerformerLinkId []string `json:"performerLinkId,omitempty"`
	// Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Indicates another resource whose existence justifies permitting or not permitting this action.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Describes why the action is to be performed or not performed in textual form.
	Reason []string `json:"reason,omitempty"`
	// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
	ReasonLinkId []string `json:"reasonLinkId,omitempty"`
	// Comments made about the term action made by the requester, performer, subject or other participants.
	Note []Annotation `json:"note,omitempty"`
	// Security labels that protects the action.
	SecurityLabelNumber []float32 `json:"securityLabelNumber,omitempty"`
}

type _ContractAction ContractAction

// NewContractAction instantiates a new ContractAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractAction(type_ CodeableConcept, intent CodeableConcept, status CodeableConcept) *ContractAction {
	this := ContractAction{}
	this.Type = type_
	this.Intent = intent
	this.Status = status
	return &this
}

// NewContractActionWithDefaults instantiates a new ContractAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractActionWithDefaults() *ContractAction {
	this := ContractAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContractAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContractAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContractAction) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ContractAction) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ContractAction) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ContractAction) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ContractAction) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ContractAction) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ContractAction) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDoNotPerform returns the DoNotPerform field value if set, zero value otherwise.
func (o *ContractAction) GetDoNotPerform() bool {
	if o == nil || IsNil(o.DoNotPerform) {
		var ret bool
		return ret
	}
	return *o.DoNotPerform
}

// GetDoNotPerformOk returns a tuple with the DoNotPerform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetDoNotPerformOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotPerform) {
		return nil, false
	}
	return o.DoNotPerform, true
}

// HasDoNotPerform returns a boolean if a field has been set.
func (o *ContractAction) HasDoNotPerform() bool {
	if o != nil && !IsNil(o.DoNotPerform) {
		return true
	}

	return false
}

// SetDoNotPerform gets a reference to the given bool and assigns it to the DoNotPerform field.
func (o *ContractAction) SetDoNotPerform(v bool) {
	o.DoNotPerform = &v
}

// GetType returns the Type field value
func (o *ContractAction) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContractAction) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContractAction) SetType(v CodeableConcept) {
	o.Type = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ContractAction) GetSubject() []ContractSubject {
	if o == nil || IsNil(o.Subject) {
		var ret []ContractSubject
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetSubjectOk() ([]ContractSubject, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ContractAction) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given []ContractSubject and assigns it to the Subject field.
func (o *ContractAction) SetSubject(v []ContractSubject) {
	o.Subject = v
}

// GetIntent returns the Intent field value
func (o *ContractAction) GetIntent() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Intent
}

// GetIntentOk returns a tuple with the Intent field value
// and a boolean to check if the value has been set.
func (o *ContractAction) GetIntentOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Intent, true
}

// SetIntent sets field value
func (o *ContractAction) SetIntent(v CodeableConcept) {
	o.Intent = v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *ContractAction) GetLinkId() []string {
	if o == nil || IsNil(o.LinkId) {
		var ret []string
		return ret
	}
	return o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *ContractAction) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given []string and assigns it to the LinkId field.
func (o *ContractAction) SetLinkId(v []string) {
	o.LinkId = v
}

// GetStatus returns the Status field value
func (o *ContractAction) GetStatus() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ContractAction) GetStatusOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ContractAction) SetStatus(v CodeableConcept) {
	o.Status = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ContractAction) GetContext() Reference {
	if o == nil || IsNil(o.Context) {
		var ret Reference
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetContextOk() (*Reference, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ContractAction) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Reference and assigns it to the Context field.
func (o *ContractAction) SetContext(v Reference) {
	o.Context = &v
}

// GetContextLinkId returns the ContextLinkId field value if set, zero value otherwise.
func (o *ContractAction) GetContextLinkId() []string {
	if o == nil || IsNil(o.ContextLinkId) {
		var ret []string
		return ret
	}
	return o.ContextLinkId
}

// GetContextLinkIdOk returns a tuple with the ContextLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetContextLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ContextLinkId) {
		return nil, false
	}
	return o.ContextLinkId, true
}

// HasContextLinkId returns a boolean if a field has been set.
func (o *ContractAction) HasContextLinkId() bool {
	if o != nil && !IsNil(o.ContextLinkId) {
		return true
	}

	return false
}

// SetContextLinkId gets a reference to the given []string and assigns it to the ContextLinkId field.
func (o *ContractAction) SetContextLinkId(v []string) {
	o.ContextLinkId = v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *ContractAction) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *ContractAction) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *ContractAction) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrencePeriod returns the OccurrencePeriod field value if set, zero value otherwise.
func (o *ContractAction) GetOccurrencePeriod() Period {
	if o == nil || IsNil(o.OccurrencePeriod) {
		var ret Period
		return ret
	}
	return *o.OccurrencePeriod
}

// GetOccurrencePeriodOk returns a tuple with the OccurrencePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetOccurrencePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OccurrencePeriod) {
		return nil, false
	}
	return o.OccurrencePeriod, true
}

// HasOccurrencePeriod returns a boolean if a field has been set.
func (o *ContractAction) HasOccurrencePeriod() bool {
	if o != nil && !IsNil(o.OccurrencePeriod) {
		return true
	}

	return false
}

// SetOccurrencePeriod gets a reference to the given Period and assigns it to the OccurrencePeriod field.
func (o *ContractAction) SetOccurrencePeriod(v Period) {
	o.OccurrencePeriod = &v
}

// GetOccurrenceTiming returns the OccurrenceTiming field value if set, zero value otherwise.
func (o *ContractAction) GetOccurrenceTiming() Timing {
	if o == nil || IsNil(o.OccurrenceTiming) {
		var ret Timing
		return ret
	}
	return *o.OccurrenceTiming
}

// GetOccurrenceTimingOk returns a tuple with the OccurrenceTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetOccurrenceTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.OccurrenceTiming) {
		return nil, false
	}
	return o.OccurrenceTiming, true
}

// HasOccurrenceTiming returns a boolean if a field has been set.
func (o *ContractAction) HasOccurrenceTiming() bool {
	if o != nil && !IsNil(o.OccurrenceTiming) {
		return true
	}

	return false
}

// SetOccurrenceTiming gets a reference to the given Timing and assigns it to the OccurrenceTiming field.
func (o *ContractAction) SetOccurrenceTiming(v Timing) {
	o.OccurrenceTiming = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *ContractAction) GetRequester() []Reference {
	if o == nil || IsNil(o.Requester) {
		var ret []Reference
		return ret
	}
	return o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetRequesterOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Requester) {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *ContractAction) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given []Reference and assigns it to the Requester field.
func (o *ContractAction) SetRequester(v []Reference) {
	o.Requester = v
}

// GetRequesterLinkId returns the RequesterLinkId field value if set, zero value otherwise.
func (o *ContractAction) GetRequesterLinkId() []string {
	if o == nil || IsNil(o.RequesterLinkId) {
		var ret []string
		return ret
	}
	return o.RequesterLinkId
}

// GetRequesterLinkIdOk returns a tuple with the RequesterLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetRequesterLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.RequesterLinkId) {
		return nil, false
	}
	return o.RequesterLinkId, true
}

// HasRequesterLinkId returns a boolean if a field has been set.
func (o *ContractAction) HasRequesterLinkId() bool {
	if o != nil && !IsNil(o.RequesterLinkId) {
		return true
	}

	return false
}

// SetRequesterLinkId gets a reference to the given []string and assigns it to the RequesterLinkId field.
func (o *ContractAction) SetRequesterLinkId(v []string) {
	o.RequesterLinkId = v
}

// GetPerformerType returns the PerformerType field value if set, zero value otherwise.
func (o *ContractAction) GetPerformerType() []CodeableConcept {
	if o == nil || IsNil(o.PerformerType) {
		var ret []CodeableConcept
		return ret
	}
	return o.PerformerType
}

// GetPerformerTypeOk returns a tuple with the PerformerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetPerformerTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.PerformerType) {
		return nil, false
	}
	return o.PerformerType, true
}

// HasPerformerType returns a boolean if a field has been set.
func (o *ContractAction) HasPerformerType() bool {
	if o != nil && !IsNil(o.PerformerType) {
		return true
	}

	return false
}

// SetPerformerType gets a reference to the given []CodeableConcept and assigns it to the PerformerType field.
func (o *ContractAction) SetPerformerType(v []CodeableConcept) {
	o.PerformerType = v
}

// GetPerformerRole returns the PerformerRole field value if set, zero value otherwise.
func (o *ContractAction) GetPerformerRole() CodeableConcept {
	if o == nil || IsNil(o.PerformerRole) {
		var ret CodeableConcept
		return ret
	}
	return *o.PerformerRole
}

// GetPerformerRoleOk returns a tuple with the PerformerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetPerformerRoleOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PerformerRole) {
		return nil, false
	}
	return o.PerformerRole, true
}

// HasPerformerRole returns a boolean if a field has been set.
func (o *ContractAction) HasPerformerRole() bool {
	if o != nil && !IsNil(o.PerformerRole) {
		return true
	}

	return false
}

// SetPerformerRole gets a reference to the given CodeableConcept and assigns it to the PerformerRole field.
func (o *ContractAction) SetPerformerRole(v CodeableConcept) {
	o.PerformerRole = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *ContractAction) GetPerformer() Reference {
	if o == nil || IsNil(o.Performer) {
		var ret Reference
		return ret
	}
	return *o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetPerformerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *ContractAction) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given Reference and assigns it to the Performer field.
func (o *ContractAction) SetPerformer(v Reference) {
	o.Performer = &v
}

// GetPerformerLinkId returns the PerformerLinkId field value if set, zero value otherwise.
func (o *ContractAction) GetPerformerLinkId() []string {
	if o == nil || IsNil(o.PerformerLinkId) {
		var ret []string
		return ret
	}
	return o.PerformerLinkId
}

// GetPerformerLinkIdOk returns a tuple with the PerformerLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetPerformerLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.PerformerLinkId) {
		return nil, false
	}
	return o.PerformerLinkId, true
}

// HasPerformerLinkId returns a boolean if a field has been set.
func (o *ContractAction) HasPerformerLinkId() bool {
	if o != nil && !IsNil(o.PerformerLinkId) {
		return true
	}

	return false
}

// SetPerformerLinkId gets a reference to the given []string and assigns it to the PerformerLinkId field.
func (o *ContractAction) SetPerformerLinkId(v []string) {
	o.PerformerLinkId = v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ContractAction) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ContractAction) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *ContractAction) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *ContractAction) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *ContractAction) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *ContractAction) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ContractAction) GetReason() []string {
	if o == nil || IsNil(o.Reason) {
		var ret []string
		return ret
	}
	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ContractAction) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given []string and assigns it to the Reason field.
func (o *ContractAction) SetReason(v []string) {
	o.Reason = v
}

// GetReasonLinkId returns the ReasonLinkId field value if set, zero value otherwise.
func (o *ContractAction) GetReasonLinkId() []string {
	if o == nil || IsNil(o.ReasonLinkId) {
		var ret []string
		return ret
	}
	return o.ReasonLinkId
}

// GetReasonLinkIdOk returns a tuple with the ReasonLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetReasonLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ReasonLinkId) {
		return nil, false
	}
	return o.ReasonLinkId, true
}

// HasReasonLinkId returns a boolean if a field has been set.
func (o *ContractAction) HasReasonLinkId() bool {
	if o != nil && !IsNil(o.ReasonLinkId) {
		return true
	}

	return false
}

// SetReasonLinkId gets a reference to the given []string and assigns it to the ReasonLinkId field.
func (o *ContractAction) SetReasonLinkId(v []string) {
	o.ReasonLinkId = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ContractAction) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ContractAction) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *ContractAction) SetNote(v []Annotation) {
	o.Note = v
}

// GetSecurityLabelNumber returns the SecurityLabelNumber field value if set, zero value otherwise.
func (o *ContractAction) GetSecurityLabelNumber() []float32 {
	if o == nil || IsNil(o.SecurityLabelNumber) {
		var ret []float32
		return ret
	}
	return o.SecurityLabelNumber
}

// GetSecurityLabelNumberOk returns a tuple with the SecurityLabelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractAction) GetSecurityLabelNumberOk() ([]float32, bool) {
	if o == nil || IsNil(o.SecurityLabelNumber) {
		return nil, false
	}
	return o.SecurityLabelNumber, true
}

// HasSecurityLabelNumber returns a boolean if a field has been set.
func (o *ContractAction) HasSecurityLabelNumber() bool {
	if o != nil && !IsNil(o.SecurityLabelNumber) {
		return true
	}

	return false
}

// SetSecurityLabelNumber gets a reference to the given []float32 and assigns it to the SecurityLabelNumber field.
func (o *ContractAction) SetSecurityLabelNumber(v []float32) {
	o.SecurityLabelNumber = v
}

func (o ContractAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.DoNotPerform) {
		toSerialize["doNotPerform"] = o.DoNotPerform
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	toSerialize["intent"] = o.Intent
	if !IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ContextLinkId) {
		toSerialize["contextLinkId"] = o.ContextLinkId
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrencePeriod) {
		toSerialize["occurrencePeriod"] = o.OccurrencePeriod
	}
	if !IsNil(o.OccurrenceTiming) {
		toSerialize["occurrenceTiming"] = o.OccurrenceTiming
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.RequesterLinkId) {
		toSerialize["requesterLinkId"] = o.RequesterLinkId
	}
	if !IsNil(o.PerformerType) {
		toSerialize["performerType"] = o.PerformerType
	}
	if !IsNil(o.PerformerRole) {
		toSerialize["performerRole"] = o.PerformerRole
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.PerformerLinkId) {
		toSerialize["performerLinkId"] = o.PerformerLinkId
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ReasonLinkId) {
		toSerialize["reasonLinkId"] = o.ReasonLinkId
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.SecurityLabelNumber) {
		toSerialize["securityLabelNumber"] = o.SecurityLabelNumber
	}
	return toSerialize, nil
}

func (o *ContractAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"intent",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractAction := _ContractAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractAction)

	if err != nil {
		return err
	}

	*o = ContractAction(varContractAction)

	return err
}

type NullableContractAction struct {
	value *ContractAction
	isSet bool
}

func (v NullableContractAction) Get() *ContractAction {
	return v.value
}

func (v *NullableContractAction) Set(val *ContractAction) {
	v.value = val
	v.isSet = true
}

func (v NullableContractAction) IsSet() bool {
	return v.isSet
}

func (v *NullableContractAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractAction(val *ContractAction) *NullableContractAction {
	return &NullableContractAction{value: val, isSet: true}
}

func (v NullableContractAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


