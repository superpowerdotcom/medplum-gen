/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceUseStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceUseStatement{}

// DeviceUseStatement A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
type DeviceUseStatement struct {
	// This is a DeviceUseStatement resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An external identifier for this statement such as an IRI.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
	Status *string `json:"status,omitempty"`
	// The patient who used the device.
	Subject Reference `json:"subject"`
	// Allows linking the DeviceUseStatement to the underlying Request, or to other information that supports or is used to derive the DeviceUseStatement.
	DerivedFrom []Reference `json:"derivedFrom,omitempty"`
	// How often the device was used.
	TimingTiming *Timing `json:"timingTiming,omitempty"`
	// How often the device was used.
	TimingPeriod *Period `json:"timingPeriod,omitempty"`
	// How often the device was used.
	TimingDateTime *string `json:"timingDateTime,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	RecordedOn *string `json:"recordedOn,omitempty"`
	// Who reported the device was being used by the patient.
	Source *Reference `json:"source,omitempty"`
	// The details of the device used.
	Device Reference `json:"device"`
	// Reason or justification for the use of the device.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Indicates another resource whose existence justifies this DeviceUseStatement.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
	BodySite *CodeableConcept `json:"bodySite,omitempty"`
	// Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
	Note []Annotation `json:"note,omitempty"`
}

type _DeviceUseStatement DeviceUseStatement

// NewDeviceUseStatement instantiates a new DeviceUseStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUseStatement(resourceType string, subject Reference, device Reference) *DeviceUseStatement {
	this := DeviceUseStatement{}
	this.ResourceType = resourceType
	this.Subject = subject
	this.Device = device
	return &this
}

// NewDeviceUseStatementWithDefaults instantiates a new DeviceUseStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUseStatementWithDefaults() *DeviceUseStatement {
	this := DeviceUseStatement{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *DeviceUseStatement) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DeviceUseStatement) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceUseStatement) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DeviceUseStatement) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *DeviceUseStatement) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DeviceUseStatement) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *DeviceUseStatement) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *DeviceUseStatement) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceUseStatement) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceUseStatement) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *DeviceUseStatement) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *DeviceUseStatement) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceUseStatement) SetStatus(v string) {
	o.Status = &v
}

// GetSubject returns the Subject field value
func (o *DeviceUseStatement) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *DeviceUseStatement) SetSubject(v Reference) {
	o.Subject = v
}

// GetDerivedFrom returns the DerivedFrom field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetDerivedFrom() []Reference {
	if o == nil || IsNil(o.DerivedFrom) {
		var ret []Reference
		return ret
	}
	return o.DerivedFrom
}

// GetDerivedFromOk returns a tuple with the DerivedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetDerivedFromOk() ([]Reference, bool) {
	if o == nil || IsNil(o.DerivedFrom) {
		return nil, false
	}
	return o.DerivedFrom, true
}

// HasDerivedFrom returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasDerivedFrom() bool {
	if o != nil && !IsNil(o.DerivedFrom) {
		return true
	}

	return false
}

// SetDerivedFrom gets a reference to the given []Reference and assigns it to the DerivedFrom field.
func (o *DeviceUseStatement) SetDerivedFrom(v []Reference) {
	o.DerivedFrom = v
}

// GetTimingTiming returns the TimingTiming field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetTimingTiming() Timing {
	if o == nil || IsNil(o.TimingTiming) {
		var ret Timing
		return ret
	}
	return *o.TimingTiming
}

// GetTimingTimingOk returns a tuple with the TimingTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetTimingTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.TimingTiming) {
		return nil, false
	}
	return o.TimingTiming, true
}

// HasTimingTiming returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasTimingTiming() bool {
	if o != nil && !IsNil(o.TimingTiming) {
		return true
	}

	return false
}

// SetTimingTiming gets a reference to the given Timing and assigns it to the TimingTiming field.
func (o *DeviceUseStatement) SetTimingTiming(v Timing) {
	o.TimingTiming = &v
}

// GetTimingPeriod returns the TimingPeriod field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetTimingPeriod() Period {
	if o == nil || IsNil(o.TimingPeriod) {
		var ret Period
		return ret
	}
	return *o.TimingPeriod
}

// GetTimingPeriodOk returns a tuple with the TimingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetTimingPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.TimingPeriod) {
		return nil, false
	}
	return o.TimingPeriod, true
}

// HasTimingPeriod returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasTimingPeriod() bool {
	if o != nil && !IsNil(o.TimingPeriod) {
		return true
	}

	return false
}

// SetTimingPeriod gets a reference to the given Period and assigns it to the TimingPeriod field.
func (o *DeviceUseStatement) SetTimingPeriod(v Period) {
	o.TimingPeriod = &v
}

// GetTimingDateTime returns the TimingDateTime field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetTimingDateTime() string {
	if o == nil || IsNil(o.TimingDateTime) {
		var ret string
		return ret
	}
	return *o.TimingDateTime
}

// GetTimingDateTimeOk returns a tuple with the TimingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetTimingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDateTime) {
		return nil, false
	}
	return o.TimingDateTime, true
}

// HasTimingDateTime returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasTimingDateTime() bool {
	if o != nil && !IsNil(o.TimingDateTime) {
		return true
	}

	return false
}

// SetTimingDateTime gets a reference to the given string and assigns it to the TimingDateTime field.
func (o *DeviceUseStatement) SetTimingDateTime(v string) {
	o.TimingDateTime = &v
}

// GetRecordedOn returns the RecordedOn field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetRecordedOn() string {
	if o == nil || IsNil(o.RecordedOn) {
		var ret string
		return ret
	}
	return *o.RecordedOn
}

// GetRecordedOnOk returns a tuple with the RecordedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetRecordedOnOk() (*string, bool) {
	if o == nil || IsNil(o.RecordedOn) {
		return nil, false
	}
	return o.RecordedOn, true
}

// HasRecordedOn returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasRecordedOn() bool {
	if o != nil && !IsNil(o.RecordedOn) {
		return true
	}

	return false
}

// SetRecordedOn gets a reference to the given string and assigns it to the RecordedOn field.
func (o *DeviceUseStatement) SetRecordedOn(v string) {
	o.RecordedOn = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetSource() Reference {
	if o == nil || IsNil(o.Source) {
		var ret Reference
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetSourceOk() (*Reference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given Reference and assigns it to the Source field.
func (o *DeviceUseStatement) SetSource(v Reference) {
	o.Source = &v
}

// GetDevice returns the Device field value
func (o *DeviceUseStatement) GetDevice() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetDeviceOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *DeviceUseStatement) SetDevice(v Reference) {
	o.Device = v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *DeviceUseStatement) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *DeviceUseStatement) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetBodySite() CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret CodeableConcept
		return ret
	}
	return *o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetBodySiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given CodeableConcept and assigns it to the BodySite field.
func (o *DeviceUseStatement) SetBodySite(v CodeableConcept) {
	o.BodySite = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *DeviceUseStatement) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUseStatement) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *DeviceUseStatement) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *DeviceUseStatement) SetNote(v []Annotation) {
	o.Note = v
}

func (o DeviceUseStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceUseStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.DerivedFrom) {
		toSerialize["derivedFrom"] = o.DerivedFrom
	}
	if !IsNil(o.TimingTiming) {
		toSerialize["timingTiming"] = o.TimingTiming
	}
	if !IsNil(o.TimingPeriod) {
		toSerialize["timingPeriod"] = o.TimingPeriod
	}
	if !IsNil(o.TimingDateTime) {
		toSerialize["timingDateTime"] = o.TimingDateTime
	}
	if !IsNil(o.RecordedOn) {
		toSerialize["recordedOn"] = o.RecordedOn
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["device"] = o.Device
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *DeviceUseStatement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
		"device",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceUseStatement := _DeviceUseStatement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceUseStatement)

	if err != nil {
		return err
	}

	*o = DeviceUseStatement(varDeviceUseStatement)

	return err
}

type NullableDeviceUseStatement struct {
	value *DeviceUseStatement
	isSet bool
}

func (v NullableDeviceUseStatement) Get() *DeviceUseStatement {
	return v.value
}

func (v *NullableDeviceUseStatement) Set(val *DeviceUseStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUseStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUseStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUseStatement(val *DeviceUseStatement) *NullableDeviceUseStatement {
	return &NullableDeviceUseStatement{value: val, isSet: true}
}

func (v NullableDeviceUseStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUseStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


