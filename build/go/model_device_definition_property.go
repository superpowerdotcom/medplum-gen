/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceDefinitionProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDefinitionProperty{}

// DeviceDefinitionProperty The characteristics, operational status and capabilities of a medical-related component of a medical device.
type DeviceDefinitionProperty struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type CodeableConcept `json:"type"`
	// Property value as a quantity.
	ValueQuantity []Quantity `json:"valueQuantity,omitempty"`
	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []CodeableConcept `json:"valueCode,omitempty"`
}

type _DeviceDefinitionProperty DeviceDefinitionProperty

// NewDeviceDefinitionProperty instantiates a new DeviceDefinitionProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDefinitionProperty(type_ CodeableConcept) *DeviceDefinitionProperty {
	this := DeviceDefinitionProperty{}
	this.Type = type_
	return &this
}

// NewDeviceDefinitionPropertyWithDefaults instantiates a new DeviceDefinitionProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDefinitionPropertyWithDefaults() *DeviceDefinitionProperty {
	this := DeviceDefinitionProperty{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceDefinitionProperty) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceDefinitionProperty) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceDefinitionProperty) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceDefinitionProperty) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionProperty) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceDefinitionProperty) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceDefinitionProperty) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionProperty) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceDefinitionProperty) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value
func (o *DeviceDefinitionProperty) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeviceDefinitionProperty) SetType(v CodeableConcept) {
	o.Type = v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *DeviceDefinitionProperty) GetValueQuantity() []Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret []Quantity
		return ret
	}
	return o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetValueQuantityOk() ([]Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *DeviceDefinitionProperty) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given []Quantity and assigns it to the ValueQuantity field.
func (o *DeviceDefinitionProperty) SetValueQuantity(v []Quantity) {
	o.ValueQuantity = v
}

// GetValueCode returns the ValueCode field value if set, zero value otherwise.
func (o *DeviceDefinitionProperty) GetValueCode() []CodeableConcept {
	if o == nil || IsNil(o.ValueCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ValueCode
}

// GetValueCodeOk returns a tuple with the ValueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionProperty) GetValueCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCode) {
		return nil, false
	}
	return o.ValueCode, true
}

// HasValueCode returns a boolean if a field has been set.
func (o *DeviceDefinitionProperty) HasValueCode() bool {
	if o != nil && !IsNil(o.ValueCode) {
		return true
	}

	return false
}

// SetValueCode gets a reference to the given []CodeableConcept and assigns it to the ValueCode field.
func (o *DeviceDefinitionProperty) SetValueCode(v []CodeableConcept) {
	o.ValueCode = v
}

func (o DeviceDefinitionProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDefinitionProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueCode) {
		toSerialize["valueCode"] = o.ValueCode
	}
	return toSerialize, nil
}

func (o *DeviceDefinitionProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceDefinitionProperty := _DeviceDefinitionProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceDefinitionProperty)

	if err != nil {
		return err
	}

	*o = DeviceDefinitionProperty(varDeviceDefinitionProperty)

	return err
}

type NullableDeviceDefinitionProperty struct {
	value *DeviceDefinitionProperty
	isSet bool
}

func (v NullableDeviceDefinitionProperty) Get() *DeviceDefinitionProperty {
	return v.value
}

func (v *NullableDeviceDefinitionProperty) Set(val *DeviceDefinitionProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDefinitionProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDefinitionProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDefinitionProperty(val *DeviceDefinitionProperty) *NullableDeviceDefinitionProperty {
	return &NullableDeviceDefinitionProperty{value: val, isSet: true}
}

func (v NullableDeviceDefinitionProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDefinitionProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


