/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Population type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Population{}

// Population A populatioof people with some set of grouping criteria.
type Population struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The age of the specific population.
	AgeRange *Range `json:"ageRange,omitempty"`
	// The age of the specific population.
	AgeCodeableConcept *CodeableConcept `json:"ageCodeableConcept,omitempty"`
	// The gender of the specific population.
	Gender *CodeableConcept `json:"gender,omitempty"`
	// Race of the specific population.
	Race *CodeableConcept `json:"race,omitempty"`
	// The existing physiological conditions of the specific population to which this applies.
	PhysiologicalCondition *CodeableConcept `json:"physiologicalCondition,omitempty"`
}

// NewPopulation instantiates a new Population object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulation() *Population {
	this := Population{}
	return &this
}

// NewPopulationWithDefaults instantiates a new Population object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationWithDefaults() *Population {
	this := Population{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Population) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Population) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Population) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Population) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Population) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Population) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Population) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Population) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Population) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAgeRange returns the AgeRange field value if set, zero value otherwise.
func (o *Population) GetAgeRange() Range {
	if o == nil || IsNil(o.AgeRange) {
		var ret Range
		return ret
	}
	return *o.AgeRange
}

// GetAgeRangeOk returns a tuple with the AgeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetAgeRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.AgeRange) {
		return nil, false
	}
	return o.AgeRange, true
}

// HasAgeRange returns a boolean if a field has been set.
func (o *Population) HasAgeRange() bool {
	if o != nil && !IsNil(o.AgeRange) {
		return true
	}

	return false
}

// SetAgeRange gets a reference to the given Range and assigns it to the AgeRange field.
func (o *Population) SetAgeRange(v Range) {
	o.AgeRange = &v
}

// GetAgeCodeableConcept returns the AgeCodeableConcept field value if set, zero value otherwise.
func (o *Population) GetAgeCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.AgeCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.AgeCodeableConcept
}

// GetAgeCodeableConceptOk returns a tuple with the AgeCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetAgeCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AgeCodeableConcept) {
		return nil, false
	}
	return o.AgeCodeableConcept, true
}

// HasAgeCodeableConcept returns a boolean if a field has been set.
func (o *Population) HasAgeCodeableConcept() bool {
	if o != nil && !IsNil(o.AgeCodeableConcept) {
		return true
	}

	return false
}

// SetAgeCodeableConcept gets a reference to the given CodeableConcept and assigns it to the AgeCodeableConcept field.
func (o *Population) SetAgeCodeableConcept(v CodeableConcept) {
	o.AgeCodeableConcept = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *Population) GetGender() CodeableConcept {
	if o == nil || IsNil(o.Gender) {
		var ret CodeableConcept
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetGenderOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Population) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given CodeableConcept and assigns it to the Gender field.
func (o *Population) SetGender(v CodeableConcept) {
	o.Gender = &v
}

// GetRace returns the Race field value if set, zero value otherwise.
func (o *Population) GetRace() CodeableConcept {
	if o == nil || IsNil(o.Race) {
		var ret CodeableConcept
		return ret
	}
	return *o.Race
}

// GetRaceOk returns a tuple with the Race field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetRaceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Race) {
		return nil, false
	}
	return o.Race, true
}

// HasRace returns a boolean if a field has been set.
func (o *Population) HasRace() bool {
	if o != nil && !IsNil(o.Race) {
		return true
	}

	return false
}

// SetRace gets a reference to the given CodeableConcept and assigns it to the Race field.
func (o *Population) SetRace(v CodeableConcept) {
	o.Race = &v
}

// GetPhysiologicalCondition returns the PhysiologicalCondition field value if set, zero value otherwise.
func (o *Population) GetPhysiologicalCondition() CodeableConcept {
	if o == nil || IsNil(o.PhysiologicalCondition) {
		var ret CodeableConcept
		return ret
	}
	return *o.PhysiologicalCondition
}

// GetPhysiologicalConditionOk returns a tuple with the PhysiologicalCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Population) GetPhysiologicalConditionOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PhysiologicalCondition) {
		return nil, false
	}
	return o.PhysiologicalCondition, true
}

// HasPhysiologicalCondition returns a boolean if a field has been set.
func (o *Population) HasPhysiologicalCondition() bool {
	if o != nil && !IsNil(o.PhysiologicalCondition) {
		return true
	}

	return false
}

// SetPhysiologicalCondition gets a reference to the given CodeableConcept and assigns it to the PhysiologicalCondition field.
func (o *Population) SetPhysiologicalCondition(v CodeableConcept) {
	o.PhysiologicalCondition = &v
}

func (o Population) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Population) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.AgeRange) {
		toSerialize["ageRange"] = o.AgeRange
	}
	if !IsNil(o.AgeCodeableConcept) {
		toSerialize["ageCodeableConcept"] = o.AgeCodeableConcept
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Race) {
		toSerialize["race"] = o.Race
	}
	if !IsNil(o.PhysiologicalCondition) {
		toSerialize["physiologicalCondition"] = o.PhysiologicalCondition
	}
	return toSerialize, nil
}

type NullablePopulation struct {
	value *Population
	isSet bool
}

func (v NullablePopulation) Get() *Population {
	return v.value
}

func (v *NullablePopulation) Set(val *Population) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulation) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulation(val *Population) *NullablePopulation {
	return &NullablePopulation{value: val, isSet: true}
}

func (v NullablePopulation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


