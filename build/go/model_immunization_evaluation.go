/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImmunizationEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImmunizationEvaluation{}

// ImmunizationEvaluation Describes a comparison of an immunization event against published recommendations to determine if the administration is \"valid\" in relation to those  recommendations.
type ImmunizationEvaluation struct {
	// This is a ImmunizationEvaluation resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this immunization evaluation record.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// The individual for whom the evaluation is being done.
	Patient Reference `json:"patient"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// Indicates the authority who published the protocol (e.g. ACIP).
	Authority *Reference `json:"authority,omitempty"`
	// The vaccine preventable disease the dose is being evaluated against.
	TargetDisease CodeableConcept `json:"targetDisease"`
	// The vaccine administration event being evaluated.
	ImmunizationEvent Reference `json:"immunizationEvent"`
	// Indicates if the dose is valid or not valid with respect to the published recommendations.
	DoseStatus CodeableConcept `json:"doseStatus"`
	// Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
	DoseStatusReason []CodeableConcept `json:"doseStatusReason,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A sequence of Unicode characters
	Series *string `json:"series,omitempty"`
	// Nominal position in a series.
	DoseNumberPositiveInt *float32 `json:"doseNumberPositiveInt,omitempty"`
	// Nominal position in a series.
	DoseNumberString *string `json:"doseNumberString,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesPositiveInt *float32 `json:"seriesDosesPositiveInt,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesString *string `json:"seriesDosesString,omitempty"`
}

type _ImmunizationEvaluation ImmunizationEvaluation

// NewImmunizationEvaluation instantiates a new ImmunizationEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImmunizationEvaluation(resourceType string, patient Reference, targetDisease CodeableConcept, immunizationEvent Reference, doseStatus CodeableConcept) *ImmunizationEvaluation {
	this := ImmunizationEvaluation{}
	this.ResourceType = resourceType
	this.Patient = patient
	this.TargetDisease = targetDisease
	this.ImmunizationEvent = immunizationEvent
	this.DoseStatus = doseStatus
	return &this
}

// NewImmunizationEvaluationWithDefaults instantiates a new ImmunizationEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImmunizationEvaluationWithDefaults() *ImmunizationEvaluation {
	this := ImmunizationEvaluation{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ImmunizationEvaluation) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ImmunizationEvaluation) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImmunizationEvaluation) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ImmunizationEvaluation) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ImmunizationEvaluation) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ImmunizationEvaluation) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ImmunizationEvaluation) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ImmunizationEvaluation) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImmunizationEvaluation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImmunizationEvaluation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ImmunizationEvaluation) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ImmunizationEvaluation) SetStatus(v string) {
	o.Status = &v
}

// GetPatient returns the Patient field value
func (o *ImmunizationEvaluation) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *ImmunizationEvaluation) SetPatient(v Reference) {
	o.Patient = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ImmunizationEvaluation) SetDate(v string) {
	o.Date = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetAuthority() Reference {
	if o == nil || IsNil(o.Authority) {
		var ret Reference
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetAuthorityOk() (*Reference, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given Reference and assigns it to the Authority field.
func (o *ImmunizationEvaluation) SetAuthority(v Reference) {
	o.Authority = &v
}

// GetTargetDisease returns the TargetDisease field value
func (o *ImmunizationEvaluation) GetTargetDisease() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.TargetDisease
}

// GetTargetDiseaseOk returns a tuple with the TargetDisease field value
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetTargetDiseaseOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetDisease, true
}

// SetTargetDisease sets field value
func (o *ImmunizationEvaluation) SetTargetDisease(v CodeableConcept) {
	o.TargetDisease = v
}

// GetImmunizationEvent returns the ImmunizationEvent field value
func (o *ImmunizationEvaluation) GetImmunizationEvent() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.ImmunizationEvent
}

// GetImmunizationEventOk returns a tuple with the ImmunizationEvent field value
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetImmunizationEventOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImmunizationEvent, true
}

// SetImmunizationEvent sets field value
func (o *ImmunizationEvaluation) SetImmunizationEvent(v Reference) {
	o.ImmunizationEvent = v
}

// GetDoseStatus returns the DoseStatus field value
func (o *ImmunizationEvaluation) GetDoseStatus() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.DoseStatus
}

// GetDoseStatusOk returns a tuple with the DoseStatus field value
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDoseStatusOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoseStatus, true
}

// SetDoseStatus sets field value
func (o *ImmunizationEvaluation) SetDoseStatus(v CodeableConcept) {
	o.DoseStatus = v
}

// GetDoseStatusReason returns the DoseStatusReason field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetDoseStatusReason() []CodeableConcept {
	if o == nil || IsNil(o.DoseStatusReason) {
		var ret []CodeableConcept
		return ret
	}
	return o.DoseStatusReason
}

// GetDoseStatusReasonOk returns a tuple with the DoseStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDoseStatusReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.DoseStatusReason) {
		return nil, false
	}
	return o.DoseStatusReason, true
}

// HasDoseStatusReason returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasDoseStatusReason() bool {
	if o != nil && !IsNil(o.DoseStatusReason) {
		return true
	}

	return false
}

// SetDoseStatusReason gets a reference to the given []CodeableConcept and assigns it to the DoseStatusReason field.
func (o *ImmunizationEvaluation) SetDoseStatusReason(v []CodeableConcept) {
	o.DoseStatusReason = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImmunizationEvaluation) SetDescription(v string) {
	o.Description = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetSeries() string {
	if o == nil || IsNil(o.Series) {
		var ret string
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetSeriesOk() (*string, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given string and assigns it to the Series field.
func (o *ImmunizationEvaluation) SetSeries(v string) {
	o.Series = &v
}

// GetDoseNumberPositiveInt returns the DoseNumberPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetDoseNumberPositiveInt() float32 {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		var ret float32
		return ret
	}
	return *o.DoseNumberPositiveInt
}

// GetDoseNumberPositiveIntOk returns a tuple with the DoseNumberPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDoseNumberPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		return nil, false
	}
	return o.DoseNumberPositiveInt, true
}

// HasDoseNumberPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasDoseNumberPositiveInt() bool {
	if o != nil && !IsNil(o.DoseNumberPositiveInt) {
		return true
	}

	return false
}

// SetDoseNumberPositiveInt gets a reference to the given float32 and assigns it to the DoseNumberPositiveInt field.
func (o *ImmunizationEvaluation) SetDoseNumberPositiveInt(v float32) {
	o.DoseNumberPositiveInt = &v
}

// GetDoseNumberString returns the DoseNumberString field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetDoseNumberString() string {
	if o == nil || IsNil(o.DoseNumberString) {
		var ret string
		return ret
	}
	return *o.DoseNumberString
}

// GetDoseNumberStringOk returns a tuple with the DoseNumberString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetDoseNumberStringOk() (*string, bool) {
	if o == nil || IsNil(o.DoseNumberString) {
		return nil, false
	}
	return o.DoseNumberString, true
}

// HasDoseNumberString returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasDoseNumberString() bool {
	if o != nil && !IsNil(o.DoseNumberString) {
		return true
	}

	return false
}

// SetDoseNumberString gets a reference to the given string and assigns it to the DoseNumberString field.
func (o *ImmunizationEvaluation) SetDoseNumberString(v string) {
	o.DoseNumberString = &v
}

// GetSeriesDosesPositiveInt returns the SeriesDosesPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetSeriesDosesPositiveInt() float32 {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		var ret float32
		return ret
	}
	return *o.SeriesDosesPositiveInt
}

// GetSeriesDosesPositiveIntOk returns a tuple with the SeriesDosesPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetSeriesDosesPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		return nil, false
	}
	return o.SeriesDosesPositiveInt, true
}

// HasSeriesDosesPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasSeriesDosesPositiveInt() bool {
	if o != nil && !IsNil(o.SeriesDosesPositiveInt) {
		return true
	}

	return false
}

// SetSeriesDosesPositiveInt gets a reference to the given float32 and assigns it to the SeriesDosesPositiveInt field.
func (o *ImmunizationEvaluation) SetSeriesDosesPositiveInt(v float32) {
	o.SeriesDosesPositiveInt = &v
}

// GetSeriesDosesString returns the SeriesDosesString field value if set, zero value otherwise.
func (o *ImmunizationEvaluation) GetSeriesDosesString() string {
	if o == nil || IsNil(o.SeriesDosesString) {
		var ret string
		return ret
	}
	return *o.SeriesDosesString
}

// GetSeriesDosesStringOk returns a tuple with the SeriesDosesString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationEvaluation) GetSeriesDosesStringOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesDosesString) {
		return nil, false
	}
	return o.SeriesDosesString, true
}

// HasSeriesDosesString returns a boolean if a field has been set.
func (o *ImmunizationEvaluation) HasSeriesDosesString() bool {
	if o != nil && !IsNil(o.SeriesDosesString) {
		return true
	}

	return false
}

// SetSeriesDosesString gets a reference to the given string and assigns it to the SeriesDosesString field.
func (o *ImmunizationEvaluation) SetSeriesDosesString(v string) {
	o.SeriesDosesString = &v
}

func (o ImmunizationEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImmunizationEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	toSerialize["targetDisease"] = o.TargetDisease
	toSerialize["immunizationEvent"] = o.ImmunizationEvent
	toSerialize["doseStatus"] = o.DoseStatus
	if !IsNil(o.DoseStatusReason) {
		toSerialize["doseStatusReason"] = o.DoseStatusReason
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.DoseNumberPositiveInt) {
		toSerialize["doseNumberPositiveInt"] = o.DoseNumberPositiveInt
	}
	if !IsNil(o.DoseNumberString) {
		toSerialize["doseNumberString"] = o.DoseNumberString
	}
	if !IsNil(o.SeriesDosesPositiveInt) {
		toSerialize["seriesDosesPositiveInt"] = o.SeriesDosesPositiveInt
	}
	if !IsNil(o.SeriesDosesString) {
		toSerialize["seriesDosesString"] = o.SeriesDosesString
	}
	return toSerialize, nil
}

func (o *ImmunizationEvaluation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"patient",
		"targetDisease",
		"immunizationEvent",
		"doseStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImmunizationEvaluation := _ImmunizationEvaluation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImmunizationEvaluation)

	if err != nil {
		return err
	}

	*o = ImmunizationEvaluation(varImmunizationEvaluation)

	return err
}

type NullableImmunizationEvaluation struct {
	value *ImmunizationEvaluation
	isSet bool
}

func (v NullableImmunizationEvaluation) Get() *ImmunizationEvaluation {
	return v.value
}

func (v *NullableImmunizationEvaluation) Set(val *ImmunizationEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableImmunizationEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableImmunizationEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImmunizationEvaluation(val *ImmunizationEvaluation) *NullableImmunizationEvaluation {
	return &NullableImmunizationEvaluation{value: val, isSet: true}
}

func (v NullableImmunizationEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImmunizationEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


