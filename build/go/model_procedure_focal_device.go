/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProcedureFocalDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcedureFocalDevice{}

// ProcedureFocalDevice An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
type ProcedureFocalDevice struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The kind of change that happened to the device during the procedure.
	Action *CodeableConcept `json:"action,omitempty"`
	// The device that was manipulated (changed) during the procedure.
	Manipulated Reference `json:"manipulated"`
}

type _ProcedureFocalDevice ProcedureFocalDevice

// NewProcedureFocalDevice instantiates a new ProcedureFocalDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcedureFocalDevice(manipulated Reference) *ProcedureFocalDevice {
	this := ProcedureFocalDevice{}
	this.Manipulated = manipulated
	return &this
}

// NewProcedureFocalDeviceWithDefaults instantiates a new ProcedureFocalDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcedureFocalDeviceWithDefaults() *ProcedureFocalDevice {
	this := ProcedureFocalDevice{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProcedureFocalDevice) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcedureFocalDevice) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProcedureFocalDevice) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProcedureFocalDevice) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ProcedureFocalDevice) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcedureFocalDevice) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ProcedureFocalDevice) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ProcedureFocalDevice) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ProcedureFocalDevice) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcedureFocalDevice) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ProcedureFocalDevice) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ProcedureFocalDevice) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ProcedureFocalDevice) GetAction() CodeableConcept {
	if o == nil || IsNil(o.Action) {
		var ret CodeableConcept
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcedureFocalDevice) GetActionOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ProcedureFocalDevice) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given CodeableConcept and assigns it to the Action field.
func (o *ProcedureFocalDevice) SetAction(v CodeableConcept) {
	o.Action = &v
}

// GetManipulated returns the Manipulated field value
func (o *ProcedureFocalDevice) GetManipulated() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Manipulated
}

// GetManipulatedOk returns a tuple with the Manipulated field value
// and a boolean to check if the value has been set.
func (o *ProcedureFocalDevice) GetManipulatedOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manipulated, true
}

// SetManipulated sets field value
func (o *ProcedureFocalDevice) SetManipulated(v Reference) {
	o.Manipulated = v
}

func (o ProcedureFocalDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcedureFocalDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["manipulated"] = o.Manipulated
	return toSerialize, nil
}

func (o *ProcedureFocalDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manipulated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcedureFocalDevice := _ProcedureFocalDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcedureFocalDevice)

	if err != nil {
		return err
	}

	*o = ProcedureFocalDevice(varProcedureFocalDevice)

	return err
}

type NullableProcedureFocalDevice struct {
	value *ProcedureFocalDevice
	isSet bool
}

func (v NullableProcedureFocalDevice) Get() *ProcedureFocalDevice {
	return v.value
}

func (v *NullableProcedureFocalDevice) Set(val *ProcedureFocalDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableProcedureFocalDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableProcedureFocalDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcedureFocalDevice(val *ProcedureFocalDevice) *NullableProcedureFocalDevice {
	return &NullableProcedureFocalDevice{value: val, isSet: true}
}

func (v NullableProcedureFocalDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcedureFocalDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


