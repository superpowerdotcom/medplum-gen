/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MeasureReportGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasureReportGroup{}

// MeasureReportGroup The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
type MeasureReportGroup struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The meaning of the population group as defined in the measure definition.
	Code *CodeableConcept `json:"code,omitempty"`
	// The populations that make up the population group, one for each type of population appropriate for the measure.
	Population []MeasureReportPopulation `json:"population,omitempty"`
	// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
	MeasureScore *Quantity `json:"measureScore,omitempty"`
	// When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
	Stratifier []MeasureReportStratifier `json:"stratifier,omitempty"`
}

// NewMeasureReportGroup instantiates a new MeasureReportGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasureReportGroup() *MeasureReportGroup {
	this := MeasureReportGroup{}
	return &this
}

// NewMeasureReportGroupWithDefaults instantiates a new MeasureReportGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasureReportGroupWithDefaults() *MeasureReportGroup {
	this := MeasureReportGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeasureReportGroup) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MeasureReportGroup) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MeasureReportGroup) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *MeasureReportGroup) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetPopulation returns the Population field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetPopulation() []MeasureReportPopulation {
	if o == nil || IsNil(o.Population) {
		var ret []MeasureReportPopulation
		return ret
	}
	return o.Population
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetPopulationOk() ([]MeasureReportPopulation, bool) {
	if o == nil || IsNil(o.Population) {
		return nil, false
	}
	return o.Population, true
}

// HasPopulation returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasPopulation() bool {
	if o != nil && !IsNil(o.Population) {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given []MeasureReportPopulation and assigns it to the Population field.
func (o *MeasureReportGroup) SetPopulation(v []MeasureReportPopulation) {
	o.Population = v
}

// GetMeasureScore returns the MeasureScore field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetMeasureScore() Quantity {
	if o == nil || IsNil(o.MeasureScore) {
		var ret Quantity
		return ret
	}
	return *o.MeasureScore
}

// GetMeasureScoreOk returns a tuple with the MeasureScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetMeasureScoreOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MeasureScore) {
		return nil, false
	}
	return o.MeasureScore, true
}

// HasMeasureScore returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasMeasureScore() bool {
	if o != nil && !IsNil(o.MeasureScore) {
		return true
	}

	return false
}

// SetMeasureScore gets a reference to the given Quantity and assigns it to the MeasureScore field.
func (o *MeasureReportGroup) SetMeasureScore(v Quantity) {
	o.MeasureScore = &v
}

// GetStratifier returns the Stratifier field value if set, zero value otherwise.
func (o *MeasureReportGroup) GetStratifier() []MeasureReportStratifier {
	if o == nil || IsNil(o.Stratifier) {
		var ret []MeasureReportStratifier
		return ret
	}
	return o.Stratifier
}

// GetStratifierOk returns a tuple with the Stratifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportGroup) GetStratifierOk() ([]MeasureReportStratifier, bool) {
	if o == nil || IsNil(o.Stratifier) {
		return nil, false
	}
	return o.Stratifier, true
}

// HasStratifier returns a boolean if a field has been set.
func (o *MeasureReportGroup) HasStratifier() bool {
	if o != nil && !IsNil(o.Stratifier) {
		return true
	}

	return false
}

// SetStratifier gets a reference to the given []MeasureReportStratifier and assigns it to the Stratifier field.
func (o *MeasureReportGroup) SetStratifier(v []MeasureReportStratifier) {
	o.Stratifier = v
}

func (o MeasureReportGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasureReportGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Population) {
		toSerialize["population"] = o.Population
	}
	if !IsNil(o.MeasureScore) {
		toSerialize["measureScore"] = o.MeasureScore
	}
	if !IsNil(o.Stratifier) {
		toSerialize["stratifier"] = o.Stratifier
	}
	return toSerialize, nil
}

type NullableMeasureReportGroup struct {
	value *MeasureReportGroup
	isSet bool
}

func (v NullableMeasureReportGroup) Get() *MeasureReportGroup {
	return v.value
}

func (v *NullableMeasureReportGroup) Set(val *MeasureReportGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasureReportGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasureReportGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasureReportGroup(val *MeasureReportGroup) *NullableMeasureReportGroup {
	return &NullableMeasureReportGroup{value: val, isSet: true}
}

func (v NullableMeasureReportGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasureReportGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


