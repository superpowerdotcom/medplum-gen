/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageHeader{}

// MessageHeader The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
type MessageHeader struct {
	// This is a MessageHeader resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the EventDefinition.
	EventCoding *Coding `json:"eventCoding,omitempty"`
	// Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the EventDefinition.
	EventUri *string `json:"eventUri,omitempty"`
	// The destination application which the message is intended for.
	Destination []MessageHeaderDestination `json:"destination,omitempty"`
	// Identifies the sending system to allow the use of a trust relationship.
	Sender *Reference `json:"sender,omitempty"`
	// The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
	Enterer *Reference `json:"enterer,omitempty"`
	// The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
	Author *Reference `json:"author,omitempty"`
	// The source application from which this message originated.
	Source MessageHeaderSource `json:"source"`
	// The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
	Responsible *Reference `json:"responsible,omitempty"`
	// Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
	Reason *CodeableConcept `json:"reason,omitempty"`
	// Information about the message that this message is a response to.  Only present if this message is a response.
	Response *MessageHeaderResponse `json:"response,omitempty"`
	// The actual data of the message - a reference to the root/focus class of the event.
	Focus []Reference `json:"focus,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Definition *string `json:"definition,omitempty"`
}

type _MessageHeader MessageHeader

// NewMessageHeader instantiates a new MessageHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageHeader(resourceType string, source MessageHeaderSource) *MessageHeader {
	this := MessageHeader{}
	this.ResourceType = resourceType
	this.Source = source
	return &this
}

// NewMessageHeaderWithDefaults instantiates a new MessageHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageHeaderWithDefaults() *MessageHeader {
	this := MessageHeader{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MessageHeader) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MessageHeader) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MessageHeader) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MessageHeader) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MessageHeader) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MessageHeader) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MessageHeader) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MessageHeader) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MessageHeader) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MessageHeader) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MessageHeader) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MessageHeader) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MessageHeader) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MessageHeader) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MessageHeader) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MessageHeader) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MessageHeader) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MessageHeader) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MessageHeader) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MessageHeader) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MessageHeader) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MessageHeader) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MessageHeader) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MessageHeader) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MessageHeader) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MessageHeader) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetEventCoding returns the EventCoding field value if set, zero value otherwise.
func (o *MessageHeader) GetEventCoding() Coding {
	if o == nil || IsNil(o.EventCoding) {
		var ret Coding
		return ret
	}
	return *o.EventCoding
}

// GetEventCodingOk returns a tuple with the EventCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetEventCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.EventCoding) {
		return nil, false
	}
	return o.EventCoding, true
}

// HasEventCoding returns a boolean if a field has been set.
func (o *MessageHeader) HasEventCoding() bool {
	if o != nil && !IsNil(o.EventCoding) {
		return true
	}

	return false
}

// SetEventCoding gets a reference to the given Coding and assigns it to the EventCoding field.
func (o *MessageHeader) SetEventCoding(v Coding) {
	o.EventCoding = &v
}

// GetEventUri returns the EventUri field value if set, zero value otherwise.
func (o *MessageHeader) GetEventUri() string {
	if o == nil || IsNil(o.EventUri) {
		var ret string
		return ret
	}
	return *o.EventUri
}

// GetEventUriOk returns a tuple with the EventUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetEventUriOk() (*string, bool) {
	if o == nil || IsNil(o.EventUri) {
		return nil, false
	}
	return o.EventUri, true
}

// HasEventUri returns a boolean if a field has been set.
func (o *MessageHeader) HasEventUri() bool {
	if o != nil && !IsNil(o.EventUri) {
		return true
	}

	return false
}

// SetEventUri gets a reference to the given string and assigns it to the EventUri field.
func (o *MessageHeader) SetEventUri(v string) {
	o.EventUri = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *MessageHeader) GetDestination() []MessageHeaderDestination {
	if o == nil || IsNil(o.Destination) {
		var ret []MessageHeaderDestination
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetDestinationOk() ([]MessageHeaderDestination, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *MessageHeader) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []MessageHeaderDestination and assigns it to the Destination field.
func (o *MessageHeader) SetDestination(v []MessageHeaderDestination) {
	o.Destination = v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *MessageHeader) GetSender() Reference {
	if o == nil || IsNil(o.Sender) {
		var ret Reference
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetSenderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *MessageHeader) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given Reference and assigns it to the Sender field.
func (o *MessageHeader) SetSender(v Reference) {
	o.Sender = &v
}

// GetEnterer returns the Enterer field value if set, zero value otherwise.
func (o *MessageHeader) GetEnterer() Reference {
	if o == nil || IsNil(o.Enterer) {
		var ret Reference
		return ret
	}
	return *o.Enterer
}

// GetEntererOk returns a tuple with the Enterer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetEntererOk() (*Reference, bool) {
	if o == nil || IsNil(o.Enterer) {
		return nil, false
	}
	return o.Enterer, true
}

// HasEnterer returns a boolean if a field has been set.
func (o *MessageHeader) HasEnterer() bool {
	if o != nil && !IsNil(o.Enterer) {
		return true
	}

	return false
}

// SetEnterer gets a reference to the given Reference and assigns it to the Enterer field.
func (o *MessageHeader) SetEnterer(v Reference) {
	o.Enterer = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *MessageHeader) GetAuthor() Reference {
	if o == nil || IsNil(o.Author) {
		var ret Reference
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetAuthorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *MessageHeader) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Reference and assigns it to the Author field.
func (o *MessageHeader) SetAuthor(v Reference) {
	o.Author = &v
}

// GetSource returns the Source field value
func (o *MessageHeader) GetSource() MessageHeaderSource {
	if o == nil {
		var ret MessageHeaderSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetSourceOk() (*MessageHeaderSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *MessageHeader) SetSource(v MessageHeaderSource) {
	o.Source = v
}

// GetResponsible returns the Responsible field value if set, zero value otherwise.
func (o *MessageHeader) GetResponsible() Reference {
	if o == nil || IsNil(o.Responsible) {
		var ret Reference
		return ret
	}
	return *o.Responsible
}

// GetResponsibleOk returns a tuple with the Responsible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetResponsibleOk() (*Reference, bool) {
	if o == nil || IsNil(o.Responsible) {
		return nil, false
	}
	return o.Responsible, true
}

// HasResponsible returns a boolean if a field has been set.
func (o *MessageHeader) HasResponsible() bool {
	if o != nil && !IsNil(o.Responsible) {
		return true
	}

	return false
}

// SetResponsible gets a reference to the given Reference and assigns it to the Responsible field.
func (o *MessageHeader) SetResponsible(v Reference) {
	o.Responsible = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MessageHeader) GetReason() CodeableConcept {
	if o == nil || IsNil(o.Reason) {
		var ret CodeableConcept
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MessageHeader) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CodeableConcept and assigns it to the Reason field.
func (o *MessageHeader) SetReason(v CodeableConcept) {
	o.Reason = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *MessageHeader) GetResponse() MessageHeaderResponse {
	if o == nil || IsNil(o.Response) {
		var ret MessageHeaderResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetResponseOk() (*MessageHeaderResponse, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *MessageHeader) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given MessageHeaderResponse and assigns it to the Response field.
func (o *MessageHeader) SetResponse(v MessageHeaderResponse) {
	o.Response = &v
}

// GetFocus returns the Focus field value if set, zero value otherwise.
func (o *MessageHeader) GetFocus() []Reference {
	if o == nil || IsNil(o.Focus) {
		var ret []Reference
		return ret
	}
	return o.Focus
}

// GetFocusOk returns a tuple with the Focus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetFocusOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Focus) {
		return nil, false
	}
	return o.Focus, true
}

// HasFocus returns a boolean if a field has been set.
func (o *MessageHeader) HasFocus() bool {
	if o != nil && !IsNil(o.Focus) {
		return true
	}

	return false
}

// SetFocus gets a reference to the given []Reference and assigns it to the Focus field.
func (o *MessageHeader) SetFocus(v []Reference) {
	o.Focus = v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *MessageHeader) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageHeader) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *MessageHeader) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *MessageHeader) SetDefinition(v string) {
	o.Definition = &v
}

func (o MessageHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.EventCoding) {
		toSerialize["eventCoding"] = o.EventCoding
	}
	if !IsNil(o.EventUri) {
		toSerialize["eventUri"] = o.EventUri
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.Enterer) {
		toSerialize["enterer"] = o.Enterer
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.Responsible) {
		toSerialize["responsible"] = o.Responsible
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Focus) {
		toSerialize["focus"] = o.Focus
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	return toSerialize, nil
}

func (o *MessageHeader) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageHeader := _MessageHeader{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageHeader)

	if err != nil {
		return err
	}

	*o = MessageHeader(varMessageHeader)

	return err
}

type NullableMessageHeader struct {
	value *MessageHeader
	isSet bool
}

func (v NullableMessageHeader) Get() *MessageHeader {
	return v.value
}

func (v *NullableMessageHeader) Set(val *MessageHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageHeader(val *MessageHeader) *NullableMessageHeader {
	return &NullableMessageHeader{value: val, isSet: true}
}

func (v NullableMessageHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


