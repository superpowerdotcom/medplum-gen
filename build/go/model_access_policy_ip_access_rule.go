/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessPolicyIpAccessRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPolicyIpAccessRule{}

// AccessPolicyIpAccessRule Use IP Access Rules to allowlist, block, and challenge traffic based on the visitor IP address.
type AccessPolicyIpAccessRule struct {
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Value string `json:"value"`
	// Access rule can perform one of the following actions: \"allow\" | \"block\".
	Action string `json:"action"`
	AdditionalProperties map[string]interface{}
}

type _AccessPolicyIpAccessRule AccessPolicyIpAccessRule

// NewAccessPolicyIpAccessRule instantiates a new AccessPolicyIpAccessRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPolicyIpAccessRule(value string, action string) *AccessPolicyIpAccessRule {
	this := AccessPolicyIpAccessRule{}
	this.Value = value
	this.Action = action
	return &this
}

// NewAccessPolicyIpAccessRuleWithDefaults instantiates a new AccessPolicyIpAccessRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPolicyIpAccessRuleWithDefaults() *AccessPolicyIpAccessRule {
	this := AccessPolicyIpAccessRule{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessPolicyIpAccessRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyIpAccessRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessPolicyIpAccessRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessPolicyIpAccessRule) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value
func (o *AccessPolicyIpAccessRule) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AccessPolicyIpAccessRule) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AccessPolicyIpAccessRule) SetValue(v string) {
	o.Value = v
}

// GetAction returns the Action field value
func (o *AccessPolicyIpAccessRule) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AccessPolicyIpAccessRule) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AccessPolicyIpAccessRule) SetAction(v string) {
	o.Action = v
}

func (o AccessPolicyIpAccessRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPolicyIpAccessRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["value"] = o.Value
	toSerialize["action"] = o.Action

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessPolicyIpAccessRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessPolicyIpAccessRule := _AccessPolicyIpAccessRule{}

	err = json.Unmarshal(data, &varAccessPolicyIpAccessRule)

	if err != nil {
		return err
	}

	*o = AccessPolicyIpAccessRule(varAccessPolicyIpAccessRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessPolicyIpAccessRule struct {
	value *AccessPolicyIpAccessRule
	isSet bool
}

func (v NullableAccessPolicyIpAccessRule) Get() *AccessPolicyIpAccessRule {
	return v.value
}

func (v *NullableAccessPolicyIpAccessRule) Set(val *AccessPolicyIpAccessRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPolicyIpAccessRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPolicyIpAccessRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPolicyIpAccessRule(val *AccessPolicyIpAccessRule) *NullableAccessPolicyIpAccessRule {
	return &NullableAccessPolicyIpAccessRule{value: val, isSet: true}
}

func (v NullableAccessPolicyIpAccessRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPolicyIpAccessRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


