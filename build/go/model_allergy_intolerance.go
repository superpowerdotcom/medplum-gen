/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AllergyIntolerance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllergyIntolerance{}

// AllergyIntolerance Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type AllergyIntolerance struct {
	// This is a AllergyIntolerance resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The clinical status of the allergy or intolerance.
	ClinicalStatus *CodeableConcept `json:"clinicalStatus,omitempty"`
	// Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
	VerificationStatus *CodeableConcept `json:"verificationStatus,omitempty"`
	// Identification of the underlying physiological mechanism for the reaction risk.
	Type *string `json:"type,omitempty"`
	// Category of the identified substance.
	Category []string `json:"category,omitempty"`
	// Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
	Criticality *string `json:"criticality,omitempty"`
	// Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., \"Latex\"), an allergy or intolerance condition (e.g., \"Latex allergy\"), or a negated/excluded code for a specific substance or class (e.g., \"No latex allergy\") or a general or categorical negated statement (e.g.,  \"No known allergy\", \"No known drug allergies\").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Code *CodeableConcept `json:"code,omitempty"`
	// The patient who has the allergy or intolerance.
	Patient Reference `json:"patient"`
	// The encounter when the allergy or intolerance was asserted.
	Encounter *Reference `json:"encounter,omitempty"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetDateTime *string `json:"onsetDateTime,omitempty"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetAge *Age `json:"onsetAge,omitempty"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetPeriod *Period `json:"onsetPeriod,omitempty"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetRange *Range `json:"onsetRange,omitempty"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetString *string `json:"onsetString,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	RecordedDate *string `json:"recordedDate,omitempty"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *Reference `json:"recorder,omitempty"`
	// The source of the information about the allergy that is recorded.
	Asserter *Reference `json:"asserter,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	LastOccurrence *string `json:"lastOccurrence,omitempty"`
	// Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
	Note []Annotation `json:"note,omitempty"`
	// Details about each adverse reaction event linked to exposure to the identified substance.
	Reaction []AllergyIntoleranceReaction `json:"reaction,omitempty"`
}

type _AllergyIntolerance AllergyIntolerance

// NewAllergyIntolerance instantiates a new AllergyIntolerance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllergyIntolerance(resourceType string, patient Reference) *AllergyIntolerance {
	this := AllergyIntolerance{}
	this.ResourceType = resourceType
	this.Patient = patient
	return &this
}

// NewAllergyIntoleranceWithDefaults instantiates a new AllergyIntolerance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllergyIntoleranceWithDefaults() *AllergyIntolerance {
	this := AllergyIntolerance{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *AllergyIntolerance) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *AllergyIntolerance) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AllergyIntolerance) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *AllergyIntolerance) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *AllergyIntolerance) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AllergyIntolerance) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *AllergyIntolerance) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *AllergyIntolerance) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *AllergyIntolerance) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *AllergyIntolerance) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *AllergyIntolerance) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetClinicalStatus returns the ClinicalStatus field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetClinicalStatus() CodeableConcept {
	if o == nil || IsNil(o.ClinicalStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.ClinicalStatus
}

// GetClinicalStatusOk returns a tuple with the ClinicalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetClinicalStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ClinicalStatus) {
		return nil, false
	}
	return o.ClinicalStatus, true
}

// HasClinicalStatus returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasClinicalStatus() bool {
	if o != nil && !IsNil(o.ClinicalStatus) {
		return true
	}

	return false
}

// SetClinicalStatus gets a reference to the given CodeableConcept and assigns it to the ClinicalStatus field.
func (o *AllergyIntolerance) SetClinicalStatus(v CodeableConcept) {
	o.ClinicalStatus = &v
}

// GetVerificationStatus returns the VerificationStatus field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetVerificationStatus() CodeableConcept {
	if o == nil || IsNil(o.VerificationStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.VerificationStatus
}

// GetVerificationStatusOk returns a tuple with the VerificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetVerificationStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.VerificationStatus) {
		return nil, false
	}
	return o.VerificationStatus, true
}

// HasVerificationStatus returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasVerificationStatus() bool {
	if o != nil && !IsNil(o.VerificationStatus) {
		return true
	}

	return false
}

// SetVerificationStatus gets a reference to the given CodeableConcept and assigns it to the VerificationStatus field.
func (o *AllergyIntolerance) SetVerificationStatus(v CodeableConcept) {
	o.VerificationStatus = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AllergyIntolerance) SetType(v string) {
	o.Type = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *AllergyIntolerance) SetCategory(v []string) {
	o.Category = v
}

// GetCriticality returns the Criticality field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetCriticality() string {
	if o == nil || IsNil(o.Criticality) {
		var ret string
		return ret
	}
	return *o.Criticality
}

// GetCriticalityOk returns a tuple with the Criticality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetCriticalityOk() (*string, bool) {
	if o == nil || IsNil(o.Criticality) {
		return nil, false
	}
	return o.Criticality, true
}

// HasCriticality returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasCriticality() bool {
	if o != nil && !IsNil(o.Criticality) {
		return true
	}

	return false
}

// SetCriticality gets a reference to the given string and assigns it to the Criticality field.
func (o *AllergyIntolerance) SetCriticality(v string) {
	o.Criticality = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *AllergyIntolerance) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetPatient returns the Patient field value
func (o *AllergyIntolerance) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *AllergyIntolerance) SetPatient(v Reference) {
	o.Patient = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *AllergyIntolerance) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetOnsetDateTime returns the OnsetDateTime field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetOnsetDateTime() string {
	if o == nil || IsNil(o.OnsetDateTime) {
		var ret string
		return ret
	}
	return *o.OnsetDateTime
}

// GetOnsetDateTimeOk returns a tuple with the OnsetDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetOnsetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OnsetDateTime) {
		return nil, false
	}
	return o.OnsetDateTime, true
}

// HasOnsetDateTime returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasOnsetDateTime() bool {
	if o != nil && !IsNil(o.OnsetDateTime) {
		return true
	}

	return false
}

// SetOnsetDateTime gets a reference to the given string and assigns it to the OnsetDateTime field.
func (o *AllergyIntolerance) SetOnsetDateTime(v string) {
	o.OnsetDateTime = &v
}

// GetOnsetAge returns the OnsetAge field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetOnsetAge() Age {
	if o == nil || IsNil(o.OnsetAge) {
		var ret Age
		return ret
	}
	return *o.OnsetAge
}

// GetOnsetAgeOk returns a tuple with the OnsetAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetOnsetAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.OnsetAge) {
		return nil, false
	}
	return o.OnsetAge, true
}

// HasOnsetAge returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasOnsetAge() bool {
	if o != nil && !IsNil(o.OnsetAge) {
		return true
	}

	return false
}

// SetOnsetAge gets a reference to the given Age and assigns it to the OnsetAge field.
func (o *AllergyIntolerance) SetOnsetAge(v Age) {
	o.OnsetAge = &v
}

// GetOnsetPeriod returns the OnsetPeriod field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetOnsetPeriod() Period {
	if o == nil || IsNil(o.OnsetPeriod) {
		var ret Period
		return ret
	}
	return *o.OnsetPeriod
}

// GetOnsetPeriodOk returns a tuple with the OnsetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetOnsetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OnsetPeriod) {
		return nil, false
	}
	return o.OnsetPeriod, true
}

// HasOnsetPeriod returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasOnsetPeriod() bool {
	if o != nil && !IsNil(o.OnsetPeriod) {
		return true
	}

	return false
}

// SetOnsetPeriod gets a reference to the given Period and assigns it to the OnsetPeriod field.
func (o *AllergyIntolerance) SetOnsetPeriod(v Period) {
	o.OnsetPeriod = &v
}

// GetOnsetRange returns the OnsetRange field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetOnsetRange() Range {
	if o == nil || IsNil(o.OnsetRange) {
		var ret Range
		return ret
	}
	return *o.OnsetRange
}

// GetOnsetRangeOk returns a tuple with the OnsetRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetOnsetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.OnsetRange) {
		return nil, false
	}
	return o.OnsetRange, true
}

// HasOnsetRange returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasOnsetRange() bool {
	if o != nil && !IsNil(o.OnsetRange) {
		return true
	}

	return false
}

// SetOnsetRange gets a reference to the given Range and assigns it to the OnsetRange field.
func (o *AllergyIntolerance) SetOnsetRange(v Range) {
	o.OnsetRange = &v
}

// GetOnsetString returns the OnsetString field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetOnsetString() string {
	if o == nil || IsNil(o.OnsetString) {
		var ret string
		return ret
	}
	return *o.OnsetString
}

// GetOnsetStringOk returns a tuple with the OnsetString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetOnsetStringOk() (*string, bool) {
	if o == nil || IsNil(o.OnsetString) {
		return nil, false
	}
	return o.OnsetString, true
}

// HasOnsetString returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasOnsetString() bool {
	if o != nil && !IsNil(o.OnsetString) {
		return true
	}

	return false
}

// SetOnsetString gets a reference to the given string and assigns it to the OnsetString field.
func (o *AllergyIntolerance) SetOnsetString(v string) {
	o.OnsetString = &v
}

// GetRecordedDate returns the RecordedDate field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetRecordedDate() string {
	if o == nil || IsNil(o.RecordedDate) {
		var ret string
		return ret
	}
	return *o.RecordedDate
}

// GetRecordedDateOk returns a tuple with the RecordedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetRecordedDateOk() (*string, bool) {
	if o == nil || IsNil(o.RecordedDate) {
		return nil, false
	}
	return o.RecordedDate, true
}

// HasRecordedDate returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasRecordedDate() bool {
	if o != nil && !IsNil(o.RecordedDate) {
		return true
	}

	return false
}

// SetRecordedDate gets a reference to the given string and assigns it to the RecordedDate field.
func (o *AllergyIntolerance) SetRecordedDate(v string) {
	o.RecordedDate = &v
}

// GetRecorder returns the Recorder field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetRecorder() Reference {
	if o == nil || IsNil(o.Recorder) {
		var ret Reference
		return ret
	}
	return *o.Recorder
}

// GetRecorderOk returns a tuple with the Recorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetRecorderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Recorder) {
		return nil, false
	}
	return o.Recorder, true
}

// HasRecorder returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasRecorder() bool {
	if o != nil && !IsNil(o.Recorder) {
		return true
	}

	return false
}

// SetRecorder gets a reference to the given Reference and assigns it to the Recorder field.
func (o *AllergyIntolerance) SetRecorder(v Reference) {
	o.Recorder = &v
}

// GetAsserter returns the Asserter field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetAsserter() Reference {
	if o == nil || IsNil(o.Asserter) {
		var ret Reference
		return ret
	}
	return *o.Asserter
}

// GetAsserterOk returns a tuple with the Asserter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetAsserterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Asserter) {
		return nil, false
	}
	return o.Asserter, true
}

// HasAsserter returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasAsserter() bool {
	if o != nil && !IsNil(o.Asserter) {
		return true
	}

	return false
}

// SetAsserter gets a reference to the given Reference and assigns it to the Asserter field.
func (o *AllergyIntolerance) SetAsserter(v Reference) {
	o.Asserter = &v
}

// GetLastOccurrence returns the LastOccurrence field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetLastOccurrence() string {
	if o == nil || IsNil(o.LastOccurrence) {
		var ret string
		return ret
	}
	return *o.LastOccurrence
}

// GetLastOccurrenceOk returns a tuple with the LastOccurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetLastOccurrenceOk() (*string, bool) {
	if o == nil || IsNil(o.LastOccurrence) {
		return nil, false
	}
	return o.LastOccurrence, true
}

// HasLastOccurrence returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasLastOccurrence() bool {
	if o != nil && !IsNil(o.LastOccurrence) {
		return true
	}

	return false
}

// SetLastOccurrence gets a reference to the given string and assigns it to the LastOccurrence field.
func (o *AllergyIntolerance) SetLastOccurrence(v string) {
	o.LastOccurrence = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *AllergyIntolerance) SetNote(v []Annotation) {
	o.Note = v
}

// GetReaction returns the Reaction field value if set, zero value otherwise.
func (o *AllergyIntolerance) GetReaction() []AllergyIntoleranceReaction {
	if o == nil || IsNil(o.Reaction) {
		var ret []AllergyIntoleranceReaction
		return ret
	}
	return o.Reaction
}

// GetReactionOk returns a tuple with the Reaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntolerance) GetReactionOk() ([]AllergyIntoleranceReaction, bool) {
	if o == nil || IsNil(o.Reaction) {
		return nil, false
	}
	return o.Reaction, true
}

// HasReaction returns a boolean if a field has been set.
func (o *AllergyIntolerance) HasReaction() bool {
	if o != nil && !IsNil(o.Reaction) {
		return true
	}

	return false
}

// SetReaction gets a reference to the given []AllergyIntoleranceReaction and assigns it to the Reaction field.
func (o *AllergyIntolerance) SetReaction(v []AllergyIntoleranceReaction) {
	o.Reaction = v
}

func (o AllergyIntolerance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllergyIntolerance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ClinicalStatus) {
		toSerialize["clinicalStatus"] = o.ClinicalStatus
	}
	if !IsNil(o.VerificationStatus) {
		toSerialize["verificationStatus"] = o.VerificationStatus
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Criticality) {
		toSerialize["criticality"] = o.Criticality
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.OnsetDateTime) {
		toSerialize["onsetDateTime"] = o.OnsetDateTime
	}
	if !IsNil(o.OnsetAge) {
		toSerialize["onsetAge"] = o.OnsetAge
	}
	if !IsNil(o.OnsetPeriod) {
		toSerialize["onsetPeriod"] = o.OnsetPeriod
	}
	if !IsNil(o.OnsetRange) {
		toSerialize["onsetRange"] = o.OnsetRange
	}
	if !IsNil(o.OnsetString) {
		toSerialize["onsetString"] = o.OnsetString
	}
	if !IsNil(o.RecordedDate) {
		toSerialize["recordedDate"] = o.RecordedDate
	}
	if !IsNil(o.Recorder) {
		toSerialize["recorder"] = o.Recorder
	}
	if !IsNil(o.Asserter) {
		toSerialize["asserter"] = o.Asserter
	}
	if !IsNil(o.LastOccurrence) {
		toSerialize["lastOccurrence"] = o.LastOccurrence
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Reaction) {
		toSerialize["reaction"] = o.Reaction
	}
	return toSerialize, nil
}

func (o *AllergyIntolerance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"patient",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllergyIntolerance := _AllergyIntolerance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllergyIntolerance)

	if err != nil {
		return err
	}

	*o = AllergyIntolerance(varAllergyIntolerance)

	return err
}

type NullableAllergyIntolerance struct {
	value *AllergyIntolerance
	isSet bool
}

func (v NullableAllergyIntolerance) Get() *AllergyIntolerance {
	return v.value
}

func (v *NullableAllergyIntolerance) Set(val *AllergyIntolerance) {
	v.value = val
	v.isSet = true
}

func (v NullableAllergyIntolerance) IsSet() bool {
	return v.isSet
}

func (v *NullableAllergyIntolerance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllergyIntolerance(val *AllergyIntolerance) *NullableAllergyIntolerance {
	return &NullableAllergyIntolerance{value: val, isSet: true}
}

func (v NullableAllergyIntolerance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllergyIntolerance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


