/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the StructureMapParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructureMapParameter{}

// StructureMapParameter A Map of relationships between 2 structures that can be used to transform data.
type StructureMapParameter struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Parameter value - variable or literal.
	ValueId *string `json:"valueId,omitempty"`
	// Parameter value - variable or literal.
	ValueString *string `json:"valueString,omitempty"`
	// Parameter value - variable or literal.
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// Parameter value - variable or literal.
	ValueInteger *float32 `json:"valueInteger,omitempty"`
	// Parameter value - variable or literal.
	ValueDecimal *float32 `json:"valueDecimal,omitempty"`
}

// NewStructureMapParameter instantiates a new StructureMapParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructureMapParameter() *StructureMapParameter {
	this := StructureMapParameter{}
	return &this
}

// NewStructureMapParameterWithDefaults instantiates a new StructureMapParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructureMapParameterWithDefaults() *StructureMapParameter {
	this := StructureMapParameter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StructureMapParameter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StructureMapParameter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StructureMapParameter) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *StructureMapParameter) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *StructureMapParameter) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *StructureMapParameter) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *StructureMapParameter) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *StructureMapParameter) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *StructureMapParameter) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *StructureMapParameter) GetValueId() string {
	if o == nil || IsNil(o.ValueId) {
		var ret string
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValueId) {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *StructureMapParameter) HasValueId() bool {
	if o != nil && !IsNil(o.ValueId) {
		return true
	}

	return false
}

// SetValueId gets a reference to the given string and assigns it to the ValueId field.
func (o *StructureMapParameter) SetValueId(v string) {
	o.ValueId = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *StructureMapParameter) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *StructureMapParameter) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *StructureMapParameter) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *StructureMapParameter) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *StructureMapParameter) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *StructureMapParameter) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueInteger returns the ValueInteger field value if set, zero value otherwise.
func (o *StructureMapParameter) GetValueInteger() float32 {
	if o == nil || IsNil(o.ValueInteger) {
		var ret float32
		return ret
	}
	return *o.ValueInteger
}

// GetValueIntegerOk returns a tuple with the ValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueInteger) {
		return nil, false
	}
	return o.ValueInteger, true
}

// HasValueInteger returns a boolean if a field has been set.
func (o *StructureMapParameter) HasValueInteger() bool {
	if o != nil && !IsNil(o.ValueInteger) {
		return true
	}

	return false
}

// SetValueInteger gets a reference to the given float32 and assigns it to the ValueInteger field.
func (o *StructureMapParameter) SetValueInteger(v float32) {
	o.ValueInteger = &v
}

// GetValueDecimal returns the ValueDecimal field value if set, zero value otherwise.
func (o *StructureMapParameter) GetValueDecimal() float32 {
	if o == nil || IsNil(o.ValueDecimal) {
		var ret float32
		return ret
	}
	return *o.ValueDecimal
}

// GetValueDecimalOk returns a tuple with the ValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapParameter) GetValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueDecimal) {
		return nil, false
	}
	return o.ValueDecimal, true
}

// HasValueDecimal returns a boolean if a field has been set.
func (o *StructureMapParameter) HasValueDecimal() bool {
	if o != nil && !IsNil(o.ValueDecimal) {
		return true
	}

	return false
}

// SetValueDecimal gets a reference to the given float32 and assigns it to the ValueDecimal field.
func (o *StructureMapParameter) SetValueDecimal(v float32) {
	o.ValueDecimal = &v
}

func (o StructureMapParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructureMapParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.ValueId) {
		toSerialize["valueId"] = o.ValueId
	}
	if !IsNil(o.ValueString) {
		toSerialize["valueString"] = o.ValueString
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueInteger) {
		toSerialize["valueInteger"] = o.ValueInteger
	}
	if !IsNil(o.ValueDecimal) {
		toSerialize["valueDecimal"] = o.ValueDecimal
	}
	return toSerialize, nil
}

type NullableStructureMapParameter struct {
	value *StructureMapParameter
	isSet bool
}

func (v NullableStructureMapParameter) Get() *StructureMapParameter {
	return v.value
}

func (v *NullableStructureMapParameter) Set(val *StructureMapParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableStructureMapParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableStructureMapParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructureMapParameter(val *StructureMapParameter) *NullableStructureMapParameter {
	return &NullableStructureMapParameter{value: val, isSet: true}
}

func (v NullableStructureMapParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructureMapParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


