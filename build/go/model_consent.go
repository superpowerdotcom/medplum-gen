/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Consent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Consent{}

// Consent A record of a healthcare consumerâ€™s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
type Consent struct {
	// This is a Consent resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique identifier for this copy of the Consent Statement.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Indicates the current state of this consent.
	Status *string `json:"status,omitempty"`
	// A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.  This list is now extensible.
	Scope CodeableConcept `json:"scope"`
	// A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
	Category []CodeableConcept `json:"category"`
	// The patient/healthcare consumer to whom this consent applies.
	Patient *Reference `json:"patient,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	DateTime *string `json:"dateTime,omitempty"`
	// Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
	Performer []Reference `json:"performer,omitempty"`
	// The organization that manages the consent, and the framework within which it is executed.
	Organization []Reference `json:"organization,omitempty"`
	// The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
	SourceAttachment *Attachment `json:"sourceAttachment,omitempty"`
	// The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
	SourceReference *Reference `json:"sourceReference,omitempty"`
	// The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
	Policy []ConsentPolicy `json:"policy,omitempty"`
	// A reference to the specific base computable regulation or policy.
	PolicyRule *CodeableConcept `json:"policyRule,omitempty"`
	// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
	Verification []ConsentVerification `json:"verification,omitempty"`
	// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
	Provision *ConsentProvision `json:"provision,omitempty"`
}

type _Consent Consent

// NewConsent instantiates a new Consent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsent(resourceType string, scope CodeableConcept, category []CodeableConcept) *Consent {
	this := Consent{}
	this.ResourceType = resourceType
	this.Scope = scope
	this.Category = category
	return &this
}

// NewConsentWithDefaults instantiates a new Consent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentWithDefaults() *Consent {
	this := Consent{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Consent) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Consent) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Consent) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Consent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Consent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Consent) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Consent) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Consent) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Consent) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Consent) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Consent) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Consent) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Consent) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Consent) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Consent) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Consent) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Consent) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Consent) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Consent) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Consent) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Consent) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Consent) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Consent) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Consent) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Consent) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Consent) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Consent) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Consent) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Consent) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Consent) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Consent) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Consent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Consent) SetStatus(v string) {
	o.Status = &v
}

// GetScope returns the Scope field value
func (o *Consent) GetScope() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *Consent) GetScopeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *Consent) SetScope(v CodeableConcept) {
	o.Scope = v
}

// GetCategory returns the Category field value
func (o *Consent) GetCategory() []CodeableConcept {
	if o == nil {
		var ret []CodeableConcept
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Consent) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *Consent) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetPatient returns the Patient field value if set, zero value otherwise.
func (o *Consent) GetPatient() Reference {
	if o == nil || IsNil(o.Patient) {
		var ret Reference
		return ret
	}
	return *o.Patient
}

// GetPatientOk returns a tuple with the Patient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetPatientOk() (*Reference, bool) {
	if o == nil || IsNil(o.Patient) {
		return nil, false
	}
	return o.Patient, true
}

// HasPatient returns a boolean if a field has been set.
func (o *Consent) HasPatient() bool {
	if o != nil && !IsNil(o.Patient) {
		return true
	}

	return false
}

// SetPatient gets a reference to the given Reference and assigns it to the Patient field.
func (o *Consent) SetPatient(v Reference) {
	o.Patient = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *Consent) GetDateTime() string {
	if o == nil || IsNil(o.DateTime) {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *Consent) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *Consent) SetDateTime(v string) {
	o.DateTime = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *Consent) GetPerformer() []Reference {
	if o == nil || IsNil(o.Performer) {
		var ret []Reference
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetPerformerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *Consent) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []Reference and assigns it to the Performer field.
func (o *Consent) SetPerformer(v []Reference) {
	o.Performer = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Consent) GetOrganization() []Reference {
	if o == nil || IsNil(o.Organization) {
		var ret []Reference
		return ret
	}
	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetOrganizationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Consent) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given []Reference and assigns it to the Organization field.
func (o *Consent) SetOrganization(v []Reference) {
	o.Organization = v
}

// GetSourceAttachment returns the SourceAttachment field value if set, zero value otherwise.
func (o *Consent) GetSourceAttachment() Attachment {
	if o == nil || IsNil(o.SourceAttachment) {
		var ret Attachment
		return ret
	}
	return *o.SourceAttachment
}

// GetSourceAttachmentOk returns a tuple with the SourceAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetSourceAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.SourceAttachment) {
		return nil, false
	}
	return o.SourceAttachment, true
}

// HasSourceAttachment returns a boolean if a field has been set.
func (o *Consent) HasSourceAttachment() bool {
	if o != nil && !IsNil(o.SourceAttachment) {
		return true
	}

	return false
}

// SetSourceAttachment gets a reference to the given Attachment and assigns it to the SourceAttachment field.
func (o *Consent) SetSourceAttachment(v Attachment) {
	o.SourceAttachment = &v
}

// GetSourceReference returns the SourceReference field value if set, zero value otherwise.
func (o *Consent) GetSourceReference() Reference {
	if o == nil || IsNil(o.SourceReference) {
		var ret Reference
		return ret
	}
	return *o.SourceReference
}

// GetSourceReferenceOk returns a tuple with the SourceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetSourceReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SourceReference) {
		return nil, false
	}
	return o.SourceReference, true
}

// HasSourceReference returns a boolean if a field has been set.
func (o *Consent) HasSourceReference() bool {
	if o != nil && !IsNil(o.SourceReference) {
		return true
	}

	return false
}

// SetSourceReference gets a reference to the given Reference and assigns it to the SourceReference field.
func (o *Consent) SetSourceReference(v Reference) {
	o.SourceReference = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *Consent) GetPolicy() []ConsentPolicy {
	if o == nil || IsNil(o.Policy) {
		var ret []ConsentPolicy
		return ret
	}
	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetPolicyOk() ([]ConsentPolicy, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *Consent) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given []ConsentPolicy and assigns it to the Policy field.
func (o *Consent) SetPolicy(v []ConsentPolicy) {
	o.Policy = v
}

// GetPolicyRule returns the PolicyRule field value if set, zero value otherwise.
func (o *Consent) GetPolicyRule() CodeableConcept {
	if o == nil || IsNil(o.PolicyRule) {
		var ret CodeableConcept
		return ret
	}
	return *o.PolicyRule
}

// GetPolicyRuleOk returns a tuple with the PolicyRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetPolicyRuleOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PolicyRule) {
		return nil, false
	}
	return o.PolicyRule, true
}

// HasPolicyRule returns a boolean if a field has been set.
func (o *Consent) HasPolicyRule() bool {
	if o != nil && !IsNil(o.PolicyRule) {
		return true
	}

	return false
}

// SetPolicyRule gets a reference to the given CodeableConcept and assigns it to the PolicyRule field.
func (o *Consent) SetPolicyRule(v CodeableConcept) {
	o.PolicyRule = &v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *Consent) GetVerification() []ConsentVerification {
	if o == nil || IsNil(o.Verification) {
		var ret []ConsentVerification
		return ret
	}
	return o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetVerificationOk() ([]ConsentVerification, bool) {
	if o == nil || IsNil(o.Verification) {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *Consent) HasVerification() bool {
	if o != nil && !IsNil(o.Verification) {
		return true
	}

	return false
}

// SetVerification gets a reference to the given []ConsentVerification and assigns it to the Verification field.
func (o *Consent) SetVerification(v []ConsentVerification) {
	o.Verification = v
}

// GetProvision returns the Provision field value if set, zero value otherwise.
func (o *Consent) GetProvision() ConsentProvision {
	if o == nil || IsNil(o.Provision) {
		var ret ConsentProvision
		return ret
	}
	return *o.Provision
}

// GetProvisionOk returns a tuple with the Provision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetProvisionOk() (*ConsentProvision, bool) {
	if o == nil || IsNil(o.Provision) {
		return nil, false
	}
	return o.Provision, true
}

// HasProvision returns a boolean if a field has been set.
func (o *Consent) HasProvision() bool {
	if o != nil && !IsNil(o.Provision) {
		return true
	}

	return false
}

// SetProvision gets a reference to the given ConsentProvision and assigns it to the Provision field.
func (o *Consent) SetProvision(v ConsentProvision) {
	o.Provision = &v
}

func (o Consent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Consent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["scope"] = o.Scope
	toSerialize["category"] = o.Category
	if !IsNil(o.Patient) {
		toSerialize["patient"] = o.Patient
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.SourceAttachment) {
		toSerialize["sourceAttachment"] = o.SourceAttachment
	}
	if !IsNil(o.SourceReference) {
		toSerialize["sourceReference"] = o.SourceReference
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.PolicyRule) {
		toSerialize["policyRule"] = o.PolicyRule
	}
	if !IsNil(o.Verification) {
		toSerialize["verification"] = o.Verification
	}
	if !IsNil(o.Provision) {
		toSerialize["provision"] = o.Provision
	}
	return toSerialize, nil
}

func (o *Consent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"scope",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConsent := _Consent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConsent)

	if err != nil {
		return err
	}

	*o = Consent(varConsent)

	return err
}

type NullableConsent struct {
	value *Consent
	isSet bool
}

func (v NullableConsent) Get() *Consent {
	return v.value
}

func (v *NullableConsent) Set(val *Consent) {
	v.value = val
	v.isSet = true
}

func (v NullableConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsent(val *Consent) *NullableConsent {
	return &NullableConsent{value: val, isSet: true}
}

func (v NullableConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


