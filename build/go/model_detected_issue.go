/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetectedIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectedIssue{}

// DetectedIssue Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
type DetectedIssue struct {
	// This is a DetectedIssue resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifier associated with the detected issue record.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Identifies the general type of issue identified.
	Code *CodeableConcept `json:"code,omitempty"`
	// Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
	Severity *string `json:"severity,omitempty"`
	// Indicates the patient whose record the detected issue is associated with.
	Patient *Reference `json:"patient,omitempty"`
	// The date or period when the detected issue was initially identified.
	IdentifiedDateTime *string `json:"identifiedDateTime,omitempty"`
	// The date or period when the detected issue was initially identified.
	IdentifiedPeriod *Period `json:"identifiedPeriod,omitempty"`
	// Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
	Author *Reference `json:"author,omitempty"`
	// Indicates the resource representing the current activity or proposed activity that is potentially problematic.
	Implicated []Reference `json:"implicated,omitempty"`
	// Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
	Evidence []DetectedIssueEvidence `json:"evidence,omitempty"`
	// A sequence of Unicode characters
	Detail *string `json:"detail,omitempty"`
	// String of characters used to identify a name or a resource
	Reference *string `json:"reference,omitempty"`
	// Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
	Mitigation []DetectedIssueMitigation `json:"mitigation,omitempty"`
}

type _DetectedIssue DetectedIssue

// NewDetectedIssue instantiates a new DetectedIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedIssue(resourceType string) *DetectedIssue {
	this := DetectedIssue{}
	this.ResourceType = resourceType
	return &this
}

// NewDetectedIssueWithDefaults instantiates a new DetectedIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedIssueWithDefaults() *DetectedIssue {
	this := DetectedIssue{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *DetectedIssue) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DetectedIssue) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetectedIssue) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetectedIssue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DetectedIssue) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DetectedIssue) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DetectedIssue) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DetectedIssue) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *DetectedIssue) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *DetectedIssue) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *DetectedIssue) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DetectedIssue) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DetectedIssue) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DetectedIssue) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DetectedIssue) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DetectedIssue) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *DetectedIssue) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *DetectedIssue) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *DetectedIssue) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *DetectedIssue) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DetectedIssue) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DetectedIssue) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DetectedIssue) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DetectedIssue) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DetectedIssue) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DetectedIssue) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DetectedIssue) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DetectedIssue) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *DetectedIssue) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DetectedIssue) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DetectedIssue) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DetectedIssue) SetStatus(v string) {
	o.Status = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DetectedIssue) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DetectedIssue) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *DetectedIssue) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *DetectedIssue) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *DetectedIssue) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *DetectedIssue) SetSeverity(v string) {
	o.Severity = &v
}

// GetPatient returns the Patient field value if set, zero value otherwise.
func (o *DetectedIssue) GetPatient() Reference {
	if o == nil || IsNil(o.Patient) {
		var ret Reference
		return ret
	}
	return *o.Patient
}

// GetPatientOk returns a tuple with the Patient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetPatientOk() (*Reference, bool) {
	if o == nil || IsNil(o.Patient) {
		return nil, false
	}
	return o.Patient, true
}

// HasPatient returns a boolean if a field has been set.
func (o *DetectedIssue) HasPatient() bool {
	if o != nil && !IsNil(o.Patient) {
		return true
	}

	return false
}

// SetPatient gets a reference to the given Reference and assigns it to the Patient field.
func (o *DetectedIssue) SetPatient(v Reference) {
	o.Patient = &v
}

// GetIdentifiedDateTime returns the IdentifiedDateTime field value if set, zero value otherwise.
func (o *DetectedIssue) GetIdentifiedDateTime() string {
	if o == nil || IsNil(o.IdentifiedDateTime) {
		var ret string
		return ret
	}
	return *o.IdentifiedDateTime
}

// GetIdentifiedDateTimeOk returns a tuple with the IdentifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetIdentifiedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifiedDateTime) {
		return nil, false
	}
	return o.IdentifiedDateTime, true
}

// HasIdentifiedDateTime returns a boolean if a field has been set.
func (o *DetectedIssue) HasIdentifiedDateTime() bool {
	if o != nil && !IsNil(o.IdentifiedDateTime) {
		return true
	}

	return false
}

// SetIdentifiedDateTime gets a reference to the given string and assigns it to the IdentifiedDateTime field.
func (o *DetectedIssue) SetIdentifiedDateTime(v string) {
	o.IdentifiedDateTime = &v
}

// GetIdentifiedPeriod returns the IdentifiedPeriod field value if set, zero value otherwise.
func (o *DetectedIssue) GetIdentifiedPeriod() Period {
	if o == nil || IsNil(o.IdentifiedPeriod) {
		var ret Period
		return ret
	}
	return *o.IdentifiedPeriod
}

// GetIdentifiedPeriodOk returns a tuple with the IdentifiedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetIdentifiedPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.IdentifiedPeriod) {
		return nil, false
	}
	return o.IdentifiedPeriod, true
}

// HasIdentifiedPeriod returns a boolean if a field has been set.
func (o *DetectedIssue) HasIdentifiedPeriod() bool {
	if o != nil && !IsNil(o.IdentifiedPeriod) {
		return true
	}

	return false
}

// SetIdentifiedPeriod gets a reference to the given Period and assigns it to the IdentifiedPeriod field.
func (o *DetectedIssue) SetIdentifiedPeriod(v Period) {
	o.IdentifiedPeriod = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DetectedIssue) GetAuthor() Reference {
	if o == nil || IsNil(o.Author) {
		var ret Reference
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetAuthorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DetectedIssue) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Reference and assigns it to the Author field.
func (o *DetectedIssue) SetAuthor(v Reference) {
	o.Author = &v
}

// GetImplicated returns the Implicated field value if set, zero value otherwise.
func (o *DetectedIssue) GetImplicated() []Reference {
	if o == nil || IsNil(o.Implicated) {
		var ret []Reference
		return ret
	}
	return o.Implicated
}

// GetImplicatedOk returns a tuple with the Implicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetImplicatedOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Implicated) {
		return nil, false
	}
	return o.Implicated, true
}

// HasImplicated returns a boolean if a field has been set.
func (o *DetectedIssue) HasImplicated() bool {
	if o != nil && !IsNil(o.Implicated) {
		return true
	}

	return false
}

// SetImplicated gets a reference to the given []Reference and assigns it to the Implicated field.
func (o *DetectedIssue) SetImplicated(v []Reference) {
	o.Implicated = v
}

// GetEvidence returns the Evidence field value if set, zero value otherwise.
func (o *DetectedIssue) GetEvidence() []DetectedIssueEvidence {
	if o == nil || IsNil(o.Evidence) {
		var ret []DetectedIssueEvidence
		return ret
	}
	return o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetEvidenceOk() ([]DetectedIssueEvidence, bool) {
	if o == nil || IsNil(o.Evidence) {
		return nil, false
	}
	return o.Evidence, true
}

// HasEvidence returns a boolean if a field has been set.
func (o *DetectedIssue) HasEvidence() bool {
	if o != nil && !IsNil(o.Evidence) {
		return true
	}

	return false
}

// SetEvidence gets a reference to the given []DetectedIssueEvidence and assigns it to the Evidence field.
func (o *DetectedIssue) SetEvidence(v []DetectedIssueEvidence) {
	o.Evidence = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *DetectedIssue) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *DetectedIssue) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *DetectedIssue) SetDetail(v string) {
	o.Detail = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *DetectedIssue) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *DetectedIssue) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *DetectedIssue) SetReference(v string) {
	o.Reference = &v
}

// GetMitigation returns the Mitigation field value if set, zero value otherwise.
func (o *DetectedIssue) GetMitigation() []DetectedIssueMitigation {
	if o == nil || IsNil(o.Mitigation) {
		var ret []DetectedIssueMitigation
		return ret
	}
	return o.Mitigation
}

// GetMitigationOk returns a tuple with the Mitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedIssue) GetMitigationOk() ([]DetectedIssueMitigation, bool) {
	if o == nil || IsNil(o.Mitigation) {
		return nil, false
	}
	return o.Mitigation, true
}

// HasMitigation returns a boolean if a field has been set.
func (o *DetectedIssue) HasMitigation() bool {
	if o != nil && !IsNil(o.Mitigation) {
		return true
	}

	return false
}

// SetMitigation gets a reference to the given []DetectedIssueMitigation and assigns it to the Mitigation field.
func (o *DetectedIssue) SetMitigation(v []DetectedIssueMitigation) {
	o.Mitigation = v
}

func (o DetectedIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectedIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Patient) {
		toSerialize["patient"] = o.Patient
	}
	if !IsNil(o.IdentifiedDateTime) {
		toSerialize["identifiedDateTime"] = o.IdentifiedDateTime
	}
	if !IsNil(o.IdentifiedPeriod) {
		toSerialize["identifiedPeriod"] = o.IdentifiedPeriod
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Implicated) {
		toSerialize["implicated"] = o.Implicated
	}
	if !IsNil(o.Evidence) {
		toSerialize["evidence"] = o.Evidence
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Mitigation) {
		toSerialize["mitigation"] = o.Mitigation
	}
	return toSerialize, nil
}

func (o *DetectedIssue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetectedIssue := _DetectedIssue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetectedIssue)

	if err != nil {
		return err
	}

	*o = DetectedIssue(varDetectedIssue)

	return err
}

type NullableDetectedIssue struct {
	value *DetectedIssue
	isSet bool
}

func (v NullableDetectedIssue) Get() *DetectedIssue {
	return v.value
}

func (v *NullableDetectedIssue) Set(val *DetectedIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedIssue(val *DetectedIssue) *NullableDetectedIssue {
	return &NullableDetectedIssue{value: val, isSet: true}
}

func (v NullableDetectedIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


