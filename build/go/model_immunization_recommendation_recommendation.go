/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImmunizationRecommendationRecommendation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImmunizationRecommendationRecommendation{}

// ImmunizationRecommendationRecommendation A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
type ImmunizationRecommendationRecommendation struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Vaccine(s) or vaccine group that pertain to the recommendation.
	VaccineCode []CodeableConcept `json:"vaccineCode,omitempty"`
	// The targeted disease for the recommendation.
	TargetDisease *CodeableConcept `json:"targetDisease,omitempty"`
	// Vaccine(s) which should not be used to fulfill the recommendation.
	ContraindicatedVaccineCode []CodeableConcept `json:"contraindicatedVaccineCode,omitempty"`
	// Indicates the patient status with respect to the path to immunity for the target disease.
	ForecastStatus CodeableConcept `json:"forecastStatus"`
	// The reason for the assigned forecast status.
	ForecastReason []CodeableConcept `json:"forecastReason,omitempty"`
	// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
	DateCriterion []ImmunizationRecommendationDateCriterion `json:"dateCriterion,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A sequence of Unicode characters
	Series *string `json:"series,omitempty"`
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
	DoseNumberPositiveInt *float32 `json:"doseNumberPositiveInt,omitempty"`
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
	DoseNumberString *string `json:"doseNumberString,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesPositiveInt *float32 `json:"seriesDosesPositiveInt,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesString *string `json:"seriesDosesString,omitempty"`
	// Immunization event history and/or evaluation that supports the status and recommendation.
	SupportingImmunization []Reference `json:"supportingImmunization,omitempty"`
	// Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
	SupportingPatientInformation []Reference `json:"supportingPatientInformation,omitempty"`
}

type _ImmunizationRecommendationRecommendation ImmunizationRecommendationRecommendation

// NewImmunizationRecommendationRecommendation instantiates a new ImmunizationRecommendationRecommendation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImmunizationRecommendationRecommendation(forecastStatus CodeableConcept) *ImmunizationRecommendationRecommendation {
	this := ImmunizationRecommendationRecommendation{}
	this.ForecastStatus = forecastStatus
	return &this
}

// NewImmunizationRecommendationRecommendationWithDefaults instantiates a new ImmunizationRecommendationRecommendation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImmunizationRecommendationRecommendationWithDefaults() *ImmunizationRecommendationRecommendation {
	this := ImmunizationRecommendationRecommendation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImmunizationRecommendationRecommendation) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImmunizationRecommendationRecommendation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImmunizationRecommendationRecommendation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetVaccineCode returns the VaccineCode field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetVaccineCode() []CodeableConcept {
	if o == nil || IsNil(o.VaccineCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.VaccineCode
}

// GetVaccineCodeOk returns a tuple with the VaccineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetVaccineCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.VaccineCode) {
		return nil, false
	}
	return o.VaccineCode, true
}

// HasVaccineCode returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasVaccineCode() bool {
	if o != nil && !IsNil(o.VaccineCode) {
		return true
	}

	return false
}

// SetVaccineCode gets a reference to the given []CodeableConcept and assigns it to the VaccineCode field.
func (o *ImmunizationRecommendationRecommendation) SetVaccineCode(v []CodeableConcept) {
	o.VaccineCode = v
}

// GetTargetDisease returns the TargetDisease field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetTargetDisease() CodeableConcept {
	if o == nil || IsNil(o.TargetDisease) {
		var ret CodeableConcept
		return ret
	}
	return *o.TargetDisease
}

// GetTargetDiseaseOk returns a tuple with the TargetDisease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetTargetDiseaseOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.TargetDisease) {
		return nil, false
	}
	return o.TargetDisease, true
}

// HasTargetDisease returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasTargetDisease() bool {
	if o != nil && !IsNil(o.TargetDisease) {
		return true
	}

	return false
}

// SetTargetDisease gets a reference to the given CodeableConcept and assigns it to the TargetDisease field.
func (o *ImmunizationRecommendationRecommendation) SetTargetDisease(v CodeableConcept) {
	o.TargetDisease = &v
}

// GetContraindicatedVaccineCode returns the ContraindicatedVaccineCode field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetContraindicatedVaccineCode() []CodeableConcept {
	if o == nil || IsNil(o.ContraindicatedVaccineCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ContraindicatedVaccineCode
}

// GetContraindicatedVaccineCodeOk returns a tuple with the ContraindicatedVaccineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetContraindicatedVaccineCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ContraindicatedVaccineCode) {
		return nil, false
	}
	return o.ContraindicatedVaccineCode, true
}

// HasContraindicatedVaccineCode returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasContraindicatedVaccineCode() bool {
	if o != nil && !IsNil(o.ContraindicatedVaccineCode) {
		return true
	}

	return false
}

// SetContraindicatedVaccineCode gets a reference to the given []CodeableConcept and assigns it to the ContraindicatedVaccineCode field.
func (o *ImmunizationRecommendationRecommendation) SetContraindicatedVaccineCode(v []CodeableConcept) {
	o.ContraindicatedVaccineCode = v
}

// GetForecastStatus returns the ForecastStatus field value
func (o *ImmunizationRecommendationRecommendation) GetForecastStatus() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.ForecastStatus
}

// GetForecastStatusOk returns a tuple with the ForecastStatus field value
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetForecastStatusOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForecastStatus, true
}

// SetForecastStatus sets field value
func (o *ImmunizationRecommendationRecommendation) SetForecastStatus(v CodeableConcept) {
	o.ForecastStatus = v
}

// GetForecastReason returns the ForecastReason field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetForecastReason() []CodeableConcept {
	if o == nil || IsNil(o.ForecastReason) {
		var ret []CodeableConcept
		return ret
	}
	return o.ForecastReason
}

// GetForecastReasonOk returns a tuple with the ForecastReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetForecastReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ForecastReason) {
		return nil, false
	}
	return o.ForecastReason, true
}

// HasForecastReason returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasForecastReason() bool {
	if o != nil && !IsNil(o.ForecastReason) {
		return true
	}

	return false
}

// SetForecastReason gets a reference to the given []CodeableConcept and assigns it to the ForecastReason field.
func (o *ImmunizationRecommendationRecommendation) SetForecastReason(v []CodeableConcept) {
	o.ForecastReason = v
}

// GetDateCriterion returns the DateCriterion field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetDateCriterion() []ImmunizationRecommendationDateCriterion {
	if o == nil || IsNil(o.DateCriterion) {
		var ret []ImmunizationRecommendationDateCriterion
		return ret
	}
	return o.DateCriterion
}

// GetDateCriterionOk returns a tuple with the DateCriterion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetDateCriterionOk() ([]ImmunizationRecommendationDateCriterion, bool) {
	if o == nil || IsNil(o.DateCriterion) {
		return nil, false
	}
	return o.DateCriterion, true
}

// HasDateCriterion returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasDateCriterion() bool {
	if o != nil && !IsNil(o.DateCriterion) {
		return true
	}

	return false
}

// SetDateCriterion gets a reference to the given []ImmunizationRecommendationDateCriterion and assigns it to the DateCriterion field.
func (o *ImmunizationRecommendationRecommendation) SetDateCriterion(v []ImmunizationRecommendationDateCriterion) {
	o.DateCriterion = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImmunizationRecommendationRecommendation) SetDescription(v string) {
	o.Description = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetSeries() string {
	if o == nil || IsNil(o.Series) {
		var ret string
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetSeriesOk() (*string, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given string and assigns it to the Series field.
func (o *ImmunizationRecommendationRecommendation) SetSeries(v string) {
	o.Series = &v
}

// GetDoseNumberPositiveInt returns the DoseNumberPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetDoseNumberPositiveInt() float32 {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		var ret float32
		return ret
	}
	return *o.DoseNumberPositiveInt
}

// GetDoseNumberPositiveIntOk returns a tuple with the DoseNumberPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetDoseNumberPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		return nil, false
	}
	return o.DoseNumberPositiveInt, true
}

// HasDoseNumberPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasDoseNumberPositiveInt() bool {
	if o != nil && !IsNil(o.DoseNumberPositiveInt) {
		return true
	}

	return false
}

// SetDoseNumberPositiveInt gets a reference to the given float32 and assigns it to the DoseNumberPositiveInt field.
func (o *ImmunizationRecommendationRecommendation) SetDoseNumberPositiveInt(v float32) {
	o.DoseNumberPositiveInt = &v
}

// GetDoseNumberString returns the DoseNumberString field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetDoseNumberString() string {
	if o == nil || IsNil(o.DoseNumberString) {
		var ret string
		return ret
	}
	return *o.DoseNumberString
}

// GetDoseNumberStringOk returns a tuple with the DoseNumberString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetDoseNumberStringOk() (*string, bool) {
	if o == nil || IsNil(o.DoseNumberString) {
		return nil, false
	}
	return o.DoseNumberString, true
}

// HasDoseNumberString returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasDoseNumberString() bool {
	if o != nil && !IsNil(o.DoseNumberString) {
		return true
	}

	return false
}

// SetDoseNumberString gets a reference to the given string and assigns it to the DoseNumberString field.
func (o *ImmunizationRecommendationRecommendation) SetDoseNumberString(v string) {
	o.DoseNumberString = &v
}

// GetSeriesDosesPositiveInt returns the SeriesDosesPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetSeriesDosesPositiveInt() float32 {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		var ret float32
		return ret
	}
	return *o.SeriesDosesPositiveInt
}

// GetSeriesDosesPositiveIntOk returns a tuple with the SeriesDosesPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetSeriesDosesPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		return nil, false
	}
	return o.SeriesDosesPositiveInt, true
}

// HasSeriesDosesPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasSeriesDosesPositiveInt() bool {
	if o != nil && !IsNil(o.SeriesDosesPositiveInt) {
		return true
	}

	return false
}

// SetSeriesDosesPositiveInt gets a reference to the given float32 and assigns it to the SeriesDosesPositiveInt field.
func (o *ImmunizationRecommendationRecommendation) SetSeriesDosesPositiveInt(v float32) {
	o.SeriesDosesPositiveInt = &v
}

// GetSeriesDosesString returns the SeriesDosesString field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetSeriesDosesString() string {
	if o == nil || IsNil(o.SeriesDosesString) {
		var ret string
		return ret
	}
	return *o.SeriesDosesString
}

// GetSeriesDosesStringOk returns a tuple with the SeriesDosesString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetSeriesDosesStringOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesDosesString) {
		return nil, false
	}
	return o.SeriesDosesString, true
}

// HasSeriesDosesString returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasSeriesDosesString() bool {
	if o != nil && !IsNil(o.SeriesDosesString) {
		return true
	}

	return false
}

// SetSeriesDosesString gets a reference to the given string and assigns it to the SeriesDosesString field.
func (o *ImmunizationRecommendationRecommendation) SetSeriesDosesString(v string) {
	o.SeriesDosesString = &v
}

// GetSupportingImmunization returns the SupportingImmunization field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetSupportingImmunization() []Reference {
	if o == nil || IsNil(o.SupportingImmunization) {
		var ret []Reference
		return ret
	}
	return o.SupportingImmunization
}

// GetSupportingImmunizationOk returns a tuple with the SupportingImmunization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetSupportingImmunizationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingImmunization) {
		return nil, false
	}
	return o.SupportingImmunization, true
}

// HasSupportingImmunization returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasSupportingImmunization() bool {
	if o != nil && !IsNil(o.SupportingImmunization) {
		return true
	}

	return false
}

// SetSupportingImmunization gets a reference to the given []Reference and assigns it to the SupportingImmunization field.
func (o *ImmunizationRecommendationRecommendation) SetSupportingImmunization(v []Reference) {
	o.SupportingImmunization = v
}

// GetSupportingPatientInformation returns the SupportingPatientInformation field value if set, zero value otherwise.
func (o *ImmunizationRecommendationRecommendation) GetSupportingPatientInformation() []Reference {
	if o == nil || IsNil(o.SupportingPatientInformation) {
		var ret []Reference
		return ret
	}
	return o.SupportingPatientInformation
}

// GetSupportingPatientInformationOk returns a tuple with the SupportingPatientInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationRecommendationRecommendation) GetSupportingPatientInformationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingPatientInformation) {
		return nil, false
	}
	return o.SupportingPatientInformation, true
}

// HasSupportingPatientInformation returns a boolean if a field has been set.
func (o *ImmunizationRecommendationRecommendation) HasSupportingPatientInformation() bool {
	if o != nil && !IsNil(o.SupportingPatientInformation) {
		return true
	}

	return false
}

// SetSupportingPatientInformation gets a reference to the given []Reference and assigns it to the SupportingPatientInformation field.
func (o *ImmunizationRecommendationRecommendation) SetSupportingPatientInformation(v []Reference) {
	o.SupportingPatientInformation = v
}

func (o ImmunizationRecommendationRecommendation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImmunizationRecommendationRecommendation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.VaccineCode) {
		toSerialize["vaccineCode"] = o.VaccineCode
	}
	if !IsNil(o.TargetDisease) {
		toSerialize["targetDisease"] = o.TargetDisease
	}
	if !IsNil(o.ContraindicatedVaccineCode) {
		toSerialize["contraindicatedVaccineCode"] = o.ContraindicatedVaccineCode
	}
	toSerialize["forecastStatus"] = o.ForecastStatus
	if !IsNil(o.ForecastReason) {
		toSerialize["forecastReason"] = o.ForecastReason
	}
	if !IsNil(o.DateCriterion) {
		toSerialize["dateCriterion"] = o.DateCriterion
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.DoseNumberPositiveInt) {
		toSerialize["doseNumberPositiveInt"] = o.DoseNumberPositiveInt
	}
	if !IsNil(o.DoseNumberString) {
		toSerialize["doseNumberString"] = o.DoseNumberString
	}
	if !IsNil(o.SeriesDosesPositiveInt) {
		toSerialize["seriesDosesPositiveInt"] = o.SeriesDosesPositiveInt
	}
	if !IsNil(o.SeriesDosesString) {
		toSerialize["seriesDosesString"] = o.SeriesDosesString
	}
	if !IsNil(o.SupportingImmunization) {
		toSerialize["supportingImmunization"] = o.SupportingImmunization
	}
	if !IsNil(o.SupportingPatientInformation) {
		toSerialize["supportingPatientInformation"] = o.SupportingPatientInformation
	}
	return toSerialize, nil
}

func (o *ImmunizationRecommendationRecommendation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"forecastStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImmunizationRecommendationRecommendation := _ImmunizationRecommendationRecommendation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImmunizationRecommendationRecommendation)

	if err != nil {
		return err
	}

	*o = ImmunizationRecommendationRecommendation(varImmunizationRecommendationRecommendation)

	return err
}

type NullableImmunizationRecommendationRecommendation struct {
	value *ImmunizationRecommendationRecommendation
	isSet bool
}

func (v NullableImmunizationRecommendationRecommendation) Get() *ImmunizationRecommendationRecommendation {
	return v.value
}

func (v *NullableImmunizationRecommendationRecommendation) Set(val *ImmunizationRecommendationRecommendation) {
	v.value = val
	v.isSet = true
}

func (v NullableImmunizationRecommendationRecommendation) IsSet() bool {
	return v.isSet
}

func (v *NullableImmunizationRecommendationRecommendation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImmunizationRecommendationRecommendation(val *ImmunizationRecommendationRecommendation) *NullableImmunizationRecommendationRecommendation {
	return &NullableImmunizationRecommendationRecommendation{value: val, isSet: true}
}

func (v NullableImmunizationRecommendationRecommendation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImmunizationRecommendationRecommendation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


