/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the InsurancePlanPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsurancePlanPlan{}

// InsurancePlanPlan Details of a Health Insurance product/plan provided by an organization.
type InsurancePlanPlan struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Type of plan. For example, \"Platinum\" or \"High Deductable\".
	Type *CodeableConcept `json:"type,omitempty"`
	// The geographic region in which a health insurance plan's benefits apply.
	CoverageArea []Reference `json:"coverageArea,omitempty"`
	// Reference to the network that providing the type of coverage.
	Network []Reference `json:"network,omitempty"`
	// Overall costs associated with the plan.
	GeneralCost []InsurancePlanGeneralCost `json:"generalCost,omitempty"`
	// Costs associated with the coverage provided by the product.
	SpecificCost []InsurancePlanSpecificCost `json:"specificCost,omitempty"`
}

// NewInsurancePlanPlan instantiates a new InsurancePlanPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsurancePlanPlan() *InsurancePlanPlan {
	this := InsurancePlanPlan{}
	return &this
}

// NewInsurancePlanPlanWithDefaults instantiates a new InsurancePlanPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsurancePlanPlanWithDefaults() *InsurancePlanPlan {
	this := InsurancePlanPlan{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InsurancePlanPlan) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *InsurancePlanPlan) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *InsurancePlanPlan) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *InsurancePlanPlan) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *InsurancePlanPlan) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetCoverageArea returns the CoverageArea field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetCoverageArea() []Reference {
	if o == nil || IsNil(o.CoverageArea) {
		var ret []Reference
		return ret
	}
	return o.CoverageArea
}

// GetCoverageAreaOk returns a tuple with the CoverageArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetCoverageAreaOk() ([]Reference, bool) {
	if o == nil || IsNil(o.CoverageArea) {
		return nil, false
	}
	return o.CoverageArea, true
}

// HasCoverageArea returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasCoverageArea() bool {
	if o != nil && !IsNil(o.CoverageArea) {
		return true
	}

	return false
}

// SetCoverageArea gets a reference to the given []Reference and assigns it to the CoverageArea field.
func (o *InsurancePlanPlan) SetCoverageArea(v []Reference) {
	o.CoverageArea = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetNetwork() []Reference {
	if o == nil || IsNil(o.Network) {
		var ret []Reference
		return ret
	}
	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetNetworkOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given []Reference and assigns it to the Network field.
func (o *InsurancePlanPlan) SetNetwork(v []Reference) {
	o.Network = v
}

// GetGeneralCost returns the GeneralCost field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetGeneralCost() []InsurancePlanGeneralCost {
	if o == nil || IsNil(o.GeneralCost) {
		var ret []InsurancePlanGeneralCost
		return ret
	}
	return o.GeneralCost
}

// GetGeneralCostOk returns a tuple with the GeneralCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetGeneralCostOk() ([]InsurancePlanGeneralCost, bool) {
	if o == nil || IsNil(o.GeneralCost) {
		return nil, false
	}
	return o.GeneralCost, true
}

// HasGeneralCost returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasGeneralCost() bool {
	if o != nil && !IsNil(o.GeneralCost) {
		return true
	}

	return false
}

// SetGeneralCost gets a reference to the given []InsurancePlanGeneralCost and assigns it to the GeneralCost field.
func (o *InsurancePlanPlan) SetGeneralCost(v []InsurancePlanGeneralCost) {
	o.GeneralCost = v
}

// GetSpecificCost returns the SpecificCost field value if set, zero value otherwise.
func (o *InsurancePlanPlan) GetSpecificCost() []InsurancePlanSpecificCost {
	if o == nil || IsNil(o.SpecificCost) {
		var ret []InsurancePlanSpecificCost
		return ret
	}
	return o.SpecificCost
}

// GetSpecificCostOk returns a tuple with the SpecificCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanPlan) GetSpecificCostOk() ([]InsurancePlanSpecificCost, bool) {
	if o == nil || IsNil(o.SpecificCost) {
		return nil, false
	}
	return o.SpecificCost, true
}

// HasSpecificCost returns a boolean if a field has been set.
func (o *InsurancePlanPlan) HasSpecificCost() bool {
	if o != nil && !IsNil(o.SpecificCost) {
		return true
	}

	return false
}

// SetSpecificCost gets a reference to the given []InsurancePlanSpecificCost and assigns it to the SpecificCost field.
func (o *InsurancePlanPlan) SetSpecificCost(v []InsurancePlanSpecificCost) {
	o.SpecificCost = v
}

func (o InsurancePlanPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsurancePlanPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CoverageArea) {
		toSerialize["coverageArea"] = o.CoverageArea
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.GeneralCost) {
		toSerialize["generalCost"] = o.GeneralCost
	}
	if !IsNil(o.SpecificCost) {
		toSerialize["specificCost"] = o.SpecificCost
	}
	return toSerialize, nil
}

type NullableInsurancePlanPlan struct {
	value *InsurancePlanPlan
	isSet bool
}

func (v NullableInsurancePlanPlan) Get() *InsurancePlanPlan {
	return v.value
}

func (v *NullableInsurancePlanPlan) Set(val *InsurancePlanPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableInsurancePlanPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableInsurancePlanPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsurancePlanPlan(val *InsurancePlanPlan) *NullableInsurancePlanPlan {
	return &NullableInsurancePlanPlan{value: val, isSet: true}
}

func (v NullableInsurancePlanPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsurancePlanPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


