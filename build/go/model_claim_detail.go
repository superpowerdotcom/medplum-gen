/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimDetail{}

// ClaimDetail A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type ClaimDetail struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// The type of revenue or cost center providing the product and/or service.
	Revenue *CodeableConcept `json:"revenue,omitempty"`
	// Code to identify the general type of benefits under which products and services are provided.
	Category *CodeableConcept `json:"category,omitempty"`
	// When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
	ProductOrService CodeableConcept `json:"productOrService"`
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// Identifies the program under which this may be recovered.
	ProgramCode []CodeableConcept `json:"programCode,omitempty"`
	// The number of repetitions of a service or product.
	Quantity *Quantity `json:"quantity,omitempty"`
	// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	UnitPrice *Money `json:"unitPrice,omitempty"`
	// A rational number with implicit precision
	Factor *float32 `json:"factor,omitempty"`
	// The quantity times the unit price for an additional service or product or charge.
	Net *Money `json:"net,omitempty"`
	// Unique Device Identifiers associated with this line item.
	Udi []Reference `json:"udi,omitempty"`
	// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
	SubDetail []ClaimSubDetail `json:"subDetail,omitempty"`
}

type _ClaimDetail ClaimDetail

// NewClaimDetail instantiates a new ClaimDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimDetail(productOrService CodeableConcept) *ClaimDetail {
	this := ClaimDetail{}
	this.ProductOrService = productOrService
	return &this
}

// NewClaimDetailWithDefaults instantiates a new ClaimDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimDetailWithDefaults() *ClaimDetail {
	this := ClaimDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClaimDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClaimDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClaimDetail) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ClaimDetail) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ClaimDetail) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ClaimDetail) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ClaimDetail) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ClaimDetail) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ClaimDetail) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ClaimDetail) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ClaimDetail) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ClaimDetail) SetSequence(v float32) {
	o.Sequence = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *ClaimDetail) GetRevenue() CodeableConcept {
	if o == nil || IsNil(o.Revenue) {
		var ret CodeableConcept
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetRevenueOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *ClaimDetail) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given CodeableConcept and assigns it to the Revenue field.
func (o *ClaimDetail) SetRevenue(v CodeableConcept) {
	o.Revenue = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ClaimDetail) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ClaimDetail) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *ClaimDetail) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetProductOrService returns the ProductOrService field value
func (o *ClaimDetail) GetProductOrService() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.ProductOrService
}

// GetProductOrServiceOk returns a tuple with the ProductOrService field value
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetProductOrServiceOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductOrService, true
}

// SetProductOrService sets field value
func (o *ClaimDetail) SetProductOrService(v CodeableConcept) {
	o.ProductOrService = v
}

// GetModifier returns the Modifier field value if set, zero value otherwise.
func (o *ClaimDetail) GetModifier() []CodeableConcept {
	if o == nil || IsNil(o.Modifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.Modifier
}

// GetModifierOk returns a tuple with the Modifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Modifier) {
		return nil, false
	}
	return o.Modifier, true
}

// HasModifier returns a boolean if a field has been set.
func (o *ClaimDetail) HasModifier() bool {
	if o != nil && !IsNil(o.Modifier) {
		return true
	}

	return false
}

// SetModifier gets a reference to the given []CodeableConcept and assigns it to the Modifier field.
func (o *ClaimDetail) SetModifier(v []CodeableConcept) {
	o.Modifier = v
}

// GetProgramCode returns the ProgramCode field value if set, zero value otherwise.
func (o *ClaimDetail) GetProgramCode() []CodeableConcept {
	if o == nil || IsNil(o.ProgramCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProgramCode
}

// GetProgramCodeOk returns a tuple with the ProgramCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetProgramCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProgramCode) {
		return nil, false
	}
	return o.ProgramCode, true
}

// HasProgramCode returns a boolean if a field has been set.
func (o *ClaimDetail) HasProgramCode() bool {
	if o != nil && !IsNil(o.ProgramCode) {
		return true
	}

	return false
}

// SetProgramCode gets a reference to the given []CodeableConcept and assigns it to the ProgramCode field.
func (o *ClaimDetail) SetProgramCode(v []CodeableConcept) {
	o.ProgramCode = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ClaimDetail) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ClaimDetail) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *ClaimDetail) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *ClaimDetail) GetUnitPrice() Money {
	if o == nil || IsNil(o.UnitPrice) {
		var ret Money
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetUnitPriceOk() (*Money, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ClaimDetail) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given Money and assigns it to the UnitPrice field.
func (o *ClaimDetail) SetUnitPrice(v Money) {
	o.UnitPrice = &v
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *ClaimDetail) GetFactor() float32 {
	if o == nil || IsNil(o.Factor) {
		var ret float32
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *ClaimDetail) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float32 and assigns it to the Factor field.
func (o *ClaimDetail) SetFactor(v float32) {
	o.Factor = &v
}

// GetNet returns the Net field value if set, zero value otherwise.
func (o *ClaimDetail) GetNet() Money {
	if o == nil || IsNil(o.Net) {
		var ret Money
		return ret
	}
	return *o.Net
}

// GetNetOk returns a tuple with the Net field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetNetOk() (*Money, bool) {
	if o == nil || IsNil(o.Net) {
		return nil, false
	}
	return o.Net, true
}

// HasNet returns a boolean if a field has been set.
func (o *ClaimDetail) HasNet() bool {
	if o != nil && !IsNil(o.Net) {
		return true
	}

	return false
}

// SetNet gets a reference to the given Money and assigns it to the Net field.
func (o *ClaimDetail) SetNet(v Money) {
	o.Net = &v
}

// GetUdi returns the Udi field value if set, zero value otherwise.
func (o *ClaimDetail) GetUdi() []Reference {
	if o == nil || IsNil(o.Udi) {
		var ret []Reference
		return ret
	}
	return o.Udi
}

// GetUdiOk returns a tuple with the Udi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetUdiOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Udi) {
		return nil, false
	}
	return o.Udi, true
}

// HasUdi returns a boolean if a field has been set.
func (o *ClaimDetail) HasUdi() bool {
	if o != nil && !IsNil(o.Udi) {
		return true
	}

	return false
}

// SetUdi gets a reference to the given []Reference and assigns it to the Udi field.
func (o *ClaimDetail) SetUdi(v []Reference) {
	o.Udi = v
}

// GetSubDetail returns the SubDetail field value if set, zero value otherwise.
func (o *ClaimDetail) GetSubDetail() []ClaimSubDetail {
	if o == nil || IsNil(o.SubDetail) {
		var ret []ClaimSubDetail
		return ret
	}
	return o.SubDetail
}

// GetSubDetailOk returns a tuple with the SubDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimDetail) GetSubDetailOk() ([]ClaimSubDetail, bool) {
	if o == nil || IsNil(o.SubDetail) {
		return nil, false
	}
	return o.SubDetail, true
}

// HasSubDetail returns a boolean if a field has been set.
func (o *ClaimDetail) HasSubDetail() bool {
	if o != nil && !IsNil(o.SubDetail) {
		return true
	}

	return false
}

// SetSubDetail gets a reference to the given []ClaimSubDetail and assigns it to the SubDetail field.
func (o *ClaimDetail) SetSubDetail(v []ClaimSubDetail) {
	o.SubDetail = v
}

func (o ClaimDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["productOrService"] = o.ProductOrService
	if !IsNil(o.Modifier) {
		toSerialize["modifier"] = o.Modifier
	}
	if !IsNil(o.ProgramCode) {
		toSerialize["programCode"] = o.ProgramCode
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Net) {
		toSerialize["net"] = o.Net
	}
	if !IsNil(o.Udi) {
		toSerialize["udi"] = o.Udi
	}
	if !IsNil(o.SubDetail) {
		toSerialize["subDetail"] = o.SubDetail
	}
	return toSerialize, nil
}

func (o *ClaimDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productOrService",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimDetail := _ClaimDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimDetail)

	if err != nil {
		return err
	}

	*o = ClaimDetail(varClaimDetail)

	return err
}

type NullableClaimDetail struct {
	value *ClaimDetail
	isSet bool
}

func (v NullableClaimDetail) Get() *ClaimDetail {
	return v.value
}

func (v *NullableClaimDetail) Set(val *ClaimDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimDetail(val *ClaimDetail) *NullableClaimDetail {
	return &NullableClaimDetail{value: val, isSet: true}
}

func (v NullableClaimDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


