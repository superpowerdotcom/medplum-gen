/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductIndication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductIndication{}

// MedicinalProductIndication Indication for the Medicinal Product.
type MedicinalProductIndication struct {
	// This is a MedicinalProductIndication resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The medication for which this is an indication.
	Subject []Reference `json:"subject,omitempty"`
	// The disease, symptom or procedure that is the indication for treatment.
	DiseaseSymptomProcedure *CodeableConcept `json:"diseaseSymptomProcedure,omitempty"`
	// The status of the disease or symptom for which the indication applies.
	DiseaseStatus *CodeableConcept `json:"diseaseStatus,omitempty"`
	// Comorbidity (concurrent condition) or co-infection as part of the indication.
	Comorbidity []CodeableConcept `json:"comorbidity,omitempty"`
	// The intended effect, aim or strategy to be achieved by the indication.
	IntendedEffect *CodeableConcept `json:"intendedEffect,omitempty"`
	// Timing or duration information as part of the indication.
	Duration *Quantity `json:"duration,omitempty"`
	// Information about the use of the medicinal product in relation to other therapies described as part of the indication.
	OtherTherapy []MedicinalProductIndicationOtherTherapy `json:"otherTherapy,omitempty"`
	// Describe the undesirable effects of the medicinal product.
	UndesirableEffect []Reference `json:"undesirableEffect,omitempty"`
	// The population group to which this applies.
	Population []Population `json:"population,omitempty"`
}

type _MedicinalProductIndication MedicinalProductIndication

// NewMedicinalProductIndication instantiates a new MedicinalProductIndication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductIndication(resourceType string) *MedicinalProductIndication {
	this := MedicinalProductIndication{}
	this.ResourceType = resourceType
	return &this
}

// NewMedicinalProductIndicationWithDefaults instantiates a new MedicinalProductIndication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductIndicationWithDefaults() *MedicinalProductIndication {
	this := MedicinalProductIndication{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicinalProductIndication) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicinalProductIndication) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductIndication) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicinalProductIndication) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicinalProductIndication) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicinalProductIndication) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicinalProductIndication) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicinalProductIndication) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductIndication) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductIndication) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetSubject() []Reference {
	if o == nil || IsNil(o.Subject) {
		var ret []Reference
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetSubjectOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given []Reference and assigns it to the Subject field.
func (o *MedicinalProductIndication) SetSubject(v []Reference) {
	o.Subject = v
}

// GetDiseaseSymptomProcedure returns the DiseaseSymptomProcedure field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetDiseaseSymptomProcedure() CodeableConcept {
	if o == nil || IsNil(o.DiseaseSymptomProcedure) {
		var ret CodeableConcept
		return ret
	}
	return *o.DiseaseSymptomProcedure
}

// GetDiseaseSymptomProcedureOk returns a tuple with the DiseaseSymptomProcedure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetDiseaseSymptomProcedureOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DiseaseSymptomProcedure) {
		return nil, false
	}
	return o.DiseaseSymptomProcedure, true
}

// HasDiseaseSymptomProcedure returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasDiseaseSymptomProcedure() bool {
	if o != nil && !IsNil(o.DiseaseSymptomProcedure) {
		return true
	}

	return false
}

// SetDiseaseSymptomProcedure gets a reference to the given CodeableConcept and assigns it to the DiseaseSymptomProcedure field.
func (o *MedicinalProductIndication) SetDiseaseSymptomProcedure(v CodeableConcept) {
	o.DiseaseSymptomProcedure = &v
}

// GetDiseaseStatus returns the DiseaseStatus field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetDiseaseStatus() CodeableConcept {
	if o == nil || IsNil(o.DiseaseStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.DiseaseStatus
}

// GetDiseaseStatusOk returns a tuple with the DiseaseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetDiseaseStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DiseaseStatus) {
		return nil, false
	}
	return o.DiseaseStatus, true
}

// HasDiseaseStatus returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasDiseaseStatus() bool {
	if o != nil && !IsNil(o.DiseaseStatus) {
		return true
	}

	return false
}

// SetDiseaseStatus gets a reference to the given CodeableConcept and assigns it to the DiseaseStatus field.
func (o *MedicinalProductIndication) SetDiseaseStatus(v CodeableConcept) {
	o.DiseaseStatus = &v
}

// GetComorbidity returns the Comorbidity field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetComorbidity() []CodeableConcept {
	if o == nil || IsNil(o.Comorbidity) {
		var ret []CodeableConcept
		return ret
	}
	return o.Comorbidity
}

// GetComorbidityOk returns a tuple with the Comorbidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetComorbidityOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Comorbidity) {
		return nil, false
	}
	return o.Comorbidity, true
}

// HasComorbidity returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasComorbidity() bool {
	if o != nil && !IsNil(o.Comorbidity) {
		return true
	}

	return false
}

// SetComorbidity gets a reference to the given []CodeableConcept and assigns it to the Comorbidity field.
func (o *MedicinalProductIndication) SetComorbidity(v []CodeableConcept) {
	o.Comorbidity = v
}

// GetIntendedEffect returns the IntendedEffect field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetIntendedEffect() CodeableConcept {
	if o == nil || IsNil(o.IntendedEffect) {
		var ret CodeableConcept
		return ret
	}
	return *o.IntendedEffect
}

// GetIntendedEffectOk returns a tuple with the IntendedEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetIntendedEffectOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.IntendedEffect) {
		return nil, false
	}
	return o.IntendedEffect, true
}

// HasIntendedEffect returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasIntendedEffect() bool {
	if o != nil && !IsNil(o.IntendedEffect) {
		return true
	}

	return false
}

// SetIntendedEffect gets a reference to the given CodeableConcept and assigns it to the IntendedEffect field.
func (o *MedicinalProductIndication) SetIntendedEffect(v CodeableConcept) {
	o.IntendedEffect = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetDuration() Quantity {
	if o == nil || IsNil(o.Duration) {
		var ret Quantity
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetDurationOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Quantity and assigns it to the Duration field.
func (o *MedicinalProductIndication) SetDuration(v Quantity) {
	o.Duration = &v
}

// GetOtherTherapy returns the OtherTherapy field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetOtherTherapy() []MedicinalProductIndicationOtherTherapy {
	if o == nil || IsNil(o.OtherTherapy) {
		var ret []MedicinalProductIndicationOtherTherapy
		return ret
	}
	return o.OtherTherapy
}

// GetOtherTherapyOk returns a tuple with the OtherTherapy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetOtherTherapyOk() ([]MedicinalProductIndicationOtherTherapy, bool) {
	if o == nil || IsNil(o.OtherTherapy) {
		return nil, false
	}
	return o.OtherTherapy, true
}

// HasOtherTherapy returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasOtherTherapy() bool {
	if o != nil && !IsNil(o.OtherTherapy) {
		return true
	}

	return false
}

// SetOtherTherapy gets a reference to the given []MedicinalProductIndicationOtherTherapy and assigns it to the OtherTherapy field.
func (o *MedicinalProductIndication) SetOtherTherapy(v []MedicinalProductIndicationOtherTherapy) {
	o.OtherTherapy = v
}

// GetUndesirableEffect returns the UndesirableEffect field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetUndesirableEffect() []Reference {
	if o == nil || IsNil(o.UndesirableEffect) {
		var ret []Reference
		return ret
	}
	return o.UndesirableEffect
}

// GetUndesirableEffectOk returns a tuple with the UndesirableEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetUndesirableEffectOk() ([]Reference, bool) {
	if o == nil || IsNil(o.UndesirableEffect) {
		return nil, false
	}
	return o.UndesirableEffect, true
}

// HasUndesirableEffect returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasUndesirableEffect() bool {
	if o != nil && !IsNil(o.UndesirableEffect) {
		return true
	}

	return false
}

// SetUndesirableEffect gets a reference to the given []Reference and assigns it to the UndesirableEffect field.
func (o *MedicinalProductIndication) SetUndesirableEffect(v []Reference) {
	o.UndesirableEffect = v
}

// GetPopulation returns the Population field value if set, zero value otherwise.
func (o *MedicinalProductIndication) GetPopulation() []Population {
	if o == nil || IsNil(o.Population) {
		var ret []Population
		return ret
	}
	return o.Population
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIndication) GetPopulationOk() ([]Population, bool) {
	if o == nil || IsNil(o.Population) {
		return nil, false
	}
	return o.Population, true
}

// HasPopulation returns a boolean if a field has been set.
func (o *MedicinalProductIndication) HasPopulation() bool {
	if o != nil && !IsNil(o.Population) {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given []Population and assigns it to the Population field.
func (o *MedicinalProductIndication) SetPopulation(v []Population) {
	o.Population = v
}

func (o MedicinalProductIndication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductIndication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.DiseaseSymptomProcedure) {
		toSerialize["diseaseSymptomProcedure"] = o.DiseaseSymptomProcedure
	}
	if !IsNil(o.DiseaseStatus) {
		toSerialize["diseaseStatus"] = o.DiseaseStatus
	}
	if !IsNil(o.Comorbidity) {
		toSerialize["comorbidity"] = o.Comorbidity
	}
	if !IsNil(o.IntendedEffect) {
		toSerialize["intendedEffect"] = o.IntendedEffect
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.OtherTherapy) {
		toSerialize["otherTherapy"] = o.OtherTherapy
	}
	if !IsNil(o.UndesirableEffect) {
		toSerialize["undesirableEffect"] = o.UndesirableEffect
	}
	if !IsNil(o.Population) {
		toSerialize["population"] = o.Population
	}
	return toSerialize, nil
}

func (o *MedicinalProductIndication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductIndication := _MedicinalProductIndication{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductIndication)

	if err != nil {
		return err
	}

	*o = MedicinalProductIndication(varMedicinalProductIndication)

	return err
}

type NullableMedicinalProductIndication struct {
	value *MedicinalProductIndication
	isSet bool
}

func (v NullableMedicinalProductIndication) Get() *MedicinalProductIndication {
	return v.value
}

func (v *NullableMedicinalProductIndication) Set(val *MedicinalProductIndication) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductIndication) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductIndication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductIndication(val *MedicinalProductIndication) *NullableMedicinalProductIndication {
	return &NullableMedicinalProductIndication{value: val, isSet: true}
}

func (v NullableMedicinalProductIndication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductIndication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


