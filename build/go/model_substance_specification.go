/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubstanceSpecification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSpecification{}

// SubstanceSpecification The detailed description of a substance, typically at a level beyond what is used for prescribing.
type SubstanceSpecification struct {
	// This is a SubstanceSpecification resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifier by which this substance is known.
	Identifier *Identifier `json:"identifier,omitempty"`
	// High level categorization, e.g. polymer or nucleic acid.
	Type *CodeableConcept `json:"type,omitempty"`
	// Status of substance within the catalogue e.g. approved.
	Status *CodeableConcept `json:"status,omitempty"`
	// If the substance applies to only human or veterinary use.
	Domain *CodeableConcept `json:"domain,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Supporting literature.
	Source []Reference `json:"source,omitempty"`
	// A sequence of Unicode characters
	Comment *string `json:"comment,omitempty"`
	// Moiety, for structural modifications.
	Moiety []SubstanceSpecificationMoiety `json:"moiety,omitempty"`
	// General specifications for this substance, including how it is related to other substances.
	Property []SubstanceSpecificationProperty `json:"property,omitempty"`
	// General information detailing this substance.
	ReferenceInformation *Reference `json:"referenceInformation,omitempty"`
	// Structural information.
	Structure *SubstanceSpecificationStructure `json:"structure,omitempty"`
	// Codes associated with the substance.
	Code []SubstanceSpecificationCode `json:"code,omitempty"`
	// Names applicable to this substance.
	Name []SubstanceSpecificationName `json:"name,omitempty"`
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight []SubstanceSpecificationMolecularWeight `json:"molecularWeight,omitempty"`
	// A link between this substance and another, with details of the relationship.
	Relationship []SubstanceSpecificationRelationship `json:"relationship,omitempty"`
	// Data items specific to nucleic acids.
	NucleicAcid *Reference `json:"nucleicAcid,omitempty"`
	// Data items specific to polymers.
	Polymer *Reference `json:"polymer,omitempty"`
	// Data items specific to proteins.
	Protein *Reference `json:"protein,omitempty"`
	// Material or taxonomic/anatomical source for the substance.
	SourceMaterial *Reference `json:"sourceMaterial,omitempty"`
}

type _SubstanceSpecification SubstanceSpecification

// NewSubstanceSpecification instantiates a new SubstanceSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSpecification(resourceType string) *SubstanceSpecification {
	this := SubstanceSpecification{}
	this.ResourceType = resourceType
	return &this
}

// NewSubstanceSpecificationWithDefaults instantiates a new SubstanceSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSpecificationWithDefaults() *SubstanceSpecification {
	this := SubstanceSpecification{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *SubstanceSpecification) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SubstanceSpecification) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSpecification) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SubstanceSpecification) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *SubstanceSpecification) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SubstanceSpecification) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *SubstanceSpecification) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *SubstanceSpecification) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSpecification) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSpecification) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *SubstanceSpecification) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SubstanceSpecification) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetStatus() CodeableConcept {
	if o == nil || IsNil(o.Status) {
		var ret CodeableConcept
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CodeableConcept and assigns it to the Status field.
func (o *SubstanceSpecification) SetStatus(v CodeableConcept) {
	o.Status = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetDomain() CodeableConcept {
	if o == nil || IsNil(o.Domain) {
		var ret CodeableConcept
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetDomainOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given CodeableConcept and assigns it to the Domain field.
func (o *SubstanceSpecification) SetDomain(v CodeableConcept) {
	o.Domain = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubstanceSpecification) SetDescription(v string) {
	o.Description = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetSource() []Reference {
	if o == nil || IsNil(o.Source) {
		var ret []Reference
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetSourceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []Reference and assigns it to the Source field.
func (o *SubstanceSpecification) SetSource(v []Reference) {
	o.Source = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SubstanceSpecification) SetComment(v string) {
	o.Comment = &v
}

// GetMoiety returns the Moiety field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetMoiety() []SubstanceSpecificationMoiety {
	if o == nil || IsNil(o.Moiety) {
		var ret []SubstanceSpecificationMoiety
		return ret
	}
	return o.Moiety
}

// GetMoietyOk returns a tuple with the Moiety field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetMoietyOk() ([]SubstanceSpecificationMoiety, bool) {
	if o == nil || IsNil(o.Moiety) {
		return nil, false
	}
	return o.Moiety, true
}

// HasMoiety returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasMoiety() bool {
	if o != nil && !IsNil(o.Moiety) {
		return true
	}

	return false
}

// SetMoiety gets a reference to the given []SubstanceSpecificationMoiety and assigns it to the Moiety field.
func (o *SubstanceSpecification) SetMoiety(v []SubstanceSpecificationMoiety) {
	o.Moiety = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetProperty() []SubstanceSpecificationProperty {
	if o == nil || IsNil(o.Property) {
		var ret []SubstanceSpecificationProperty
		return ret
	}
	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetPropertyOk() ([]SubstanceSpecificationProperty, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given []SubstanceSpecificationProperty and assigns it to the Property field.
func (o *SubstanceSpecification) SetProperty(v []SubstanceSpecificationProperty) {
	o.Property = v
}

// GetReferenceInformation returns the ReferenceInformation field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetReferenceInformation() Reference {
	if o == nil || IsNil(o.ReferenceInformation) {
		var ret Reference
		return ret
	}
	return *o.ReferenceInformation
}

// GetReferenceInformationOk returns a tuple with the ReferenceInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetReferenceInformationOk() (*Reference, bool) {
	if o == nil || IsNil(o.ReferenceInformation) {
		return nil, false
	}
	return o.ReferenceInformation, true
}

// HasReferenceInformation returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasReferenceInformation() bool {
	if o != nil && !IsNil(o.ReferenceInformation) {
		return true
	}

	return false
}

// SetReferenceInformation gets a reference to the given Reference and assigns it to the ReferenceInformation field.
func (o *SubstanceSpecification) SetReferenceInformation(v Reference) {
	o.ReferenceInformation = &v
}

// GetStructure returns the Structure field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetStructure() SubstanceSpecificationStructure {
	if o == nil || IsNil(o.Structure) {
		var ret SubstanceSpecificationStructure
		return ret
	}
	return *o.Structure
}

// GetStructureOk returns a tuple with the Structure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetStructureOk() (*SubstanceSpecificationStructure, bool) {
	if o == nil || IsNil(o.Structure) {
		return nil, false
	}
	return o.Structure, true
}

// HasStructure returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasStructure() bool {
	if o != nil && !IsNil(o.Structure) {
		return true
	}

	return false
}

// SetStructure gets a reference to the given SubstanceSpecificationStructure and assigns it to the Structure field.
func (o *SubstanceSpecification) SetStructure(v SubstanceSpecificationStructure) {
	o.Structure = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetCode() []SubstanceSpecificationCode {
	if o == nil || IsNil(o.Code) {
		var ret []SubstanceSpecificationCode
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetCodeOk() ([]SubstanceSpecificationCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []SubstanceSpecificationCode and assigns it to the Code field.
func (o *SubstanceSpecification) SetCode(v []SubstanceSpecificationCode) {
	o.Code = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetName() []SubstanceSpecificationName {
	if o == nil || IsNil(o.Name) {
		var ret []SubstanceSpecificationName
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetNameOk() ([]SubstanceSpecificationName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []SubstanceSpecificationName and assigns it to the Name field.
func (o *SubstanceSpecification) SetName(v []SubstanceSpecificationName) {
	o.Name = v
}

// GetMolecularWeight returns the MolecularWeight field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetMolecularWeight() []SubstanceSpecificationMolecularWeight {
	if o == nil || IsNil(o.MolecularWeight) {
		var ret []SubstanceSpecificationMolecularWeight
		return ret
	}
	return o.MolecularWeight
}

// GetMolecularWeightOk returns a tuple with the MolecularWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetMolecularWeightOk() ([]SubstanceSpecificationMolecularWeight, bool) {
	if o == nil || IsNil(o.MolecularWeight) {
		return nil, false
	}
	return o.MolecularWeight, true
}

// HasMolecularWeight returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasMolecularWeight() bool {
	if o != nil && !IsNil(o.MolecularWeight) {
		return true
	}

	return false
}

// SetMolecularWeight gets a reference to the given []SubstanceSpecificationMolecularWeight and assigns it to the MolecularWeight field.
func (o *SubstanceSpecification) SetMolecularWeight(v []SubstanceSpecificationMolecularWeight) {
	o.MolecularWeight = v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetRelationship() []SubstanceSpecificationRelationship {
	if o == nil || IsNil(o.Relationship) {
		var ret []SubstanceSpecificationRelationship
		return ret
	}
	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetRelationshipOk() ([]SubstanceSpecificationRelationship, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given []SubstanceSpecificationRelationship and assigns it to the Relationship field.
func (o *SubstanceSpecification) SetRelationship(v []SubstanceSpecificationRelationship) {
	o.Relationship = v
}

// GetNucleicAcid returns the NucleicAcid field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetNucleicAcid() Reference {
	if o == nil || IsNil(o.NucleicAcid) {
		var ret Reference
		return ret
	}
	return *o.NucleicAcid
}

// GetNucleicAcidOk returns a tuple with the NucleicAcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetNucleicAcidOk() (*Reference, bool) {
	if o == nil || IsNil(o.NucleicAcid) {
		return nil, false
	}
	return o.NucleicAcid, true
}

// HasNucleicAcid returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasNucleicAcid() bool {
	if o != nil && !IsNil(o.NucleicAcid) {
		return true
	}

	return false
}

// SetNucleicAcid gets a reference to the given Reference and assigns it to the NucleicAcid field.
func (o *SubstanceSpecification) SetNucleicAcid(v Reference) {
	o.NucleicAcid = &v
}

// GetPolymer returns the Polymer field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetPolymer() Reference {
	if o == nil || IsNil(o.Polymer) {
		var ret Reference
		return ret
	}
	return *o.Polymer
}

// GetPolymerOk returns a tuple with the Polymer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetPolymerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Polymer) {
		return nil, false
	}
	return o.Polymer, true
}

// HasPolymer returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasPolymer() bool {
	if o != nil && !IsNil(o.Polymer) {
		return true
	}

	return false
}

// SetPolymer gets a reference to the given Reference and assigns it to the Polymer field.
func (o *SubstanceSpecification) SetPolymer(v Reference) {
	o.Polymer = &v
}

// GetProtein returns the Protein field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetProtein() Reference {
	if o == nil || IsNil(o.Protein) {
		var ret Reference
		return ret
	}
	return *o.Protein
}

// GetProteinOk returns a tuple with the Protein field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetProteinOk() (*Reference, bool) {
	if o == nil || IsNil(o.Protein) {
		return nil, false
	}
	return o.Protein, true
}

// HasProtein returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasProtein() bool {
	if o != nil && !IsNil(o.Protein) {
		return true
	}

	return false
}

// SetProtein gets a reference to the given Reference and assigns it to the Protein field.
func (o *SubstanceSpecification) SetProtein(v Reference) {
	o.Protein = &v
}

// GetSourceMaterial returns the SourceMaterial field value if set, zero value otherwise.
func (o *SubstanceSpecification) GetSourceMaterial() Reference {
	if o == nil || IsNil(o.SourceMaterial) {
		var ret Reference
		return ret
	}
	return *o.SourceMaterial
}

// GetSourceMaterialOk returns a tuple with the SourceMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecification) GetSourceMaterialOk() (*Reference, bool) {
	if o == nil || IsNil(o.SourceMaterial) {
		return nil, false
	}
	return o.SourceMaterial, true
}

// HasSourceMaterial returns a boolean if a field has been set.
func (o *SubstanceSpecification) HasSourceMaterial() bool {
	if o != nil && !IsNil(o.SourceMaterial) {
		return true
	}

	return false
}

// SetSourceMaterial gets a reference to the given Reference and assigns it to the SourceMaterial field.
func (o *SubstanceSpecification) SetSourceMaterial(v Reference) {
	o.SourceMaterial = &v
}

func (o SubstanceSpecification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSpecification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Moiety) {
		toSerialize["moiety"] = o.Moiety
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.ReferenceInformation) {
		toSerialize["referenceInformation"] = o.ReferenceInformation
	}
	if !IsNil(o.Structure) {
		toSerialize["structure"] = o.Structure
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MolecularWeight) {
		toSerialize["molecularWeight"] = o.MolecularWeight
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.NucleicAcid) {
		toSerialize["nucleicAcid"] = o.NucleicAcid
	}
	if !IsNil(o.Polymer) {
		toSerialize["polymer"] = o.Polymer
	}
	if !IsNil(o.Protein) {
		toSerialize["protein"] = o.Protein
	}
	if !IsNil(o.SourceMaterial) {
		toSerialize["sourceMaterial"] = o.SourceMaterial
	}
	return toSerialize, nil
}

func (o *SubstanceSpecification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstanceSpecification := _SubstanceSpecification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstanceSpecification)

	if err != nil {
		return err
	}

	*o = SubstanceSpecification(varSubstanceSpecification)

	return err
}

type NullableSubstanceSpecification struct {
	value *SubstanceSpecification
	isSet bool
}

func (v NullableSubstanceSpecification) Get() *SubstanceSpecification {
	return v.value
}

func (v *NullableSubstanceSpecification) Set(val *SubstanceSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSpecification(val *SubstanceSpecification) *NullableSubstanceSpecification {
	return &NullableSubstanceSpecification{value: val, isSet: true}
}

func (v NullableSubstanceSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


