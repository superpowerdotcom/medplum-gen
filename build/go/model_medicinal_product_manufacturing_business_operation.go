/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MedicinalProductManufacturingBusinessOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductManufacturingBusinessOperation{}

// MedicinalProductManufacturingBusinessOperation Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
type MedicinalProductManufacturingBusinessOperation struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The type of manufacturing operation.
	OperationType *CodeableConcept `json:"operationType,omitempty"`
	// Regulatory authorization reference number.
	AuthorisationReferenceNumber *Identifier `json:"authorisationReferenceNumber,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	EffectiveDate *string `json:"effectiveDate,omitempty"`
	// To indicate if this proces is commercially confidential.
	ConfidentialityIndicator *CodeableConcept `json:"confidentialityIndicator,omitempty"`
	// The manufacturer or establishment associated with the process.
	Manufacturer []Reference `json:"manufacturer,omitempty"`
	// A regulator which oversees the operation.
	Regulator *Reference `json:"regulator,omitempty"`
}

// NewMedicinalProductManufacturingBusinessOperation instantiates a new MedicinalProductManufacturingBusinessOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductManufacturingBusinessOperation() *MedicinalProductManufacturingBusinessOperation {
	this := MedicinalProductManufacturingBusinessOperation{}
	return &this
}

// NewMedicinalProductManufacturingBusinessOperationWithDefaults instantiates a new MedicinalProductManufacturingBusinessOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductManufacturingBusinessOperationWithDefaults() *MedicinalProductManufacturingBusinessOperation {
	this := MedicinalProductManufacturingBusinessOperation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductManufacturingBusinessOperation) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductManufacturingBusinessOperation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductManufacturingBusinessOperation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetOperationType() CodeableConcept {
	if o == nil || IsNil(o.OperationType) {
		var ret CodeableConcept
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetOperationTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given CodeableConcept and assigns it to the OperationType field.
func (o *MedicinalProductManufacturingBusinessOperation) SetOperationType(v CodeableConcept) {
	o.OperationType = &v
}

// GetAuthorisationReferenceNumber returns the AuthorisationReferenceNumber field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetAuthorisationReferenceNumber() Identifier {
	if o == nil || IsNil(o.AuthorisationReferenceNumber) {
		var ret Identifier
		return ret
	}
	return *o.AuthorisationReferenceNumber
}

// GetAuthorisationReferenceNumberOk returns a tuple with the AuthorisationReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetAuthorisationReferenceNumberOk() (*Identifier, bool) {
	if o == nil || IsNil(o.AuthorisationReferenceNumber) {
		return nil, false
	}
	return o.AuthorisationReferenceNumber, true
}

// HasAuthorisationReferenceNumber returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasAuthorisationReferenceNumber() bool {
	if o != nil && !IsNil(o.AuthorisationReferenceNumber) {
		return true
	}

	return false
}

// SetAuthorisationReferenceNumber gets a reference to the given Identifier and assigns it to the AuthorisationReferenceNumber field.
func (o *MedicinalProductManufacturingBusinessOperation) SetAuthorisationReferenceNumber(v Identifier) {
	o.AuthorisationReferenceNumber = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *MedicinalProductManufacturingBusinessOperation) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetConfidentialityIndicator returns the ConfidentialityIndicator field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetConfidentialityIndicator() CodeableConcept {
	if o == nil || IsNil(o.ConfidentialityIndicator) {
		var ret CodeableConcept
		return ret
	}
	return *o.ConfidentialityIndicator
}

// GetConfidentialityIndicatorOk returns a tuple with the ConfidentialityIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetConfidentialityIndicatorOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ConfidentialityIndicator) {
		return nil, false
	}
	return o.ConfidentialityIndicator, true
}

// HasConfidentialityIndicator returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasConfidentialityIndicator() bool {
	if o != nil && !IsNil(o.ConfidentialityIndicator) {
		return true
	}

	return false
}

// SetConfidentialityIndicator gets a reference to the given CodeableConcept and assigns it to the ConfidentialityIndicator field.
func (o *MedicinalProductManufacturingBusinessOperation) SetConfidentialityIndicator(v CodeableConcept) {
	o.ConfidentialityIndicator = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetManufacturer() []Reference {
	if o == nil || IsNil(o.Manufacturer) {
		var ret []Reference
		return ret
	}
	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetManufacturerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given []Reference and assigns it to the Manufacturer field.
func (o *MedicinalProductManufacturingBusinessOperation) SetManufacturer(v []Reference) {
	o.Manufacturer = v
}

// GetRegulator returns the Regulator field value if set, zero value otherwise.
func (o *MedicinalProductManufacturingBusinessOperation) GetRegulator() Reference {
	if o == nil || IsNil(o.Regulator) {
		var ret Reference
		return ret
	}
	return *o.Regulator
}

// GetRegulatorOk returns a tuple with the Regulator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductManufacturingBusinessOperation) GetRegulatorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Regulator) {
		return nil, false
	}
	return o.Regulator, true
}

// HasRegulator returns a boolean if a field has been set.
func (o *MedicinalProductManufacturingBusinessOperation) HasRegulator() bool {
	if o != nil && !IsNil(o.Regulator) {
		return true
	}

	return false
}

// SetRegulator gets a reference to the given Reference and assigns it to the Regulator field.
func (o *MedicinalProductManufacturingBusinessOperation) SetRegulator(v Reference) {
	o.Regulator = &v
}

func (o MedicinalProductManufacturingBusinessOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductManufacturingBusinessOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if !IsNil(o.AuthorisationReferenceNumber) {
		toSerialize["authorisationReferenceNumber"] = o.AuthorisationReferenceNumber
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.ConfidentialityIndicator) {
		toSerialize["confidentialityIndicator"] = o.ConfidentialityIndicator
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.Regulator) {
		toSerialize["regulator"] = o.Regulator
	}
	return toSerialize, nil
}

type NullableMedicinalProductManufacturingBusinessOperation struct {
	value *MedicinalProductManufacturingBusinessOperation
	isSet bool
}

func (v NullableMedicinalProductManufacturingBusinessOperation) Get() *MedicinalProductManufacturingBusinessOperation {
	return v.value
}

func (v *NullableMedicinalProductManufacturingBusinessOperation) Set(val *MedicinalProductManufacturingBusinessOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductManufacturingBusinessOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductManufacturingBusinessOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductManufacturingBusinessOperation(val *MedicinalProductManufacturingBusinessOperation) *NullableMedicinalProductManufacturingBusinessOperation {
	return &NullableMedicinalProductManufacturingBusinessOperation{value: val, isSet: true}
}

func (v NullableMedicinalProductManufacturingBusinessOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductManufacturingBusinessOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


