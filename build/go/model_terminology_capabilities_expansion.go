/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TerminologyCapabilitiesExpansion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerminologyCapabilitiesExpansion{}

// TerminologyCapabilitiesExpansion A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
type TerminologyCapabilitiesExpansion struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Value of \"true\" or \"false\"
	Hierarchical *bool `json:"hierarchical,omitempty"`
	// Value of \"true\" or \"false\"
	Paging *bool `json:"paging,omitempty"`
	// Value of \"true\" or \"false\"
	Incomplete *bool `json:"incomplete,omitempty"`
	// Supported expansion parameter.
	Parameter []TerminologyCapabilitiesParameter `json:"parameter,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	TextFilter *string `json:"textFilter,omitempty"`
}

// NewTerminologyCapabilitiesExpansion instantiates a new TerminologyCapabilitiesExpansion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminologyCapabilitiesExpansion() *TerminologyCapabilitiesExpansion {
	this := TerminologyCapabilitiesExpansion{}
	return &this
}

// NewTerminologyCapabilitiesExpansionWithDefaults instantiates a new TerminologyCapabilitiesExpansion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminologyCapabilitiesExpansionWithDefaults() *TerminologyCapabilitiesExpansion {
	this := TerminologyCapabilitiesExpansion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TerminologyCapabilitiesExpansion) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TerminologyCapabilitiesExpansion) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TerminologyCapabilitiesExpansion) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetHierarchical returns the Hierarchical field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetHierarchical() bool {
	if o == nil || IsNil(o.Hierarchical) {
		var ret bool
		return ret
	}
	return *o.Hierarchical
}

// GetHierarchicalOk returns a tuple with the Hierarchical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetHierarchicalOk() (*bool, bool) {
	if o == nil || IsNil(o.Hierarchical) {
		return nil, false
	}
	return o.Hierarchical, true
}

// HasHierarchical returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasHierarchical() bool {
	if o != nil && !IsNil(o.Hierarchical) {
		return true
	}

	return false
}

// SetHierarchical gets a reference to the given bool and assigns it to the Hierarchical field.
func (o *TerminologyCapabilitiesExpansion) SetHierarchical(v bool) {
	o.Hierarchical = &v
}

// GetPaging returns the Paging field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetPaging() bool {
	if o == nil || IsNil(o.Paging) {
		var ret bool
		return ret
	}
	return *o.Paging
}

// GetPagingOk returns a tuple with the Paging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetPagingOk() (*bool, bool) {
	if o == nil || IsNil(o.Paging) {
		return nil, false
	}
	return o.Paging, true
}

// HasPaging returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasPaging() bool {
	if o != nil && !IsNil(o.Paging) {
		return true
	}

	return false
}

// SetPaging gets a reference to the given bool and assigns it to the Paging field.
func (o *TerminologyCapabilitiesExpansion) SetPaging(v bool) {
	o.Paging = &v
}

// GetIncomplete returns the Incomplete field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetIncomplete() bool {
	if o == nil || IsNil(o.Incomplete) {
		var ret bool
		return ret
	}
	return *o.Incomplete
}

// GetIncompleteOk returns a tuple with the Incomplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetIncompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Incomplete) {
		return nil, false
	}
	return o.Incomplete, true
}

// HasIncomplete returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasIncomplete() bool {
	if o != nil && !IsNil(o.Incomplete) {
		return true
	}

	return false
}

// SetIncomplete gets a reference to the given bool and assigns it to the Incomplete field.
func (o *TerminologyCapabilitiesExpansion) SetIncomplete(v bool) {
	o.Incomplete = &v
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetParameter() []TerminologyCapabilitiesParameter {
	if o == nil || IsNil(o.Parameter) {
		var ret []TerminologyCapabilitiesParameter
		return ret
	}
	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetParameterOk() ([]TerminologyCapabilitiesParameter, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given []TerminologyCapabilitiesParameter and assigns it to the Parameter field.
func (o *TerminologyCapabilitiesExpansion) SetParameter(v []TerminologyCapabilitiesParameter) {
	o.Parameter = v
}

// GetTextFilter returns the TextFilter field value if set, zero value otherwise.
func (o *TerminologyCapabilitiesExpansion) GetTextFilter() string {
	if o == nil || IsNil(o.TextFilter) {
		var ret string
		return ret
	}
	return *o.TextFilter
}

// GetTextFilterOk returns a tuple with the TextFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminologyCapabilitiesExpansion) GetTextFilterOk() (*string, bool) {
	if o == nil || IsNil(o.TextFilter) {
		return nil, false
	}
	return o.TextFilter, true
}

// HasTextFilter returns a boolean if a field has been set.
func (o *TerminologyCapabilitiesExpansion) HasTextFilter() bool {
	if o != nil && !IsNil(o.TextFilter) {
		return true
	}

	return false
}

// SetTextFilter gets a reference to the given string and assigns it to the TextFilter field.
func (o *TerminologyCapabilitiesExpansion) SetTextFilter(v string) {
	o.TextFilter = &v
}

func (o TerminologyCapabilitiesExpansion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminologyCapabilitiesExpansion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Hierarchical) {
		toSerialize["hierarchical"] = o.Hierarchical
	}
	if !IsNil(o.Paging) {
		toSerialize["paging"] = o.Paging
	}
	if !IsNil(o.Incomplete) {
		toSerialize["incomplete"] = o.Incomplete
	}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	if !IsNil(o.TextFilter) {
		toSerialize["textFilter"] = o.TextFilter
	}
	return toSerialize, nil
}

type NullableTerminologyCapabilitiesExpansion struct {
	value *TerminologyCapabilitiesExpansion
	isSet bool
}

func (v NullableTerminologyCapabilitiesExpansion) Get() *TerminologyCapabilitiesExpansion {
	return v.value
}

func (v *NullableTerminologyCapabilitiesExpansion) Set(val *TerminologyCapabilitiesExpansion) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminologyCapabilitiesExpansion) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminologyCapabilitiesExpansion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminologyCapabilitiesExpansion(val *TerminologyCapabilitiesExpansion) *NullableTerminologyCapabilitiesExpansion {
	return &NullableTerminologyCapabilitiesExpansion{value: val, isSet: true}
}

func (v NullableTerminologyCapabilitiesExpansion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminologyCapabilitiesExpansion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


