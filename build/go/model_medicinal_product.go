/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProduct{}

// MedicinalProduct Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
type MedicinalProduct struct {
	// This is a MedicinalProduct resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifier for this product. Could be an MPID.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Regulatory type, e.g. Investigational or Authorized.
	Type *CodeableConcept `json:"type,omitempty"`
	// If this medicine applies to human or veterinary uses.
	Domain *Coding `json:"domain,omitempty"`
	// The dose form for a single part product, or combined form of a multiple part product.
	CombinedPharmaceuticalDoseForm *CodeableConcept `json:"combinedPharmaceuticalDoseForm,omitempty"`
	// The legal status of supply of the medicinal product as classified by the regulator.
	LegalStatusOfSupply *CodeableConcept `json:"legalStatusOfSupply,omitempty"`
	// Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
	AdditionalMonitoringIndicator *CodeableConcept `json:"additionalMonitoringIndicator,omitempty"`
	// Whether the Medicinal Product is subject to special measures for regulatory reasons.
	SpecialMeasures []string `json:"specialMeasures,omitempty"`
	// If authorised for use in children.
	PaediatricUseIndicator *CodeableConcept `json:"paediatricUseIndicator,omitempty"`
	// Allows the product to be classified by various systems.
	ProductClassification []CodeableConcept `json:"productClassification,omitempty"`
	// Marketing status of the medicinal product, in contrast to marketing authorizaton.
	MarketingStatus []MarketingStatus `json:"marketingStatus,omitempty"`
	// Pharmaceutical aspects of product.
	PharmaceuticalProduct []Reference `json:"pharmaceuticalProduct,omitempty"`
	// Package representation for the product.
	PackagedMedicinalProduct []Reference `json:"packagedMedicinalProduct,omitempty"`
	// Supporting documentation, typically for regulatory submission.
	AttachedDocument []Reference `json:"attachedDocument,omitempty"`
	// A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
	MasterFile []Reference `json:"masterFile,omitempty"`
	// A product specific contact, person (in a role), or an organization.
	Contact []Reference `json:"contact,omitempty"`
	// Clinical trials or studies that this product is involved in.
	ClinicalTrial []Reference `json:"clinicalTrial,omitempty"`
	// The product's name, including full name and possibly coded parts.
	Name []MedicinalProductName `json:"name"`
	// Reference to another product, e.g. for linking authorised to investigational product.
	CrossReference []Identifier `json:"crossReference,omitempty"`
	// An operation applied to the product, for manufacturing or adminsitrative purpose.
	ManufacturingBusinessOperation []MedicinalProductManufacturingBusinessOperation `json:"manufacturingBusinessOperation,omitempty"`
	// Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
	SpecialDesignation []MedicinalProductSpecialDesignation `json:"specialDesignation,omitempty"`
}

type _MedicinalProduct MedicinalProduct

// NewMedicinalProduct instantiates a new MedicinalProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProduct(resourceType string, name []MedicinalProductName) *MedicinalProduct {
	this := MedicinalProduct{}
	this.ResourceType = resourceType
	this.Name = name
	return &this
}

// NewMedicinalProductWithDefaults instantiates a new MedicinalProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductWithDefaults() *MedicinalProduct {
	this := MedicinalProduct{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicinalProduct) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicinalProduct) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProduct) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProduct) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicinalProduct) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicinalProduct) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicinalProduct) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicinalProduct) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicinalProduct) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicinalProduct) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicinalProduct) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicinalProduct) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicinalProduct) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicinalProduct) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicinalProduct) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicinalProduct) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicinalProduct) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicinalProduct) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicinalProduct) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProduct) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProduct) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProduct) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProduct) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProduct) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProduct) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicinalProduct) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicinalProduct) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *MedicinalProduct) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MedicinalProduct) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MedicinalProduct) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *MedicinalProduct) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *MedicinalProduct) GetDomain() Coding {
	if o == nil || IsNil(o.Domain) {
		var ret Coding
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetDomainOk() (*Coding, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *MedicinalProduct) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given Coding and assigns it to the Domain field.
func (o *MedicinalProduct) SetDomain(v Coding) {
	o.Domain = &v
}

// GetCombinedPharmaceuticalDoseForm returns the CombinedPharmaceuticalDoseForm field value if set, zero value otherwise.
func (o *MedicinalProduct) GetCombinedPharmaceuticalDoseForm() CodeableConcept {
	if o == nil || IsNil(o.CombinedPharmaceuticalDoseForm) {
		var ret CodeableConcept
		return ret
	}
	return *o.CombinedPharmaceuticalDoseForm
}

// GetCombinedPharmaceuticalDoseFormOk returns a tuple with the CombinedPharmaceuticalDoseForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetCombinedPharmaceuticalDoseFormOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CombinedPharmaceuticalDoseForm) {
		return nil, false
	}
	return o.CombinedPharmaceuticalDoseForm, true
}

// HasCombinedPharmaceuticalDoseForm returns a boolean if a field has been set.
func (o *MedicinalProduct) HasCombinedPharmaceuticalDoseForm() bool {
	if o != nil && !IsNil(o.CombinedPharmaceuticalDoseForm) {
		return true
	}

	return false
}

// SetCombinedPharmaceuticalDoseForm gets a reference to the given CodeableConcept and assigns it to the CombinedPharmaceuticalDoseForm field.
func (o *MedicinalProduct) SetCombinedPharmaceuticalDoseForm(v CodeableConcept) {
	o.CombinedPharmaceuticalDoseForm = &v
}

// GetLegalStatusOfSupply returns the LegalStatusOfSupply field value if set, zero value otherwise.
func (o *MedicinalProduct) GetLegalStatusOfSupply() CodeableConcept {
	if o == nil || IsNil(o.LegalStatusOfSupply) {
		var ret CodeableConcept
		return ret
	}
	return *o.LegalStatusOfSupply
}

// GetLegalStatusOfSupplyOk returns a tuple with the LegalStatusOfSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetLegalStatusOfSupplyOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.LegalStatusOfSupply) {
		return nil, false
	}
	return o.LegalStatusOfSupply, true
}

// HasLegalStatusOfSupply returns a boolean if a field has been set.
func (o *MedicinalProduct) HasLegalStatusOfSupply() bool {
	if o != nil && !IsNil(o.LegalStatusOfSupply) {
		return true
	}

	return false
}

// SetLegalStatusOfSupply gets a reference to the given CodeableConcept and assigns it to the LegalStatusOfSupply field.
func (o *MedicinalProduct) SetLegalStatusOfSupply(v CodeableConcept) {
	o.LegalStatusOfSupply = &v
}

// GetAdditionalMonitoringIndicator returns the AdditionalMonitoringIndicator field value if set, zero value otherwise.
func (o *MedicinalProduct) GetAdditionalMonitoringIndicator() CodeableConcept {
	if o == nil || IsNil(o.AdditionalMonitoringIndicator) {
		var ret CodeableConcept
		return ret
	}
	return *o.AdditionalMonitoringIndicator
}

// GetAdditionalMonitoringIndicatorOk returns a tuple with the AdditionalMonitoringIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetAdditionalMonitoringIndicatorOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AdditionalMonitoringIndicator) {
		return nil, false
	}
	return o.AdditionalMonitoringIndicator, true
}

// HasAdditionalMonitoringIndicator returns a boolean if a field has been set.
func (o *MedicinalProduct) HasAdditionalMonitoringIndicator() bool {
	if o != nil && !IsNil(o.AdditionalMonitoringIndicator) {
		return true
	}

	return false
}

// SetAdditionalMonitoringIndicator gets a reference to the given CodeableConcept and assigns it to the AdditionalMonitoringIndicator field.
func (o *MedicinalProduct) SetAdditionalMonitoringIndicator(v CodeableConcept) {
	o.AdditionalMonitoringIndicator = &v
}

// GetSpecialMeasures returns the SpecialMeasures field value if set, zero value otherwise.
func (o *MedicinalProduct) GetSpecialMeasures() []string {
	if o == nil || IsNil(o.SpecialMeasures) {
		var ret []string
		return ret
	}
	return o.SpecialMeasures
}

// GetSpecialMeasuresOk returns a tuple with the SpecialMeasures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetSpecialMeasuresOk() ([]string, bool) {
	if o == nil || IsNil(o.SpecialMeasures) {
		return nil, false
	}
	return o.SpecialMeasures, true
}

// HasSpecialMeasures returns a boolean if a field has been set.
func (o *MedicinalProduct) HasSpecialMeasures() bool {
	if o != nil && !IsNil(o.SpecialMeasures) {
		return true
	}

	return false
}

// SetSpecialMeasures gets a reference to the given []string and assigns it to the SpecialMeasures field.
func (o *MedicinalProduct) SetSpecialMeasures(v []string) {
	o.SpecialMeasures = v
}

// GetPaediatricUseIndicator returns the PaediatricUseIndicator field value if set, zero value otherwise.
func (o *MedicinalProduct) GetPaediatricUseIndicator() CodeableConcept {
	if o == nil || IsNil(o.PaediatricUseIndicator) {
		var ret CodeableConcept
		return ret
	}
	return *o.PaediatricUseIndicator
}

// GetPaediatricUseIndicatorOk returns a tuple with the PaediatricUseIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetPaediatricUseIndicatorOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PaediatricUseIndicator) {
		return nil, false
	}
	return o.PaediatricUseIndicator, true
}

// HasPaediatricUseIndicator returns a boolean if a field has been set.
func (o *MedicinalProduct) HasPaediatricUseIndicator() bool {
	if o != nil && !IsNil(o.PaediatricUseIndicator) {
		return true
	}

	return false
}

// SetPaediatricUseIndicator gets a reference to the given CodeableConcept and assigns it to the PaediatricUseIndicator field.
func (o *MedicinalProduct) SetPaediatricUseIndicator(v CodeableConcept) {
	o.PaediatricUseIndicator = &v
}

// GetProductClassification returns the ProductClassification field value if set, zero value otherwise.
func (o *MedicinalProduct) GetProductClassification() []CodeableConcept {
	if o == nil || IsNil(o.ProductClassification) {
		var ret []CodeableConcept
		return ret
	}
	return o.ProductClassification
}

// GetProductClassificationOk returns a tuple with the ProductClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetProductClassificationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductClassification) {
		return nil, false
	}
	return o.ProductClassification, true
}

// HasProductClassification returns a boolean if a field has been set.
func (o *MedicinalProduct) HasProductClassification() bool {
	if o != nil && !IsNil(o.ProductClassification) {
		return true
	}

	return false
}

// SetProductClassification gets a reference to the given []CodeableConcept and assigns it to the ProductClassification field.
func (o *MedicinalProduct) SetProductClassification(v []CodeableConcept) {
	o.ProductClassification = v
}

// GetMarketingStatus returns the MarketingStatus field value if set, zero value otherwise.
func (o *MedicinalProduct) GetMarketingStatus() []MarketingStatus {
	if o == nil || IsNil(o.MarketingStatus) {
		var ret []MarketingStatus
		return ret
	}
	return o.MarketingStatus
}

// GetMarketingStatusOk returns a tuple with the MarketingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetMarketingStatusOk() ([]MarketingStatus, bool) {
	if o == nil || IsNil(o.MarketingStatus) {
		return nil, false
	}
	return o.MarketingStatus, true
}

// HasMarketingStatus returns a boolean if a field has been set.
func (o *MedicinalProduct) HasMarketingStatus() bool {
	if o != nil && !IsNil(o.MarketingStatus) {
		return true
	}

	return false
}

// SetMarketingStatus gets a reference to the given []MarketingStatus and assigns it to the MarketingStatus field.
func (o *MedicinalProduct) SetMarketingStatus(v []MarketingStatus) {
	o.MarketingStatus = v
}

// GetPharmaceuticalProduct returns the PharmaceuticalProduct field value if set, zero value otherwise.
func (o *MedicinalProduct) GetPharmaceuticalProduct() []Reference {
	if o == nil || IsNil(o.PharmaceuticalProduct) {
		var ret []Reference
		return ret
	}
	return o.PharmaceuticalProduct
}

// GetPharmaceuticalProductOk returns a tuple with the PharmaceuticalProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetPharmaceuticalProductOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PharmaceuticalProduct) {
		return nil, false
	}
	return o.PharmaceuticalProduct, true
}

// HasPharmaceuticalProduct returns a boolean if a field has been set.
func (o *MedicinalProduct) HasPharmaceuticalProduct() bool {
	if o != nil && !IsNil(o.PharmaceuticalProduct) {
		return true
	}

	return false
}

// SetPharmaceuticalProduct gets a reference to the given []Reference and assigns it to the PharmaceuticalProduct field.
func (o *MedicinalProduct) SetPharmaceuticalProduct(v []Reference) {
	o.PharmaceuticalProduct = v
}

// GetPackagedMedicinalProduct returns the PackagedMedicinalProduct field value if set, zero value otherwise.
func (o *MedicinalProduct) GetPackagedMedicinalProduct() []Reference {
	if o == nil || IsNil(o.PackagedMedicinalProduct) {
		var ret []Reference
		return ret
	}
	return o.PackagedMedicinalProduct
}

// GetPackagedMedicinalProductOk returns a tuple with the PackagedMedicinalProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetPackagedMedicinalProductOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PackagedMedicinalProduct) {
		return nil, false
	}
	return o.PackagedMedicinalProduct, true
}

// HasPackagedMedicinalProduct returns a boolean if a field has been set.
func (o *MedicinalProduct) HasPackagedMedicinalProduct() bool {
	if o != nil && !IsNil(o.PackagedMedicinalProduct) {
		return true
	}

	return false
}

// SetPackagedMedicinalProduct gets a reference to the given []Reference and assigns it to the PackagedMedicinalProduct field.
func (o *MedicinalProduct) SetPackagedMedicinalProduct(v []Reference) {
	o.PackagedMedicinalProduct = v
}

// GetAttachedDocument returns the AttachedDocument field value if set, zero value otherwise.
func (o *MedicinalProduct) GetAttachedDocument() []Reference {
	if o == nil || IsNil(o.AttachedDocument) {
		var ret []Reference
		return ret
	}
	return o.AttachedDocument
}

// GetAttachedDocumentOk returns a tuple with the AttachedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetAttachedDocumentOk() ([]Reference, bool) {
	if o == nil || IsNil(o.AttachedDocument) {
		return nil, false
	}
	return o.AttachedDocument, true
}

// HasAttachedDocument returns a boolean if a field has been set.
func (o *MedicinalProduct) HasAttachedDocument() bool {
	if o != nil && !IsNil(o.AttachedDocument) {
		return true
	}

	return false
}

// SetAttachedDocument gets a reference to the given []Reference and assigns it to the AttachedDocument field.
func (o *MedicinalProduct) SetAttachedDocument(v []Reference) {
	o.AttachedDocument = v
}

// GetMasterFile returns the MasterFile field value if set, zero value otherwise.
func (o *MedicinalProduct) GetMasterFile() []Reference {
	if o == nil || IsNil(o.MasterFile) {
		var ret []Reference
		return ret
	}
	return o.MasterFile
}

// GetMasterFileOk returns a tuple with the MasterFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetMasterFileOk() ([]Reference, bool) {
	if o == nil || IsNil(o.MasterFile) {
		return nil, false
	}
	return o.MasterFile, true
}

// HasMasterFile returns a boolean if a field has been set.
func (o *MedicinalProduct) HasMasterFile() bool {
	if o != nil && !IsNil(o.MasterFile) {
		return true
	}

	return false
}

// SetMasterFile gets a reference to the given []Reference and assigns it to the MasterFile field.
func (o *MedicinalProduct) SetMasterFile(v []Reference) {
	o.MasterFile = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *MedicinalProduct) GetContact() []Reference {
	if o == nil || IsNil(o.Contact) {
		var ret []Reference
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetContactOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *MedicinalProduct) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []Reference and assigns it to the Contact field.
func (o *MedicinalProduct) SetContact(v []Reference) {
	o.Contact = v
}

// GetClinicalTrial returns the ClinicalTrial field value if set, zero value otherwise.
func (o *MedicinalProduct) GetClinicalTrial() []Reference {
	if o == nil || IsNil(o.ClinicalTrial) {
		var ret []Reference
		return ret
	}
	return o.ClinicalTrial
}

// GetClinicalTrialOk returns a tuple with the ClinicalTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetClinicalTrialOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ClinicalTrial) {
		return nil, false
	}
	return o.ClinicalTrial, true
}

// HasClinicalTrial returns a boolean if a field has been set.
func (o *MedicinalProduct) HasClinicalTrial() bool {
	if o != nil && !IsNil(o.ClinicalTrial) {
		return true
	}

	return false
}

// SetClinicalTrial gets a reference to the given []Reference and assigns it to the ClinicalTrial field.
func (o *MedicinalProduct) SetClinicalTrial(v []Reference) {
	o.ClinicalTrial = v
}

// GetName returns the Name field value
func (o *MedicinalProduct) GetName() []MedicinalProductName {
	if o == nil {
		var ret []MedicinalProductName
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetNameOk() ([]MedicinalProductName, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name, true
}

// SetName sets field value
func (o *MedicinalProduct) SetName(v []MedicinalProductName) {
	o.Name = v
}

// GetCrossReference returns the CrossReference field value if set, zero value otherwise.
func (o *MedicinalProduct) GetCrossReference() []Identifier {
	if o == nil || IsNil(o.CrossReference) {
		var ret []Identifier
		return ret
	}
	return o.CrossReference
}

// GetCrossReferenceOk returns a tuple with the CrossReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetCrossReferenceOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.CrossReference) {
		return nil, false
	}
	return o.CrossReference, true
}

// HasCrossReference returns a boolean if a field has been set.
func (o *MedicinalProduct) HasCrossReference() bool {
	if o != nil && !IsNil(o.CrossReference) {
		return true
	}

	return false
}

// SetCrossReference gets a reference to the given []Identifier and assigns it to the CrossReference field.
func (o *MedicinalProduct) SetCrossReference(v []Identifier) {
	o.CrossReference = v
}

// GetManufacturingBusinessOperation returns the ManufacturingBusinessOperation field value if set, zero value otherwise.
func (o *MedicinalProduct) GetManufacturingBusinessOperation() []MedicinalProductManufacturingBusinessOperation {
	if o == nil || IsNil(o.ManufacturingBusinessOperation) {
		var ret []MedicinalProductManufacturingBusinessOperation
		return ret
	}
	return o.ManufacturingBusinessOperation
}

// GetManufacturingBusinessOperationOk returns a tuple with the ManufacturingBusinessOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetManufacturingBusinessOperationOk() ([]MedicinalProductManufacturingBusinessOperation, bool) {
	if o == nil || IsNil(o.ManufacturingBusinessOperation) {
		return nil, false
	}
	return o.ManufacturingBusinessOperation, true
}

// HasManufacturingBusinessOperation returns a boolean if a field has been set.
func (o *MedicinalProduct) HasManufacturingBusinessOperation() bool {
	if o != nil && !IsNil(o.ManufacturingBusinessOperation) {
		return true
	}

	return false
}

// SetManufacturingBusinessOperation gets a reference to the given []MedicinalProductManufacturingBusinessOperation and assigns it to the ManufacturingBusinessOperation field.
func (o *MedicinalProduct) SetManufacturingBusinessOperation(v []MedicinalProductManufacturingBusinessOperation) {
	o.ManufacturingBusinessOperation = v
}

// GetSpecialDesignation returns the SpecialDesignation field value if set, zero value otherwise.
func (o *MedicinalProduct) GetSpecialDesignation() []MedicinalProductSpecialDesignation {
	if o == nil || IsNil(o.SpecialDesignation) {
		var ret []MedicinalProductSpecialDesignation
		return ret
	}
	return o.SpecialDesignation
}

// GetSpecialDesignationOk returns a tuple with the SpecialDesignation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProduct) GetSpecialDesignationOk() ([]MedicinalProductSpecialDesignation, bool) {
	if o == nil || IsNil(o.SpecialDesignation) {
		return nil, false
	}
	return o.SpecialDesignation, true
}

// HasSpecialDesignation returns a boolean if a field has been set.
func (o *MedicinalProduct) HasSpecialDesignation() bool {
	if o != nil && !IsNil(o.SpecialDesignation) {
		return true
	}

	return false
}

// SetSpecialDesignation gets a reference to the given []MedicinalProductSpecialDesignation and assigns it to the SpecialDesignation field.
func (o *MedicinalProduct) SetSpecialDesignation(v []MedicinalProductSpecialDesignation) {
	o.SpecialDesignation = v
}

func (o MedicinalProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.CombinedPharmaceuticalDoseForm) {
		toSerialize["combinedPharmaceuticalDoseForm"] = o.CombinedPharmaceuticalDoseForm
	}
	if !IsNil(o.LegalStatusOfSupply) {
		toSerialize["legalStatusOfSupply"] = o.LegalStatusOfSupply
	}
	if !IsNil(o.AdditionalMonitoringIndicator) {
		toSerialize["additionalMonitoringIndicator"] = o.AdditionalMonitoringIndicator
	}
	if !IsNil(o.SpecialMeasures) {
		toSerialize["specialMeasures"] = o.SpecialMeasures
	}
	if !IsNil(o.PaediatricUseIndicator) {
		toSerialize["paediatricUseIndicator"] = o.PaediatricUseIndicator
	}
	if !IsNil(o.ProductClassification) {
		toSerialize["productClassification"] = o.ProductClassification
	}
	if !IsNil(o.MarketingStatus) {
		toSerialize["marketingStatus"] = o.MarketingStatus
	}
	if !IsNil(o.PharmaceuticalProduct) {
		toSerialize["pharmaceuticalProduct"] = o.PharmaceuticalProduct
	}
	if !IsNil(o.PackagedMedicinalProduct) {
		toSerialize["packagedMedicinalProduct"] = o.PackagedMedicinalProduct
	}
	if !IsNil(o.AttachedDocument) {
		toSerialize["attachedDocument"] = o.AttachedDocument
	}
	if !IsNil(o.MasterFile) {
		toSerialize["masterFile"] = o.MasterFile
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.ClinicalTrial) {
		toSerialize["clinicalTrial"] = o.ClinicalTrial
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.CrossReference) {
		toSerialize["crossReference"] = o.CrossReference
	}
	if !IsNil(o.ManufacturingBusinessOperation) {
		toSerialize["manufacturingBusinessOperation"] = o.ManufacturingBusinessOperation
	}
	if !IsNil(o.SpecialDesignation) {
		toSerialize["specialDesignation"] = o.SpecialDesignation
	}
	return toSerialize, nil
}

func (o *MedicinalProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProduct := _MedicinalProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProduct)

	if err != nil {
		return err
	}

	*o = MedicinalProduct(varMedicinalProduct)

	return err
}

type NullableMedicinalProduct struct {
	value *MedicinalProduct
	isSet bool
}

func (v NullableMedicinalProduct) Get() *MedicinalProduct {
	return v.value
}

func (v *NullableMedicinalProduct) Set(val *MedicinalProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProduct(val *MedicinalProduct) *NullableMedicinalProduct {
	return &NullableMedicinalProduct{value: val, isSet: true}
}

func (v NullableMedicinalProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


