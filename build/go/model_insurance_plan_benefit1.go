/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InsurancePlanBenefit1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsurancePlanBenefit1{}

// InsurancePlanBenefit1 Details of a Health Insurance product/plan provided by an organization.
type InsurancePlanBenefit1 struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
	Type CodeableConcept `json:"type"`
	// List of the costs associated with a specific benefit.
	Cost []InsurancePlanCost `json:"cost,omitempty"`
}

type _InsurancePlanBenefit1 InsurancePlanBenefit1

// NewInsurancePlanBenefit1 instantiates a new InsurancePlanBenefit1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsurancePlanBenefit1(type_ CodeableConcept) *InsurancePlanBenefit1 {
	this := InsurancePlanBenefit1{}
	this.Type = type_
	return &this
}

// NewInsurancePlanBenefit1WithDefaults instantiates a new InsurancePlanBenefit1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsurancePlanBenefit1WithDefaults() *InsurancePlanBenefit1 {
	this := InsurancePlanBenefit1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InsurancePlanBenefit1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanBenefit1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InsurancePlanBenefit1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InsurancePlanBenefit1) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *InsurancePlanBenefit1) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanBenefit1) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *InsurancePlanBenefit1) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *InsurancePlanBenefit1) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *InsurancePlanBenefit1) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanBenefit1) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *InsurancePlanBenefit1) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *InsurancePlanBenefit1) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value
func (o *InsurancePlanBenefit1) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InsurancePlanBenefit1) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InsurancePlanBenefit1) SetType(v CodeableConcept) {
	o.Type = v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *InsurancePlanBenefit1) GetCost() []InsurancePlanCost {
	if o == nil || IsNil(o.Cost) {
		var ret []InsurancePlanCost
		return ret
	}
	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsurancePlanBenefit1) GetCostOk() ([]InsurancePlanCost, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *InsurancePlanBenefit1) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given []InsurancePlanCost and assigns it to the Cost field.
func (o *InsurancePlanBenefit1) SetCost(v []InsurancePlanCost) {
	o.Cost = v
}

func (o InsurancePlanBenefit1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsurancePlanBenefit1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	return toSerialize, nil
}

func (o *InsurancePlanBenefit1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsurancePlanBenefit1 := _InsurancePlanBenefit1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInsurancePlanBenefit1)

	if err != nil {
		return err
	}

	*o = InsurancePlanBenefit1(varInsurancePlanBenefit1)

	return err
}

type NullableInsurancePlanBenefit1 struct {
	value *InsurancePlanBenefit1
	isSet bool
}

func (v NullableInsurancePlanBenefit1) Get() *InsurancePlanBenefit1 {
	return v.value
}

func (v *NullableInsurancePlanBenefit1) Set(val *InsurancePlanBenefit1) {
	v.value = val
	v.isSet = true
}

func (v NullableInsurancePlanBenefit1) IsSet() bool {
	return v.isSet
}

func (v *NullableInsurancePlanBenefit1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsurancePlanBenefit1(val *InsurancePlanBenefit1) *NullableInsurancePlanBenefit1 {
	return &NullableInsurancePlanBenefit1{value: val, isSet: true}
}

func (v NullableInsurancePlanBenefit1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsurancePlanBenefit1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


