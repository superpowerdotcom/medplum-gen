/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MeasureReportStratum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasureReportStratum{}

// MeasureReportStratum The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
type MeasureReportStratum struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
	Value *CodeableConcept `json:"value,omitempty"`
	// A stratifier component value.
	Component []MeasureReportComponent `json:"component,omitempty"`
	// The populations that make up the stratum, one for each type of population appropriate to the measure.
	Population []MeasureReportPopulation1 `json:"population,omitempty"`
	// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
	MeasureScore *Quantity `json:"measureScore,omitempty"`
}

// NewMeasureReportStratum instantiates a new MeasureReportStratum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasureReportStratum() *MeasureReportStratum {
	this := MeasureReportStratum{}
	return &this
}

// NewMeasureReportStratumWithDefaults instantiates a new MeasureReportStratum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasureReportStratumWithDefaults() *MeasureReportStratum {
	this := MeasureReportStratum{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeasureReportStratum) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MeasureReportStratum) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MeasureReportStratum) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetValue() CodeableConcept {
	if o == nil || IsNil(o.Value) {
		var ret CodeableConcept
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetValueOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given CodeableConcept and assigns it to the Value field.
func (o *MeasureReportStratum) SetValue(v CodeableConcept) {
	o.Value = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetComponent() []MeasureReportComponent {
	if o == nil || IsNil(o.Component) {
		var ret []MeasureReportComponent
		return ret
	}
	return o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetComponentOk() ([]MeasureReportComponent, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given []MeasureReportComponent and assigns it to the Component field.
func (o *MeasureReportStratum) SetComponent(v []MeasureReportComponent) {
	o.Component = v
}

// GetPopulation returns the Population field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetPopulation() []MeasureReportPopulation1 {
	if o == nil || IsNil(o.Population) {
		var ret []MeasureReportPopulation1
		return ret
	}
	return o.Population
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetPopulationOk() ([]MeasureReportPopulation1, bool) {
	if o == nil || IsNil(o.Population) {
		return nil, false
	}
	return o.Population, true
}

// HasPopulation returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasPopulation() bool {
	if o != nil && !IsNil(o.Population) {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given []MeasureReportPopulation1 and assigns it to the Population field.
func (o *MeasureReportStratum) SetPopulation(v []MeasureReportPopulation1) {
	o.Population = v
}

// GetMeasureScore returns the MeasureScore field value if set, zero value otherwise.
func (o *MeasureReportStratum) GetMeasureScore() Quantity {
	if o == nil || IsNil(o.MeasureScore) {
		var ret Quantity
		return ret
	}
	return *o.MeasureScore
}

// GetMeasureScoreOk returns a tuple with the MeasureScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureReportStratum) GetMeasureScoreOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MeasureScore) {
		return nil, false
	}
	return o.MeasureScore, true
}

// HasMeasureScore returns a boolean if a field has been set.
func (o *MeasureReportStratum) HasMeasureScore() bool {
	if o != nil && !IsNil(o.MeasureScore) {
		return true
	}

	return false
}

// SetMeasureScore gets a reference to the given Quantity and assigns it to the MeasureScore field.
func (o *MeasureReportStratum) SetMeasureScore(v Quantity) {
	o.MeasureScore = &v
}

func (o MeasureReportStratum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasureReportStratum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Population) {
		toSerialize["population"] = o.Population
	}
	if !IsNil(o.MeasureScore) {
		toSerialize["measureScore"] = o.MeasureScore
	}
	return toSerialize, nil
}

type NullableMeasureReportStratum struct {
	value *MeasureReportStratum
	isSet bool
}

func (v NullableMeasureReportStratum) Get() *MeasureReportStratum {
	return v.value
}

func (v *NullableMeasureReportStratum) Set(val *MeasureReportStratum) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasureReportStratum) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasureReportStratum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasureReportStratum(val *MeasureReportStratum) *NullableMeasureReportStratum {
	return &NullableMeasureReportStratum{value: val, isSet: true}
}

func (v NullableMeasureReportStratum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasureReportStratum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


