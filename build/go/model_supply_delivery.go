/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupplyDelivery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyDelivery{}

// SupplyDelivery Record of delivery of what is supplied.
type SupplyDelivery struct {
	// This is a SupplyDelivery resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// A larger event of which this particular event is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// A code specifying the state of the dispense event.
	Status *string `json:"status,omitempty"`
	// A link to a resource representing the person whom the delivered item is for.
	Patient *Reference `json:"patient,omitempty"`
	// Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	Type *CodeableConcept `json:"type,omitempty"`
	// The item that is being delivered or has been supplied.
	SuppliedItem *SupplyDeliverySuppliedItem `json:"suppliedItem,omitempty"`
	// The date or time(s) the activity occurred.
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// The date or time(s) the activity occurred.
	OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`
	// The date or time(s) the activity occurred.
	OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`
	// The individual responsible for dispensing the medication, supplier or device.
	Supplier *Reference `json:"supplier,omitempty"`
	// Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
	Destination *Reference `json:"destination,omitempty"`
	// Identifies the person who picked up the Supply.
	Receiver []Reference `json:"receiver,omitempty"`
}

type _SupplyDelivery SupplyDelivery

// NewSupplyDelivery instantiates a new SupplyDelivery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyDelivery(resourceType string) *SupplyDelivery {
	this := SupplyDelivery{}
	this.ResourceType = resourceType
	return &this
}

// NewSupplyDeliveryWithDefaults instantiates a new SupplyDelivery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyDeliveryWithDefaults() *SupplyDelivery {
	this := SupplyDelivery{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *SupplyDelivery) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SupplyDelivery) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SupplyDelivery) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SupplyDelivery) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SupplyDelivery) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SupplyDelivery) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SupplyDelivery) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SupplyDelivery) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *SupplyDelivery) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *SupplyDelivery) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *SupplyDelivery) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SupplyDelivery) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SupplyDelivery) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SupplyDelivery) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SupplyDelivery) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SupplyDelivery) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *SupplyDelivery) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *SupplyDelivery) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *SupplyDelivery) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *SupplyDelivery) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SupplyDelivery) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SupplyDelivery) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SupplyDelivery) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SupplyDelivery) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SupplyDelivery) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SupplyDelivery) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SupplyDelivery) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SupplyDelivery) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *SupplyDelivery) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *SupplyDelivery) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *SupplyDelivery) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *SupplyDelivery) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *SupplyDelivery) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *SupplyDelivery) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *SupplyDelivery) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SupplyDelivery) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SupplyDelivery) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SupplyDelivery) SetStatus(v string) {
	o.Status = &v
}

// GetPatient returns the Patient field value if set, zero value otherwise.
func (o *SupplyDelivery) GetPatient() Reference {
	if o == nil || IsNil(o.Patient) {
		var ret Reference
		return ret
	}
	return *o.Patient
}

// GetPatientOk returns a tuple with the Patient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetPatientOk() (*Reference, bool) {
	if o == nil || IsNil(o.Patient) {
		return nil, false
	}
	return o.Patient, true
}

// HasPatient returns a boolean if a field has been set.
func (o *SupplyDelivery) HasPatient() bool {
	if o != nil && !IsNil(o.Patient) {
		return true
	}

	return false
}

// SetPatient gets a reference to the given Reference and assigns it to the Patient field.
func (o *SupplyDelivery) SetPatient(v Reference) {
	o.Patient = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SupplyDelivery) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SupplyDelivery) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SupplyDelivery) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetSuppliedItem returns the SuppliedItem field value if set, zero value otherwise.
func (o *SupplyDelivery) GetSuppliedItem() SupplyDeliverySuppliedItem {
	if o == nil || IsNil(o.SuppliedItem) {
		var ret SupplyDeliverySuppliedItem
		return ret
	}
	return *o.SuppliedItem
}

// GetSuppliedItemOk returns a tuple with the SuppliedItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetSuppliedItemOk() (*SupplyDeliverySuppliedItem, bool) {
	if o == nil || IsNil(o.SuppliedItem) {
		return nil, false
	}
	return o.SuppliedItem, true
}

// HasSuppliedItem returns a boolean if a field has been set.
func (o *SupplyDelivery) HasSuppliedItem() bool {
	if o != nil && !IsNil(o.SuppliedItem) {
		return true
	}

	return false
}

// SetSuppliedItem gets a reference to the given SupplyDeliverySuppliedItem and assigns it to the SuppliedItem field.
func (o *SupplyDelivery) SetSuppliedItem(v SupplyDeliverySuppliedItem) {
	o.SuppliedItem = &v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *SupplyDelivery) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *SupplyDelivery) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *SupplyDelivery) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrencePeriod returns the OccurrencePeriod field value if set, zero value otherwise.
func (o *SupplyDelivery) GetOccurrencePeriod() Period {
	if o == nil || IsNil(o.OccurrencePeriod) {
		var ret Period
		return ret
	}
	return *o.OccurrencePeriod
}

// GetOccurrencePeriodOk returns a tuple with the OccurrencePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetOccurrencePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OccurrencePeriod) {
		return nil, false
	}
	return o.OccurrencePeriod, true
}

// HasOccurrencePeriod returns a boolean if a field has been set.
func (o *SupplyDelivery) HasOccurrencePeriod() bool {
	if o != nil && !IsNil(o.OccurrencePeriod) {
		return true
	}

	return false
}

// SetOccurrencePeriod gets a reference to the given Period and assigns it to the OccurrencePeriod field.
func (o *SupplyDelivery) SetOccurrencePeriod(v Period) {
	o.OccurrencePeriod = &v
}

// GetOccurrenceTiming returns the OccurrenceTiming field value if set, zero value otherwise.
func (o *SupplyDelivery) GetOccurrenceTiming() Timing {
	if o == nil || IsNil(o.OccurrenceTiming) {
		var ret Timing
		return ret
	}
	return *o.OccurrenceTiming
}

// GetOccurrenceTimingOk returns a tuple with the OccurrenceTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetOccurrenceTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.OccurrenceTiming) {
		return nil, false
	}
	return o.OccurrenceTiming, true
}

// HasOccurrenceTiming returns a boolean if a field has been set.
func (o *SupplyDelivery) HasOccurrenceTiming() bool {
	if o != nil && !IsNil(o.OccurrenceTiming) {
		return true
	}

	return false
}

// SetOccurrenceTiming gets a reference to the given Timing and assigns it to the OccurrenceTiming field.
func (o *SupplyDelivery) SetOccurrenceTiming(v Timing) {
	o.OccurrenceTiming = &v
}

// GetSupplier returns the Supplier field value if set, zero value otherwise.
func (o *SupplyDelivery) GetSupplier() Reference {
	if o == nil || IsNil(o.Supplier) {
		var ret Reference
		return ret
	}
	return *o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetSupplierOk() (*Reference, bool) {
	if o == nil || IsNil(o.Supplier) {
		return nil, false
	}
	return o.Supplier, true
}

// HasSupplier returns a boolean if a field has been set.
func (o *SupplyDelivery) HasSupplier() bool {
	if o != nil && !IsNil(o.Supplier) {
		return true
	}

	return false
}

// SetSupplier gets a reference to the given Reference and assigns it to the Supplier field.
func (o *SupplyDelivery) SetSupplier(v Reference) {
	o.Supplier = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *SupplyDelivery) GetDestination() Reference {
	if o == nil || IsNil(o.Destination) {
		var ret Reference
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetDestinationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *SupplyDelivery) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given Reference and assigns it to the Destination field.
func (o *SupplyDelivery) SetDestination(v Reference) {
	o.Destination = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *SupplyDelivery) GetReceiver() []Reference {
	if o == nil || IsNil(o.Receiver) {
		var ret []Reference
		return ret
	}
	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyDelivery) GetReceiverOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *SupplyDelivery) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given []Reference and assigns it to the Receiver field.
func (o *SupplyDelivery) SetReceiver(v []Reference) {
	o.Receiver = v
}

func (o SupplyDelivery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyDelivery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Patient) {
		toSerialize["patient"] = o.Patient
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SuppliedItem) {
		toSerialize["suppliedItem"] = o.SuppliedItem
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrencePeriod) {
		toSerialize["occurrencePeriod"] = o.OccurrencePeriod
	}
	if !IsNil(o.OccurrenceTiming) {
		toSerialize["occurrenceTiming"] = o.OccurrenceTiming
	}
	if !IsNil(o.Supplier) {
		toSerialize["supplier"] = o.Supplier
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	return toSerialize, nil
}

func (o *SupplyDelivery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupplyDelivery := _SupplyDelivery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupplyDelivery)

	if err != nil {
		return err
	}

	*o = SupplyDelivery(varSupplyDelivery)

	return err
}

type NullableSupplyDelivery struct {
	value *SupplyDelivery
	isSet bool
}

func (v NullableSupplyDelivery) Get() *SupplyDelivery {
	return v.value
}

func (v *NullableSupplyDelivery) Set(val *SupplyDelivery) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyDelivery) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyDelivery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyDelivery(val *SupplyDelivery) *NullableSupplyDelivery {
	return &NullableSupplyDelivery{value: val, isSet: true}
}

func (v NullableSupplyDelivery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyDelivery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


