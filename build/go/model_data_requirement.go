/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the DataRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataRequirement{}

// DataRequirement Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
type DataRequirement struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Type *string `json:"type,omitempty"`
	// The profile of the required data, specified as the uri of the profile definition.
	Profile []string `json:"profile,omitempty"`
	// The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
	SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept,omitempty"`
	// The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
	SubjectReference *Reference `json:"subjectReference,omitempty"`
	// Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.   The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
	MustSupport []string `json:"mustSupport,omitempty"`
	// Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
	CodeFilter []DataRequirementCodeFilter `json:"codeFilter,omitempty"`
	// Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
	DateFilter []DataRequirementDateFilter `json:"dateFilter,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Limit *float32 `json:"limit,omitempty"`
	// Specifies the order of the results to be returned.
	Sort []DataRequirementSort `json:"sort,omitempty"`
}

// NewDataRequirement instantiates a new DataRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataRequirement() *DataRequirement {
	this := DataRequirement{}
	return &this
}

// NewDataRequirementWithDefaults instantiates a new DataRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataRequirementWithDefaults() *DataRequirement {
	this := DataRequirement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataRequirement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataRequirement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataRequirement) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DataRequirement) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DataRequirement) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DataRequirement) SetExtension(v []Extension) {
	o.Extension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DataRequirement) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DataRequirement) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DataRequirement) SetType(v string) {
	o.Type = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *DataRequirement) GetProfile() []string {
	if o == nil || IsNil(o.Profile) {
		var ret []string
		return ret
	}
	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *DataRequirement) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given []string and assigns it to the Profile field.
func (o *DataRequirement) SetProfile(v []string) {
	o.Profile = v
}

// GetSubjectCodeableConcept returns the SubjectCodeableConcept field value if set, zero value otherwise.
func (o *DataRequirement) GetSubjectCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubjectCodeableConcept
}

// GetSubjectCodeableConceptOk returns a tuple with the SubjectCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetSubjectCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubjectCodeableConcept) {
		return nil, false
	}
	return o.SubjectCodeableConcept, true
}

// HasSubjectCodeableConcept returns a boolean if a field has been set.
func (o *DataRequirement) HasSubjectCodeableConcept() bool {
	if o != nil && !IsNil(o.SubjectCodeableConcept) {
		return true
	}

	return false
}

// SetSubjectCodeableConcept gets a reference to the given CodeableConcept and assigns it to the SubjectCodeableConcept field.
func (o *DataRequirement) SetSubjectCodeableConcept(v CodeableConcept) {
	o.SubjectCodeableConcept = &v
}

// GetSubjectReference returns the SubjectReference field value if set, zero value otherwise.
func (o *DataRequirement) GetSubjectReference() Reference {
	if o == nil || IsNil(o.SubjectReference) {
		var ret Reference
		return ret
	}
	return *o.SubjectReference
}

// GetSubjectReferenceOk returns a tuple with the SubjectReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetSubjectReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.SubjectReference) {
		return nil, false
	}
	return o.SubjectReference, true
}

// HasSubjectReference returns a boolean if a field has been set.
func (o *DataRequirement) HasSubjectReference() bool {
	if o != nil && !IsNil(o.SubjectReference) {
		return true
	}

	return false
}

// SetSubjectReference gets a reference to the given Reference and assigns it to the SubjectReference field.
func (o *DataRequirement) SetSubjectReference(v Reference) {
	o.SubjectReference = &v
}

// GetMustSupport returns the MustSupport field value if set, zero value otherwise.
func (o *DataRequirement) GetMustSupport() []string {
	if o == nil || IsNil(o.MustSupport) {
		var ret []string
		return ret
	}
	return o.MustSupport
}

// GetMustSupportOk returns a tuple with the MustSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetMustSupportOk() ([]string, bool) {
	if o == nil || IsNil(o.MustSupport) {
		return nil, false
	}
	return o.MustSupport, true
}

// HasMustSupport returns a boolean if a field has been set.
func (o *DataRequirement) HasMustSupport() bool {
	if o != nil && !IsNil(o.MustSupport) {
		return true
	}

	return false
}

// SetMustSupport gets a reference to the given []string and assigns it to the MustSupport field.
func (o *DataRequirement) SetMustSupport(v []string) {
	o.MustSupport = v
}

// GetCodeFilter returns the CodeFilter field value if set, zero value otherwise.
func (o *DataRequirement) GetCodeFilter() []DataRequirementCodeFilter {
	if o == nil || IsNil(o.CodeFilter) {
		var ret []DataRequirementCodeFilter
		return ret
	}
	return o.CodeFilter
}

// GetCodeFilterOk returns a tuple with the CodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetCodeFilterOk() ([]DataRequirementCodeFilter, bool) {
	if o == nil || IsNil(o.CodeFilter) {
		return nil, false
	}
	return o.CodeFilter, true
}

// HasCodeFilter returns a boolean if a field has been set.
func (o *DataRequirement) HasCodeFilter() bool {
	if o != nil && !IsNil(o.CodeFilter) {
		return true
	}

	return false
}

// SetCodeFilter gets a reference to the given []DataRequirementCodeFilter and assigns it to the CodeFilter field.
func (o *DataRequirement) SetCodeFilter(v []DataRequirementCodeFilter) {
	o.CodeFilter = v
}

// GetDateFilter returns the DateFilter field value if set, zero value otherwise.
func (o *DataRequirement) GetDateFilter() []DataRequirementDateFilter {
	if o == nil || IsNil(o.DateFilter) {
		var ret []DataRequirementDateFilter
		return ret
	}
	return o.DateFilter
}

// GetDateFilterOk returns a tuple with the DateFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetDateFilterOk() ([]DataRequirementDateFilter, bool) {
	if o == nil || IsNil(o.DateFilter) {
		return nil, false
	}
	return o.DateFilter, true
}

// HasDateFilter returns a boolean if a field has been set.
func (o *DataRequirement) HasDateFilter() bool {
	if o != nil && !IsNil(o.DateFilter) {
		return true
	}

	return false
}

// SetDateFilter gets a reference to the given []DataRequirementDateFilter and assigns it to the DateFilter field.
func (o *DataRequirement) SetDateFilter(v []DataRequirementDateFilter) {
	o.DateFilter = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *DataRequirement) GetLimit() float32 {
	if o == nil || IsNil(o.Limit) {
		var ret float32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *DataRequirement) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given float32 and assigns it to the Limit field.
func (o *DataRequirement) SetLimit(v float32) {
	o.Limit = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *DataRequirement) GetSort() []DataRequirementSort {
	if o == nil || IsNil(o.Sort) {
		var ret []DataRequirementSort
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRequirement) GetSortOk() ([]DataRequirementSort, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *DataRequirement) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []DataRequirementSort and assigns it to the Sort field.
func (o *DataRequirement) SetSort(v []DataRequirementSort) {
	o.Sort = v
}

func (o DataRequirement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.SubjectCodeableConcept) {
		toSerialize["subjectCodeableConcept"] = o.SubjectCodeableConcept
	}
	if !IsNil(o.SubjectReference) {
		toSerialize["subjectReference"] = o.SubjectReference
	}
	if !IsNil(o.MustSupport) {
		toSerialize["mustSupport"] = o.MustSupport
	}
	if !IsNil(o.CodeFilter) {
		toSerialize["codeFilter"] = o.CodeFilter
	}
	if !IsNil(o.DateFilter) {
		toSerialize["dateFilter"] = o.DateFilter
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

type NullableDataRequirement struct {
	value *DataRequirement
	isSet bool
}

func (v NullableDataRequirement) Get() *DataRequirement {
	return v.value
}

func (v *NullableDataRequirement) Set(val *DataRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableDataRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableDataRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataRequirement(val *DataRequirement) *NullableDataRequirement {
	return &NullableDataRequirement{value: val, isSet: true}
}

func (v NullableDataRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


