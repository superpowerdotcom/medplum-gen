/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the StructureMapSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructureMapSource{}

// StructureMapSource A Map of relationships between 2 structures that can be used to transform data.
type StructureMapSource struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Context *string `json:"context,omitempty"`
	// A whole number
	Min *float32 `json:"min,omitempty"`
	// A sequence of Unicode characters
	Max *string `json:"max,omitempty"`
	// A sequence of Unicode characters
	Type *string `json:"type,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueBase64Binary *string `json:"defaultValueBase64Binary,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueBoolean *bool `json:"defaultValueBoolean,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCanonical *string `json:"defaultValueCanonical,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCode *string `json:"defaultValueCode,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDate *string `json:"defaultValueDate,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDateTime *string `json:"defaultValueDateTime,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDecimal *float32 `json:"defaultValueDecimal,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueId *string `json:"defaultValueId,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueInstant *string `json:"defaultValueInstant,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueInteger *float32 `json:"defaultValueInteger,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueMarkdown *string `json:"defaultValueMarkdown,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueOid *string `json:"defaultValueOid,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValuePositiveInt *float32 `json:"defaultValuePositiveInt,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueString *string `json:"defaultValueString,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueTime *string `json:"defaultValueTime,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUnsignedInt *float32 `json:"defaultValueUnsignedInt,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUri *string `json:"defaultValueUri,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUrl *string `json:"defaultValueUrl,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUuid *string `json:"defaultValueUuid,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAddress *Address `json:"defaultValueAddress,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAge *Age `json:"defaultValueAge,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAnnotation *Annotation `json:"defaultValueAnnotation,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueAttachment *Attachment `json:"defaultValueAttachment,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCodeableConcept *CodeableConcept `json:"defaultValueCodeableConcept,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCoding *Coding `json:"defaultValueCoding,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContactPoint *ContactPoint `json:"defaultValueContactPoint,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueCount *Count `json:"defaultValueCount,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDistance *Distance `json:"defaultValueDistance,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDuration *Duration `json:"defaultValueDuration,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueHumanName *HumanName `json:"defaultValueHumanName,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueIdentifier *Identifier `json:"defaultValueIdentifier,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueMoney *Money `json:"defaultValueMoney,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValuePeriod *Period `json:"defaultValuePeriod,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueQuantity *Quantity `json:"defaultValueQuantity,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRange *Range `json:"defaultValueRange,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRatio *Ratio `json:"defaultValueRatio,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueReference *Reference `json:"defaultValueReference,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueSampledData *SampledData `json:"defaultValueSampledData,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueSignature *Signature `json:"defaultValueSignature,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueTiming *Timing `json:"defaultValueTiming,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContactDetail *ContactDetail `json:"defaultValueContactDetail,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueContributor *Contributor `json:"defaultValueContributor,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDataRequirement *DataRequirement `json:"defaultValueDataRequirement,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueExpression *Expression `json:"defaultValueExpression,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueParameterDefinition *ParameterDefinition `json:"defaultValueParameterDefinition,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueRelatedArtifact *RelatedArtifact `json:"defaultValueRelatedArtifact,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueTriggerDefinition *TriggerDefinition `json:"defaultValueTriggerDefinition,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueUsageContext *UsageContext `json:"defaultValueUsageContext,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueDosage *Dosage `json:"defaultValueDosage,omitempty"`
	// A value to use if there is no existing value in the source object.
	DefaultValueMeta *Meta `json:"defaultValueMeta,omitempty"`
	// A sequence of Unicode characters
	Element *string `json:"element,omitempty"`
	// How to handle the list mode for this element.
	ListMode *string `json:"listMode,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Variable *string `json:"variable,omitempty"`
	// A sequence of Unicode characters
	Condition *string `json:"condition,omitempty"`
	// A sequence of Unicode characters
	Check *string `json:"check,omitempty"`
	// A sequence of Unicode characters
	LogMessage *string `json:"logMessage,omitempty"`
}

// NewStructureMapSource instantiates a new StructureMapSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructureMapSource() *StructureMapSource {
	this := StructureMapSource{}
	return &this
}

// NewStructureMapSourceWithDefaults instantiates a new StructureMapSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructureMapSourceWithDefaults() *StructureMapSource {
	this := StructureMapSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StructureMapSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StructureMapSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StructureMapSource) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *StructureMapSource) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *StructureMapSource) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *StructureMapSource) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *StructureMapSource) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *StructureMapSource) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *StructureMapSource) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *StructureMapSource) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *StructureMapSource) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *StructureMapSource) SetContext(v string) {
	o.Context = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *StructureMapSource) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *StructureMapSource) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *StructureMapSource) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *StructureMapSource) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *StructureMapSource) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *StructureMapSource) SetMax(v string) {
	o.Max = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StructureMapSource) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StructureMapSource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StructureMapSource) SetType(v string) {
	o.Type = &v
}

// GetDefaultValueBase64Binary returns the DefaultValueBase64Binary field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueBase64Binary() string {
	if o == nil || IsNil(o.DefaultValueBase64Binary) {
		var ret string
		return ret
	}
	return *o.DefaultValueBase64Binary
}

// GetDefaultValueBase64BinaryOk returns a tuple with the DefaultValueBase64Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueBase64BinaryOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueBase64Binary) {
		return nil, false
	}
	return o.DefaultValueBase64Binary, true
}

// HasDefaultValueBase64Binary returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueBase64Binary() bool {
	if o != nil && !IsNil(o.DefaultValueBase64Binary) {
		return true
	}

	return false
}

// SetDefaultValueBase64Binary gets a reference to the given string and assigns it to the DefaultValueBase64Binary field.
func (o *StructureMapSource) SetDefaultValueBase64Binary(v string) {
	o.DefaultValueBase64Binary = &v
}

// GetDefaultValueBoolean returns the DefaultValueBoolean field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueBoolean() bool {
	if o == nil || IsNil(o.DefaultValueBoolean) {
		var ret bool
		return ret
	}
	return *o.DefaultValueBoolean
}

// GetDefaultValueBooleanOk returns a tuple with the DefaultValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultValueBoolean) {
		return nil, false
	}
	return o.DefaultValueBoolean, true
}

// HasDefaultValueBoolean returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueBoolean() bool {
	if o != nil && !IsNil(o.DefaultValueBoolean) {
		return true
	}

	return false
}

// SetDefaultValueBoolean gets a reference to the given bool and assigns it to the DefaultValueBoolean field.
func (o *StructureMapSource) SetDefaultValueBoolean(v bool) {
	o.DefaultValueBoolean = &v
}

// GetDefaultValueCanonical returns the DefaultValueCanonical field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueCanonical() string {
	if o == nil || IsNil(o.DefaultValueCanonical) {
		var ret string
		return ret
	}
	return *o.DefaultValueCanonical
}

// GetDefaultValueCanonicalOk returns a tuple with the DefaultValueCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueCanonical) {
		return nil, false
	}
	return o.DefaultValueCanonical, true
}

// HasDefaultValueCanonical returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueCanonical() bool {
	if o != nil && !IsNil(o.DefaultValueCanonical) {
		return true
	}

	return false
}

// SetDefaultValueCanonical gets a reference to the given string and assigns it to the DefaultValueCanonical field.
func (o *StructureMapSource) SetDefaultValueCanonical(v string) {
	o.DefaultValueCanonical = &v
}

// GetDefaultValueCode returns the DefaultValueCode field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueCode() string {
	if o == nil || IsNil(o.DefaultValueCode) {
		var ret string
		return ret
	}
	return *o.DefaultValueCode
}

// GetDefaultValueCodeOk returns a tuple with the DefaultValueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueCode) {
		return nil, false
	}
	return o.DefaultValueCode, true
}

// HasDefaultValueCode returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueCode() bool {
	if o != nil && !IsNil(o.DefaultValueCode) {
		return true
	}

	return false
}

// SetDefaultValueCode gets a reference to the given string and assigns it to the DefaultValueCode field.
func (o *StructureMapSource) SetDefaultValueCode(v string) {
	o.DefaultValueCode = &v
}

// GetDefaultValueDate returns the DefaultValueDate field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDate() string {
	if o == nil || IsNil(o.DefaultValueDate) {
		var ret string
		return ret
	}
	return *o.DefaultValueDate
}

// GetDefaultValueDateOk returns a tuple with the DefaultValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueDate) {
		return nil, false
	}
	return o.DefaultValueDate, true
}

// HasDefaultValueDate returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDate() bool {
	if o != nil && !IsNil(o.DefaultValueDate) {
		return true
	}

	return false
}

// SetDefaultValueDate gets a reference to the given string and assigns it to the DefaultValueDate field.
func (o *StructureMapSource) SetDefaultValueDate(v string) {
	o.DefaultValueDate = &v
}

// GetDefaultValueDateTime returns the DefaultValueDateTime field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDateTime() string {
	if o == nil || IsNil(o.DefaultValueDateTime) {
		var ret string
		return ret
	}
	return *o.DefaultValueDateTime
}

// GetDefaultValueDateTimeOk returns a tuple with the DefaultValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueDateTime) {
		return nil, false
	}
	return o.DefaultValueDateTime, true
}

// HasDefaultValueDateTime returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDateTime() bool {
	if o != nil && !IsNil(o.DefaultValueDateTime) {
		return true
	}

	return false
}

// SetDefaultValueDateTime gets a reference to the given string and assigns it to the DefaultValueDateTime field.
func (o *StructureMapSource) SetDefaultValueDateTime(v string) {
	o.DefaultValueDateTime = &v
}

// GetDefaultValueDecimal returns the DefaultValueDecimal field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDecimal() float32 {
	if o == nil || IsNil(o.DefaultValueDecimal) {
		var ret float32
		return ret
	}
	return *o.DefaultValueDecimal
}

// GetDefaultValueDecimalOk returns a tuple with the DefaultValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueDecimal) {
		return nil, false
	}
	return o.DefaultValueDecimal, true
}

// HasDefaultValueDecimal returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDecimal() bool {
	if o != nil && !IsNil(o.DefaultValueDecimal) {
		return true
	}

	return false
}

// SetDefaultValueDecimal gets a reference to the given float32 and assigns it to the DefaultValueDecimal field.
func (o *StructureMapSource) SetDefaultValueDecimal(v float32) {
	o.DefaultValueDecimal = &v
}

// GetDefaultValueId returns the DefaultValueId field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueId() string {
	if o == nil || IsNil(o.DefaultValueId) {
		var ret string
		return ret
	}
	return *o.DefaultValueId
}

// GetDefaultValueIdOk returns a tuple with the DefaultValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueId) {
		return nil, false
	}
	return o.DefaultValueId, true
}

// HasDefaultValueId returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueId() bool {
	if o != nil && !IsNil(o.DefaultValueId) {
		return true
	}

	return false
}

// SetDefaultValueId gets a reference to the given string and assigns it to the DefaultValueId field.
func (o *StructureMapSource) SetDefaultValueId(v string) {
	o.DefaultValueId = &v
}

// GetDefaultValueInstant returns the DefaultValueInstant field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueInstant() string {
	if o == nil || IsNil(o.DefaultValueInstant) {
		var ret string
		return ret
	}
	return *o.DefaultValueInstant
}

// GetDefaultValueInstantOk returns a tuple with the DefaultValueInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueInstantOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueInstant) {
		return nil, false
	}
	return o.DefaultValueInstant, true
}

// HasDefaultValueInstant returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueInstant() bool {
	if o != nil && !IsNil(o.DefaultValueInstant) {
		return true
	}

	return false
}

// SetDefaultValueInstant gets a reference to the given string and assigns it to the DefaultValueInstant field.
func (o *StructureMapSource) SetDefaultValueInstant(v string) {
	o.DefaultValueInstant = &v
}

// GetDefaultValueInteger returns the DefaultValueInteger field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueInteger() float32 {
	if o == nil || IsNil(o.DefaultValueInteger) {
		var ret float32
		return ret
	}
	return *o.DefaultValueInteger
}

// GetDefaultValueIntegerOk returns a tuple with the DefaultValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueInteger) {
		return nil, false
	}
	return o.DefaultValueInteger, true
}

// HasDefaultValueInteger returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueInteger() bool {
	if o != nil && !IsNil(o.DefaultValueInteger) {
		return true
	}

	return false
}

// SetDefaultValueInteger gets a reference to the given float32 and assigns it to the DefaultValueInteger field.
func (o *StructureMapSource) SetDefaultValueInteger(v float32) {
	o.DefaultValueInteger = &v
}

// GetDefaultValueMarkdown returns the DefaultValueMarkdown field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueMarkdown() string {
	if o == nil || IsNil(o.DefaultValueMarkdown) {
		var ret string
		return ret
	}
	return *o.DefaultValueMarkdown
}

// GetDefaultValueMarkdownOk returns a tuple with the DefaultValueMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueMarkdown) {
		return nil, false
	}
	return o.DefaultValueMarkdown, true
}

// HasDefaultValueMarkdown returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueMarkdown() bool {
	if o != nil && !IsNil(o.DefaultValueMarkdown) {
		return true
	}

	return false
}

// SetDefaultValueMarkdown gets a reference to the given string and assigns it to the DefaultValueMarkdown field.
func (o *StructureMapSource) SetDefaultValueMarkdown(v string) {
	o.DefaultValueMarkdown = &v
}

// GetDefaultValueOid returns the DefaultValueOid field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueOid() string {
	if o == nil || IsNil(o.DefaultValueOid) {
		var ret string
		return ret
	}
	return *o.DefaultValueOid
}

// GetDefaultValueOidOk returns a tuple with the DefaultValueOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueOidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueOid) {
		return nil, false
	}
	return o.DefaultValueOid, true
}

// HasDefaultValueOid returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueOid() bool {
	if o != nil && !IsNil(o.DefaultValueOid) {
		return true
	}

	return false
}

// SetDefaultValueOid gets a reference to the given string and assigns it to the DefaultValueOid field.
func (o *StructureMapSource) SetDefaultValueOid(v string) {
	o.DefaultValueOid = &v
}

// GetDefaultValuePositiveInt returns the DefaultValuePositiveInt field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValuePositiveInt() float32 {
	if o == nil || IsNil(o.DefaultValuePositiveInt) {
		var ret float32
		return ret
	}
	return *o.DefaultValuePositiveInt
}

// GetDefaultValuePositiveIntOk returns a tuple with the DefaultValuePositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValuePositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValuePositiveInt) {
		return nil, false
	}
	return o.DefaultValuePositiveInt, true
}

// HasDefaultValuePositiveInt returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValuePositiveInt() bool {
	if o != nil && !IsNil(o.DefaultValuePositiveInt) {
		return true
	}

	return false
}

// SetDefaultValuePositiveInt gets a reference to the given float32 and assigns it to the DefaultValuePositiveInt field.
func (o *StructureMapSource) SetDefaultValuePositiveInt(v float32) {
	o.DefaultValuePositiveInt = &v
}

// GetDefaultValueString returns the DefaultValueString field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueString() string {
	if o == nil || IsNil(o.DefaultValueString) {
		var ret string
		return ret
	}
	return *o.DefaultValueString
}

// GetDefaultValueStringOk returns a tuple with the DefaultValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueString) {
		return nil, false
	}
	return o.DefaultValueString, true
}

// HasDefaultValueString returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueString() bool {
	if o != nil && !IsNil(o.DefaultValueString) {
		return true
	}

	return false
}

// SetDefaultValueString gets a reference to the given string and assigns it to the DefaultValueString field.
func (o *StructureMapSource) SetDefaultValueString(v string) {
	o.DefaultValueString = &v
}

// GetDefaultValueTime returns the DefaultValueTime field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueTime() string {
	if o == nil || IsNil(o.DefaultValueTime) {
		var ret string
		return ret
	}
	return *o.DefaultValueTime
}

// GetDefaultValueTimeOk returns a tuple with the DefaultValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueTime) {
		return nil, false
	}
	return o.DefaultValueTime, true
}

// HasDefaultValueTime returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueTime() bool {
	if o != nil && !IsNil(o.DefaultValueTime) {
		return true
	}

	return false
}

// SetDefaultValueTime gets a reference to the given string and assigns it to the DefaultValueTime field.
func (o *StructureMapSource) SetDefaultValueTime(v string) {
	o.DefaultValueTime = &v
}

// GetDefaultValueUnsignedInt returns the DefaultValueUnsignedInt field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueUnsignedInt() float32 {
	if o == nil || IsNil(o.DefaultValueUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.DefaultValueUnsignedInt
}

// GetDefaultValueUnsignedIntOk returns a tuple with the DefaultValueUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultValueUnsignedInt) {
		return nil, false
	}
	return o.DefaultValueUnsignedInt, true
}

// HasDefaultValueUnsignedInt returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueUnsignedInt() bool {
	if o != nil && !IsNil(o.DefaultValueUnsignedInt) {
		return true
	}

	return false
}

// SetDefaultValueUnsignedInt gets a reference to the given float32 and assigns it to the DefaultValueUnsignedInt field.
func (o *StructureMapSource) SetDefaultValueUnsignedInt(v float32) {
	o.DefaultValueUnsignedInt = &v
}

// GetDefaultValueUri returns the DefaultValueUri field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueUri() string {
	if o == nil || IsNil(o.DefaultValueUri) {
		var ret string
		return ret
	}
	return *o.DefaultValueUri
}

// GetDefaultValueUriOk returns a tuple with the DefaultValueUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueUriOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUri) {
		return nil, false
	}
	return o.DefaultValueUri, true
}

// HasDefaultValueUri returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueUri() bool {
	if o != nil && !IsNil(o.DefaultValueUri) {
		return true
	}

	return false
}

// SetDefaultValueUri gets a reference to the given string and assigns it to the DefaultValueUri field.
func (o *StructureMapSource) SetDefaultValueUri(v string) {
	o.DefaultValueUri = &v
}

// GetDefaultValueUrl returns the DefaultValueUrl field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueUrl() string {
	if o == nil || IsNil(o.DefaultValueUrl) {
		var ret string
		return ret
	}
	return *o.DefaultValueUrl
}

// GetDefaultValueUrlOk returns a tuple with the DefaultValueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUrl) {
		return nil, false
	}
	return o.DefaultValueUrl, true
}

// HasDefaultValueUrl returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueUrl() bool {
	if o != nil && !IsNil(o.DefaultValueUrl) {
		return true
	}

	return false
}

// SetDefaultValueUrl gets a reference to the given string and assigns it to the DefaultValueUrl field.
func (o *StructureMapSource) SetDefaultValueUrl(v string) {
	o.DefaultValueUrl = &v
}

// GetDefaultValueUuid returns the DefaultValueUuid field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueUuid() string {
	if o == nil || IsNil(o.DefaultValueUuid) {
		var ret string
		return ret
	}
	return *o.DefaultValueUuid
}

// GetDefaultValueUuidOk returns a tuple with the DefaultValueUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueUuidOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueUuid) {
		return nil, false
	}
	return o.DefaultValueUuid, true
}

// HasDefaultValueUuid returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueUuid() bool {
	if o != nil && !IsNil(o.DefaultValueUuid) {
		return true
	}

	return false
}

// SetDefaultValueUuid gets a reference to the given string and assigns it to the DefaultValueUuid field.
func (o *StructureMapSource) SetDefaultValueUuid(v string) {
	o.DefaultValueUuid = &v
}

// GetDefaultValueAddress returns the DefaultValueAddress field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueAddress() Address {
	if o == nil || IsNil(o.DefaultValueAddress) {
		var ret Address
		return ret
	}
	return *o.DefaultValueAddress
}

// GetDefaultValueAddressOk returns a tuple with the DefaultValueAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.DefaultValueAddress) {
		return nil, false
	}
	return o.DefaultValueAddress, true
}

// HasDefaultValueAddress returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueAddress() bool {
	if o != nil && !IsNil(o.DefaultValueAddress) {
		return true
	}

	return false
}

// SetDefaultValueAddress gets a reference to the given Address and assigns it to the DefaultValueAddress field.
func (o *StructureMapSource) SetDefaultValueAddress(v Address) {
	o.DefaultValueAddress = &v
}

// GetDefaultValueAge returns the DefaultValueAge field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueAge() Age {
	if o == nil || IsNil(o.DefaultValueAge) {
		var ret Age
		return ret
	}
	return *o.DefaultValueAge
}

// GetDefaultValueAgeOk returns a tuple with the DefaultValueAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.DefaultValueAge) {
		return nil, false
	}
	return o.DefaultValueAge, true
}

// HasDefaultValueAge returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueAge() bool {
	if o != nil && !IsNil(o.DefaultValueAge) {
		return true
	}

	return false
}

// SetDefaultValueAge gets a reference to the given Age and assigns it to the DefaultValueAge field.
func (o *StructureMapSource) SetDefaultValueAge(v Age) {
	o.DefaultValueAge = &v
}

// GetDefaultValueAnnotation returns the DefaultValueAnnotation field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueAnnotation() Annotation {
	if o == nil || IsNil(o.DefaultValueAnnotation) {
		var ret Annotation
		return ret
	}
	return *o.DefaultValueAnnotation
}

// GetDefaultValueAnnotationOk returns a tuple with the DefaultValueAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueAnnotationOk() (*Annotation, bool) {
	if o == nil || IsNil(o.DefaultValueAnnotation) {
		return nil, false
	}
	return o.DefaultValueAnnotation, true
}

// HasDefaultValueAnnotation returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueAnnotation() bool {
	if o != nil && !IsNil(o.DefaultValueAnnotation) {
		return true
	}

	return false
}

// SetDefaultValueAnnotation gets a reference to the given Annotation and assigns it to the DefaultValueAnnotation field.
func (o *StructureMapSource) SetDefaultValueAnnotation(v Annotation) {
	o.DefaultValueAnnotation = &v
}

// GetDefaultValueAttachment returns the DefaultValueAttachment field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueAttachment() Attachment {
	if o == nil || IsNil(o.DefaultValueAttachment) {
		var ret Attachment
		return ret
	}
	return *o.DefaultValueAttachment
}

// GetDefaultValueAttachmentOk returns a tuple with the DefaultValueAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.DefaultValueAttachment) {
		return nil, false
	}
	return o.DefaultValueAttachment, true
}

// HasDefaultValueAttachment returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueAttachment() bool {
	if o != nil && !IsNil(o.DefaultValueAttachment) {
		return true
	}

	return false
}

// SetDefaultValueAttachment gets a reference to the given Attachment and assigns it to the DefaultValueAttachment field.
func (o *StructureMapSource) SetDefaultValueAttachment(v Attachment) {
	o.DefaultValueAttachment = &v
}

// GetDefaultValueCodeableConcept returns the DefaultValueCodeableConcept field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DefaultValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DefaultValueCodeableConcept
}

// GetDefaultValueCodeableConceptOk returns a tuple with the DefaultValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DefaultValueCodeableConcept) {
		return nil, false
	}
	return o.DefaultValueCodeableConcept, true
}

// HasDefaultValueCodeableConcept returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueCodeableConcept() bool {
	if o != nil && !IsNil(o.DefaultValueCodeableConcept) {
		return true
	}

	return false
}

// SetDefaultValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DefaultValueCodeableConcept field.
func (o *StructureMapSource) SetDefaultValueCodeableConcept(v CodeableConcept) {
	o.DefaultValueCodeableConcept = &v
}

// GetDefaultValueCoding returns the DefaultValueCoding field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueCoding() Coding {
	if o == nil || IsNil(o.DefaultValueCoding) {
		var ret Coding
		return ret
	}
	return *o.DefaultValueCoding
}

// GetDefaultValueCodingOk returns a tuple with the DefaultValueCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.DefaultValueCoding) {
		return nil, false
	}
	return o.DefaultValueCoding, true
}

// HasDefaultValueCoding returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueCoding() bool {
	if o != nil && !IsNil(o.DefaultValueCoding) {
		return true
	}

	return false
}

// SetDefaultValueCoding gets a reference to the given Coding and assigns it to the DefaultValueCoding field.
func (o *StructureMapSource) SetDefaultValueCoding(v Coding) {
	o.DefaultValueCoding = &v
}

// GetDefaultValueContactPoint returns the DefaultValueContactPoint field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueContactPoint() ContactPoint {
	if o == nil || IsNil(o.DefaultValueContactPoint) {
		var ret ContactPoint
		return ret
	}
	return *o.DefaultValueContactPoint
}

// GetDefaultValueContactPointOk returns a tuple with the DefaultValueContactPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueContactPointOk() (*ContactPoint, bool) {
	if o == nil || IsNil(o.DefaultValueContactPoint) {
		return nil, false
	}
	return o.DefaultValueContactPoint, true
}

// HasDefaultValueContactPoint returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueContactPoint() bool {
	if o != nil && !IsNil(o.DefaultValueContactPoint) {
		return true
	}

	return false
}

// SetDefaultValueContactPoint gets a reference to the given ContactPoint and assigns it to the DefaultValueContactPoint field.
func (o *StructureMapSource) SetDefaultValueContactPoint(v ContactPoint) {
	o.DefaultValueContactPoint = &v
}

// GetDefaultValueCount returns the DefaultValueCount field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueCount() Count {
	if o == nil || IsNil(o.DefaultValueCount) {
		var ret Count
		return ret
	}
	return *o.DefaultValueCount
}

// GetDefaultValueCountOk returns a tuple with the DefaultValueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueCountOk() (*Count, bool) {
	if o == nil || IsNil(o.DefaultValueCount) {
		return nil, false
	}
	return o.DefaultValueCount, true
}

// HasDefaultValueCount returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueCount() bool {
	if o != nil && !IsNil(o.DefaultValueCount) {
		return true
	}

	return false
}

// SetDefaultValueCount gets a reference to the given Count and assigns it to the DefaultValueCount field.
func (o *StructureMapSource) SetDefaultValueCount(v Count) {
	o.DefaultValueCount = &v
}

// GetDefaultValueDistance returns the DefaultValueDistance field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDistance() Distance {
	if o == nil || IsNil(o.DefaultValueDistance) {
		var ret Distance
		return ret
	}
	return *o.DefaultValueDistance
}

// GetDefaultValueDistanceOk returns a tuple with the DefaultValueDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDistanceOk() (*Distance, bool) {
	if o == nil || IsNil(o.DefaultValueDistance) {
		return nil, false
	}
	return o.DefaultValueDistance, true
}

// HasDefaultValueDistance returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDistance() bool {
	if o != nil && !IsNil(o.DefaultValueDistance) {
		return true
	}

	return false
}

// SetDefaultValueDistance gets a reference to the given Distance and assigns it to the DefaultValueDistance field.
func (o *StructureMapSource) SetDefaultValueDistance(v Distance) {
	o.DefaultValueDistance = &v
}

// GetDefaultValueDuration returns the DefaultValueDuration field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDuration() Duration {
	if o == nil || IsNil(o.DefaultValueDuration) {
		var ret Duration
		return ret
	}
	return *o.DefaultValueDuration
}

// GetDefaultValueDurationOk returns a tuple with the DefaultValueDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.DefaultValueDuration) {
		return nil, false
	}
	return o.DefaultValueDuration, true
}

// HasDefaultValueDuration returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDuration() bool {
	if o != nil && !IsNil(o.DefaultValueDuration) {
		return true
	}

	return false
}

// SetDefaultValueDuration gets a reference to the given Duration and assigns it to the DefaultValueDuration field.
func (o *StructureMapSource) SetDefaultValueDuration(v Duration) {
	o.DefaultValueDuration = &v
}

// GetDefaultValueHumanName returns the DefaultValueHumanName field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueHumanName() HumanName {
	if o == nil || IsNil(o.DefaultValueHumanName) {
		var ret HumanName
		return ret
	}
	return *o.DefaultValueHumanName
}

// GetDefaultValueHumanNameOk returns a tuple with the DefaultValueHumanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueHumanNameOk() (*HumanName, bool) {
	if o == nil || IsNil(o.DefaultValueHumanName) {
		return nil, false
	}
	return o.DefaultValueHumanName, true
}

// HasDefaultValueHumanName returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueHumanName() bool {
	if o != nil && !IsNil(o.DefaultValueHumanName) {
		return true
	}

	return false
}

// SetDefaultValueHumanName gets a reference to the given HumanName and assigns it to the DefaultValueHumanName field.
func (o *StructureMapSource) SetDefaultValueHumanName(v HumanName) {
	o.DefaultValueHumanName = &v
}

// GetDefaultValueIdentifier returns the DefaultValueIdentifier field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueIdentifier() Identifier {
	if o == nil || IsNil(o.DefaultValueIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.DefaultValueIdentifier
}

// GetDefaultValueIdentifierOk returns a tuple with the DefaultValueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.DefaultValueIdentifier) {
		return nil, false
	}
	return o.DefaultValueIdentifier, true
}

// HasDefaultValueIdentifier returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueIdentifier() bool {
	if o != nil && !IsNil(o.DefaultValueIdentifier) {
		return true
	}

	return false
}

// SetDefaultValueIdentifier gets a reference to the given Identifier and assigns it to the DefaultValueIdentifier field.
func (o *StructureMapSource) SetDefaultValueIdentifier(v Identifier) {
	o.DefaultValueIdentifier = &v
}

// GetDefaultValueMoney returns the DefaultValueMoney field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueMoney() Money {
	if o == nil || IsNil(o.DefaultValueMoney) {
		var ret Money
		return ret
	}
	return *o.DefaultValueMoney
}

// GetDefaultValueMoneyOk returns a tuple with the DefaultValueMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.DefaultValueMoney) {
		return nil, false
	}
	return o.DefaultValueMoney, true
}

// HasDefaultValueMoney returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueMoney() bool {
	if o != nil && !IsNil(o.DefaultValueMoney) {
		return true
	}

	return false
}

// SetDefaultValueMoney gets a reference to the given Money and assigns it to the DefaultValueMoney field.
func (o *StructureMapSource) SetDefaultValueMoney(v Money) {
	o.DefaultValueMoney = &v
}

// GetDefaultValuePeriod returns the DefaultValuePeriod field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValuePeriod() Period {
	if o == nil || IsNil(o.DefaultValuePeriod) {
		var ret Period
		return ret
	}
	return *o.DefaultValuePeriod
}

// GetDefaultValuePeriodOk returns a tuple with the DefaultValuePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValuePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.DefaultValuePeriod) {
		return nil, false
	}
	return o.DefaultValuePeriod, true
}

// HasDefaultValuePeriod returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValuePeriod() bool {
	if o != nil && !IsNil(o.DefaultValuePeriod) {
		return true
	}

	return false
}

// SetDefaultValuePeriod gets a reference to the given Period and assigns it to the DefaultValuePeriod field.
func (o *StructureMapSource) SetDefaultValuePeriod(v Period) {
	o.DefaultValuePeriod = &v
}

// GetDefaultValueQuantity returns the DefaultValueQuantity field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueQuantity() Quantity {
	if o == nil || IsNil(o.DefaultValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.DefaultValueQuantity
}

// GetDefaultValueQuantityOk returns a tuple with the DefaultValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DefaultValueQuantity) {
		return nil, false
	}
	return o.DefaultValueQuantity, true
}

// HasDefaultValueQuantity returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueQuantity() bool {
	if o != nil && !IsNil(o.DefaultValueQuantity) {
		return true
	}

	return false
}

// SetDefaultValueQuantity gets a reference to the given Quantity and assigns it to the DefaultValueQuantity field.
func (o *StructureMapSource) SetDefaultValueQuantity(v Quantity) {
	o.DefaultValueQuantity = &v
}

// GetDefaultValueRange returns the DefaultValueRange field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueRange() Range {
	if o == nil || IsNil(o.DefaultValueRange) {
		var ret Range
		return ret
	}
	return *o.DefaultValueRange
}

// GetDefaultValueRangeOk returns a tuple with the DefaultValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.DefaultValueRange) {
		return nil, false
	}
	return o.DefaultValueRange, true
}

// HasDefaultValueRange returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueRange() bool {
	if o != nil && !IsNil(o.DefaultValueRange) {
		return true
	}

	return false
}

// SetDefaultValueRange gets a reference to the given Range and assigns it to the DefaultValueRange field.
func (o *StructureMapSource) SetDefaultValueRange(v Range) {
	o.DefaultValueRange = &v
}

// GetDefaultValueRatio returns the DefaultValueRatio field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueRatio() Ratio {
	if o == nil || IsNil(o.DefaultValueRatio) {
		var ret Ratio
		return ret
	}
	return *o.DefaultValueRatio
}

// GetDefaultValueRatioOk returns a tuple with the DefaultValueRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.DefaultValueRatio) {
		return nil, false
	}
	return o.DefaultValueRatio, true
}

// HasDefaultValueRatio returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueRatio() bool {
	if o != nil && !IsNil(o.DefaultValueRatio) {
		return true
	}

	return false
}

// SetDefaultValueRatio gets a reference to the given Ratio and assigns it to the DefaultValueRatio field.
func (o *StructureMapSource) SetDefaultValueRatio(v Ratio) {
	o.DefaultValueRatio = &v
}

// GetDefaultValueReference returns the DefaultValueReference field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueReference() Reference {
	if o == nil || IsNil(o.DefaultValueReference) {
		var ret Reference
		return ret
	}
	return *o.DefaultValueReference
}

// GetDefaultValueReferenceOk returns a tuple with the DefaultValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.DefaultValueReference) {
		return nil, false
	}
	return o.DefaultValueReference, true
}

// HasDefaultValueReference returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueReference() bool {
	if o != nil && !IsNil(o.DefaultValueReference) {
		return true
	}

	return false
}

// SetDefaultValueReference gets a reference to the given Reference and assigns it to the DefaultValueReference field.
func (o *StructureMapSource) SetDefaultValueReference(v Reference) {
	o.DefaultValueReference = &v
}

// GetDefaultValueSampledData returns the DefaultValueSampledData field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueSampledData() SampledData {
	if o == nil || IsNil(o.DefaultValueSampledData) {
		var ret SampledData
		return ret
	}
	return *o.DefaultValueSampledData
}

// GetDefaultValueSampledDataOk returns a tuple with the DefaultValueSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.DefaultValueSampledData) {
		return nil, false
	}
	return o.DefaultValueSampledData, true
}

// HasDefaultValueSampledData returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueSampledData() bool {
	if o != nil && !IsNil(o.DefaultValueSampledData) {
		return true
	}

	return false
}

// SetDefaultValueSampledData gets a reference to the given SampledData and assigns it to the DefaultValueSampledData field.
func (o *StructureMapSource) SetDefaultValueSampledData(v SampledData) {
	o.DefaultValueSampledData = &v
}

// GetDefaultValueSignature returns the DefaultValueSignature field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueSignature() Signature {
	if o == nil || IsNil(o.DefaultValueSignature) {
		var ret Signature
		return ret
	}
	return *o.DefaultValueSignature
}

// GetDefaultValueSignatureOk returns a tuple with the DefaultValueSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.DefaultValueSignature) {
		return nil, false
	}
	return o.DefaultValueSignature, true
}

// HasDefaultValueSignature returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueSignature() bool {
	if o != nil && !IsNil(o.DefaultValueSignature) {
		return true
	}

	return false
}

// SetDefaultValueSignature gets a reference to the given Signature and assigns it to the DefaultValueSignature field.
func (o *StructureMapSource) SetDefaultValueSignature(v Signature) {
	o.DefaultValueSignature = &v
}

// GetDefaultValueTiming returns the DefaultValueTiming field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueTiming() Timing {
	if o == nil || IsNil(o.DefaultValueTiming) {
		var ret Timing
		return ret
	}
	return *o.DefaultValueTiming
}

// GetDefaultValueTimingOk returns a tuple with the DefaultValueTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.DefaultValueTiming) {
		return nil, false
	}
	return o.DefaultValueTiming, true
}

// HasDefaultValueTiming returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueTiming() bool {
	if o != nil && !IsNil(o.DefaultValueTiming) {
		return true
	}

	return false
}

// SetDefaultValueTiming gets a reference to the given Timing and assigns it to the DefaultValueTiming field.
func (o *StructureMapSource) SetDefaultValueTiming(v Timing) {
	o.DefaultValueTiming = &v
}

// GetDefaultValueContactDetail returns the DefaultValueContactDetail field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueContactDetail() ContactDetail {
	if o == nil || IsNil(o.DefaultValueContactDetail) {
		var ret ContactDetail
		return ret
	}
	return *o.DefaultValueContactDetail
}

// GetDefaultValueContactDetailOk returns a tuple with the DefaultValueContactDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueContactDetailOk() (*ContactDetail, bool) {
	if o == nil || IsNil(o.DefaultValueContactDetail) {
		return nil, false
	}
	return o.DefaultValueContactDetail, true
}

// HasDefaultValueContactDetail returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueContactDetail() bool {
	if o != nil && !IsNil(o.DefaultValueContactDetail) {
		return true
	}

	return false
}

// SetDefaultValueContactDetail gets a reference to the given ContactDetail and assigns it to the DefaultValueContactDetail field.
func (o *StructureMapSource) SetDefaultValueContactDetail(v ContactDetail) {
	o.DefaultValueContactDetail = &v
}

// GetDefaultValueContributor returns the DefaultValueContributor field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueContributor() Contributor {
	if o == nil || IsNil(o.DefaultValueContributor) {
		var ret Contributor
		return ret
	}
	return *o.DefaultValueContributor
}

// GetDefaultValueContributorOk returns a tuple with the DefaultValueContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueContributorOk() (*Contributor, bool) {
	if o == nil || IsNil(o.DefaultValueContributor) {
		return nil, false
	}
	return o.DefaultValueContributor, true
}

// HasDefaultValueContributor returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueContributor() bool {
	if o != nil && !IsNil(o.DefaultValueContributor) {
		return true
	}

	return false
}

// SetDefaultValueContributor gets a reference to the given Contributor and assigns it to the DefaultValueContributor field.
func (o *StructureMapSource) SetDefaultValueContributor(v Contributor) {
	o.DefaultValueContributor = &v
}

// GetDefaultValueDataRequirement returns the DefaultValueDataRequirement field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDataRequirement() DataRequirement {
	if o == nil || IsNil(o.DefaultValueDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.DefaultValueDataRequirement
}

// GetDefaultValueDataRequirementOk returns a tuple with the DefaultValueDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.DefaultValueDataRequirement) {
		return nil, false
	}
	return o.DefaultValueDataRequirement, true
}

// HasDefaultValueDataRequirement returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDataRequirement() bool {
	if o != nil && !IsNil(o.DefaultValueDataRequirement) {
		return true
	}

	return false
}

// SetDefaultValueDataRequirement gets a reference to the given DataRequirement and assigns it to the DefaultValueDataRequirement field.
func (o *StructureMapSource) SetDefaultValueDataRequirement(v DataRequirement) {
	o.DefaultValueDataRequirement = &v
}

// GetDefaultValueExpression returns the DefaultValueExpression field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueExpression() Expression {
	if o == nil || IsNil(o.DefaultValueExpression) {
		var ret Expression
		return ret
	}
	return *o.DefaultValueExpression
}

// GetDefaultValueExpressionOk returns a tuple with the DefaultValueExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.DefaultValueExpression) {
		return nil, false
	}
	return o.DefaultValueExpression, true
}

// HasDefaultValueExpression returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueExpression() bool {
	if o != nil && !IsNil(o.DefaultValueExpression) {
		return true
	}

	return false
}

// SetDefaultValueExpression gets a reference to the given Expression and assigns it to the DefaultValueExpression field.
func (o *StructureMapSource) SetDefaultValueExpression(v Expression) {
	o.DefaultValueExpression = &v
}

// GetDefaultValueParameterDefinition returns the DefaultValueParameterDefinition field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueParameterDefinition() ParameterDefinition {
	if o == nil || IsNil(o.DefaultValueParameterDefinition) {
		var ret ParameterDefinition
		return ret
	}
	return *o.DefaultValueParameterDefinition
}

// GetDefaultValueParameterDefinitionOk returns a tuple with the DefaultValueParameterDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueParameterDefinitionOk() (*ParameterDefinition, bool) {
	if o == nil || IsNil(o.DefaultValueParameterDefinition) {
		return nil, false
	}
	return o.DefaultValueParameterDefinition, true
}

// HasDefaultValueParameterDefinition returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueParameterDefinition() bool {
	if o != nil && !IsNil(o.DefaultValueParameterDefinition) {
		return true
	}

	return false
}

// SetDefaultValueParameterDefinition gets a reference to the given ParameterDefinition and assigns it to the DefaultValueParameterDefinition field.
func (o *StructureMapSource) SetDefaultValueParameterDefinition(v ParameterDefinition) {
	o.DefaultValueParameterDefinition = &v
}

// GetDefaultValueRelatedArtifact returns the DefaultValueRelatedArtifact field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueRelatedArtifact() RelatedArtifact {
	if o == nil || IsNil(o.DefaultValueRelatedArtifact) {
		var ret RelatedArtifact
		return ret
	}
	return *o.DefaultValueRelatedArtifact
}

// GetDefaultValueRelatedArtifactOk returns a tuple with the DefaultValueRelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueRelatedArtifactOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.DefaultValueRelatedArtifact) {
		return nil, false
	}
	return o.DefaultValueRelatedArtifact, true
}

// HasDefaultValueRelatedArtifact returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueRelatedArtifact() bool {
	if o != nil && !IsNil(o.DefaultValueRelatedArtifact) {
		return true
	}

	return false
}

// SetDefaultValueRelatedArtifact gets a reference to the given RelatedArtifact and assigns it to the DefaultValueRelatedArtifact field.
func (o *StructureMapSource) SetDefaultValueRelatedArtifact(v RelatedArtifact) {
	o.DefaultValueRelatedArtifact = &v
}

// GetDefaultValueTriggerDefinition returns the DefaultValueTriggerDefinition field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.DefaultValueTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.DefaultValueTriggerDefinition
}

// GetDefaultValueTriggerDefinitionOk returns a tuple with the DefaultValueTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.DefaultValueTriggerDefinition) {
		return nil, false
	}
	return o.DefaultValueTriggerDefinition, true
}

// HasDefaultValueTriggerDefinition returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueTriggerDefinition() bool {
	if o != nil && !IsNil(o.DefaultValueTriggerDefinition) {
		return true
	}

	return false
}

// SetDefaultValueTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the DefaultValueTriggerDefinition field.
func (o *StructureMapSource) SetDefaultValueTriggerDefinition(v TriggerDefinition) {
	o.DefaultValueTriggerDefinition = &v
}

// GetDefaultValueUsageContext returns the DefaultValueUsageContext field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueUsageContext() UsageContext {
	if o == nil || IsNil(o.DefaultValueUsageContext) {
		var ret UsageContext
		return ret
	}
	return *o.DefaultValueUsageContext
}

// GetDefaultValueUsageContextOk returns a tuple with the DefaultValueUsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueUsageContextOk() (*UsageContext, bool) {
	if o == nil || IsNil(o.DefaultValueUsageContext) {
		return nil, false
	}
	return o.DefaultValueUsageContext, true
}

// HasDefaultValueUsageContext returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueUsageContext() bool {
	if o != nil && !IsNil(o.DefaultValueUsageContext) {
		return true
	}

	return false
}

// SetDefaultValueUsageContext gets a reference to the given UsageContext and assigns it to the DefaultValueUsageContext field.
func (o *StructureMapSource) SetDefaultValueUsageContext(v UsageContext) {
	o.DefaultValueUsageContext = &v
}

// GetDefaultValueDosage returns the DefaultValueDosage field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueDosage() Dosage {
	if o == nil || IsNil(o.DefaultValueDosage) {
		var ret Dosage
		return ret
	}
	return *o.DefaultValueDosage
}

// GetDefaultValueDosageOk returns a tuple with the DefaultValueDosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueDosageOk() (*Dosage, bool) {
	if o == nil || IsNil(o.DefaultValueDosage) {
		return nil, false
	}
	return o.DefaultValueDosage, true
}

// HasDefaultValueDosage returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueDosage() bool {
	if o != nil && !IsNil(o.DefaultValueDosage) {
		return true
	}

	return false
}

// SetDefaultValueDosage gets a reference to the given Dosage and assigns it to the DefaultValueDosage field.
func (o *StructureMapSource) SetDefaultValueDosage(v Dosage) {
	o.DefaultValueDosage = &v
}

// GetDefaultValueMeta returns the DefaultValueMeta field value if set, zero value otherwise.
func (o *StructureMapSource) GetDefaultValueMeta() Meta {
	if o == nil || IsNil(o.DefaultValueMeta) {
		var ret Meta
		return ret
	}
	return *o.DefaultValueMeta
}

// GetDefaultValueMetaOk returns a tuple with the DefaultValueMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetDefaultValueMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.DefaultValueMeta) {
		return nil, false
	}
	return o.DefaultValueMeta, true
}

// HasDefaultValueMeta returns a boolean if a field has been set.
func (o *StructureMapSource) HasDefaultValueMeta() bool {
	if o != nil && !IsNil(o.DefaultValueMeta) {
		return true
	}

	return false
}

// SetDefaultValueMeta gets a reference to the given Meta and assigns it to the DefaultValueMeta field.
func (o *StructureMapSource) SetDefaultValueMeta(v Meta) {
	o.DefaultValueMeta = &v
}

// GetElement returns the Element field value if set, zero value otherwise.
func (o *StructureMapSource) GetElement() string {
	if o == nil || IsNil(o.Element) {
		var ret string
		return ret
	}
	return *o.Element
}

// GetElementOk returns a tuple with the Element field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetElementOk() (*string, bool) {
	if o == nil || IsNil(o.Element) {
		return nil, false
	}
	return o.Element, true
}

// HasElement returns a boolean if a field has been set.
func (o *StructureMapSource) HasElement() bool {
	if o != nil && !IsNil(o.Element) {
		return true
	}

	return false
}

// SetElement gets a reference to the given string and assigns it to the Element field.
func (o *StructureMapSource) SetElement(v string) {
	o.Element = &v
}

// GetListMode returns the ListMode field value if set, zero value otherwise.
func (o *StructureMapSource) GetListMode() string {
	if o == nil || IsNil(o.ListMode) {
		var ret string
		return ret
	}
	return *o.ListMode
}

// GetListModeOk returns a tuple with the ListMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetListModeOk() (*string, bool) {
	if o == nil || IsNil(o.ListMode) {
		return nil, false
	}
	return o.ListMode, true
}

// HasListMode returns a boolean if a field has been set.
func (o *StructureMapSource) HasListMode() bool {
	if o != nil && !IsNil(o.ListMode) {
		return true
	}

	return false
}

// SetListMode gets a reference to the given string and assigns it to the ListMode field.
func (o *StructureMapSource) SetListMode(v string) {
	o.ListMode = &v
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *StructureMapSource) GetVariable() string {
	if o == nil || IsNil(o.Variable) {
		var ret string
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetVariableOk() (*string, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *StructureMapSource) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given string and assigns it to the Variable field.
func (o *StructureMapSource) SetVariable(v string) {
	o.Variable = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *StructureMapSource) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *StructureMapSource) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *StructureMapSource) SetCondition(v string) {
	o.Condition = &v
}

// GetCheck returns the Check field value if set, zero value otherwise.
func (o *StructureMapSource) GetCheck() string {
	if o == nil || IsNil(o.Check) {
		var ret string
		return ret
	}
	return *o.Check
}

// GetCheckOk returns a tuple with the Check field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetCheckOk() (*string, bool) {
	if o == nil || IsNil(o.Check) {
		return nil, false
	}
	return o.Check, true
}

// HasCheck returns a boolean if a field has been set.
func (o *StructureMapSource) HasCheck() bool {
	if o != nil && !IsNil(o.Check) {
		return true
	}

	return false
}

// SetCheck gets a reference to the given string and assigns it to the Check field.
func (o *StructureMapSource) SetCheck(v string) {
	o.Check = &v
}

// GetLogMessage returns the LogMessage field value if set, zero value otherwise.
func (o *StructureMapSource) GetLogMessage() string {
	if o == nil || IsNil(o.LogMessage) {
		var ret string
		return ret
	}
	return *o.LogMessage
}

// GetLogMessageOk returns a tuple with the LogMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapSource) GetLogMessageOk() (*string, bool) {
	if o == nil || IsNil(o.LogMessage) {
		return nil, false
	}
	return o.LogMessage, true
}

// HasLogMessage returns a boolean if a field has been set.
func (o *StructureMapSource) HasLogMessage() bool {
	if o != nil && !IsNil(o.LogMessage) {
		return true
	}

	return false
}

// SetLogMessage gets a reference to the given string and assigns it to the LogMessage field.
func (o *StructureMapSource) SetLogMessage(v string) {
	o.LogMessage = &v
}

func (o StructureMapSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructureMapSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DefaultValueBase64Binary) {
		toSerialize["defaultValueBase64Binary"] = o.DefaultValueBase64Binary
	}
	if !IsNil(o.DefaultValueBoolean) {
		toSerialize["defaultValueBoolean"] = o.DefaultValueBoolean
	}
	if !IsNil(o.DefaultValueCanonical) {
		toSerialize["defaultValueCanonical"] = o.DefaultValueCanonical
	}
	if !IsNil(o.DefaultValueCode) {
		toSerialize["defaultValueCode"] = o.DefaultValueCode
	}
	if !IsNil(o.DefaultValueDate) {
		toSerialize["defaultValueDate"] = o.DefaultValueDate
	}
	if !IsNil(o.DefaultValueDateTime) {
		toSerialize["defaultValueDateTime"] = o.DefaultValueDateTime
	}
	if !IsNil(o.DefaultValueDecimal) {
		toSerialize["defaultValueDecimal"] = o.DefaultValueDecimal
	}
	if !IsNil(o.DefaultValueId) {
		toSerialize["defaultValueId"] = o.DefaultValueId
	}
	if !IsNil(o.DefaultValueInstant) {
		toSerialize["defaultValueInstant"] = o.DefaultValueInstant
	}
	if !IsNil(o.DefaultValueInteger) {
		toSerialize["defaultValueInteger"] = o.DefaultValueInteger
	}
	if !IsNil(o.DefaultValueMarkdown) {
		toSerialize["defaultValueMarkdown"] = o.DefaultValueMarkdown
	}
	if !IsNil(o.DefaultValueOid) {
		toSerialize["defaultValueOid"] = o.DefaultValueOid
	}
	if !IsNil(o.DefaultValuePositiveInt) {
		toSerialize["defaultValuePositiveInt"] = o.DefaultValuePositiveInt
	}
	if !IsNil(o.DefaultValueString) {
		toSerialize["defaultValueString"] = o.DefaultValueString
	}
	if !IsNil(o.DefaultValueTime) {
		toSerialize["defaultValueTime"] = o.DefaultValueTime
	}
	if !IsNil(o.DefaultValueUnsignedInt) {
		toSerialize["defaultValueUnsignedInt"] = o.DefaultValueUnsignedInt
	}
	if !IsNil(o.DefaultValueUri) {
		toSerialize["defaultValueUri"] = o.DefaultValueUri
	}
	if !IsNil(o.DefaultValueUrl) {
		toSerialize["defaultValueUrl"] = o.DefaultValueUrl
	}
	if !IsNil(o.DefaultValueUuid) {
		toSerialize["defaultValueUuid"] = o.DefaultValueUuid
	}
	if !IsNil(o.DefaultValueAddress) {
		toSerialize["defaultValueAddress"] = o.DefaultValueAddress
	}
	if !IsNil(o.DefaultValueAge) {
		toSerialize["defaultValueAge"] = o.DefaultValueAge
	}
	if !IsNil(o.DefaultValueAnnotation) {
		toSerialize["defaultValueAnnotation"] = o.DefaultValueAnnotation
	}
	if !IsNil(o.DefaultValueAttachment) {
		toSerialize["defaultValueAttachment"] = o.DefaultValueAttachment
	}
	if !IsNil(o.DefaultValueCodeableConcept) {
		toSerialize["defaultValueCodeableConcept"] = o.DefaultValueCodeableConcept
	}
	if !IsNil(o.DefaultValueCoding) {
		toSerialize["defaultValueCoding"] = o.DefaultValueCoding
	}
	if !IsNil(o.DefaultValueContactPoint) {
		toSerialize["defaultValueContactPoint"] = o.DefaultValueContactPoint
	}
	if !IsNil(o.DefaultValueCount) {
		toSerialize["defaultValueCount"] = o.DefaultValueCount
	}
	if !IsNil(o.DefaultValueDistance) {
		toSerialize["defaultValueDistance"] = o.DefaultValueDistance
	}
	if !IsNil(o.DefaultValueDuration) {
		toSerialize["defaultValueDuration"] = o.DefaultValueDuration
	}
	if !IsNil(o.DefaultValueHumanName) {
		toSerialize["defaultValueHumanName"] = o.DefaultValueHumanName
	}
	if !IsNil(o.DefaultValueIdentifier) {
		toSerialize["defaultValueIdentifier"] = o.DefaultValueIdentifier
	}
	if !IsNil(o.DefaultValueMoney) {
		toSerialize["defaultValueMoney"] = o.DefaultValueMoney
	}
	if !IsNil(o.DefaultValuePeriod) {
		toSerialize["defaultValuePeriod"] = o.DefaultValuePeriod
	}
	if !IsNil(o.DefaultValueQuantity) {
		toSerialize["defaultValueQuantity"] = o.DefaultValueQuantity
	}
	if !IsNil(o.DefaultValueRange) {
		toSerialize["defaultValueRange"] = o.DefaultValueRange
	}
	if !IsNil(o.DefaultValueRatio) {
		toSerialize["defaultValueRatio"] = o.DefaultValueRatio
	}
	if !IsNil(o.DefaultValueReference) {
		toSerialize["defaultValueReference"] = o.DefaultValueReference
	}
	if !IsNil(o.DefaultValueSampledData) {
		toSerialize["defaultValueSampledData"] = o.DefaultValueSampledData
	}
	if !IsNil(o.DefaultValueSignature) {
		toSerialize["defaultValueSignature"] = o.DefaultValueSignature
	}
	if !IsNil(o.DefaultValueTiming) {
		toSerialize["defaultValueTiming"] = o.DefaultValueTiming
	}
	if !IsNil(o.DefaultValueContactDetail) {
		toSerialize["defaultValueContactDetail"] = o.DefaultValueContactDetail
	}
	if !IsNil(o.DefaultValueContributor) {
		toSerialize["defaultValueContributor"] = o.DefaultValueContributor
	}
	if !IsNil(o.DefaultValueDataRequirement) {
		toSerialize["defaultValueDataRequirement"] = o.DefaultValueDataRequirement
	}
	if !IsNil(o.DefaultValueExpression) {
		toSerialize["defaultValueExpression"] = o.DefaultValueExpression
	}
	if !IsNil(o.DefaultValueParameterDefinition) {
		toSerialize["defaultValueParameterDefinition"] = o.DefaultValueParameterDefinition
	}
	if !IsNil(o.DefaultValueRelatedArtifact) {
		toSerialize["defaultValueRelatedArtifact"] = o.DefaultValueRelatedArtifact
	}
	if !IsNil(o.DefaultValueTriggerDefinition) {
		toSerialize["defaultValueTriggerDefinition"] = o.DefaultValueTriggerDefinition
	}
	if !IsNil(o.DefaultValueUsageContext) {
		toSerialize["defaultValueUsageContext"] = o.DefaultValueUsageContext
	}
	if !IsNil(o.DefaultValueDosage) {
		toSerialize["defaultValueDosage"] = o.DefaultValueDosage
	}
	if !IsNil(o.DefaultValueMeta) {
		toSerialize["defaultValueMeta"] = o.DefaultValueMeta
	}
	if !IsNil(o.Element) {
		toSerialize["element"] = o.Element
	}
	if !IsNil(o.ListMode) {
		toSerialize["listMode"] = o.ListMode
	}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Check) {
		toSerialize["check"] = o.Check
	}
	if !IsNil(o.LogMessage) {
		toSerialize["logMessage"] = o.LogMessage
	}
	return toSerialize, nil
}

type NullableStructureMapSource struct {
	value *StructureMapSource
	isSet bool
}

func (v NullableStructureMapSource) Get() *StructureMapSource {
	return v.value
}

func (v *NullableStructureMapSource) Set(val *StructureMapSource) {
	v.value = val
	v.isSet = true
}

func (v NullableStructureMapSource) IsSet() bool {
	return v.isSet
}

func (v *NullableStructureMapSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructureMapSource(val *StructureMapSource) *NullableStructureMapSource {
	return &NullableStructureMapSource{value: val, isSet: true}
}

func (v NullableStructureMapSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructureMapSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


