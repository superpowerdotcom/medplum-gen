/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TriggerDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerDefinition{}

// TriggerDefinition A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
type TriggerDefinition struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// The type of triggering event.
	Type *string `json:"type,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// The timing of the event (if this is a periodic trigger).
	TimingTiming *Timing `json:"timingTiming,omitempty"`
	// The timing of the event (if this is a periodic trigger).
	TimingReference *Reference `json:"timingReference,omitempty"`
	// The timing of the event (if this is a periodic trigger).
	TimingDate *string `json:"timingDate,omitempty"`
	// The timing of the event (if this is a periodic trigger).
	TimingDateTime *string `json:"timingDateTime,omitempty"`
	// The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
	Data []DataRequirement `json:"data,omitempty"`
	// A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
	Condition *Expression `json:"condition,omitempty"`
}

// NewTriggerDefinition instantiates a new TriggerDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerDefinition() *TriggerDefinition {
	this := TriggerDefinition{}
	return &this
}

// NewTriggerDefinitionWithDefaults instantiates a new TriggerDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerDefinitionWithDefaults() *TriggerDefinition {
	this := TriggerDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TriggerDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TriggerDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TriggerDefinition) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TriggerDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TriggerDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TriggerDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TriggerDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TriggerDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TriggerDefinition) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TriggerDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TriggerDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TriggerDefinition) SetName(v string) {
	o.Name = &v
}

// GetTimingTiming returns the TimingTiming field value if set, zero value otherwise.
func (o *TriggerDefinition) GetTimingTiming() Timing {
	if o == nil || IsNil(o.TimingTiming) {
		var ret Timing
		return ret
	}
	return *o.TimingTiming
}

// GetTimingTimingOk returns a tuple with the TimingTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetTimingTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.TimingTiming) {
		return nil, false
	}
	return o.TimingTiming, true
}

// HasTimingTiming returns a boolean if a field has been set.
func (o *TriggerDefinition) HasTimingTiming() bool {
	if o != nil && !IsNil(o.TimingTiming) {
		return true
	}

	return false
}

// SetTimingTiming gets a reference to the given Timing and assigns it to the TimingTiming field.
func (o *TriggerDefinition) SetTimingTiming(v Timing) {
	o.TimingTiming = &v
}

// GetTimingReference returns the TimingReference field value if set, zero value otherwise.
func (o *TriggerDefinition) GetTimingReference() Reference {
	if o == nil || IsNil(o.TimingReference) {
		var ret Reference
		return ret
	}
	return *o.TimingReference
}

// GetTimingReferenceOk returns a tuple with the TimingReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetTimingReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.TimingReference) {
		return nil, false
	}
	return o.TimingReference, true
}

// HasTimingReference returns a boolean if a field has been set.
func (o *TriggerDefinition) HasTimingReference() bool {
	if o != nil && !IsNil(o.TimingReference) {
		return true
	}

	return false
}

// SetTimingReference gets a reference to the given Reference and assigns it to the TimingReference field.
func (o *TriggerDefinition) SetTimingReference(v Reference) {
	o.TimingReference = &v
}

// GetTimingDate returns the TimingDate field value if set, zero value otherwise.
func (o *TriggerDefinition) GetTimingDate() string {
	if o == nil || IsNil(o.TimingDate) {
		var ret string
		return ret
	}
	return *o.TimingDate
}

// GetTimingDateOk returns a tuple with the TimingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetTimingDateOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDate) {
		return nil, false
	}
	return o.TimingDate, true
}

// HasTimingDate returns a boolean if a field has been set.
func (o *TriggerDefinition) HasTimingDate() bool {
	if o != nil && !IsNil(o.TimingDate) {
		return true
	}

	return false
}

// SetTimingDate gets a reference to the given string and assigns it to the TimingDate field.
func (o *TriggerDefinition) SetTimingDate(v string) {
	o.TimingDate = &v
}

// GetTimingDateTime returns the TimingDateTime field value if set, zero value otherwise.
func (o *TriggerDefinition) GetTimingDateTime() string {
	if o == nil || IsNil(o.TimingDateTime) {
		var ret string
		return ret
	}
	return *o.TimingDateTime
}

// GetTimingDateTimeOk returns a tuple with the TimingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetTimingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDateTime) {
		return nil, false
	}
	return o.TimingDateTime, true
}

// HasTimingDateTime returns a boolean if a field has been set.
func (o *TriggerDefinition) HasTimingDateTime() bool {
	if o != nil && !IsNil(o.TimingDateTime) {
		return true
	}

	return false
}

// SetTimingDateTime gets a reference to the given string and assigns it to the TimingDateTime field.
func (o *TriggerDefinition) SetTimingDateTime(v string) {
	o.TimingDateTime = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TriggerDefinition) GetData() []DataRequirement {
	if o == nil || IsNil(o.Data) {
		var ret []DataRequirement
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetDataOk() ([]DataRequirement, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TriggerDefinition) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []DataRequirement and assigns it to the Data field.
func (o *TriggerDefinition) SetData(v []DataRequirement) {
	o.Data = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *TriggerDefinition) GetCondition() Expression {
	if o == nil || IsNil(o.Condition) {
		var ret Expression
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerDefinition) GetConditionOk() (*Expression, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *TriggerDefinition) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given Expression and assigns it to the Condition field.
func (o *TriggerDefinition) SetCondition(v Expression) {
	o.Condition = &v
}

func (o TriggerDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimingTiming) {
		toSerialize["timingTiming"] = o.TimingTiming
	}
	if !IsNil(o.TimingReference) {
		toSerialize["timingReference"] = o.TimingReference
	}
	if !IsNil(o.TimingDate) {
		toSerialize["timingDate"] = o.TimingDate
	}
	if !IsNil(o.TimingDateTime) {
		toSerialize["timingDateTime"] = o.TimingDateTime
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

type NullableTriggerDefinition struct {
	value *TriggerDefinition
	isSet bool
}

func (v NullableTriggerDefinition) Get() *TriggerDefinition {
	return v.value
}

func (v *NullableTriggerDefinition) Set(val *TriggerDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerDefinition(val *TriggerDefinition) *NullableTriggerDefinition {
	return &NullableTriggerDefinition{value: val, isSet: true}
}

func (v NullableTriggerDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


