/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicationDispense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationDispense{}

// MedicationDispense Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
type MedicationDispense struct {
	// This is a MedicationDispense resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The procedure that trigger the dispense.
	PartOf []Reference `json:"partOf,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Indicates the reason why a dispense was not performed.
	StatusReasonCodeableConcept *CodeableConcept `json:"statusReasonCodeableConcept,omitempty"`
	// Indicates the reason why a dispense was not performed.
	StatusReasonReference *Reference `json:"statusReasonReference,omitempty"`
	// Indicates the type of medication dispense (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category *CodeableConcept `json:"category,omitempty"`
	// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept,omitempty"`
	// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference,omitempty"`
	// A link to a resource representing the person or the group to whom the medication will be given.
	Subject *Reference `json:"subject,omitempty"`
	// The encounter or episode of care that establishes the context for this event.
	Context *Reference `json:"context,omitempty"`
	// Additional information that supports the medication being dispensed.
	SupportingInformation []Reference `json:"supportingInformation,omitempty"`
	// Indicates who or what performed the event.
	Performer []MedicationDispensePerformer `json:"performer,omitempty"`
	// The principal physical location where the dispense was performed.
	Location *Reference `json:"location,omitempty"`
	// Indicates the medication order that is being dispensed against.
	AuthorizingPrescription []Reference `json:"authorizingPrescription,omitempty"`
	// Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
	Type *CodeableConcept `json:"type,omitempty"`
	// The amount of medication that has been dispensed. Includes unit of measure.
	Quantity *Quantity `json:"quantity,omitempty"`
	// The amount of medication expressed as a timing amount.
	DaysSupply *Quantity `json:"daysSupply,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	WhenPrepared *string `json:"whenPrepared,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	WhenHandedOver *string `json:"whenHandedOver,omitempty"`
	// Identification of the facility/location where the medication was shipped to, as part of the dispense event.
	Destination *Reference `json:"destination,omitempty"`
	// Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
	Receiver []Reference `json:"receiver,omitempty"`
	// Extra information about the dispense that could not be conveyed in the other attributes.
	Note []Annotation `json:"note,omitempty"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []Dosage `json:"dosageInstruction,omitempty"`
	// Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
	Substitution *MedicationDispenseSubstitution `json:"substitution,omitempty"`
	// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate therapy, dosage alert etc.
	DetectedIssue []Reference `json:"detectedIssue,omitempty"`
	// A summary of the events of interest that have occurred, such as when the dispense was verified.
	EventHistory []Reference `json:"eventHistory,omitempty"`
}

type _MedicationDispense MedicationDispense

// NewMedicationDispense instantiates a new MedicationDispense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationDispense(resourceType string) *MedicationDispense {
	this := MedicationDispense{}
	this.ResourceType = resourceType
	return &this
}

// NewMedicationDispenseWithDefaults instantiates a new MedicationDispense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationDispenseWithDefaults() *MedicationDispense {
	this := MedicationDispense{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicationDispense) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicationDispense) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationDispense) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationDispense) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationDispense) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicationDispense) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicationDispense) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicationDispense) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicationDispense) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicationDispense) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicationDispense) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicationDispense) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicationDispense) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicationDispense) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicationDispense) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicationDispense) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicationDispense) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicationDispense) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicationDispense) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicationDispense) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationDispense) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationDispense) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationDispense) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationDispense) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationDispense) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationDispense) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicationDispense) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicationDispense) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *MedicationDispense) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *MedicationDispense) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *MedicationDispense) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *MedicationDispense) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MedicationDispense) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MedicationDispense) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MedicationDispense) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReasonCodeableConcept returns the StatusReasonCodeableConcept field value if set, zero value otherwise.
func (o *MedicationDispense) GetStatusReasonCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.StatusReasonCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReasonCodeableConcept
}

// GetStatusReasonCodeableConceptOk returns a tuple with the StatusReasonCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetStatusReasonCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReasonCodeableConcept) {
		return nil, false
	}
	return o.StatusReasonCodeableConcept, true
}

// HasStatusReasonCodeableConcept returns a boolean if a field has been set.
func (o *MedicationDispense) HasStatusReasonCodeableConcept() bool {
	if o != nil && !IsNil(o.StatusReasonCodeableConcept) {
		return true
	}

	return false
}

// SetStatusReasonCodeableConcept gets a reference to the given CodeableConcept and assigns it to the StatusReasonCodeableConcept field.
func (o *MedicationDispense) SetStatusReasonCodeableConcept(v CodeableConcept) {
	o.StatusReasonCodeableConcept = &v
}

// GetStatusReasonReference returns the StatusReasonReference field value if set, zero value otherwise.
func (o *MedicationDispense) GetStatusReasonReference() Reference {
	if o == nil || IsNil(o.StatusReasonReference) {
		var ret Reference
		return ret
	}
	return *o.StatusReasonReference
}

// GetStatusReasonReferenceOk returns a tuple with the StatusReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetStatusReasonReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.StatusReasonReference) {
		return nil, false
	}
	return o.StatusReasonReference, true
}

// HasStatusReasonReference returns a boolean if a field has been set.
func (o *MedicationDispense) HasStatusReasonReference() bool {
	if o != nil && !IsNil(o.StatusReasonReference) {
		return true
	}

	return false
}

// SetStatusReasonReference gets a reference to the given Reference and assigns it to the StatusReasonReference field.
func (o *MedicationDispense) SetStatusReasonReference(v Reference) {
	o.StatusReasonReference = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MedicationDispense) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *MedicationDispense) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *MedicationDispense) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetMedicationCodeableConcept returns the MedicationCodeableConcept field value if set, zero value otherwise.
func (o *MedicationDispense) GetMedicationCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.MedicationCodeableConcept
}

// GetMedicationCodeableConceptOk returns a tuple with the MedicationCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetMedicationCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		return nil, false
	}
	return o.MedicationCodeableConcept, true
}

// HasMedicationCodeableConcept returns a boolean if a field has been set.
func (o *MedicationDispense) HasMedicationCodeableConcept() bool {
	if o != nil && !IsNil(o.MedicationCodeableConcept) {
		return true
	}

	return false
}

// SetMedicationCodeableConcept gets a reference to the given CodeableConcept and assigns it to the MedicationCodeableConcept field.
func (o *MedicationDispense) SetMedicationCodeableConcept(v CodeableConcept) {
	o.MedicationCodeableConcept = &v
}

// GetMedicationReference returns the MedicationReference field value if set, zero value otherwise.
func (o *MedicationDispense) GetMedicationReference() Reference {
	if o == nil || IsNil(o.MedicationReference) {
		var ret Reference
		return ret
	}
	return *o.MedicationReference
}

// GetMedicationReferenceOk returns a tuple with the MedicationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetMedicationReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.MedicationReference) {
		return nil, false
	}
	return o.MedicationReference, true
}

// HasMedicationReference returns a boolean if a field has been set.
func (o *MedicationDispense) HasMedicationReference() bool {
	if o != nil && !IsNil(o.MedicationReference) {
		return true
	}

	return false
}

// SetMedicationReference gets a reference to the given Reference and assigns it to the MedicationReference field.
func (o *MedicationDispense) SetMedicationReference(v Reference) {
	o.MedicationReference = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MedicationDispense) GetSubject() Reference {
	if o == nil || IsNil(o.Subject) {
		var ret Reference
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetSubjectOk() (*Reference, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MedicationDispense) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Reference and assigns it to the Subject field.
func (o *MedicationDispense) SetSubject(v Reference) {
	o.Subject = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *MedicationDispense) GetContext() Reference {
	if o == nil || IsNil(o.Context) {
		var ret Reference
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetContextOk() (*Reference, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *MedicationDispense) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Reference and assigns it to the Context field.
func (o *MedicationDispense) SetContext(v Reference) {
	o.Context = &v
}

// GetSupportingInformation returns the SupportingInformation field value if set, zero value otherwise.
func (o *MedicationDispense) GetSupportingInformation() []Reference {
	if o == nil || IsNil(o.SupportingInformation) {
		var ret []Reference
		return ret
	}
	return o.SupportingInformation
}

// GetSupportingInformationOk returns a tuple with the SupportingInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetSupportingInformationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInformation) {
		return nil, false
	}
	return o.SupportingInformation, true
}

// HasSupportingInformation returns a boolean if a field has been set.
func (o *MedicationDispense) HasSupportingInformation() bool {
	if o != nil && !IsNil(o.SupportingInformation) {
		return true
	}

	return false
}

// SetSupportingInformation gets a reference to the given []Reference and assigns it to the SupportingInformation field.
func (o *MedicationDispense) SetSupportingInformation(v []Reference) {
	o.SupportingInformation = v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *MedicationDispense) GetPerformer() []MedicationDispensePerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []MedicationDispensePerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetPerformerOk() ([]MedicationDispensePerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *MedicationDispense) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []MedicationDispensePerformer and assigns it to the Performer field.
func (o *MedicationDispense) SetPerformer(v []MedicationDispensePerformer) {
	o.Performer = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *MedicationDispense) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *MedicationDispense) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *MedicationDispense) SetLocation(v Reference) {
	o.Location = &v
}

// GetAuthorizingPrescription returns the AuthorizingPrescription field value if set, zero value otherwise.
func (o *MedicationDispense) GetAuthorizingPrescription() []Reference {
	if o == nil || IsNil(o.AuthorizingPrescription) {
		var ret []Reference
		return ret
	}
	return o.AuthorizingPrescription
}

// GetAuthorizingPrescriptionOk returns a tuple with the AuthorizingPrescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetAuthorizingPrescriptionOk() ([]Reference, bool) {
	if o == nil || IsNil(o.AuthorizingPrescription) {
		return nil, false
	}
	return o.AuthorizingPrescription, true
}

// HasAuthorizingPrescription returns a boolean if a field has been set.
func (o *MedicationDispense) HasAuthorizingPrescription() bool {
	if o != nil && !IsNil(o.AuthorizingPrescription) {
		return true
	}

	return false
}

// SetAuthorizingPrescription gets a reference to the given []Reference and assigns it to the AuthorizingPrescription field.
func (o *MedicationDispense) SetAuthorizingPrescription(v []Reference) {
	o.AuthorizingPrescription = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MedicationDispense) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MedicationDispense) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *MedicationDispense) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *MedicationDispense) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *MedicationDispense) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *MedicationDispense) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetDaysSupply returns the DaysSupply field value if set, zero value otherwise.
func (o *MedicationDispense) GetDaysSupply() Quantity {
	if o == nil || IsNil(o.DaysSupply) {
		var ret Quantity
		return ret
	}
	return *o.DaysSupply
}

// GetDaysSupplyOk returns a tuple with the DaysSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetDaysSupplyOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DaysSupply) {
		return nil, false
	}
	return o.DaysSupply, true
}

// HasDaysSupply returns a boolean if a field has been set.
func (o *MedicationDispense) HasDaysSupply() bool {
	if o != nil && !IsNil(o.DaysSupply) {
		return true
	}

	return false
}

// SetDaysSupply gets a reference to the given Quantity and assigns it to the DaysSupply field.
func (o *MedicationDispense) SetDaysSupply(v Quantity) {
	o.DaysSupply = &v
}

// GetWhenPrepared returns the WhenPrepared field value if set, zero value otherwise.
func (o *MedicationDispense) GetWhenPrepared() string {
	if o == nil || IsNil(o.WhenPrepared) {
		var ret string
		return ret
	}
	return *o.WhenPrepared
}

// GetWhenPreparedOk returns a tuple with the WhenPrepared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetWhenPreparedOk() (*string, bool) {
	if o == nil || IsNil(o.WhenPrepared) {
		return nil, false
	}
	return o.WhenPrepared, true
}

// HasWhenPrepared returns a boolean if a field has been set.
func (o *MedicationDispense) HasWhenPrepared() bool {
	if o != nil && !IsNil(o.WhenPrepared) {
		return true
	}

	return false
}

// SetWhenPrepared gets a reference to the given string and assigns it to the WhenPrepared field.
func (o *MedicationDispense) SetWhenPrepared(v string) {
	o.WhenPrepared = &v
}

// GetWhenHandedOver returns the WhenHandedOver field value if set, zero value otherwise.
func (o *MedicationDispense) GetWhenHandedOver() string {
	if o == nil || IsNil(o.WhenHandedOver) {
		var ret string
		return ret
	}
	return *o.WhenHandedOver
}

// GetWhenHandedOverOk returns a tuple with the WhenHandedOver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetWhenHandedOverOk() (*string, bool) {
	if o == nil || IsNil(o.WhenHandedOver) {
		return nil, false
	}
	return o.WhenHandedOver, true
}

// HasWhenHandedOver returns a boolean if a field has been set.
func (o *MedicationDispense) HasWhenHandedOver() bool {
	if o != nil && !IsNil(o.WhenHandedOver) {
		return true
	}

	return false
}

// SetWhenHandedOver gets a reference to the given string and assigns it to the WhenHandedOver field.
func (o *MedicationDispense) SetWhenHandedOver(v string) {
	o.WhenHandedOver = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *MedicationDispense) GetDestination() Reference {
	if o == nil || IsNil(o.Destination) {
		var ret Reference
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetDestinationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *MedicationDispense) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given Reference and assigns it to the Destination field.
func (o *MedicationDispense) SetDestination(v Reference) {
	o.Destination = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *MedicationDispense) GetReceiver() []Reference {
	if o == nil || IsNil(o.Receiver) {
		var ret []Reference
		return ret
	}
	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetReceiverOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *MedicationDispense) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given []Reference and assigns it to the Receiver field.
func (o *MedicationDispense) SetReceiver(v []Reference) {
	o.Receiver = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *MedicationDispense) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *MedicationDispense) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *MedicationDispense) SetNote(v []Annotation) {
	o.Note = v
}

// GetDosageInstruction returns the DosageInstruction field value if set, zero value otherwise.
func (o *MedicationDispense) GetDosageInstruction() []Dosage {
	if o == nil || IsNil(o.DosageInstruction) {
		var ret []Dosage
		return ret
	}
	return o.DosageInstruction
}

// GetDosageInstructionOk returns a tuple with the DosageInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetDosageInstructionOk() ([]Dosage, bool) {
	if o == nil || IsNil(o.DosageInstruction) {
		return nil, false
	}
	return o.DosageInstruction, true
}

// HasDosageInstruction returns a boolean if a field has been set.
func (o *MedicationDispense) HasDosageInstruction() bool {
	if o != nil && !IsNil(o.DosageInstruction) {
		return true
	}

	return false
}

// SetDosageInstruction gets a reference to the given []Dosage and assigns it to the DosageInstruction field.
func (o *MedicationDispense) SetDosageInstruction(v []Dosage) {
	o.DosageInstruction = v
}

// GetSubstitution returns the Substitution field value if set, zero value otherwise.
func (o *MedicationDispense) GetSubstitution() MedicationDispenseSubstitution {
	if o == nil || IsNil(o.Substitution) {
		var ret MedicationDispenseSubstitution
		return ret
	}
	return *o.Substitution
}

// GetSubstitutionOk returns a tuple with the Substitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetSubstitutionOk() (*MedicationDispenseSubstitution, bool) {
	if o == nil || IsNil(o.Substitution) {
		return nil, false
	}
	return o.Substitution, true
}

// HasSubstitution returns a boolean if a field has been set.
func (o *MedicationDispense) HasSubstitution() bool {
	if o != nil && !IsNil(o.Substitution) {
		return true
	}

	return false
}

// SetSubstitution gets a reference to the given MedicationDispenseSubstitution and assigns it to the Substitution field.
func (o *MedicationDispense) SetSubstitution(v MedicationDispenseSubstitution) {
	o.Substitution = &v
}

// GetDetectedIssue returns the DetectedIssue field value if set, zero value otherwise.
func (o *MedicationDispense) GetDetectedIssue() []Reference {
	if o == nil || IsNil(o.DetectedIssue) {
		var ret []Reference
		return ret
	}
	return o.DetectedIssue
}

// GetDetectedIssueOk returns a tuple with the DetectedIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetDetectedIssueOk() ([]Reference, bool) {
	if o == nil || IsNil(o.DetectedIssue) {
		return nil, false
	}
	return o.DetectedIssue, true
}

// HasDetectedIssue returns a boolean if a field has been set.
func (o *MedicationDispense) HasDetectedIssue() bool {
	if o != nil && !IsNil(o.DetectedIssue) {
		return true
	}

	return false
}

// SetDetectedIssue gets a reference to the given []Reference and assigns it to the DetectedIssue field.
func (o *MedicationDispense) SetDetectedIssue(v []Reference) {
	o.DetectedIssue = v
}

// GetEventHistory returns the EventHistory field value if set, zero value otherwise.
func (o *MedicationDispense) GetEventHistory() []Reference {
	if o == nil || IsNil(o.EventHistory) {
		var ret []Reference
		return ret
	}
	return o.EventHistory
}

// GetEventHistoryOk returns a tuple with the EventHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationDispense) GetEventHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.EventHistory) {
		return nil, false
	}
	return o.EventHistory, true
}

// HasEventHistory returns a boolean if a field has been set.
func (o *MedicationDispense) HasEventHistory() bool {
	if o != nil && !IsNil(o.EventHistory) {
		return true
	}

	return false
}

// SetEventHistory gets a reference to the given []Reference and assigns it to the EventHistory field.
func (o *MedicationDispense) SetEventHistory(v []Reference) {
	o.EventHistory = v
}

func (o MedicationDispense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationDispense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReasonCodeableConcept) {
		toSerialize["statusReasonCodeableConcept"] = o.StatusReasonCodeableConcept
	}
	if !IsNil(o.StatusReasonReference) {
		toSerialize["statusReasonReference"] = o.StatusReasonReference
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.MedicationCodeableConcept) {
		toSerialize["medicationCodeableConcept"] = o.MedicationCodeableConcept
	}
	if !IsNil(o.MedicationReference) {
		toSerialize["medicationReference"] = o.MedicationReference
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.SupportingInformation) {
		toSerialize["supportingInformation"] = o.SupportingInformation
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.AuthorizingPrescription) {
		toSerialize["authorizingPrescription"] = o.AuthorizingPrescription
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.DaysSupply) {
		toSerialize["daysSupply"] = o.DaysSupply
	}
	if !IsNil(o.WhenPrepared) {
		toSerialize["whenPrepared"] = o.WhenPrepared
	}
	if !IsNil(o.WhenHandedOver) {
		toSerialize["whenHandedOver"] = o.WhenHandedOver
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.DosageInstruction) {
		toSerialize["dosageInstruction"] = o.DosageInstruction
	}
	if !IsNil(o.Substitution) {
		toSerialize["substitution"] = o.Substitution
	}
	if !IsNil(o.DetectedIssue) {
		toSerialize["detectedIssue"] = o.DetectedIssue
	}
	if !IsNil(o.EventHistory) {
		toSerialize["eventHistory"] = o.EventHistory
	}
	return toSerialize, nil
}

func (o *MedicationDispense) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicationDispense := _MedicationDispense{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicationDispense)

	if err != nil {
		return err
	}

	*o = MedicationDispense(varMedicationDispense)

	return err
}

type NullableMedicationDispense struct {
	value *MedicationDispense
	isSet bool
}

func (v NullableMedicationDispense) Get() *MedicationDispense {
	return v.value
}

func (v *NullableMedicationDispense) Set(val *MedicationDispense) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationDispense) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationDispense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationDispense(val *MedicationDispense) *NullableMedicationDispense {
	return &NullableMedicationDispense{value: val, isSet: true}
}

func (v NullableMedicationDispense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationDispense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


