/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestScriptCapability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestScriptCapability{}

// TestScriptCapability A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScriptCapability struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Value of \"true\" or \"false\"
	Required *bool `json:"required,omitempty"`
	// Value of \"true\" or \"false\"
	Validated *bool `json:"validated,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Which origin server these requirements apply to.
	Origin []float32 `json:"origin,omitempty"`
	// A whole number
	Destination *float32 `json:"destination,omitempty"`
	// Links to the FHIR specification that describes this interaction and the resources involved in more detail.
	Link []string `json:"link,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	Capabilities string `json:"capabilities"`
}

type _TestScriptCapability TestScriptCapability

// NewTestScriptCapability instantiates a new TestScriptCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestScriptCapability(capabilities string) *TestScriptCapability {
	this := TestScriptCapability{}
	this.Capabilities = capabilities
	return &this
}

// NewTestScriptCapabilityWithDefaults instantiates a new TestScriptCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestScriptCapabilityWithDefaults() *TestScriptCapability {
	this := TestScriptCapability{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestScriptCapability) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestScriptCapability) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestScriptCapability) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TestScriptCapability) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TestScriptCapability) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TestScriptCapability) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TestScriptCapability) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TestScriptCapability) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TestScriptCapability) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *TestScriptCapability) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *TestScriptCapability) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *TestScriptCapability) SetRequired(v bool) {
	o.Required = &v
}

// GetValidated returns the Validated field value if set, zero value otherwise.
func (o *TestScriptCapability) GetValidated() bool {
	if o == nil || IsNil(o.Validated) {
		var ret bool
		return ret
	}
	return *o.Validated
}

// GetValidatedOk returns a tuple with the Validated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetValidatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Validated) {
		return nil, false
	}
	return o.Validated, true
}

// HasValidated returns a boolean if a field has been set.
func (o *TestScriptCapability) HasValidated() bool {
	if o != nil && !IsNil(o.Validated) {
		return true
	}

	return false
}

// SetValidated gets a reference to the given bool and assigns it to the Validated field.
func (o *TestScriptCapability) SetValidated(v bool) {
	o.Validated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TestScriptCapability) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TestScriptCapability) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TestScriptCapability) SetDescription(v string) {
	o.Description = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *TestScriptCapability) GetOrigin() []float32 {
	if o == nil || IsNil(o.Origin) {
		var ret []float32
		return ret
	}
	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetOriginOk() ([]float32, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *TestScriptCapability) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given []float32 and assigns it to the Origin field.
func (o *TestScriptCapability) SetOrigin(v []float32) {
	o.Origin = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *TestScriptCapability) GetDestination() float32 {
	if o == nil || IsNil(o.Destination) {
		var ret float32
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetDestinationOk() (*float32, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *TestScriptCapability) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given float32 and assigns it to the Destination field.
func (o *TestScriptCapability) SetDestination(v float32) {
	o.Destination = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *TestScriptCapability) GetLink() []string {
	if o == nil || IsNil(o.Link) {
		var ret []string
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetLinkOk() ([]string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *TestScriptCapability) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given []string and assigns it to the Link field.
func (o *TestScriptCapability) SetLink(v []string) {
	o.Link = v
}

// GetCapabilities returns the Capabilities field value
func (o *TestScriptCapability) GetCapabilities() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *TestScriptCapability) GetCapabilitiesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capabilities, true
}

// SetCapabilities sets field value
func (o *TestScriptCapability) SetCapabilities(v string) {
	o.Capabilities = v
}

func (o TestScriptCapability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestScriptCapability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Validated) {
		toSerialize["validated"] = o.Validated
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	toSerialize["capabilities"] = o.Capabilities
	return toSerialize, nil
}

func (o *TestScriptCapability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestScriptCapability := _TestScriptCapability{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestScriptCapability)

	if err != nil {
		return err
	}

	*o = TestScriptCapability(varTestScriptCapability)

	return err
}

type NullableTestScriptCapability struct {
	value *TestScriptCapability
	isSet bool
}

func (v NullableTestScriptCapability) Get() *TestScriptCapability {
	return v.value
}

func (v *NullableTestScriptCapability) Set(val *TestScriptCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableTestScriptCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableTestScriptCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestScriptCapability(val *TestScriptCapability) *NullableTestScriptCapability {
	return &NullableTestScriptCapability{value: val, isSet: true}
}

func (v NullableTestScriptCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestScriptCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


