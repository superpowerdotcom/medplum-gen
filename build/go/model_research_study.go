/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResearchStudy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResearchStudy{}

// ResearchStudy A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
type ResearchStudy struct {
	// This is a ResearchStudy resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers assigned to this research study by the sponsor or other systems.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// The set of steps expected to be performed as part of the execution of the study.
	Protocol []Reference `json:"protocol,omitempty"`
	// A larger research study of which this particular study is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// The current state of the study.
	Status *string `json:"status,omitempty"`
	// The type of study based upon the intent of the study's activities. A classification of the intent of the study.
	PrimaryPurposeType *CodeableConcept `json:"primaryPurposeType,omitempty"`
	// The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
	Phase *CodeableConcept `json:"phase,omitempty"`
	// Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
	Category []CodeableConcept `json:"category,omitempty"`
	// The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
	Focus []CodeableConcept `json:"focus,omitempty"`
	// The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion \"healthy volunteer\", but the target condition code would be a Lupus SNOMED code.
	Condition []CodeableConcept `json:"condition,omitempty"`
	// Contact details to assist a user in learning more about or engaging with the study.
	Contact []ContactDetail `json:"contact,omitempty"`
	// Citations, references and other related documents.
	RelatedArtifact []RelatedArtifact `json:"relatedArtifact,omitempty"`
	// Key terms to aid in searching for or filtering the study.
	Keyword []CodeableConcept `json:"keyword,omitempty"`
	// Indicates a country, state or other region where the study is taking place.
	Location []CodeableConcept `json:"location,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Description *string `json:"description,omitempty"`
	// Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. \" 200 female Europeans between the ages of 20 and 45 with early onset diabetes\".
	Enrollment []Reference `json:"enrollment,omitempty"`
	// Identifies the start date and the expected (or actual, depending on status) end date for the study.
	Period *Period `json:"period,omitempty"`
	// An organization that initiates the investigation and is legally responsible for the study.
	Sponsor *Reference `json:"sponsor,omitempty"`
	// A researcher in a study who oversees multiple aspects of the study, such as concept development, protocol writing, protocol submission for IRB approval, participant recruitment, informed consent, data collection, analysis, interpretation and presentation.
	PrincipalInvestigator *Reference `json:"principalInvestigator,omitempty"`
	// A facility in which study activities are conducted.
	Site []Reference `json:"site,omitempty"`
	// A description and/or code explaining the premature termination of the study.
	ReasonStopped *CodeableConcept `json:"reasonStopped,omitempty"`
	// Comments made about the study by the performer, subject or other participants.
	Note []Annotation `json:"note,omitempty"`
	// Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
	Arm []ResearchStudyArm `json:"arm,omitempty"`
	// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
	Objective []ResearchStudyObjective `json:"objective,omitempty"`
}

type _ResearchStudy ResearchStudy

// NewResearchStudy instantiates a new ResearchStudy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResearchStudy(resourceType string) *ResearchStudy {
	this := ResearchStudy{}
	this.ResourceType = resourceType
	return &this
}

// NewResearchStudyWithDefaults instantiates a new ResearchStudy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResearchStudyWithDefaults() *ResearchStudy {
	this := ResearchStudy{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ResearchStudy) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResearchStudy) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResearchStudy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResearchStudy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResearchStudy) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ResearchStudy) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ResearchStudy) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ResearchStudy) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ResearchStudy) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ResearchStudy) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ResearchStudy) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ResearchStudy) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ResearchStudy) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ResearchStudy) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ResearchStudy) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ResearchStudy) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ResearchStudy) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ResearchStudy) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ResearchStudy) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ResearchStudy) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ResearchStudy) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ResearchStudy) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ResearchStudy) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ResearchStudy) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ResearchStudy) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ResearchStudy) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ResearchStudy) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ResearchStudy) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ResearchStudy) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ResearchStudy) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ResearchStudy) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ResearchStudy) SetTitle(v string) {
	o.Title = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ResearchStudy) GetProtocol() []Reference {
	if o == nil || IsNil(o.Protocol) {
		var ret []Reference
		return ret
	}
	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetProtocolOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ResearchStudy) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given []Reference and assigns it to the Protocol field.
func (o *ResearchStudy) SetProtocol(v []Reference) {
	o.Protocol = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *ResearchStudy) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *ResearchStudy) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *ResearchStudy) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResearchStudy) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResearchStudy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResearchStudy) SetStatus(v string) {
	o.Status = &v
}

// GetPrimaryPurposeType returns the PrimaryPurposeType field value if set, zero value otherwise.
func (o *ResearchStudy) GetPrimaryPurposeType() CodeableConcept {
	if o == nil || IsNil(o.PrimaryPurposeType) {
		var ret CodeableConcept
		return ret
	}
	return *o.PrimaryPurposeType
}

// GetPrimaryPurposeTypeOk returns a tuple with the PrimaryPurposeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetPrimaryPurposeTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PrimaryPurposeType) {
		return nil, false
	}
	return o.PrimaryPurposeType, true
}

// HasPrimaryPurposeType returns a boolean if a field has been set.
func (o *ResearchStudy) HasPrimaryPurposeType() bool {
	if o != nil && !IsNil(o.PrimaryPurposeType) {
		return true
	}

	return false
}

// SetPrimaryPurposeType gets a reference to the given CodeableConcept and assigns it to the PrimaryPurposeType field.
func (o *ResearchStudy) SetPrimaryPurposeType(v CodeableConcept) {
	o.PrimaryPurposeType = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *ResearchStudy) GetPhase() CodeableConcept {
	if o == nil || IsNil(o.Phase) {
		var ret CodeableConcept
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetPhaseOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *ResearchStudy) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given CodeableConcept and assigns it to the Phase field.
func (o *ResearchStudy) SetPhase(v CodeableConcept) {
	o.Phase = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ResearchStudy) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ResearchStudy) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *ResearchStudy) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetFocus returns the Focus field value if set, zero value otherwise.
func (o *ResearchStudy) GetFocus() []CodeableConcept {
	if o == nil || IsNil(o.Focus) {
		var ret []CodeableConcept
		return ret
	}
	return o.Focus
}

// GetFocusOk returns a tuple with the Focus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetFocusOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Focus) {
		return nil, false
	}
	return o.Focus, true
}

// HasFocus returns a boolean if a field has been set.
func (o *ResearchStudy) HasFocus() bool {
	if o != nil && !IsNil(o.Focus) {
		return true
	}

	return false
}

// SetFocus gets a reference to the given []CodeableConcept and assigns it to the Focus field.
func (o *ResearchStudy) SetFocus(v []CodeableConcept) {
	o.Focus = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ResearchStudy) GetCondition() []CodeableConcept {
	if o == nil || IsNil(o.Condition) {
		var ret []CodeableConcept
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetConditionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ResearchStudy) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []CodeableConcept and assigns it to the Condition field.
func (o *ResearchStudy) SetCondition(v []CodeableConcept) {
	o.Condition = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ResearchStudy) GetContact() []ContactDetail {
	if o == nil || IsNil(o.Contact) {
		var ret []ContactDetail
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetContactOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ResearchStudy) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []ContactDetail and assigns it to the Contact field.
func (o *ResearchStudy) SetContact(v []ContactDetail) {
	o.Contact = v
}

// GetRelatedArtifact returns the RelatedArtifact field value if set, zero value otherwise.
func (o *ResearchStudy) GetRelatedArtifact() []RelatedArtifact {
	if o == nil || IsNil(o.RelatedArtifact) {
		var ret []RelatedArtifact
		return ret
	}
	return o.RelatedArtifact
}

// GetRelatedArtifactOk returns a tuple with the RelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetRelatedArtifactOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.RelatedArtifact) {
		return nil, false
	}
	return o.RelatedArtifact, true
}

// HasRelatedArtifact returns a boolean if a field has been set.
func (o *ResearchStudy) HasRelatedArtifact() bool {
	if o != nil && !IsNil(o.RelatedArtifact) {
		return true
	}

	return false
}

// SetRelatedArtifact gets a reference to the given []RelatedArtifact and assigns it to the RelatedArtifact field.
func (o *ResearchStudy) SetRelatedArtifact(v []RelatedArtifact) {
	o.RelatedArtifact = v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *ResearchStudy) GetKeyword() []CodeableConcept {
	if o == nil || IsNil(o.Keyword) {
		var ret []CodeableConcept
		return ret
	}
	return o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetKeywordOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Keyword) {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *ResearchStudy) HasKeyword() bool {
	if o != nil && !IsNil(o.Keyword) {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given []CodeableConcept and assigns it to the Keyword field.
func (o *ResearchStudy) SetKeyword(v []CodeableConcept) {
	o.Keyword = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ResearchStudy) GetLocation() []CodeableConcept {
	if o == nil || IsNil(o.Location) {
		var ret []CodeableConcept
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetLocationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ResearchStudy) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []CodeableConcept and assigns it to the Location field.
func (o *ResearchStudy) SetLocation(v []CodeableConcept) {
	o.Location = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResearchStudy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResearchStudy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResearchStudy) SetDescription(v string) {
	o.Description = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *ResearchStudy) GetEnrollment() []Reference {
	if o == nil || IsNil(o.Enrollment) {
		var ret []Reference
		return ret
	}
	return o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetEnrollmentOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *ResearchStudy) HasEnrollment() bool {
	if o != nil && !IsNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given []Reference and assigns it to the Enrollment field.
func (o *ResearchStudy) SetEnrollment(v []Reference) {
	o.Enrollment = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *ResearchStudy) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *ResearchStudy) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *ResearchStudy) SetPeriod(v Period) {
	o.Period = &v
}

// GetSponsor returns the Sponsor field value if set, zero value otherwise.
func (o *ResearchStudy) GetSponsor() Reference {
	if o == nil || IsNil(o.Sponsor) {
		var ret Reference
		return ret
	}
	return *o.Sponsor
}

// GetSponsorOk returns a tuple with the Sponsor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetSponsorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Sponsor) {
		return nil, false
	}
	return o.Sponsor, true
}

// HasSponsor returns a boolean if a field has been set.
func (o *ResearchStudy) HasSponsor() bool {
	if o != nil && !IsNil(o.Sponsor) {
		return true
	}

	return false
}

// SetSponsor gets a reference to the given Reference and assigns it to the Sponsor field.
func (o *ResearchStudy) SetSponsor(v Reference) {
	o.Sponsor = &v
}

// GetPrincipalInvestigator returns the PrincipalInvestigator field value if set, zero value otherwise.
func (o *ResearchStudy) GetPrincipalInvestigator() Reference {
	if o == nil || IsNil(o.PrincipalInvestigator) {
		var ret Reference
		return ret
	}
	return *o.PrincipalInvestigator
}

// GetPrincipalInvestigatorOk returns a tuple with the PrincipalInvestigator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetPrincipalInvestigatorOk() (*Reference, bool) {
	if o == nil || IsNil(o.PrincipalInvestigator) {
		return nil, false
	}
	return o.PrincipalInvestigator, true
}

// HasPrincipalInvestigator returns a boolean if a field has been set.
func (o *ResearchStudy) HasPrincipalInvestigator() bool {
	if o != nil && !IsNil(o.PrincipalInvestigator) {
		return true
	}

	return false
}

// SetPrincipalInvestigator gets a reference to the given Reference and assigns it to the PrincipalInvestigator field.
func (o *ResearchStudy) SetPrincipalInvestigator(v Reference) {
	o.PrincipalInvestigator = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *ResearchStudy) GetSite() []Reference {
	if o == nil || IsNil(o.Site) {
		var ret []Reference
		return ret
	}
	return o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetSiteOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *ResearchStudy) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given []Reference and assigns it to the Site field.
func (o *ResearchStudy) SetSite(v []Reference) {
	o.Site = v
}

// GetReasonStopped returns the ReasonStopped field value if set, zero value otherwise.
func (o *ResearchStudy) GetReasonStopped() CodeableConcept {
	if o == nil || IsNil(o.ReasonStopped) {
		var ret CodeableConcept
		return ret
	}
	return *o.ReasonStopped
}

// GetReasonStoppedOk returns a tuple with the ReasonStopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetReasonStoppedOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonStopped) {
		return nil, false
	}
	return o.ReasonStopped, true
}

// HasReasonStopped returns a boolean if a field has been set.
func (o *ResearchStudy) HasReasonStopped() bool {
	if o != nil && !IsNil(o.ReasonStopped) {
		return true
	}

	return false
}

// SetReasonStopped gets a reference to the given CodeableConcept and assigns it to the ReasonStopped field.
func (o *ResearchStudy) SetReasonStopped(v CodeableConcept) {
	o.ReasonStopped = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ResearchStudy) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ResearchStudy) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *ResearchStudy) SetNote(v []Annotation) {
	o.Note = v
}

// GetArm returns the Arm field value if set, zero value otherwise.
func (o *ResearchStudy) GetArm() []ResearchStudyArm {
	if o == nil || IsNil(o.Arm) {
		var ret []ResearchStudyArm
		return ret
	}
	return o.Arm
}

// GetArmOk returns a tuple with the Arm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetArmOk() ([]ResearchStudyArm, bool) {
	if o == nil || IsNil(o.Arm) {
		return nil, false
	}
	return o.Arm, true
}

// HasArm returns a boolean if a field has been set.
func (o *ResearchStudy) HasArm() bool {
	if o != nil && !IsNil(o.Arm) {
		return true
	}

	return false
}

// SetArm gets a reference to the given []ResearchStudyArm and assigns it to the Arm field.
func (o *ResearchStudy) SetArm(v []ResearchStudyArm) {
	o.Arm = v
}

// GetObjective returns the Objective field value if set, zero value otherwise.
func (o *ResearchStudy) GetObjective() []ResearchStudyObjective {
	if o == nil || IsNil(o.Objective) {
		var ret []ResearchStudyObjective
		return ret
	}
	return o.Objective
}

// GetObjectiveOk returns a tuple with the Objective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResearchStudy) GetObjectiveOk() ([]ResearchStudyObjective, bool) {
	if o == nil || IsNil(o.Objective) {
		return nil, false
	}
	return o.Objective, true
}

// HasObjective returns a boolean if a field has been set.
func (o *ResearchStudy) HasObjective() bool {
	if o != nil && !IsNil(o.Objective) {
		return true
	}

	return false
}

// SetObjective gets a reference to the given []ResearchStudyObjective and assigns it to the Objective field.
func (o *ResearchStudy) SetObjective(v []ResearchStudyObjective) {
	o.Objective = v
}

func (o ResearchStudy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResearchStudy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PrimaryPurposeType) {
		toSerialize["primaryPurposeType"] = o.PrimaryPurposeType
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Focus) {
		toSerialize["focus"] = o.Focus
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.RelatedArtifact) {
		toSerialize["relatedArtifact"] = o.RelatedArtifact
	}
	if !IsNil(o.Keyword) {
		toSerialize["keyword"] = o.Keyword
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Sponsor) {
		toSerialize["sponsor"] = o.Sponsor
	}
	if !IsNil(o.PrincipalInvestigator) {
		toSerialize["principalInvestigator"] = o.PrincipalInvestigator
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.ReasonStopped) {
		toSerialize["reasonStopped"] = o.ReasonStopped
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Arm) {
		toSerialize["arm"] = o.Arm
	}
	if !IsNil(o.Objective) {
		toSerialize["objective"] = o.Objective
	}
	return toSerialize, nil
}

func (o *ResearchStudy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResearchStudy := _ResearchStudy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResearchStudy)

	if err != nil {
		return err
	}

	*o = ResearchStudy(varResearchStudy)

	return err
}

type NullableResearchStudy struct {
	value *ResearchStudy
	isSet bool
}

func (v NullableResearchStudy) Get() *ResearchStudy {
	return v.value
}

func (v *NullableResearchStudy) Set(val *ResearchStudy) {
	v.value = val
	v.isSet = true
}

func (v NullableResearchStudy) IsSet() bool {
	return v.isSet
}

func (v *NullableResearchStudy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResearchStudy(val *ResearchStudy) *NullableResearchStudy {
	return &NullableResearchStudy{value: val, isSet: true}
}

func (v NullableResearchStudy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResearchStudy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


