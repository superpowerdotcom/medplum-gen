/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Extension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extension{}

// Extension Optional Extension Element - found in all resources.
type Extension struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// String of characters used to identify a name or a resource
	Url *string `json:"url,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueBase64Binary *string `json:"valueBase64Binary,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueCanonical *string `json:"valueCanonical,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueCode *string `json:"valueCode,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDate *string `json:"valueDate,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDateTime *string `json:"valueDateTime,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDecimal *float32 `json:"valueDecimal,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueId *string `json:"valueId,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueInstant *string `json:"valueInstant,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueInteger *float32 `json:"valueInteger,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueMarkdown *string `json:"valueMarkdown,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueOid *string `json:"valueOid,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValuePositiveInt *float32 `json:"valuePositiveInt,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueString *string `json:"valueString,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueTime *string `json:"valueTime,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueUnsignedInt *float32 `json:"valueUnsignedInt,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueUri *string `json:"valueUri,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueUrl *string `json:"valueUrl,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueUuid *string `json:"valueUuid,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueAddress *Address `json:"valueAddress,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueAge *Age `json:"valueAge,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueAnnotation *Annotation `json:"valueAnnotation,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueAttachment *Attachment `json:"valueAttachment,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueCoding *Coding `json:"valueCoding,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueContactPoint *ContactPoint `json:"valueContactPoint,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueCount *Count `json:"valueCount,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDistance *Distance `json:"valueDistance,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDuration *Duration `json:"valueDuration,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueHumanName *HumanName `json:"valueHumanName,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueIdentifier *Identifier `json:"valueIdentifier,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueMoney *Money `json:"valueMoney,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValuePeriod *Period `json:"valuePeriod,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueRange *Range `json:"valueRange,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueRatio *Ratio `json:"valueRatio,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueReference *Reference `json:"valueReference,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueSampledData *SampledData `json:"valueSampledData,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueSignature *Signature `json:"valueSignature,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueTiming *Timing `json:"valueTiming,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueContactDetail *ContactDetail `json:"valueContactDetail,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueContributor *Contributor `json:"valueContributor,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDataRequirement *DataRequirement `json:"valueDataRequirement,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueExpression *Expression `json:"valueExpression,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueParameterDefinition *ParameterDefinition `json:"valueParameterDefinition,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueRelatedArtifact *RelatedArtifact `json:"valueRelatedArtifact,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueTriggerDefinition *TriggerDefinition `json:"valueTriggerDefinition,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueUsageContext *UsageContext `json:"valueUsageContext,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueDosage *Dosage `json:"valueDosage,omitempty"`
	// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
	ValueMeta *Meta `json:"valueMeta,omitempty"`
}

// NewExtension instantiates a new Extension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtension() *Extension {
	this := Extension{}
	return &this
}

// NewExtensionWithDefaults instantiates a new Extension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionWithDefaults() *Extension {
	this := Extension{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Extension) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Extension) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Extension) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Extension) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Extension) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Extension) SetExtension(v []Extension) {
	o.Extension = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Extension) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Extension) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Extension) SetUrl(v string) {
	o.Url = &v
}

// GetValueBase64Binary returns the ValueBase64Binary field value if set, zero value otherwise.
func (o *Extension) GetValueBase64Binary() string {
	if o == nil || IsNil(o.ValueBase64Binary) {
		var ret string
		return ret
	}
	return *o.ValueBase64Binary
}

// GetValueBase64BinaryOk returns a tuple with the ValueBase64Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueBase64BinaryOk() (*string, bool) {
	if o == nil || IsNil(o.ValueBase64Binary) {
		return nil, false
	}
	return o.ValueBase64Binary, true
}

// HasValueBase64Binary returns a boolean if a field has been set.
func (o *Extension) HasValueBase64Binary() bool {
	if o != nil && !IsNil(o.ValueBase64Binary) {
		return true
	}

	return false
}

// SetValueBase64Binary gets a reference to the given string and assigns it to the ValueBase64Binary field.
func (o *Extension) SetValueBase64Binary(v string) {
	o.ValueBase64Binary = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *Extension) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *Extension) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *Extension) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueCanonical returns the ValueCanonical field value if set, zero value otherwise.
func (o *Extension) GetValueCanonical() string {
	if o == nil || IsNil(o.ValueCanonical) {
		var ret string
		return ret
	}
	return *o.ValueCanonical
}

// GetValueCanonicalOk returns a tuple with the ValueCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.ValueCanonical) {
		return nil, false
	}
	return o.ValueCanonical, true
}

// HasValueCanonical returns a boolean if a field has been set.
func (o *Extension) HasValueCanonical() bool {
	if o != nil && !IsNil(o.ValueCanonical) {
		return true
	}

	return false
}

// SetValueCanonical gets a reference to the given string and assigns it to the ValueCanonical field.
func (o *Extension) SetValueCanonical(v string) {
	o.ValueCanonical = &v
}

// GetValueCode returns the ValueCode field value if set, zero value otherwise.
func (o *Extension) GetValueCode() string {
	if o == nil || IsNil(o.ValueCode) {
		var ret string
		return ret
	}
	return *o.ValueCode
}

// GetValueCodeOk returns a tuple with the ValueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueCode) {
		return nil, false
	}
	return o.ValueCode, true
}

// HasValueCode returns a boolean if a field has been set.
func (o *Extension) HasValueCode() bool {
	if o != nil && !IsNil(o.ValueCode) {
		return true
	}

	return false
}

// SetValueCode gets a reference to the given string and assigns it to the ValueCode field.
func (o *Extension) SetValueCode(v string) {
	o.ValueCode = &v
}

// GetValueDate returns the ValueDate field value if set, zero value otherwise.
func (o *Extension) GetValueDate() string {
	if o == nil || IsNil(o.ValueDate) {
		var ret string
		return ret
	}
	return *o.ValueDate
}

// GetValueDateOk returns a tuple with the ValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDateOk() (*string, bool) {
	if o == nil || IsNil(o.ValueDate) {
		return nil, false
	}
	return o.ValueDate, true
}

// HasValueDate returns a boolean if a field has been set.
func (o *Extension) HasValueDate() bool {
	if o != nil && !IsNil(o.ValueDate) {
		return true
	}

	return false
}

// SetValueDate gets a reference to the given string and assigns it to the ValueDate field.
func (o *Extension) SetValueDate(v string) {
	o.ValueDate = &v
}

// GetValueDateTime returns the ValueDateTime field value if set, zero value otherwise.
func (o *Extension) GetValueDateTime() string {
	if o == nil || IsNil(o.ValueDateTime) {
		var ret string
		return ret
	}
	return *o.ValueDateTime
}

// GetValueDateTimeOk returns a tuple with the ValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueDateTime) {
		return nil, false
	}
	return o.ValueDateTime, true
}

// HasValueDateTime returns a boolean if a field has been set.
func (o *Extension) HasValueDateTime() bool {
	if o != nil && !IsNil(o.ValueDateTime) {
		return true
	}

	return false
}

// SetValueDateTime gets a reference to the given string and assigns it to the ValueDateTime field.
func (o *Extension) SetValueDateTime(v string) {
	o.ValueDateTime = &v
}

// GetValueDecimal returns the ValueDecimal field value if set, zero value otherwise.
func (o *Extension) GetValueDecimal() float32 {
	if o == nil || IsNil(o.ValueDecimal) {
		var ret float32
		return ret
	}
	return *o.ValueDecimal
}

// GetValueDecimalOk returns a tuple with the ValueDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDecimalOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueDecimal) {
		return nil, false
	}
	return o.ValueDecimal, true
}

// HasValueDecimal returns a boolean if a field has been set.
func (o *Extension) HasValueDecimal() bool {
	if o != nil && !IsNil(o.ValueDecimal) {
		return true
	}

	return false
}

// SetValueDecimal gets a reference to the given float32 and assigns it to the ValueDecimal field.
func (o *Extension) SetValueDecimal(v float32) {
	o.ValueDecimal = &v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *Extension) GetValueId() string {
	if o == nil || IsNil(o.ValueId) {
		var ret string
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValueId) {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *Extension) HasValueId() bool {
	if o != nil && !IsNil(o.ValueId) {
		return true
	}

	return false
}

// SetValueId gets a reference to the given string and assigns it to the ValueId field.
func (o *Extension) SetValueId(v string) {
	o.ValueId = &v
}

// GetValueInstant returns the ValueInstant field value if set, zero value otherwise.
func (o *Extension) GetValueInstant() string {
	if o == nil || IsNil(o.ValueInstant) {
		var ret string
		return ret
	}
	return *o.ValueInstant
}

// GetValueInstantOk returns a tuple with the ValueInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueInstantOk() (*string, bool) {
	if o == nil || IsNil(o.ValueInstant) {
		return nil, false
	}
	return o.ValueInstant, true
}

// HasValueInstant returns a boolean if a field has been set.
func (o *Extension) HasValueInstant() bool {
	if o != nil && !IsNil(o.ValueInstant) {
		return true
	}

	return false
}

// SetValueInstant gets a reference to the given string and assigns it to the ValueInstant field.
func (o *Extension) SetValueInstant(v string) {
	o.ValueInstant = &v
}

// GetValueInteger returns the ValueInteger field value if set, zero value otherwise.
func (o *Extension) GetValueInteger() float32 {
	if o == nil || IsNil(o.ValueInteger) {
		var ret float32
		return ret
	}
	return *o.ValueInteger
}

// GetValueIntegerOk returns a tuple with the ValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueInteger) {
		return nil, false
	}
	return o.ValueInteger, true
}

// HasValueInteger returns a boolean if a field has been set.
func (o *Extension) HasValueInteger() bool {
	if o != nil && !IsNil(o.ValueInteger) {
		return true
	}

	return false
}

// SetValueInteger gets a reference to the given float32 and assigns it to the ValueInteger field.
func (o *Extension) SetValueInteger(v float32) {
	o.ValueInteger = &v
}

// GetValueMarkdown returns the ValueMarkdown field value if set, zero value otherwise.
func (o *Extension) GetValueMarkdown() string {
	if o == nil || IsNil(o.ValueMarkdown) {
		var ret string
		return ret
	}
	return *o.ValueMarkdown
}

// GetValueMarkdownOk returns a tuple with the ValueMarkdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueMarkdownOk() (*string, bool) {
	if o == nil || IsNil(o.ValueMarkdown) {
		return nil, false
	}
	return o.ValueMarkdown, true
}

// HasValueMarkdown returns a boolean if a field has been set.
func (o *Extension) HasValueMarkdown() bool {
	if o != nil && !IsNil(o.ValueMarkdown) {
		return true
	}

	return false
}

// SetValueMarkdown gets a reference to the given string and assigns it to the ValueMarkdown field.
func (o *Extension) SetValueMarkdown(v string) {
	o.ValueMarkdown = &v
}

// GetValueOid returns the ValueOid field value if set, zero value otherwise.
func (o *Extension) GetValueOid() string {
	if o == nil || IsNil(o.ValueOid) {
		var ret string
		return ret
	}
	return *o.ValueOid
}

// GetValueOidOk returns a tuple with the ValueOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueOidOk() (*string, bool) {
	if o == nil || IsNil(o.ValueOid) {
		return nil, false
	}
	return o.ValueOid, true
}

// HasValueOid returns a boolean if a field has been set.
func (o *Extension) HasValueOid() bool {
	if o != nil && !IsNil(o.ValueOid) {
		return true
	}

	return false
}

// SetValueOid gets a reference to the given string and assigns it to the ValueOid field.
func (o *Extension) SetValueOid(v string) {
	o.ValueOid = &v
}

// GetValuePositiveInt returns the ValuePositiveInt field value if set, zero value otherwise.
func (o *Extension) GetValuePositiveInt() float32 {
	if o == nil || IsNil(o.ValuePositiveInt) {
		var ret float32
		return ret
	}
	return *o.ValuePositiveInt
}

// GetValuePositiveIntOk returns a tuple with the ValuePositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValuePositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.ValuePositiveInt) {
		return nil, false
	}
	return o.ValuePositiveInt, true
}

// HasValuePositiveInt returns a boolean if a field has been set.
func (o *Extension) HasValuePositiveInt() bool {
	if o != nil && !IsNil(o.ValuePositiveInt) {
		return true
	}

	return false
}

// SetValuePositiveInt gets a reference to the given float32 and assigns it to the ValuePositiveInt field.
func (o *Extension) SetValuePositiveInt(v float32) {
	o.ValuePositiveInt = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *Extension) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *Extension) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *Extension) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueTime returns the ValueTime field value if set, zero value otherwise.
func (o *Extension) GetValueTime() string {
	if o == nil || IsNil(o.ValueTime) {
		var ret string
		return ret
	}
	return *o.ValueTime
}

// GetValueTimeOk returns a tuple with the ValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueTime) {
		return nil, false
	}
	return o.ValueTime, true
}

// HasValueTime returns a boolean if a field has been set.
func (o *Extension) HasValueTime() bool {
	if o != nil && !IsNil(o.ValueTime) {
		return true
	}

	return false
}

// SetValueTime gets a reference to the given string and assigns it to the ValueTime field.
func (o *Extension) SetValueTime(v string) {
	o.ValueTime = &v
}

// GetValueUnsignedInt returns the ValueUnsignedInt field value if set, zero value otherwise.
func (o *Extension) GetValueUnsignedInt() float32 {
	if o == nil || IsNil(o.ValueUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.ValueUnsignedInt
}

// GetValueUnsignedIntOk returns a tuple with the ValueUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueUnsignedInt) {
		return nil, false
	}
	return o.ValueUnsignedInt, true
}

// HasValueUnsignedInt returns a boolean if a field has been set.
func (o *Extension) HasValueUnsignedInt() bool {
	if o != nil && !IsNil(o.ValueUnsignedInt) {
		return true
	}

	return false
}

// SetValueUnsignedInt gets a reference to the given float32 and assigns it to the ValueUnsignedInt field.
func (o *Extension) SetValueUnsignedInt(v float32) {
	o.ValueUnsignedInt = &v
}

// GetValueUri returns the ValueUri field value if set, zero value otherwise.
func (o *Extension) GetValueUri() string {
	if o == nil || IsNil(o.ValueUri) {
		var ret string
		return ret
	}
	return *o.ValueUri
}

// GetValueUriOk returns a tuple with the ValueUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueUriOk() (*string, bool) {
	if o == nil || IsNil(o.ValueUri) {
		return nil, false
	}
	return o.ValueUri, true
}

// HasValueUri returns a boolean if a field has been set.
func (o *Extension) HasValueUri() bool {
	if o != nil && !IsNil(o.ValueUri) {
		return true
	}

	return false
}

// SetValueUri gets a reference to the given string and assigns it to the ValueUri field.
func (o *Extension) SetValueUri(v string) {
	o.ValueUri = &v
}

// GetValueUrl returns the ValueUrl field value if set, zero value otherwise.
func (o *Extension) GetValueUrl() string {
	if o == nil || IsNil(o.ValueUrl) {
		var ret string
		return ret
	}
	return *o.ValueUrl
}

// GetValueUrlOk returns a tuple with the ValueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ValueUrl) {
		return nil, false
	}
	return o.ValueUrl, true
}

// HasValueUrl returns a boolean if a field has been set.
func (o *Extension) HasValueUrl() bool {
	if o != nil && !IsNil(o.ValueUrl) {
		return true
	}

	return false
}

// SetValueUrl gets a reference to the given string and assigns it to the ValueUrl field.
func (o *Extension) SetValueUrl(v string) {
	o.ValueUrl = &v
}

// GetValueUuid returns the ValueUuid field value if set, zero value otherwise.
func (o *Extension) GetValueUuid() string {
	if o == nil || IsNil(o.ValueUuid) {
		var ret string
		return ret
	}
	return *o.ValueUuid
}

// GetValueUuidOk returns a tuple with the ValueUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ValueUuid) {
		return nil, false
	}
	return o.ValueUuid, true
}

// HasValueUuid returns a boolean if a field has been set.
func (o *Extension) HasValueUuid() bool {
	if o != nil && !IsNil(o.ValueUuid) {
		return true
	}

	return false
}

// SetValueUuid gets a reference to the given string and assigns it to the ValueUuid field.
func (o *Extension) SetValueUuid(v string) {
	o.ValueUuid = &v
}

// GetValueAddress returns the ValueAddress field value if set, zero value otherwise.
func (o *Extension) GetValueAddress() Address {
	if o == nil || IsNil(o.ValueAddress) {
		var ret Address
		return ret
	}
	return *o.ValueAddress
}

// GetValueAddressOk returns a tuple with the ValueAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.ValueAddress) {
		return nil, false
	}
	return o.ValueAddress, true
}

// HasValueAddress returns a boolean if a field has been set.
func (o *Extension) HasValueAddress() bool {
	if o != nil && !IsNil(o.ValueAddress) {
		return true
	}

	return false
}

// SetValueAddress gets a reference to the given Address and assigns it to the ValueAddress field.
func (o *Extension) SetValueAddress(v Address) {
	o.ValueAddress = &v
}

// GetValueAge returns the ValueAge field value if set, zero value otherwise.
func (o *Extension) GetValueAge() Age {
	if o == nil || IsNil(o.ValueAge) {
		var ret Age
		return ret
	}
	return *o.ValueAge
}

// GetValueAgeOk returns a tuple with the ValueAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.ValueAge) {
		return nil, false
	}
	return o.ValueAge, true
}

// HasValueAge returns a boolean if a field has been set.
func (o *Extension) HasValueAge() bool {
	if o != nil && !IsNil(o.ValueAge) {
		return true
	}

	return false
}

// SetValueAge gets a reference to the given Age and assigns it to the ValueAge field.
func (o *Extension) SetValueAge(v Age) {
	o.ValueAge = &v
}

// GetValueAnnotation returns the ValueAnnotation field value if set, zero value otherwise.
func (o *Extension) GetValueAnnotation() Annotation {
	if o == nil || IsNil(o.ValueAnnotation) {
		var ret Annotation
		return ret
	}
	return *o.ValueAnnotation
}

// GetValueAnnotationOk returns a tuple with the ValueAnnotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueAnnotationOk() (*Annotation, bool) {
	if o == nil || IsNil(o.ValueAnnotation) {
		return nil, false
	}
	return o.ValueAnnotation, true
}

// HasValueAnnotation returns a boolean if a field has been set.
func (o *Extension) HasValueAnnotation() bool {
	if o != nil && !IsNil(o.ValueAnnotation) {
		return true
	}

	return false
}

// SetValueAnnotation gets a reference to the given Annotation and assigns it to the ValueAnnotation field.
func (o *Extension) SetValueAnnotation(v Annotation) {
	o.ValueAnnotation = &v
}

// GetValueAttachment returns the ValueAttachment field value if set, zero value otherwise.
func (o *Extension) GetValueAttachment() Attachment {
	if o == nil || IsNil(o.ValueAttachment) {
		var ret Attachment
		return ret
	}
	return *o.ValueAttachment
}

// GetValueAttachmentOk returns a tuple with the ValueAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.ValueAttachment) {
		return nil, false
	}
	return o.ValueAttachment, true
}

// HasValueAttachment returns a boolean if a field has been set.
func (o *Extension) HasValueAttachment() bool {
	if o != nil && !IsNil(o.ValueAttachment) {
		return true
	}

	return false
}

// SetValueAttachment gets a reference to the given Attachment and assigns it to the ValueAttachment field.
func (o *Extension) SetValueAttachment(v Attachment) {
	o.ValueAttachment = &v
}

// GetValueCodeableConcept returns the ValueCodeableConcept field value if set, zero value otherwise.
func (o *Extension) GetValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValueCodeableConcept
}

// GetValueCodeableConceptOk returns a tuple with the ValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		return nil, false
	}
	return o.ValueCodeableConcept, true
}

// HasValueCodeableConcept returns a boolean if a field has been set.
func (o *Extension) HasValueCodeableConcept() bool {
	if o != nil && !IsNil(o.ValueCodeableConcept) {
		return true
	}

	return false
}

// SetValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ValueCodeableConcept field.
func (o *Extension) SetValueCodeableConcept(v CodeableConcept) {
	o.ValueCodeableConcept = &v
}

// GetValueCoding returns the ValueCoding field value if set, zero value otherwise.
func (o *Extension) GetValueCoding() Coding {
	if o == nil || IsNil(o.ValueCoding) {
		var ret Coding
		return ret
	}
	return *o.ValueCoding
}

// GetValueCodingOk returns a tuple with the ValueCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueCodingOk() (*Coding, bool) {
	if o == nil || IsNil(o.ValueCoding) {
		return nil, false
	}
	return o.ValueCoding, true
}

// HasValueCoding returns a boolean if a field has been set.
func (o *Extension) HasValueCoding() bool {
	if o != nil && !IsNil(o.ValueCoding) {
		return true
	}

	return false
}

// SetValueCoding gets a reference to the given Coding and assigns it to the ValueCoding field.
func (o *Extension) SetValueCoding(v Coding) {
	o.ValueCoding = &v
}

// GetValueContactPoint returns the ValueContactPoint field value if set, zero value otherwise.
func (o *Extension) GetValueContactPoint() ContactPoint {
	if o == nil || IsNil(o.ValueContactPoint) {
		var ret ContactPoint
		return ret
	}
	return *o.ValueContactPoint
}

// GetValueContactPointOk returns a tuple with the ValueContactPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueContactPointOk() (*ContactPoint, bool) {
	if o == nil || IsNil(o.ValueContactPoint) {
		return nil, false
	}
	return o.ValueContactPoint, true
}

// HasValueContactPoint returns a boolean if a field has been set.
func (o *Extension) HasValueContactPoint() bool {
	if o != nil && !IsNil(o.ValueContactPoint) {
		return true
	}

	return false
}

// SetValueContactPoint gets a reference to the given ContactPoint and assigns it to the ValueContactPoint field.
func (o *Extension) SetValueContactPoint(v ContactPoint) {
	o.ValueContactPoint = &v
}

// GetValueCount returns the ValueCount field value if set, zero value otherwise.
func (o *Extension) GetValueCount() Count {
	if o == nil || IsNil(o.ValueCount) {
		var ret Count
		return ret
	}
	return *o.ValueCount
}

// GetValueCountOk returns a tuple with the ValueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueCountOk() (*Count, bool) {
	if o == nil || IsNil(o.ValueCount) {
		return nil, false
	}
	return o.ValueCount, true
}

// HasValueCount returns a boolean if a field has been set.
func (o *Extension) HasValueCount() bool {
	if o != nil && !IsNil(o.ValueCount) {
		return true
	}

	return false
}

// SetValueCount gets a reference to the given Count and assigns it to the ValueCount field.
func (o *Extension) SetValueCount(v Count) {
	o.ValueCount = &v
}

// GetValueDistance returns the ValueDistance field value if set, zero value otherwise.
func (o *Extension) GetValueDistance() Distance {
	if o == nil || IsNil(o.ValueDistance) {
		var ret Distance
		return ret
	}
	return *o.ValueDistance
}

// GetValueDistanceOk returns a tuple with the ValueDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDistanceOk() (*Distance, bool) {
	if o == nil || IsNil(o.ValueDistance) {
		return nil, false
	}
	return o.ValueDistance, true
}

// HasValueDistance returns a boolean if a field has been set.
func (o *Extension) HasValueDistance() bool {
	if o != nil && !IsNil(o.ValueDistance) {
		return true
	}

	return false
}

// SetValueDistance gets a reference to the given Distance and assigns it to the ValueDistance field.
func (o *Extension) SetValueDistance(v Distance) {
	o.ValueDistance = &v
}

// GetValueDuration returns the ValueDuration field value if set, zero value otherwise.
func (o *Extension) GetValueDuration() Duration {
	if o == nil || IsNil(o.ValueDuration) {
		var ret Duration
		return ret
	}
	return *o.ValueDuration
}

// GetValueDurationOk returns a tuple with the ValueDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.ValueDuration) {
		return nil, false
	}
	return o.ValueDuration, true
}

// HasValueDuration returns a boolean if a field has been set.
func (o *Extension) HasValueDuration() bool {
	if o != nil && !IsNil(o.ValueDuration) {
		return true
	}

	return false
}

// SetValueDuration gets a reference to the given Duration and assigns it to the ValueDuration field.
func (o *Extension) SetValueDuration(v Duration) {
	o.ValueDuration = &v
}

// GetValueHumanName returns the ValueHumanName field value if set, zero value otherwise.
func (o *Extension) GetValueHumanName() HumanName {
	if o == nil || IsNil(o.ValueHumanName) {
		var ret HumanName
		return ret
	}
	return *o.ValueHumanName
}

// GetValueHumanNameOk returns a tuple with the ValueHumanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueHumanNameOk() (*HumanName, bool) {
	if o == nil || IsNil(o.ValueHumanName) {
		return nil, false
	}
	return o.ValueHumanName, true
}

// HasValueHumanName returns a boolean if a field has been set.
func (o *Extension) HasValueHumanName() bool {
	if o != nil && !IsNil(o.ValueHumanName) {
		return true
	}

	return false
}

// SetValueHumanName gets a reference to the given HumanName and assigns it to the ValueHumanName field.
func (o *Extension) SetValueHumanName(v HumanName) {
	o.ValueHumanName = &v
}

// GetValueIdentifier returns the ValueIdentifier field value if set, zero value otherwise.
func (o *Extension) GetValueIdentifier() Identifier {
	if o == nil || IsNil(o.ValueIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.ValueIdentifier
}

// GetValueIdentifierOk returns a tuple with the ValueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.ValueIdentifier) {
		return nil, false
	}
	return o.ValueIdentifier, true
}

// HasValueIdentifier returns a boolean if a field has been set.
func (o *Extension) HasValueIdentifier() bool {
	if o != nil && !IsNil(o.ValueIdentifier) {
		return true
	}

	return false
}

// SetValueIdentifier gets a reference to the given Identifier and assigns it to the ValueIdentifier field.
func (o *Extension) SetValueIdentifier(v Identifier) {
	o.ValueIdentifier = &v
}

// GetValueMoney returns the ValueMoney field value if set, zero value otherwise.
func (o *Extension) GetValueMoney() Money {
	if o == nil || IsNil(o.ValueMoney) {
		var ret Money
		return ret
	}
	return *o.ValueMoney
}

// GetValueMoneyOk returns a tuple with the ValueMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.ValueMoney) {
		return nil, false
	}
	return o.ValueMoney, true
}

// HasValueMoney returns a boolean if a field has been set.
func (o *Extension) HasValueMoney() bool {
	if o != nil && !IsNil(o.ValueMoney) {
		return true
	}

	return false
}

// SetValueMoney gets a reference to the given Money and assigns it to the ValueMoney field.
func (o *Extension) SetValueMoney(v Money) {
	o.ValueMoney = &v
}

// GetValuePeriod returns the ValuePeriod field value if set, zero value otherwise.
func (o *Extension) GetValuePeriod() Period {
	if o == nil || IsNil(o.ValuePeriod) {
		var ret Period
		return ret
	}
	return *o.ValuePeriod
}

// GetValuePeriodOk returns a tuple with the ValuePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValuePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ValuePeriod) {
		return nil, false
	}
	return o.ValuePeriod, true
}

// HasValuePeriod returns a boolean if a field has been set.
func (o *Extension) HasValuePeriod() bool {
	if o != nil && !IsNil(o.ValuePeriod) {
		return true
	}

	return false
}

// SetValuePeriod gets a reference to the given Period and assigns it to the ValuePeriod field.
func (o *Extension) SetValuePeriod(v Period) {
	o.ValuePeriod = &v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *Extension) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *Extension) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *Extension) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueRange returns the ValueRange field value if set, zero value otherwise.
func (o *Extension) GetValueRange() Range {
	if o == nil || IsNil(o.ValueRange) {
		var ret Range
		return ret
	}
	return *o.ValueRange
}

// GetValueRangeOk returns a tuple with the ValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.ValueRange) {
		return nil, false
	}
	return o.ValueRange, true
}

// HasValueRange returns a boolean if a field has been set.
func (o *Extension) HasValueRange() bool {
	if o != nil && !IsNil(o.ValueRange) {
		return true
	}

	return false
}

// SetValueRange gets a reference to the given Range and assigns it to the ValueRange field.
func (o *Extension) SetValueRange(v Range) {
	o.ValueRange = &v
}

// GetValueRatio returns the ValueRatio field value if set, zero value otherwise.
func (o *Extension) GetValueRatio() Ratio {
	if o == nil || IsNil(o.ValueRatio) {
		var ret Ratio
		return ret
	}
	return *o.ValueRatio
}

// GetValueRatioOk returns a tuple with the ValueRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.ValueRatio) {
		return nil, false
	}
	return o.ValueRatio, true
}

// HasValueRatio returns a boolean if a field has been set.
func (o *Extension) HasValueRatio() bool {
	if o != nil && !IsNil(o.ValueRatio) {
		return true
	}

	return false
}

// SetValueRatio gets a reference to the given Ratio and assigns it to the ValueRatio field.
func (o *Extension) SetValueRatio(v Ratio) {
	o.ValueRatio = &v
}

// GetValueReference returns the ValueReference field value if set, zero value otherwise.
func (o *Extension) GetValueReference() Reference {
	if o == nil || IsNil(o.ValueReference) {
		var ret Reference
		return ret
	}
	return *o.ValueReference
}

// GetValueReferenceOk returns a tuple with the ValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ValueReference) {
		return nil, false
	}
	return o.ValueReference, true
}

// HasValueReference returns a boolean if a field has been set.
func (o *Extension) HasValueReference() bool {
	if o != nil && !IsNil(o.ValueReference) {
		return true
	}

	return false
}

// SetValueReference gets a reference to the given Reference and assigns it to the ValueReference field.
func (o *Extension) SetValueReference(v Reference) {
	o.ValueReference = &v
}

// GetValueSampledData returns the ValueSampledData field value if set, zero value otherwise.
func (o *Extension) GetValueSampledData() SampledData {
	if o == nil || IsNil(o.ValueSampledData) {
		var ret SampledData
		return ret
	}
	return *o.ValueSampledData
}

// GetValueSampledDataOk returns a tuple with the ValueSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.ValueSampledData) {
		return nil, false
	}
	return o.ValueSampledData, true
}

// HasValueSampledData returns a boolean if a field has been set.
func (o *Extension) HasValueSampledData() bool {
	if o != nil && !IsNil(o.ValueSampledData) {
		return true
	}

	return false
}

// SetValueSampledData gets a reference to the given SampledData and assigns it to the ValueSampledData field.
func (o *Extension) SetValueSampledData(v SampledData) {
	o.ValueSampledData = &v
}

// GetValueSignature returns the ValueSignature field value if set, zero value otherwise.
func (o *Extension) GetValueSignature() Signature {
	if o == nil || IsNil(o.ValueSignature) {
		var ret Signature
		return ret
	}
	return *o.ValueSignature
}

// GetValueSignatureOk returns a tuple with the ValueSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.ValueSignature) {
		return nil, false
	}
	return o.ValueSignature, true
}

// HasValueSignature returns a boolean if a field has been set.
func (o *Extension) HasValueSignature() bool {
	if o != nil && !IsNil(o.ValueSignature) {
		return true
	}

	return false
}

// SetValueSignature gets a reference to the given Signature and assigns it to the ValueSignature field.
func (o *Extension) SetValueSignature(v Signature) {
	o.ValueSignature = &v
}

// GetValueTiming returns the ValueTiming field value if set, zero value otherwise.
func (o *Extension) GetValueTiming() Timing {
	if o == nil || IsNil(o.ValueTiming) {
		var ret Timing
		return ret
	}
	return *o.ValueTiming
}

// GetValueTimingOk returns a tuple with the ValueTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.ValueTiming) {
		return nil, false
	}
	return o.ValueTiming, true
}

// HasValueTiming returns a boolean if a field has been set.
func (o *Extension) HasValueTiming() bool {
	if o != nil && !IsNil(o.ValueTiming) {
		return true
	}

	return false
}

// SetValueTiming gets a reference to the given Timing and assigns it to the ValueTiming field.
func (o *Extension) SetValueTiming(v Timing) {
	o.ValueTiming = &v
}

// GetValueContactDetail returns the ValueContactDetail field value if set, zero value otherwise.
func (o *Extension) GetValueContactDetail() ContactDetail {
	if o == nil || IsNil(o.ValueContactDetail) {
		var ret ContactDetail
		return ret
	}
	return *o.ValueContactDetail
}

// GetValueContactDetailOk returns a tuple with the ValueContactDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueContactDetailOk() (*ContactDetail, bool) {
	if o == nil || IsNil(o.ValueContactDetail) {
		return nil, false
	}
	return o.ValueContactDetail, true
}

// HasValueContactDetail returns a boolean if a field has been set.
func (o *Extension) HasValueContactDetail() bool {
	if o != nil && !IsNil(o.ValueContactDetail) {
		return true
	}

	return false
}

// SetValueContactDetail gets a reference to the given ContactDetail and assigns it to the ValueContactDetail field.
func (o *Extension) SetValueContactDetail(v ContactDetail) {
	o.ValueContactDetail = &v
}

// GetValueContributor returns the ValueContributor field value if set, zero value otherwise.
func (o *Extension) GetValueContributor() Contributor {
	if o == nil || IsNil(o.ValueContributor) {
		var ret Contributor
		return ret
	}
	return *o.ValueContributor
}

// GetValueContributorOk returns a tuple with the ValueContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueContributorOk() (*Contributor, bool) {
	if o == nil || IsNil(o.ValueContributor) {
		return nil, false
	}
	return o.ValueContributor, true
}

// HasValueContributor returns a boolean if a field has been set.
func (o *Extension) HasValueContributor() bool {
	if o != nil && !IsNil(o.ValueContributor) {
		return true
	}

	return false
}

// SetValueContributor gets a reference to the given Contributor and assigns it to the ValueContributor field.
func (o *Extension) SetValueContributor(v Contributor) {
	o.ValueContributor = &v
}

// GetValueDataRequirement returns the ValueDataRequirement field value if set, zero value otherwise.
func (o *Extension) GetValueDataRequirement() DataRequirement {
	if o == nil || IsNil(o.ValueDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.ValueDataRequirement
}

// GetValueDataRequirementOk returns a tuple with the ValueDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.ValueDataRequirement) {
		return nil, false
	}
	return o.ValueDataRequirement, true
}

// HasValueDataRequirement returns a boolean if a field has been set.
func (o *Extension) HasValueDataRequirement() bool {
	if o != nil && !IsNil(o.ValueDataRequirement) {
		return true
	}

	return false
}

// SetValueDataRequirement gets a reference to the given DataRequirement and assigns it to the ValueDataRequirement field.
func (o *Extension) SetValueDataRequirement(v DataRequirement) {
	o.ValueDataRequirement = &v
}

// GetValueExpression returns the ValueExpression field value if set, zero value otherwise.
func (o *Extension) GetValueExpression() Expression {
	if o == nil || IsNil(o.ValueExpression) {
		var ret Expression
		return ret
	}
	return *o.ValueExpression
}

// GetValueExpressionOk returns a tuple with the ValueExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.ValueExpression) {
		return nil, false
	}
	return o.ValueExpression, true
}

// HasValueExpression returns a boolean if a field has been set.
func (o *Extension) HasValueExpression() bool {
	if o != nil && !IsNil(o.ValueExpression) {
		return true
	}

	return false
}

// SetValueExpression gets a reference to the given Expression and assigns it to the ValueExpression field.
func (o *Extension) SetValueExpression(v Expression) {
	o.ValueExpression = &v
}

// GetValueParameterDefinition returns the ValueParameterDefinition field value if set, zero value otherwise.
func (o *Extension) GetValueParameterDefinition() ParameterDefinition {
	if o == nil || IsNil(o.ValueParameterDefinition) {
		var ret ParameterDefinition
		return ret
	}
	return *o.ValueParameterDefinition
}

// GetValueParameterDefinitionOk returns a tuple with the ValueParameterDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueParameterDefinitionOk() (*ParameterDefinition, bool) {
	if o == nil || IsNil(o.ValueParameterDefinition) {
		return nil, false
	}
	return o.ValueParameterDefinition, true
}

// HasValueParameterDefinition returns a boolean if a field has been set.
func (o *Extension) HasValueParameterDefinition() bool {
	if o != nil && !IsNil(o.ValueParameterDefinition) {
		return true
	}

	return false
}

// SetValueParameterDefinition gets a reference to the given ParameterDefinition and assigns it to the ValueParameterDefinition field.
func (o *Extension) SetValueParameterDefinition(v ParameterDefinition) {
	o.ValueParameterDefinition = &v
}

// GetValueRelatedArtifact returns the ValueRelatedArtifact field value if set, zero value otherwise.
func (o *Extension) GetValueRelatedArtifact() RelatedArtifact {
	if o == nil || IsNil(o.ValueRelatedArtifact) {
		var ret RelatedArtifact
		return ret
	}
	return *o.ValueRelatedArtifact
}

// GetValueRelatedArtifactOk returns a tuple with the ValueRelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueRelatedArtifactOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.ValueRelatedArtifact) {
		return nil, false
	}
	return o.ValueRelatedArtifact, true
}

// HasValueRelatedArtifact returns a boolean if a field has been set.
func (o *Extension) HasValueRelatedArtifact() bool {
	if o != nil && !IsNil(o.ValueRelatedArtifact) {
		return true
	}

	return false
}

// SetValueRelatedArtifact gets a reference to the given RelatedArtifact and assigns it to the ValueRelatedArtifact field.
func (o *Extension) SetValueRelatedArtifact(v RelatedArtifact) {
	o.ValueRelatedArtifact = &v
}

// GetValueTriggerDefinition returns the ValueTriggerDefinition field value if set, zero value otherwise.
func (o *Extension) GetValueTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.ValueTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.ValueTriggerDefinition
}

// GetValueTriggerDefinitionOk returns a tuple with the ValueTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.ValueTriggerDefinition) {
		return nil, false
	}
	return o.ValueTriggerDefinition, true
}

// HasValueTriggerDefinition returns a boolean if a field has been set.
func (o *Extension) HasValueTriggerDefinition() bool {
	if o != nil && !IsNil(o.ValueTriggerDefinition) {
		return true
	}

	return false
}

// SetValueTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the ValueTriggerDefinition field.
func (o *Extension) SetValueTriggerDefinition(v TriggerDefinition) {
	o.ValueTriggerDefinition = &v
}

// GetValueUsageContext returns the ValueUsageContext field value if set, zero value otherwise.
func (o *Extension) GetValueUsageContext() UsageContext {
	if o == nil || IsNil(o.ValueUsageContext) {
		var ret UsageContext
		return ret
	}
	return *o.ValueUsageContext
}

// GetValueUsageContextOk returns a tuple with the ValueUsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueUsageContextOk() (*UsageContext, bool) {
	if o == nil || IsNil(o.ValueUsageContext) {
		return nil, false
	}
	return o.ValueUsageContext, true
}

// HasValueUsageContext returns a boolean if a field has been set.
func (o *Extension) HasValueUsageContext() bool {
	if o != nil && !IsNil(o.ValueUsageContext) {
		return true
	}

	return false
}

// SetValueUsageContext gets a reference to the given UsageContext and assigns it to the ValueUsageContext field.
func (o *Extension) SetValueUsageContext(v UsageContext) {
	o.ValueUsageContext = &v
}

// GetValueDosage returns the ValueDosage field value if set, zero value otherwise.
func (o *Extension) GetValueDosage() Dosage {
	if o == nil || IsNil(o.ValueDosage) {
		var ret Dosage
		return ret
	}
	return *o.ValueDosage
}

// GetValueDosageOk returns a tuple with the ValueDosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueDosageOk() (*Dosage, bool) {
	if o == nil || IsNil(o.ValueDosage) {
		return nil, false
	}
	return o.ValueDosage, true
}

// HasValueDosage returns a boolean if a field has been set.
func (o *Extension) HasValueDosage() bool {
	if o != nil && !IsNil(o.ValueDosage) {
		return true
	}

	return false
}

// SetValueDosage gets a reference to the given Dosage and assigns it to the ValueDosage field.
func (o *Extension) SetValueDosage(v Dosage) {
	o.ValueDosage = &v
}

// GetValueMeta returns the ValueMeta field value if set, zero value otherwise.
func (o *Extension) GetValueMeta() Meta {
	if o == nil || IsNil(o.ValueMeta) {
		var ret Meta
		return ret
	}
	return *o.ValueMeta
}

// GetValueMetaOk returns a tuple with the ValueMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extension) GetValueMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.ValueMeta) {
		return nil, false
	}
	return o.ValueMeta, true
}

// HasValueMeta returns a boolean if a field has been set.
func (o *Extension) HasValueMeta() bool {
	if o != nil && !IsNil(o.ValueMeta) {
		return true
	}

	return false
}

// SetValueMeta gets a reference to the given Meta and assigns it to the ValueMeta field.
func (o *Extension) SetValueMeta(v Meta) {
	o.ValueMeta = &v
}

func (o Extension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ValueBase64Binary) {
		toSerialize["valueBase64Binary"] = o.ValueBase64Binary
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueCanonical) {
		toSerialize["valueCanonical"] = o.ValueCanonical
	}
	if !IsNil(o.ValueCode) {
		toSerialize["valueCode"] = o.ValueCode
	}
	if !IsNil(o.ValueDate) {
		toSerialize["valueDate"] = o.ValueDate
	}
	if !IsNil(o.ValueDateTime) {
		toSerialize["valueDateTime"] = o.ValueDateTime
	}
	if !IsNil(o.ValueDecimal) {
		toSerialize["valueDecimal"] = o.ValueDecimal
	}
	if !IsNil(o.ValueId) {
		toSerialize["valueId"] = o.ValueId
	}
	if !IsNil(o.ValueInstant) {
		toSerialize["valueInstant"] = o.ValueInstant
	}
	if !IsNil(o.ValueInteger) {
		toSerialize["valueInteger"] = o.ValueInteger
	}
	if !IsNil(o.ValueMarkdown) {
		toSerialize["valueMarkdown"] = o.ValueMarkdown
	}
	if !IsNil(o.ValueOid) {
		toSerialize["valueOid"] = o.ValueOid
	}
	if !IsNil(o.ValuePositiveInt) {
		toSerialize["valuePositiveInt"] = o.ValuePositiveInt
	}
	if !IsNil(o.ValueString) {
		toSerialize["valueString"] = o.ValueString
	}
	if !IsNil(o.ValueTime) {
		toSerialize["valueTime"] = o.ValueTime
	}
	if !IsNil(o.ValueUnsignedInt) {
		toSerialize["valueUnsignedInt"] = o.ValueUnsignedInt
	}
	if !IsNil(o.ValueUri) {
		toSerialize["valueUri"] = o.ValueUri
	}
	if !IsNil(o.ValueUrl) {
		toSerialize["valueUrl"] = o.ValueUrl
	}
	if !IsNil(o.ValueUuid) {
		toSerialize["valueUuid"] = o.ValueUuid
	}
	if !IsNil(o.ValueAddress) {
		toSerialize["valueAddress"] = o.ValueAddress
	}
	if !IsNil(o.ValueAge) {
		toSerialize["valueAge"] = o.ValueAge
	}
	if !IsNil(o.ValueAnnotation) {
		toSerialize["valueAnnotation"] = o.ValueAnnotation
	}
	if !IsNil(o.ValueAttachment) {
		toSerialize["valueAttachment"] = o.ValueAttachment
	}
	if !IsNil(o.ValueCodeableConcept) {
		toSerialize["valueCodeableConcept"] = o.ValueCodeableConcept
	}
	if !IsNil(o.ValueCoding) {
		toSerialize["valueCoding"] = o.ValueCoding
	}
	if !IsNil(o.ValueContactPoint) {
		toSerialize["valueContactPoint"] = o.ValueContactPoint
	}
	if !IsNil(o.ValueCount) {
		toSerialize["valueCount"] = o.ValueCount
	}
	if !IsNil(o.ValueDistance) {
		toSerialize["valueDistance"] = o.ValueDistance
	}
	if !IsNil(o.ValueDuration) {
		toSerialize["valueDuration"] = o.ValueDuration
	}
	if !IsNil(o.ValueHumanName) {
		toSerialize["valueHumanName"] = o.ValueHumanName
	}
	if !IsNil(o.ValueIdentifier) {
		toSerialize["valueIdentifier"] = o.ValueIdentifier
	}
	if !IsNil(o.ValueMoney) {
		toSerialize["valueMoney"] = o.ValueMoney
	}
	if !IsNil(o.ValuePeriod) {
		toSerialize["valuePeriod"] = o.ValuePeriod
	}
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueRange) {
		toSerialize["valueRange"] = o.ValueRange
	}
	if !IsNil(o.ValueRatio) {
		toSerialize["valueRatio"] = o.ValueRatio
	}
	if !IsNil(o.ValueReference) {
		toSerialize["valueReference"] = o.ValueReference
	}
	if !IsNil(o.ValueSampledData) {
		toSerialize["valueSampledData"] = o.ValueSampledData
	}
	if !IsNil(o.ValueSignature) {
		toSerialize["valueSignature"] = o.ValueSignature
	}
	if !IsNil(o.ValueTiming) {
		toSerialize["valueTiming"] = o.ValueTiming
	}
	if !IsNil(o.ValueContactDetail) {
		toSerialize["valueContactDetail"] = o.ValueContactDetail
	}
	if !IsNil(o.ValueContributor) {
		toSerialize["valueContributor"] = o.ValueContributor
	}
	if !IsNil(o.ValueDataRequirement) {
		toSerialize["valueDataRequirement"] = o.ValueDataRequirement
	}
	if !IsNil(o.ValueExpression) {
		toSerialize["valueExpression"] = o.ValueExpression
	}
	if !IsNil(o.ValueParameterDefinition) {
		toSerialize["valueParameterDefinition"] = o.ValueParameterDefinition
	}
	if !IsNil(o.ValueRelatedArtifact) {
		toSerialize["valueRelatedArtifact"] = o.ValueRelatedArtifact
	}
	if !IsNil(o.ValueTriggerDefinition) {
		toSerialize["valueTriggerDefinition"] = o.ValueTriggerDefinition
	}
	if !IsNil(o.ValueUsageContext) {
		toSerialize["valueUsageContext"] = o.ValueUsageContext
	}
	if !IsNil(o.ValueDosage) {
		toSerialize["valueDosage"] = o.ValueDosage
	}
	if !IsNil(o.ValueMeta) {
		toSerialize["valueMeta"] = o.ValueMeta
	}
	return toSerialize, nil
}

type NullableExtension struct {
	value *Extension
	isSet bool
}

func (v NullableExtension) Get() *Extension {
	return v.value
}

func (v *NullableExtension) Set(val *Extension) {
	v.value = val
	v.isSet = true
}

func (v NullableExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtension(val *Extension) *NullableExtension {
	return &NullableExtension{value: val, isSet: true}
}

func (v NullableExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


