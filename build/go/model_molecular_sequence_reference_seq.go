/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MolecularSequenceReferenceSeq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MolecularSequenceReferenceSeq{}

// MolecularSequenceReferenceSeq Raw data describing a biological sequence.
type MolecularSequenceReferenceSeq struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
	Chromosome *CodeableConcept `json:"chromosome,omitempty"`
	// A sequence of Unicode characters
	GenomeBuild *string `json:"genomeBuild,omitempty"`
	// A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the \"sense\" strand, and the opposite complementary strand is the \"antisense\" strand.
	Orientation *string `json:"orientation,omitempty"`
	// Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
	ReferenceSeqId *CodeableConcept `json:"referenceSeqId,omitempty"`
	// A pointer to another MolecularSequence entity as reference sequence.
	ReferenceSeqPointer *Reference `json:"referenceSeqPointer,omitempty"`
	// A sequence of Unicode characters
	ReferenceSeqString *string `json:"referenceSeqString,omitempty"`
	// An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
	Strand *string `json:"strand,omitempty"`
	// A whole number
	WindowStart *float32 `json:"windowStart,omitempty"`
	// A whole number
	WindowEnd *float32 `json:"windowEnd,omitempty"`
}

// NewMolecularSequenceReferenceSeq instantiates a new MolecularSequenceReferenceSeq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMolecularSequenceReferenceSeq() *MolecularSequenceReferenceSeq {
	this := MolecularSequenceReferenceSeq{}
	return &this
}

// NewMolecularSequenceReferenceSeqWithDefaults instantiates a new MolecularSequenceReferenceSeq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMolecularSequenceReferenceSeqWithDefaults() *MolecularSequenceReferenceSeq {
	this := MolecularSequenceReferenceSeq{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MolecularSequenceReferenceSeq) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MolecularSequenceReferenceSeq) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MolecularSequenceReferenceSeq) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetChromosome returns the Chromosome field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetChromosome() CodeableConcept {
	if o == nil || IsNil(o.Chromosome) {
		var ret CodeableConcept
		return ret
	}
	return *o.Chromosome
}

// GetChromosomeOk returns a tuple with the Chromosome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetChromosomeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Chromosome) {
		return nil, false
	}
	return o.Chromosome, true
}

// HasChromosome returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasChromosome() bool {
	if o != nil && !IsNil(o.Chromosome) {
		return true
	}

	return false
}

// SetChromosome gets a reference to the given CodeableConcept and assigns it to the Chromosome field.
func (o *MolecularSequenceReferenceSeq) SetChromosome(v CodeableConcept) {
	o.Chromosome = &v
}

// GetGenomeBuild returns the GenomeBuild field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetGenomeBuild() string {
	if o == nil || IsNil(o.GenomeBuild) {
		var ret string
		return ret
	}
	return *o.GenomeBuild
}

// GetGenomeBuildOk returns a tuple with the GenomeBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetGenomeBuildOk() (*string, bool) {
	if o == nil || IsNil(o.GenomeBuild) {
		return nil, false
	}
	return o.GenomeBuild, true
}

// HasGenomeBuild returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasGenomeBuild() bool {
	if o != nil && !IsNil(o.GenomeBuild) {
		return true
	}

	return false
}

// SetGenomeBuild gets a reference to the given string and assigns it to the GenomeBuild field.
func (o *MolecularSequenceReferenceSeq) SetGenomeBuild(v string) {
	o.GenomeBuild = &v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetOrientation() string {
	if o == nil || IsNil(o.Orientation) {
		var ret string
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetOrientationOk() (*string, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasOrientation() bool {
	if o != nil && !IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given string and assigns it to the Orientation field.
func (o *MolecularSequenceReferenceSeq) SetOrientation(v string) {
	o.Orientation = &v
}

// GetReferenceSeqId returns the ReferenceSeqId field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqId() CodeableConcept {
	if o == nil || IsNil(o.ReferenceSeqId) {
		var ret CodeableConcept
		return ret
	}
	return *o.ReferenceSeqId
}

// GetReferenceSeqIdOk returns a tuple with the ReferenceSeqId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqIdOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ReferenceSeqId) {
		return nil, false
	}
	return o.ReferenceSeqId, true
}

// HasReferenceSeqId returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasReferenceSeqId() bool {
	if o != nil && !IsNil(o.ReferenceSeqId) {
		return true
	}

	return false
}

// SetReferenceSeqId gets a reference to the given CodeableConcept and assigns it to the ReferenceSeqId field.
func (o *MolecularSequenceReferenceSeq) SetReferenceSeqId(v CodeableConcept) {
	o.ReferenceSeqId = &v
}

// GetReferenceSeqPointer returns the ReferenceSeqPointer field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqPointer() Reference {
	if o == nil || IsNil(o.ReferenceSeqPointer) {
		var ret Reference
		return ret
	}
	return *o.ReferenceSeqPointer
}

// GetReferenceSeqPointerOk returns a tuple with the ReferenceSeqPointer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqPointerOk() (*Reference, bool) {
	if o == nil || IsNil(o.ReferenceSeqPointer) {
		return nil, false
	}
	return o.ReferenceSeqPointer, true
}

// HasReferenceSeqPointer returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasReferenceSeqPointer() bool {
	if o != nil && !IsNil(o.ReferenceSeqPointer) {
		return true
	}

	return false
}

// SetReferenceSeqPointer gets a reference to the given Reference and assigns it to the ReferenceSeqPointer field.
func (o *MolecularSequenceReferenceSeq) SetReferenceSeqPointer(v Reference) {
	o.ReferenceSeqPointer = &v
}

// GetReferenceSeqString returns the ReferenceSeqString field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqString() string {
	if o == nil || IsNil(o.ReferenceSeqString) {
		var ret string
		return ret
	}
	return *o.ReferenceSeqString
}

// GetReferenceSeqStringOk returns a tuple with the ReferenceSeqString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetReferenceSeqStringOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceSeqString) {
		return nil, false
	}
	return o.ReferenceSeqString, true
}

// HasReferenceSeqString returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasReferenceSeqString() bool {
	if o != nil && !IsNil(o.ReferenceSeqString) {
		return true
	}

	return false
}

// SetReferenceSeqString gets a reference to the given string and assigns it to the ReferenceSeqString field.
func (o *MolecularSequenceReferenceSeq) SetReferenceSeqString(v string) {
	o.ReferenceSeqString = &v
}

// GetStrand returns the Strand field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetStrand() string {
	if o == nil || IsNil(o.Strand) {
		var ret string
		return ret
	}
	return *o.Strand
}

// GetStrandOk returns a tuple with the Strand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetStrandOk() (*string, bool) {
	if o == nil || IsNil(o.Strand) {
		return nil, false
	}
	return o.Strand, true
}

// HasStrand returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasStrand() bool {
	if o != nil && !IsNil(o.Strand) {
		return true
	}

	return false
}

// SetStrand gets a reference to the given string and assigns it to the Strand field.
func (o *MolecularSequenceReferenceSeq) SetStrand(v string) {
	o.Strand = &v
}

// GetWindowStart returns the WindowStart field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetWindowStart() float32 {
	if o == nil || IsNil(o.WindowStart) {
		var ret float32
		return ret
	}
	return *o.WindowStart
}

// GetWindowStartOk returns a tuple with the WindowStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetWindowStartOk() (*float32, bool) {
	if o == nil || IsNil(o.WindowStart) {
		return nil, false
	}
	return o.WindowStart, true
}

// HasWindowStart returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasWindowStart() bool {
	if o != nil && !IsNil(o.WindowStart) {
		return true
	}

	return false
}

// SetWindowStart gets a reference to the given float32 and assigns it to the WindowStart field.
func (o *MolecularSequenceReferenceSeq) SetWindowStart(v float32) {
	o.WindowStart = &v
}

// GetWindowEnd returns the WindowEnd field value if set, zero value otherwise.
func (o *MolecularSequenceReferenceSeq) GetWindowEnd() float32 {
	if o == nil || IsNil(o.WindowEnd) {
		var ret float32
		return ret
	}
	return *o.WindowEnd
}

// GetWindowEndOk returns a tuple with the WindowEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceReferenceSeq) GetWindowEndOk() (*float32, bool) {
	if o == nil || IsNil(o.WindowEnd) {
		return nil, false
	}
	return o.WindowEnd, true
}

// HasWindowEnd returns a boolean if a field has been set.
func (o *MolecularSequenceReferenceSeq) HasWindowEnd() bool {
	if o != nil && !IsNil(o.WindowEnd) {
		return true
	}

	return false
}

// SetWindowEnd gets a reference to the given float32 and assigns it to the WindowEnd field.
func (o *MolecularSequenceReferenceSeq) SetWindowEnd(v float32) {
	o.WindowEnd = &v
}

func (o MolecularSequenceReferenceSeq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MolecularSequenceReferenceSeq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Chromosome) {
		toSerialize["chromosome"] = o.Chromosome
	}
	if !IsNil(o.GenomeBuild) {
		toSerialize["genomeBuild"] = o.GenomeBuild
	}
	if !IsNil(o.Orientation) {
		toSerialize["orientation"] = o.Orientation
	}
	if !IsNil(o.ReferenceSeqId) {
		toSerialize["referenceSeqId"] = o.ReferenceSeqId
	}
	if !IsNil(o.ReferenceSeqPointer) {
		toSerialize["referenceSeqPointer"] = o.ReferenceSeqPointer
	}
	if !IsNil(o.ReferenceSeqString) {
		toSerialize["referenceSeqString"] = o.ReferenceSeqString
	}
	if !IsNil(o.Strand) {
		toSerialize["strand"] = o.Strand
	}
	if !IsNil(o.WindowStart) {
		toSerialize["windowStart"] = o.WindowStart
	}
	if !IsNil(o.WindowEnd) {
		toSerialize["windowEnd"] = o.WindowEnd
	}
	return toSerialize, nil
}

type NullableMolecularSequenceReferenceSeq struct {
	value *MolecularSequenceReferenceSeq
	isSet bool
}

func (v NullableMolecularSequenceReferenceSeq) Get() *MolecularSequenceReferenceSeq {
	return v.value
}

func (v *NullableMolecularSequenceReferenceSeq) Set(val *MolecularSequenceReferenceSeq) {
	v.value = val
	v.isSet = true
}

func (v NullableMolecularSequenceReferenceSeq) IsSet() bool {
	return v.isSet
}

func (v *NullableMolecularSequenceReferenceSeq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMolecularSequenceReferenceSeq(val *MolecularSequenceReferenceSeq) *NullableMolecularSequenceReferenceSeq {
	return &NullableMolecularSequenceReferenceSeq{value: val, isSet: true}
}

func (v NullableMolecularSequenceReferenceSeq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMolecularSequenceReferenceSeq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


