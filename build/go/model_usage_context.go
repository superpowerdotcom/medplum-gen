/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsageContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageContext{}

// UsageContext Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
type UsageContext struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// A code that identifies the type of context being specified by this usage context.
	Code Coding `json:"code"`
	// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
	ValueRange *Range `json:"valueRange,omitempty"`
	// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
	ValueReference *Reference `json:"valueReference,omitempty"`
}

type _UsageContext UsageContext

// NewUsageContext instantiates a new UsageContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageContext(code Coding) *UsageContext {
	this := UsageContext{}
	this.Code = code
	return &this
}

// NewUsageContextWithDefaults instantiates a new UsageContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageContextWithDefaults() *UsageContext {
	this := UsageContext{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UsageContext) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UsageContext) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UsageContext) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *UsageContext) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *UsageContext) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *UsageContext) SetExtension(v []Extension) {
	o.Extension = v
}

// GetCode returns the Code field value
func (o *UsageContext) GetCode() Coding {
	if o == nil {
		var ret Coding
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *UsageContext) GetCodeOk() (*Coding, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *UsageContext) SetCode(v Coding) {
	o.Code = v
}

// GetValueCodeableConcept returns the ValueCodeableConcept field value if set, zero value otherwise.
func (o *UsageContext) GetValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValueCodeableConcept
}

// GetValueCodeableConceptOk returns a tuple with the ValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		return nil, false
	}
	return o.ValueCodeableConcept, true
}

// HasValueCodeableConcept returns a boolean if a field has been set.
func (o *UsageContext) HasValueCodeableConcept() bool {
	if o != nil && !IsNil(o.ValueCodeableConcept) {
		return true
	}

	return false
}

// SetValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ValueCodeableConcept field.
func (o *UsageContext) SetValueCodeableConcept(v CodeableConcept) {
	o.ValueCodeableConcept = &v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *UsageContext) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *UsageContext) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *UsageContext) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueRange returns the ValueRange field value if set, zero value otherwise.
func (o *UsageContext) GetValueRange() Range {
	if o == nil || IsNil(o.ValueRange) {
		var ret Range
		return ret
	}
	return *o.ValueRange
}

// GetValueRangeOk returns a tuple with the ValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.ValueRange) {
		return nil, false
	}
	return o.ValueRange, true
}

// HasValueRange returns a boolean if a field has been set.
func (o *UsageContext) HasValueRange() bool {
	if o != nil && !IsNil(o.ValueRange) {
		return true
	}

	return false
}

// SetValueRange gets a reference to the given Range and assigns it to the ValueRange field.
func (o *UsageContext) SetValueRange(v Range) {
	o.ValueRange = &v
}

// GetValueReference returns the ValueReference field value if set, zero value otherwise.
func (o *UsageContext) GetValueReference() Reference {
	if o == nil || IsNil(o.ValueReference) {
		var ret Reference
		return ret
	}
	return *o.ValueReference
}

// GetValueReferenceOk returns a tuple with the ValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageContext) GetValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ValueReference) {
		return nil, false
	}
	return o.ValueReference, true
}

// HasValueReference returns a boolean if a field has been set.
func (o *UsageContext) HasValueReference() bool {
	if o != nil && !IsNil(o.ValueReference) {
		return true
	}

	return false
}

// SetValueReference gets a reference to the given Reference and assigns it to the ValueReference field.
func (o *UsageContext) SetValueReference(v Reference) {
	o.ValueReference = &v
}

func (o UsageContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.ValueCodeableConcept) {
		toSerialize["valueCodeableConcept"] = o.ValueCodeableConcept
	}
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueRange) {
		toSerialize["valueRange"] = o.ValueRange
	}
	if !IsNil(o.ValueReference) {
		toSerialize["valueReference"] = o.ValueReference
	}
	return toSerialize, nil
}

func (o *UsageContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsageContext := _UsageContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsageContext)

	if err != nil {
		return err
	}

	*o = UsageContext(varUsageContext)

	return err
}

type NullableUsageContext struct {
	value *UsageContext
	isSet bool
}

func (v NullableUsageContext) Get() *UsageContext {
	return v.value
}

func (v *NullableUsageContext) Set(val *UsageContext) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageContext) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageContext(val *UsageContext) *NullableUsageContext {
	return &NullableUsageContext{value: val, isSet: true}
}

func (v NullableUsageContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


