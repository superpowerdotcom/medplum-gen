/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimResponse{}

// ClaimResponse This resource provides the adjudication details from the processing of a Claim resource.
type ClaimResponse struct {
	// This is a ClaimResponse resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this claim response.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	Type CodeableConcept `json:"type"`
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Use *string `json:"use,omitempty"`
	// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
	Patient Reference `json:"patient"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Created *string `json:"created,omitempty"`
	// The party responsible for authorization, adjudication and reimbursement.
	Insurer Reference `json:"insurer"`
	// The provider which is responsible for the claim, predetermination or preauthorization.
	Requestor *Reference `json:"requestor,omitempty"`
	// Original request resource reference.
	Request *Reference `json:"request,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Outcome *string `json:"outcome,omitempty"`
	// A sequence of Unicode characters
	Disposition *string `json:"disposition,omitempty"`
	// A sequence of Unicode characters
	PreAuthRef *string `json:"preAuthRef,omitempty"`
	// The time frame during which this authorization is effective.
	PreAuthPeriod *Period `json:"preAuthPeriod,omitempty"`
	// Type of Party to be reimbursed: subscriber, provider, other.
	PayeeType *CodeableConcept `json:"payeeType,omitempty"`
	// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
	Item []ClaimResponseItem `json:"item,omitempty"`
	// The first-tier service adjudications for payor added product or service lines.
	AddItem []ClaimResponseAddItem `json:"addItem,omitempty"`
	// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// Categorized monetary totals for the adjudication.
	Total []ClaimResponseTotal `json:"total,omitempty"`
	// Payment details for the adjudication of the claim.
	Payment *ClaimResponsePayment `json:"payment,omitempty"`
	// A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
	FundsReserve *CodeableConcept `json:"fundsReserve,omitempty"`
	// A code for the form to be used for printing the content.
	FormCode *CodeableConcept `json:"formCode,omitempty"`
	// The actual form, by reference or inclusion, for printing the content or an EOB.
	Form *Attachment `json:"form,omitempty"`
	// A note that describes or explains adjudication results in a human readable form.
	ProcessNote []ClaimResponseProcessNote `json:"processNote,omitempty"`
	// Request for additional supporting or authorizing information.
	CommunicationRequest []Reference `json:"communicationRequest,omitempty"`
	// Financial instruments for reimbursement for the health care products and services specified on the claim.
	Insurance []ClaimResponseInsurance `json:"insurance,omitempty"`
	// Errors encountered during the processing of the adjudication.
	Error []ClaimResponseError `json:"error,omitempty"`
}

type _ClaimResponse ClaimResponse

// NewClaimResponse instantiates a new ClaimResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimResponse(resourceType string, type_ CodeableConcept, patient Reference, insurer Reference) *ClaimResponse {
	this := ClaimResponse{}
	this.ResourceType = resourceType
	this.Type = type_
	this.Patient = patient
	this.Insurer = insurer
	return &this
}

// NewClaimResponseWithDefaults instantiates a new ClaimResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimResponseWithDefaults() *ClaimResponse {
	this := ClaimResponse{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ClaimResponse) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ClaimResponse) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClaimResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClaimResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClaimResponse) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ClaimResponse) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ClaimResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ClaimResponse) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ClaimResponse) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ClaimResponse) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ClaimResponse) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ClaimResponse) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ClaimResponse) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ClaimResponse) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ClaimResponse) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ClaimResponse) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ClaimResponse) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ClaimResponse) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ClaimResponse) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ClaimResponse) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ClaimResponse) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ClaimResponse) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ClaimResponse) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ClaimResponse) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ClaimResponse) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ClaimResponse) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ClaimResponse) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ClaimResponse) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ClaimResponse) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ClaimResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ClaimResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ClaimResponse) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *ClaimResponse) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClaimResponse) SetType(v CodeableConcept) {
	o.Type = v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ClaimResponse) GetSubType() CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetSubTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ClaimResponse) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given CodeableConcept and assigns it to the SubType field.
func (o *ClaimResponse) SetSubType(v CodeableConcept) {
	o.SubType = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *ClaimResponse) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *ClaimResponse) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *ClaimResponse) SetUse(v string) {
	o.Use = &v
}

// GetPatient returns the Patient field value
func (o *ClaimResponse) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *ClaimResponse) SetPatient(v Reference) {
	o.Patient = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ClaimResponse) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ClaimResponse) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ClaimResponse) SetCreated(v string) {
	o.Created = &v
}

// GetInsurer returns the Insurer field value
func (o *ClaimResponse) GetInsurer() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Insurer
}

// GetInsurerOk returns a tuple with the Insurer field value
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetInsurerOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Insurer, true
}

// SetInsurer sets field value
func (o *ClaimResponse) SetInsurer(v Reference) {
	o.Insurer = v
}

// GetRequestor returns the Requestor field value if set, zero value otherwise.
func (o *ClaimResponse) GetRequestor() Reference {
	if o == nil || IsNil(o.Requestor) {
		var ret Reference
		return ret
	}
	return *o.Requestor
}

// GetRequestorOk returns a tuple with the Requestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetRequestorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Requestor) {
		return nil, false
	}
	return o.Requestor, true
}

// HasRequestor returns a boolean if a field has been set.
func (o *ClaimResponse) HasRequestor() bool {
	if o != nil && !IsNil(o.Requestor) {
		return true
	}

	return false
}

// SetRequestor gets a reference to the given Reference and assigns it to the Requestor field.
func (o *ClaimResponse) SetRequestor(v Reference) {
	o.Requestor = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ClaimResponse) GetRequest() Reference {
	if o == nil || IsNil(o.Request) {
		var ret Reference
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetRequestOk() (*Reference, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ClaimResponse) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Reference and assigns it to the Request field.
func (o *ClaimResponse) SetRequest(v Reference) {
	o.Request = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *ClaimResponse) GetOutcome() string {
	if o == nil || IsNil(o.Outcome) {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetOutcomeOk() (*string, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *ClaimResponse) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *ClaimResponse) SetOutcome(v string) {
	o.Outcome = &v
}

// GetDisposition returns the Disposition field value if set, zero value otherwise.
func (o *ClaimResponse) GetDisposition() string {
	if o == nil || IsNil(o.Disposition) {
		var ret string
		return ret
	}
	return *o.Disposition
}

// GetDispositionOk returns a tuple with the Disposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetDispositionOk() (*string, bool) {
	if o == nil || IsNil(o.Disposition) {
		return nil, false
	}
	return o.Disposition, true
}

// HasDisposition returns a boolean if a field has been set.
func (o *ClaimResponse) HasDisposition() bool {
	if o != nil && !IsNil(o.Disposition) {
		return true
	}

	return false
}

// SetDisposition gets a reference to the given string and assigns it to the Disposition field.
func (o *ClaimResponse) SetDisposition(v string) {
	o.Disposition = &v
}

// GetPreAuthRef returns the PreAuthRef field value if set, zero value otherwise.
func (o *ClaimResponse) GetPreAuthRef() string {
	if o == nil || IsNil(o.PreAuthRef) {
		var ret string
		return ret
	}
	return *o.PreAuthRef
}

// GetPreAuthRefOk returns a tuple with the PreAuthRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetPreAuthRefOk() (*string, bool) {
	if o == nil || IsNil(o.PreAuthRef) {
		return nil, false
	}
	return o.PreAuthRef, true
}

// HasPreAuthRef returns a boolean if a field has been set.
func (o *ClaimResponse) HasPreAuthRef() bool {
	if o != nil && !IsNil(o.PreAuthRef) {
		return true
	}

	return false
}

// SetPreAuthRef gets a reference to the given string and assigns it to the PreAuthRef field.
func (o *ClaimResponse) SetPreAuthRef(v string) {
	o.PreAuthRef = &v
}

// GetPreAuthPeriod returns the PreAuthPeriod field value if set, zero value otherwise.
func (o *ClaimResponse) GetPreAuthPeriod() Period {
	if o == nil || IsNil(o.PreAuthPeriod) {
		var ret Period
		return ret
	}
	return *o.PreAuthPeriod
}

// GetPreAuthPeriodOk returns a tuple with the PreAuthPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetPreAuthPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.PreAuthPeriod) {
		return nil, false
	}
	return o.PreAuthPeriod, true
}

// HasPreAuthPeriod returns a boolean if a field has been set.
func (o *ClaimResponse) HasPreAuthPeriod() bool {
	if o != nil && !IsNil(o.PreAuthPeriod) {
		return true
	}

	return false
}

// SetPreAuthPeriod gets a reference to the given Period and assigns it to the PreAuthPeriod field.
func (o *ClaimResponse) SetPreAuthPeriod(v Period) {
	o.PreAuthPeriod = &v
}

// GetPayeeType returns the PayeeType field value if set, zero value otherwise.
func (o *ClaimResponse) GetPayeeType() CodeableConcept {
	if o == nil || IsNil(o.PayeeType) {
		var ret CodeableConcept
		return ret
	}
	return *o.PayeeType
}

// GetPayeeTypeOk returns a tuple with the PayeeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetPayeeTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PayeeType) {
		return nil, false
	}
	return o.PayeeType, true
}

// HasPayeeType returns a boolean if a field has been set.
func (o *ClaimResponse) HasPayeeType() bool {
	if o != nil && !IsNil(o.PayeeType) {
		return true
	}

	return false
}

// SetPayeeType gets a reference to the given CodeableConcept and assigns it to the PayeeType field.
func (o *ClaimResponse) SetPayeeType(v CodeableConcept) {
	o.PayeeType = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ClaimResponse) GetItem() []ClaimResponseItem {
	if o == nil || IsNil(o.Item) {
		var ret []ClaimResponseItem
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetItemOk() ([]ClaimResponseItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ClaimResponse) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []ClaimResponseItem and assigns it to the Item field.
func (o *ClaimResponse) SetItem(v []ClaimResponseItem) {
	o.Item = v
}

// GetAddItem returns the AddItem field value if set, zero value otherwise.
func (o *ClaimResponse) GetAddItem() []ClaimResponseAddItem {
	if o == nil || IsNil(o.AddItem) {
		var ret []ClaimResponseAddItem
		return ret
	}
	return o.AddItem
}

// GetAddItemOk returns a tuple with the AddItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetAddItemOk() ([]ClaimResponseAddItem, bool) {
	if o == nil || IsNil(o.AddItem) {
		return nil, false
	}
	return o.AddItem, true
}

// HasAddItem returns a boolean if a field has been set.
func (o *ClaimResponse) HasAddItem() bool {
	if o != nil && !IsNil(o.AddItem) {
		return true
	}

	return false
}

// SetAddItem gets a reference to the given []ClaimResponseAddItem and assigns it to the AddItem field.
func (o *ClaimResponse) SetAddItem(v []ClaimResponseAddItem) {
	o.AddItem = v
}

// GetAdjudication returns the Adjudication field value if set, zero value otherwise.
func (o *ClaimResponse) GetAdjudication() []ClaimResponseAdjudication {
	if o == nil || IsNil(o.Adjudication) {
		var ret []ClaimResponseAdjudication
		return ret
	}
	return o.Adjudication
}

// GetAdjudicationOk returns a tuple with the Adjudication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetAdjudicationOk() ([]ClaimResponseAdjudication, bool) {
	if o == nil || IsNil(o.Adjudication) {
		return nil, false
	}
	return o.Adjudication, true
}

// HasAdjudication returns a boolean if a field has been set.
func (o *ClaimResponse) HasAdjudication() bool {
	if o != nil && !IsNil(o.Adjudication) {
		return true
	}

	return false
}

// SetAdjudication gets a reference to the given []ClaimResponseAdjudication and assigns it to the Adjudication field.
func (o *ClaimResponse) SetAdjudication(v []ClaimResponseAdjudication) {
	o.Adjudication = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ClaimResponse) GetTotal() []ClaimResponseTotal {
	if o == nil || IsNil(o.Total) {
		var ret []ClaimResponseTotal
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetTotalOk() ([]ClaimResponseTotal, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ClaimResponse) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given []ClaimResponseTotal and assigns it to the Total field.
func (o *ClaimResponse) SetTotal(v []ClaimResponseTotal) {
	o.Total = v
}

// GetPayment returns the Payment field value if set, zero value otherwise.
func (o *ClaimResponse) GetPayment() ClaimResponsePayment {
	if o == nil || IsNil(o.Payment) {
		var ret ClaimResponsePayment
		return ret
	}
	return *o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetPaymentOk() (*ClaimResponsePayment, bool) {
	if o == nil || IsNil(o.Payment) {
		return nil, false
	}
	return o.Payment, true
}

// HasPayment returns a boolean if a field has been set.
func (o *ClaimResponse) HasPayment() bool {
	if o != nil && !IsNil(o.Payment) {
		return true
	}

	return false
}

// SetPayment gets a reference to the given ClaimResponsePayment and assigns it to the Payment field.
func (o *ClaimResponse) SetPayment(v ClaimResponsePayment) {
	o.Payment = &v
}

// GetFundsReserve returns the FundsReserve field value if set, zero value otherwise.
func (o *ClaimResponse) GetFundsReserve() CodeableConcept {
	if o == nil || IsNil(o.FundsReserve) {
		var ret CodeableConcept
		return ret
	}
	return *o.FundsReserve
}

// GetFundsReserveOk returns a tuple with the FundsReserve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetFundsReserveOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FundsReserve) {
		return nil, false
	}
	return o.FundsReserve, true
}

// HasFundsReserve returns a boolean if a field has been set.
func (o *ClaimResponse) HasFundsReserve() bool {
	if o != nil && !IsNil(o.FundsReserve) {
		return true
	}

	return false
}

// SetFundsReserve gets a reference to the given CodeableConcept and assigns it to the FundsReserve field.
func (o *ClaimResponse) SetFundsReserve(v CodeableConcept) {
	o.FundsReserve = &v
}

// GetFormCode returns the FormCode field value if set, zero value otherwise.
func (o *ClaimResponse) GetFormCode() CodeableConcept {
	if o == nil || IsNil(o.FormCode) {
		var ret CodeableConcept
		return ret
	}
	return *o.FormCode
}

// GetFormCodeOk returns a tuple with the FormCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetFormCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FormCode) {
		return nil, false
	}
	return o.FormCode, true
}

// HasFormCode returns a boolean if a field has been set.
func (o *ClaimResponse) HasFormCode() bool {
	if o != nil && !IsNil(o.FormCode) {
		return true
	}

	return false
}

// SetFormCode gets a reference to the given CodeableConcept and assigns it to the FormCode field.
func (o *ClaimResponse) SetFormCode(v CodeableConcept) {
	o.FormCode = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *ClaimResponse) GetForm() Attachment {
	if o == nil || IsNil(o.Form) {
		var ret Attachment
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetFormOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *ClaimResponse) HasForm() bool {
	if o != nil && !IsNil(o.Form) {
		return true
	}

	return false
}

// SetForm gets a reference to the given Attachment and assigns it to the Form field.
func (o *ClaimResponse) SetForm(v Attachment) {
	o.Form = &v
}

// GetProcessNote returns the ProcessNote field value if set, zero value otherwise.
func (o *ClaimResponse) GetProcessNote() []ClaimResponseProcessNote {
	if o == nil || IsNil(o.ProcessNote) {
		var ret []ClaimResponseProcessNote
		return ret
	}
	return o.ProcessNote
}

// GetProcessNoteOk returns a tuple with the ProcessNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetProcessNoteOk() ([]ClaimResponseProcessNote, bool) {
	if o == nil || IsNil(o.ProcessNote) {
		return nil, false
	}
	return o.ProcessNote, true
}

// HasProcessNote returns a boolean if a field has been set.
func (o *ClaimResponse) HasProcessNote() bool {
	if o != nil && !IsNil(o.ProcessNote) {
		return true
	}

	return false
}

// SetProcessNote gets a reference to the given []ClaimResponseProcessNote and assigns it to the ProcessNote field.
func (o *ClaimResponse) SetProcessNote(v []ClaimResponseProcessNote) {
	o.ProcessNote = v
}

// GetCommunicationRequest returns the CommunicationRequest field value if set, zero value otherwise.
func (o *ClaimResponse) GetCommunicationRequest() []Reference {
	if o == nil || IsNil(o.CommunicationRequest) {
		var ret []Reference
		return ret
	}
	return o.CommunicationRequest
}

// GetCommunicationRequestOk returns a tuple with the CommunicationRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetCommunicationRequestOk() ([]Reference, bool) {
	if o == nil || IsNil(o.CommunicationRequest) {
		return nil, false
	}
	return o.CommunicationRequest, true
}

// HasCommunicationRequest returns a boolean if a field has been set.
func (o *ClaimResponse) HasCommunicationRequest() bool {
	if o != nil && !IsNil(o.CommunicationRequest) {
		return true
	}

	return false
}

// SetCommunicationRequest gets a reference to the given []Reference and assigns it to the CommunicationRequest field.
func (o *ClaimResponse) SetCommunicationRequest(v []Reference) {
	o.CommunicationRequest = v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *ClaimResponse) GetInsurance() []ClaimResponseInsurance {
	if o == nil || IsNil(o.Insurance) {
		var ret []ClaimResponseInsurance
		return ret
	}
	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetInsuranceOk() ([]ClaimResponseInsurance, bool) {
	if o == nil || IsNil(o.Insurance) {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *ClaimResponse) HasInsurance() bool {
	if o != nil && !IsNil(o.Insurance) {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given []ClaimResponseInsurance and assigns it to the Insurance field.
func (o *ClaimResponse) SetInsurance(v []ClaimResponseInsurance) {
	o.Insurance = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ClaimResponse) GetError() []ClaimResponseError {
	if o == nil || IsNil(o.Error) {
		var ret []ClaimResponseError
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponse) GetErrorOk() ([]ClaimResponseError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ClaimResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given []ClaimResponseError and assigns it to the Error field.
func (o *ClaimResponse) SetError(v []ClaimResponseError) {
	o.Error = v
}

func (o ClaimResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["insurer"] = o.Insurer
	if !IsNil(o.Requestor) {
		toSerialize["requestor"] = o.Requestor
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.Disposition) {
		toSerialize["disposition"] = o.Disposition
	}
	if !IsNil(o.PreAuthRef) {
		toSerialize["preAuthRef"] = o.PreAuthRef
	}
	if !IsNil(o.PreAuthPeriod) {
		toSerialize["preAuthPeriod"] = o.PreAuthPeriod
	}
	if !IsNil(o.PayeeType) {
		toSerialize["payeeType"] = o.PayeeType
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.AddItem) {
		toSerialize["addItem"] = o.AddItem
	}
	if !IsNil(o.Adjudication) {
		toSerialize["adjudication"] = o.Adjudication
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Payment) {
		toSerialize["payment"] = o.Payment
	}
	if !IsNil(o.FundsReserve) {
		toSerialize["fundsReserve"] = o.FundsReserve
	}
	if !IsNil(o.FormCode) {
		toSerialize["formCode"] = o.FormCode
	}
	if !IsNil(o.Form) {
		toSerialize["form"] = o.Form
	}
	if !IsNil(o.ProcessNote) {
		toSerialize["processNote"] = o.ProcessNote
	}
	if !IsNil(o.CommunicationRequest) {
		toSerialize["communicationRequest"] = o.CommunicationRequest
	}
	if !IsNil(o.Insurance) {
		toSerialize["insurance"] = o.Insurance
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *ClaimResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"type",
		"patient",
		"insurer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimResponse := _ClaimResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimResponse)

	if err != nil {
		return err
	}

	*o = ClaimResponse(varClaimResponse)

	return err
}

type NullableClaimResponse struct {
	value *ClaimResponse
	isSet bool
}

func (v NullableClaimResponse) Get() *ClaimResponse {
	return v.value
}

func (v *NullableClaimResponse) Set(val *ClaimResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimResponse(val *ClaimResponse) *NullableClaimResponse {
	return &NullableClaimResponse{value: val, isSet: true}
}

func (v NullableClaimResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


