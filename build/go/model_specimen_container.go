/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SpecimenContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecimenContainer{}

// SpecimenContainer A sample to be used for analysis.
type SpecimenContainer struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// The type of container associated with the specimen (e.g. slide, aliquot, etc.).
	Type *CodeableConcept `json:"type,omitempty"`
	// The capacity (volume or other measure) the container may contain.
	Capacity *Quantity `json:"capacity,omitempty"`
	// The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
	SpecimenQuantity *Quantity `json:"specimenQuantity,omitempty"`
	// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
	AdditiveCodeableConcept *CodeableConcept `json:"additiveCodeableConcept,omitempty"`
	// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
	AdditiveReference *Reference `json:"additiveReference,omitempty"`
}

// NewSpecimenContainer instantiates a new SpecimenContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecimenContainer() *SpecimenContainer {
	this := SpecimenContainer{}
	return &this
}

// NewSpecimenContainerWithDefaults instantiates a new SpecimenContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecimenContainerWithDefaults() *SpecimenContainer {
	this := SpecimenContainer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecimenContainer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecimenContainer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SpecimenContainer) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SpecimenContainer) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SpecimenContainer) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SpecimenContainer) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SpecimenContainer) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SpecimenContainer) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SpecimenContainer) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SpecimenContainer) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SpecimenContainer) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *SpecimenContainer) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SpecimenContainer) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SpecimenContainer) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SpecimenContainer) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SpecimenContainer) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SpecimenContainer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SpecimenContainer) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *SpecimenContainer) GetCapacity() Quantity {
	if o == nil || IsNil(o.Capacity) {
		var ret Quantity
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetCapacityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *SpecimenContainer) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given Quantity and assigns it to the Capacity field.
func (o *SpecimenContainer) SetCapacity(v Quantity) {
	o.Capacity = &v
}

// GetSpecimenQuantity returns the SpecimenQuantity field value if set, zero value otherwise.
func (o *SpecimenContainer) GetSpecimenQuantity() Quantity {
	if o == nil || IsNil(o.SpecimenQuantity) {
		var ret Quantity
		return ret
	}
	return *o.SpecimenQuantity
}

// GetSpecimenQuantityOk returns a tuple with the SpecimenQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetSpecimenQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.SpecimenQuantity) {
		return nil, false
	}
	return o.SpecimenQuantity, true
}

// HasSpecimenQuantity returns a boolean if a field has been set.
func (o *SpecimenContainer) HasSpecimenQuantity() bool {
	if o != nil && !IsNil(o.SpecimenQuantity) {
		return true
	}

	return false
}

// SetSpecimenQuantity gets a reference to the given Quantity and assigns it to the SpecimenQuantity field.
func (o *SpecimenContainer) SetSpecimenQuantity(v Quantity) {
	o.SpecimenQuantity = &v
}

// GetAdditiveCodeableConcept returns the AdditiveCodeableConcept field value if set, zero value otherwise.
func (o *SpecimenContainer) GetAdditiveCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.AdditiveCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.AdditiveCodeableConcept
}

// GetAdditiveCodeableConceptOk returns a tuple with the AdditiveCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetAdditiveCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AdditiveCodeableConcept) {
		return nil, false
	}
	return o.AdditiveCodeableConcept, true
}

// HasAdditiveCodeableConcept returns a boolean if a field has been set.
func (o *SpecimenContainer) HasAdditiveCodeableConcept() bool {
	if o != nil && !IsNil(o.AdditiveCodeableConcept) {
		return true
	}

	return false
}

// SetAdditiveCodeableConcept gets a reference to the given CodeableConcept and assigns it to the AdditiveCodeableConcept field.
func (o *SpecimenContainer) SetAdditiveCodeableConcept(v CodeableConcept) {
	o.AdditiveCodeableConcept = &v
}

// GetAdditiveReference returns the AdditiveReference field value if set, zero value otherwise.
func (o *SpecimenContainer) GetAdditiveReference() Reference {
	if o == nil || IsNil(o.AdditiveReference) {
		var ret Reference
		return ret
	}
	return *o.AdditiveReference
}

// GetAdditiveReferenceOk returns a tuple with the AdditiveReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecimenContainer) GetAdditiveReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.AdditiveReference) {
		return nil, false
	}
	return o.AdditiveReference, true
}

// HasAdditiveReference returns a boolean if a field has been set.
func (o *SpecimenContainer) HasAdditiveReference() bool {
	if o != nil && !IsNil(o.AdditiveReference) {
		return true
	}

	return false
}

// SetAdditiveReference gets a reference to the given Reference and assigns it to the AdditiveReference field.
func (o *SpecimenContainer) SetAdditiveReference(v Reference) {
	o.AdditiveReference = &v
}

func (o SpecimenContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecimenContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.SpecimenQuantity) {
		toSerialize["specimenQuantity"] = o.SpecimenQuantity
	}
	if !IsNil(o.AdditiveCodeableConcept) {
		toSerialize["additiveCodeableConcept"] = o.AdditiveCodeableConcept
	}
	if !IsNil(o.AdditiveReference) {
		toSerialize["additiveReference"] = o.AdditiveReference
	}
	return toSerialize, nil
}

type NullableSpecimenContainer struct {
	value *SpecimenContainer
	isSet bool
}

func (v NullableSpecimenContainer) Get() *SpecimenContainer {
	return v.value
}

func (v *NullableSpecimenContainer) Set(val *SpecimenContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecimenContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecimenContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecimenContainer(val *SpecimenContainer) *NullableSpecimenContainer {
	return &NullableSpecimenContainer{value: val, isSet: true}
}

func (v NullableSpecimenContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecimenContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


