/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FamilyMemberHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FamilyMemberHistory{}

// FamilyMemberHistory Significant health conditions for a person related to the patient relevant in the context of care for the patient.
type FamilyMemberHistory struct {
	// This is a FamilyMemberHistory resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// A code specifying the status of the record of the family history of a specific family member.
	Status *string `json:"status,omitempty"`
	// Describes why the family member's history is not available.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason,omitempty"`
	// The person who this history concerns.
	Patient Reference `json:"patient"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// The type of relationship this person has to the patient (father, mother, brother etc.).
	Relationship CodeableConcept `json:"relationship"`
	// The birth sex of the family member.
	Sex *CodeableConcept `json:"sex,omitempty"`
	// The actual or approximate date of birth of the relative.
	BornPeriod *Period `json:"bornPeriod,omitempty"`
	// The actual or approximate date of birth of the relative.
	BornDate *string `json:"bornDate,omitempty"`
	// The actual or approximate date of birth of the relative.
	BornString *string `json:"bornString,omitempty"`
	// The age of the relative at the time the family member history is recorded.
	AgeAge *Age `json:"ageAge,omitempty"`
	// The age of the relative at the time the family member history is recorded.
	AgeRange *Range `json:"ageRange,omitempty"`
	// The age of the relative at the time the family member history is recorded.
	AgeString *string `json:"ageString,omitempty"`
	// Value of \"true\" or \"false\"
	EstimatedAge *bool `json:"estimatedAge,omitempty"`
	// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
	DeceasedBoolean *bool `json:"deceasedBoolean,omitempty"`
	// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
	DeceasedAge *Age `json:"deceasedAge,omitempty"`
	// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
	DeceasedRange *Range `json:"deceasedRange,omitempty"`
	// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
	DeceasedDate *string `json:"deceasedDate,omitempty"`
	// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
	DeceasedString *string `json:"deceasedString,omitempty"`
	// Describes why the family member history occurred in coded or textual form.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
	Note []Annotation `json:"note,omitempty"`
	// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
	Condition []FamilyMemberHistoryCondition `json:"condition,omitempty"`
}

type _FamilyMemberHistory FamilyMemberHistory

// NewFamilyMemberHistory instantiates a new FamilyMemberHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFamilyMemberHistory(resourceType string, patient Reference, relationship CodeableConcept) *FamilyMemberHistory {
	this := FamilyMemberHistory{}
	this.ResourceType = resourceType
	this.Patient = patient
	this.Relationship = relationship
	return &this
}

// NewFamilyMemberHistoryWithDefaults instantiates a new FamilyMemberHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFamilyMemberHistoryWithDefaults() *FamilyMemberHistory {
	this := FamilyMemberHistory{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *FamilyMemberHistory) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *FamilyMemberHistory) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FamilyMemberHistory) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *FamilyMemberHistory) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *FamilyMemberHistory) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *FamilyMemberHistory) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *FamilyMemberHistory) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *FamilyMemberHistory) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *FamilyMemberHistory) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *FamilyMemberHistory) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *FamilyMemberHistory) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *FamilyMemberHistory) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *FamilyMemberHistory) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FamilyMemberHistory) SetStatus(v string) {
	o.Status = &v
}

// GetDataAbsentReason returns the DataAbsentReason field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDataAbsentReason() CodeableConcept {
	if o == nil || IsNil(o.DataAbsentReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.DataAbsentReason
}

// GetDataAbsentReasonOk returns a tuple with the DataAbsentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDataAbsentReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DataAbsentReason) {
		return nil, false
	}
	return o.DataAbsentReason, true
}

// HasDataAbsentReason returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDataAbsentReason() bool {
	if o != nil && !IsNil(o.DataAbsentReason) {
		return true
	}

	return false
}

// SetDataAbsentReason gets a reference to the given CodeableConcept and assigns it to the DataAbsentReason field.
func (o *FamilyMemberHistory) SetDataAbsentReason(v CodeableConcept) {
	o.DataAbsentReason = &v
}

// GetPatient returns the Patient field value
func (o *FamilyMemberHistory) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *FamilyMemberHistory) SetPatient(v Reference) {
	o.Patient = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FamilyMemberHistory) SetDate(v string) {
	o.Date = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FamilyMemberHistory) SetName(v string) {
	o.Name = &v
}

// GetRelationship returns the Relationship field value
func (o *FamilyMemberHistory) GetRelationship() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetRelationshipOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *FamilyMemberHistory) SetRelationship(v CodeableConcept) {
	o.Relationship = v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetSex() CodeableConcept {
	if o == nil || IsNil(o.Sex) {
		var ret CodeableConcept
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetSexOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Sex) {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasSex() bool {
	if o != nil && !IsNil(o.Sex) {
		return true
	}

	return false
}

// SetSex gets a reference to the given CodeableConcept and assigns it to the Sex field.
func (o *FamilyMemberHistory) SetSex(v CodeableConcept) {
	o.Sex = &v
}

// GetBornPeriod returns the BornPeriod field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetBornPeriod() Period {
	if o == nil || IsNil(o.BornPeriod) {
		var ret Period
		return ret
	}
	return *o.BornPeriod
}

// GetBornPeriodOk returns a tuple with the BornPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetBornPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.BornPeriod) {
		return nil, false
	}
	return o.BornPeriod, true
}

// HasBornPeriod returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasBornPeriod() bool {
	if o != nil && !IsNil(o.BornPeriod) {
		return true
	}

	return false
}

// SetBornPeriod gets a reference to the given Period and assigns it to the BornPeriod field.
func (o *FamilyMemberHistory) SetBornPeriod(v Period) {
	o.BornPeriod = &v
}

// GetBornDate returns the BornDate field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetBornDate() string {
	if o == nil || IsNil(o.BornDate) {
		var ret string
		return ret
	}
	return *o.BornDate
}

// GetBornDateOk returns a tuple with the BornDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetBornDateOk() (*string, bool) {
	if o == nil || IsNil(o.BornDate) {
		return nil, false
	}
	return o.BornDate, true
}

// HasBornDate returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasBornDate() bool {
	if o != nil && !IsNil(o.BornDate) {
		return true
	}

	return false
}

// SetBornDate gets a reference to the given string and assigns it to the BornDate field.
func (o *FamilyMemberHistory) SetBornDate(v string) {
	o.BornDate = &v
}

// GetBornString returns the BornString field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetBornString() string {
	if o == nil || IsNil(o.BornString) {
		var ret string
		return ret
	}
	return *o.BornString
}

// GetBornStringOk returns a tuple with the BornString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetBornStringOk() (*string, bool) {
	if o == nil || IsNil(o.BornString) {
		return nil, false
	}
	return o.BornString, true
}

// HasBornString returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasBornString() bool {
	if o != nil && !IsNil(o.BornString) {
		return true
	}

	return false
}

// SetBornString gets a reference to the given string and assigns it to the BornString field.
func (o *FamilyMemberHistory) SetBornString(v string) {
	o.BornString = &v
}

// GetAgeAge returns the AgeAge field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetAgeAge() Age {
	if o == nil || IsNil(o.AgeAge) {
		var ret Age
		return ret
	}
	return *o.AgeAge
}

// GetAgeAgeOk returns a tuple with the AgeAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetAgeAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.AgeAge) {
		return nil, false
	}
	return o.AgeAge, true
}

// HasAgeAge returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasAgeAge() bool {
	if o != nil && !IsNil(o.AgeAge) {
		return true
	}

	return false
}

// SetAgeAge gets a reference to the given Age and assigns it to the AgeAge field.
func (o *FamilyMemberHistory) SetAgeAge(v Age) {
	o.AgeAge = &v
}

// GetAgeRange returns the AgeRange field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetAgeRange() Range {
	if o == nil || IsNil(o.AgeRange) {
		var ret Range
		return ret
	}
	return *o.AgeRange
}

// GetAgeRangeOk returns a tuple with the AgeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetAgeRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.AgeRange) {
		return nil, false
	}
	return o.AgeRange, true
}

// HasAgeRange returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasAgeRange() bool {
	if o != nil && !IsNil(o.AgeRange) {
		return true
	}

	return false
}

// SetAgeRange gets a reference to the given Range and assigns it to the AgeRange field.
func (o *FamilyMemberHistory) SetAgeRange(v Range) {
	o.AgeRange = &v
}

// GetAgeString returns the AgeString field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetAgeString() string {
	if o == nil || IsNil(o.AgeString) {
		var ret string
		return ret
	}
	return *o.AgeString
}

// GetAgeStringOk returns a tuple with the AgeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetAgeStringOk() (*string, bool) {
	if o == nil || IsNil(o.AgeString) {
		return nil, false
	}
	return o.AgeString, true
}

// HasAgeString returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasAgeString() bool {
	if o != nil && !IsNil(o.AgeString) {
		return true
	}

	return false
}

// SetAgeString gets a reference to the given string and assigns it to the AgeString field.
func (o *FamilyMemberHistory) SetAgeString(v string) {
	o.AgeString = &v
}

// GetEstimatedAge returns the EstimatedAge field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetEstimatedAge() bool {
	if o == nil || IsNil(o.EstimatedAge) {
		var ret bool
		return ret
	}
	return *o.EstimatedAge
}

// GetEstimatedAgeOk returns a tuple with the EstimatedAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetEstimatedAgeOk() (*bool, bool) {
	if o == nil || IsNil(o.EstimatedAge) {
		return nil, false
	}
	return o.EstimatedAge, true
}

// HasEstimatedAge returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasEstimatedAge() bool {
	if o != nil && !IsNil(o.EstimatedAge) {
		return true
	}

	return false
}

// SetEstimatedAge gets a reference to the given bool and assigns it to the EstimatedAge field.
func (o *FamilyMemberHistory) SetEstimatedAge(v bool) {
	o.EstimatedAge = &v
}

// GetDeceasedBoolean returns the DeceasedBoolean field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDeceasedBoolean() bool {
	if o == nil || IsNil(o.DeceasedBoolean) {
		var ret bool
		return ret
	}
	return *o.DeceasedBoolean
}

// GetDeceasedBooleanOk returns a tuple with the DeceasedBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDeceasedBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.DeceasedBoolean) {
		return nil, false
	}
	return o.DeceasedBoolean, true
}

// HasDeceasedBoolean returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDeceasedBoolean() bool {
	if o != nil && !IsNil(o.DeceasedBoolean) {
		return true
	}

	return false
}

// SetDeceasedBoolean gets a reference to the given bool and assigns it to the DeceasedBoolean field.
func (o *FamilyMemberHistory) SetDeceasedBoolean(v bool) {
	o.DeceasedBoolean = &v
}

// GetDeceasedAge returns the DeceasedAge field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDeceasedAge() Age {
	if o == nil || IsNil(o.DeceasedAge) {
		var ret Age
		return ret
	}
	return *o.DeceasedAge
}

// GetDeceasedAgeOk returns a tuple with the DeceasedAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDeceasedAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.DeceasedAge) {
		return nil, false
	}
	return o.DeceasedAge, true
}

// HasDeceasedAge returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDeceasedAge() bool {
	if o != nil && !IsNil(o.DeceasedAge) {
		return true
	}

	return false
}

// SetDeceasedAge gets a reference to the given Age and assigns it to the DeceasedAge field.
func (o *FamilyMemberHistory) SetDeceasedAge(v Age) {
	o.DeceasedAge = &v
}

// GetDeceasedRange returns the DeceasedRange field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDeceasedRange() Range {
	if o == nil || IsNil(o.DeceasedRange) {
		var ret Range
		return ret
	}
	return *o.DeceasedRange
}

// GetDeceasedRangeOk returns a tuple with the DeceasedRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDeceasedRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.DeceasedRange) {
		return nil, false
	}
	return o.DeceasedRange, true
}

// HasDeceasedRange returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDeceasedRange() bool {
	if o != nil && !IsNil(o.DeceasedRange) {
		return true
	}

	return false
}

// SetDeceasedRange gets a reference to the given Range and assigns it to the DeceasedRange field.
func (o *FamilyMemberHistory) SetDeceasedRange(v Range) {
	o.DeceasedRange = &v
}

// GetDeceasedDate returns the DeceasedDate field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDeceasedDate() string {
	if o == nil || IsNil(o.DeceasedDate) {
		var ret string
		return ret
	}
	return *o.DeceasedDate
}

// GetDeceasedDateOk returns a tuple with the DeceasedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDeceasedDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeceasedDate) {
		return nil, false
	}
	return o.DeceasedDate, true
}

// HasDeceasedDate returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDeceasedDate() bool {
	if o != nil && !IsNil(o.DeceasedDate) {
		return true
	}

	return false
}

// SetDeceasedDate gets a reference to the given string and assigns it to the DeceasedDate field.
func (o *FamilyMemberHistory) SetDeceasedDate(v string) {
	o.DeceasedDate = &v
}

// GetDeceasedString returns the DeceasedString field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetDeceasedString() string {
	if o == nil || IsNil(o.DeceasedString) {
		var ret string
		return ret
	}
	return *o.DeceasedString
}

// GetDeceasedStringOk returns a tuple with the DeceasedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetDeceasedStringOk() (*string, bool) {
	if o == nil || IsNil(o.DeceasedString) {
		return nil, false
	}
	return o.DeceasedString, true
}

// HasDeceasedString returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasDeceasedString() bool {
	if o != nil && !IsNil(o.DeceasedString) {
		return true
	}

	return false
}

// SetDeceasedString gets a reference to the given string and assigns it to the DeceasedString field.
func (o *FamilyMemberHistory) SetDeceasedString(v string) {
	o.DeceasedString = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *FamilyMemberHistory) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *FamilyMemberHistory) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *FamilyMemberHistory) SetNote(v []Annotation) {
	o.Note = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *FamilyMemberHistory) GetCondition() []FamilyMemberHistoryCondition {
	if o == nil || IsNil(o.Condition) {
		var ret []FamilyMemberHistoryCondition
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistory) GetConditionOk() ([]FamilyMemberHistoryCondition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *FamilyMemberHistory) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []FamilyMemberHistoryCondition and assigns it to the Condition field.
func (o *FamilyMemberHistory) SetCondition(v []FamilyMemberHistoryCondition) {
	o.Condition = v
}

func (o FamilyMemberHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FamilyMemberHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DataAbsentReason) {
		toSerialize["dataAbsentReason"] = o.DataAbsentReason
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["relationship"] = o.Relationship
	if !IsNil(o.Sex) {
		toSerialize["sex"] = o.Sex
	}
	if !IsNil(o.BornPeriod) {
		toSerialize["bornPeriod"] = o.BornPeriod
	}
	if !IsNil(o.BornDate) {
		toSerialize["bornDate"] = o.BornDate
	}
	if !IsNil(o.BornString) {
		toSerialize["bornString"] = o.BornString
	}
	if !IsNil(o.AgeAge) {
		toSerialize["ageAge"] = o.AgeAge
	}
	if !IsNil(o.AgeRange) {
		toSerialize["ageRange"] = o.AgeRange
	}
	if !IsNil(o.AgeString) {
		toSerialize["ageString"] = o.AgeString
	}
	if !IsNil(o.EstimatedAge) {
		toSerialize["estimatedAge"] = o.EstimatedAge
	}
	if !IsNil(o.DeceasedBoolean) {
		toSerialize["deceasedBoolean"] = o.DeceasedBoolean
	}
	if !IsNil(o.DeceasedAge) {
		toSerialize["deceasedAge"] = o.DeceasedAge
	}
	if !IsNil(o.DeceasedRange) {
		toSerialize["deceasedRange"] = o.DeceasedRange
	}
	if !IsNil(o.DeceasedDate) {
		toSerialize["deceasedDate"] = o.DeceasedDate
	}
	if !IsNil(o.DeceasedString) {
		toSerialize["deceasedString"] = o.DeceasedString
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

func (o *FamilyMemberHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"patient",
		"relationship",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFamilyMemberHistory := _FamilyMemberHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFamilyMemberHistory)

	if err != nil {
		return err
	}

	*o = FamilyMemberHistory(varFamilyMemberHistory)

	return err
}

type NullableFamilyMemberHistory struct {
	value *FamilyMemberHistory
	isSet bool
}

func (v NullableFamilyMemberHistory) Get() *FamilyMemberHistory {
	return v.value
}

func (v *NullableFamilyMemberHistory) Set(val *FamilyMemberHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableFamilyMemberHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableFamilyMemberHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFamilyMemberHistory(val *FamilyMemberHistory) *NullableFamilyMemberHistory {
	return &NullableFamilyMemberHistory{value: val, isSet: true}
}

func (v NullableFamilyMemberHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFamilyMemberHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


