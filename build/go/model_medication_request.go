/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationRequest{}

// MedicationRequest An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type MedicationRequest struct {
	// This is a MedicationRequest resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Captures the reason for the current state of the MedicationRequest.
	StatusReason *CodeableConcept `json:"statusReason,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Intent *string `json:"intent,omitempty"`
	// Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category []CodeableConcept `json:"category,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// Value of \"true\" or \"false\"
	DoNotPerform *bool `json:"doNotPerform,omitempty"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedBoolean *bool `json:"reportedBoolean,omitempty"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedReference *Reference `json:"reportedReference,omitempty"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept,omitempty"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference,omitempty"`
	// A link to a resource representing the person or set of individuals to whom the medication will be given.
	Subject Reference `json:"subject"`
	// The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
	Encounter *Reference `json:"encounter,omitempty"`
	// Include additional information (for example, patient height and weight) that supports the ordering of the medication.
	SupportingInformation []Reference `json:"supportingInformation,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	AuthoredOn *string `json:"authoredOn,omitempty"`
	// The individual, organization, or device that initiated the request and has responsibility for its activation.
	Requester *Reference `json:"requester,omitempty"`
	// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
	Performer *Reference `json:"performer,omitempty"`
	// Indicates the type of performer of the administration of the medication.
	PerformerType *CodeableConcept `json:"performerType,omitempty"`
	// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
	Recorder *Reference `json:"recorder,omitempty"`
	// The reason or the indication for ordering or not ordering the medication.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Condition or observation that supports why the medication was ordered.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// A plan or request that is fulfilled in whole or in part by this medication request.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
	GroupIdentifier *Identifier `json:"groupIdentifier,omitempty"`
	// The description of the overall patte3rn of the administration of the medication to the patient.
	CourseOfTherapyType *CodeableConcept `json:"courseOfTherapyType,omitempty"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	Insurance []Reference `json:"insurance,omitempty"`
	// Extra information about the prescription that could not be conveyed by the other attributes.
	Note []Annotation `json:"note,omitempty"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []Dosage `json:"dosageInstruction,omitempty"`
	// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
	DispenseRequest *MedicationRequestDispenseRequest `json:"dispenseRequest,omitempty"`
	// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
	Substitution *MedicationRequestSubstitution `json:"substitution,omitempty"`
	// A link to a resource representing an earlier order related order or prescription.
	PriorPrescription *Reference `json:"priorPrescription,omitempty"`
	// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
	DetectedIssue []Reference `json:"detectedIssue,omitempty"`
	// Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
	EventHistory []Reference `json:"eventHistory,omitempty"`
}

type _MedicationRequest MedicationRequest

// NewMedicationRequest instantiates a new MedicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationRequest(resourceType string, subject Reference) *MedicationRequest {
	this := MedicationRequest{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewMedicationRequestWithDefaults instantiates a new MedicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationRequestWithDefaults() *MedicationRequest {
	this := MedicationRequest{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicationRequest) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicationRequest) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationRequest) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicationRequest) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicationRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicationRequest) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicationRequest) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicationRequest) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicationRequest) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicationRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicationRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicationRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicationRequest) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicationRequest) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicationRequest) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicationRequest) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicationRequest) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicationRequest) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationRequest) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationRequest) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationRequest) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationRequest) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationRequest) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationRequest) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicationRequest) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicationRequest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *MedicationRequest) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MedicationRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MedicationRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MedicationRequest) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *MedicationRequest) GetStatusReason() CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetStatusReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *MedicationRequest) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given CodeableConcept and assigns it to the StatusReason field.
func (o *MedicationRequest) SetStatusReason(v CodeableConcept) {
	o.StatusReason = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *MedicationRequest) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *MedicationRequest) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *MedicationRequest) SetIntent(v string) {
	o.Intent = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MedicationRequest) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *MedicationRequest) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *MedicationRequest) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *MedicationRequest) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *MedicationRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *MedicationRequest) SetPriority(v string) {
	o.Priority = &v
}

// GetDoNotPerform returns the DoNotPerform field value if set, zero value otherwise.
func (o *MedicationRequest) GetDoNotPerform() bool {
	if o == nil || IsNil(o.DoNotPerform) {
		var ret bool
		return ret
	}
	return *o.DoNotPerform
}

// GetDoNotPerformOk returns a tuple with the DoNotPerform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetDoNotPerformOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotPerform) {
		return nil, false
	}
	return o.DoNotPerform, true
}

// HasDoNotPerform returns a boolean if a field has been set.
func (o *MedicationRequest) HasDoNotPerform() bool {
	if o != nil && !IsNil(o.DoNotPerform) {
		return true
	}

	return false
}

// SetDoNotPerform gets a reference to the given bool and assigns it to the DoNotPerform field.
func (o *MedicationRequest) SetDoNotPerform(v bool) {
	o.DoNotPerform = &v
}

// GetReportedBoolean returns the ReportedBoolean field value if set, zero value otherwise.
func (o *MedicationRequest) GetReportedBoolean() bool {
	if o == nil || IsNil(o.ReportedBoolean) {
		var ret bool
		return ret
	}
	return *o.ReportedBoolean
}

// GetReportedBooleanOk returns a tuple with the ReportedBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetReportedBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ReportedBoolean) {
		return nil, false
	}
	return o.ReportedBoolean, true
}

// HasReportedBoolean returns a boolean if a field has been set.
func (o *MedicationRequest) HasReportedBoolean() bool {
	if o != nil && !IsNil(o.ReportedBoolean) {
		return true
	}

	return false
}

// SetReportedBoolean gets a reference to the given bool and assigns it to the ReportedBoolean field.
func (o *MedicationRequest) SetReportedBoolean(v bool) {
	o.ReportedBoolean = &v
}

// GetReportedReference returns the ReportedReference field value if set, zero value otherwise.
func (o *MedicationRequest) GetReportedReference() Reference {
	if o == nil || IsNil(o.ReportedReference) {
		var ret Reference
		return ret
	}
	return *o.ReportedReference
}

// GetReportedReferenceOk returns a tuple with the ReportedReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetReportedReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ReportedReference) {
		return nil, false
	}
	return o.ReportedReference, true
}

// HasReportedReference returns a boolean if a field has been set.
func (o *MedicationRequest) HasReportedReference() bool {
	if o != nil && !IsNil(o.ReportedReference) {
		return true
	}

	return false
}

// SetReportedReference gets a reference to the given Reference and assigns it to the ReportedReference field.
func (o *MedicationRequest) SetReportedReference(v Reference) {
	o.ReportedReference = &v
}

// GetMedicationCodeableConcept returns the MedicationCodeableConcept field value if set, zero value otherwise.
func (o *MedicationRequest) GetMedicationCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.MedicationCodeableConcept
}

// GetMedicationCodeableConceptOk returns a tuple with the MedicationCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetMedicationCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		return nil, false
	}
	return o.MedicationCodeableConcept, true
}

// HasMedicationCodeableConcept returns a boolean if a field has been set.
func (o *MedicationRequest) HasMedicationCodeableConcept() bool {
	if o != nil && !IsNil(o.MedicationCodeableConcept) {
		return true
	}

	return false
}

// SetMedicationCodeableConcept gets a reference to the given CodeableConcept and assigns it to the MedicationCodeableConcept field.
func (o *MedicationRequest) SetMedicationCodeableConcept(v CodeableConcept) {
	o.MedicationCodeableConcept = &v
}

// GetMedicationReference returns the MedicationReference field value if set, zero value otherwise.
func (o *MedicationRequest) GetMedicationReference() Reference {
	if o == nil || IsNil(o.MedicationReference) {
		var ret Reference
		return ret
	}
	return *o.MedicationReference
}

// GetMedicationReferenceOk returns a tuple with the MedicationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetMedicationReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.MedicationReference) {
		return nil, false
	}
	return o.MedicationReference, true
}

// HasMedicationReference returns a boolean if a field has been set.
func (o *MedicationRequest) HasMedicationReference() bool {
	if o != nil && !IsNil(o.MedicationReference) {
		return true
	}

	return false
}

// SetMedicationReference gets a reference to the given Reference and assigns it to the MedicationReference field.
func (o *MedicationRequest) SetMedicationReference(v Reference) {
	o.MedicationReference = &v
}

// GetSubject returns the Subject field value
func (o *MedicationRequest) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *MedicationRequest) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *MedicationRequest) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *MedicationRequest) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *MedicationRequest) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetSupportingInformation returns the SupportingInformation field value if set, zero value otherwise.
func (o *MedicationRequest) GetSupportingInformation() []Reference {
	if o == nil || IsNil(o.SupportingInformation) {
		var ret []Reference
		return ret
	}
	return o.SupportingInformation
}

// GetSupportingInformationOk returns a tuple with the SupportingInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetSupportingInformationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInformation) {
		return nil, false
	}
	return o.SupportingInformation, true
}

// HasSupportingInformation returns a boolean if a field has been set.
func (o *MedicationRequest) HasSupportingInformation() bool {
	if o != nil && !IsNil(o.SupportingInformation) {
		return true
	}

	return false
}

// SetSupportingInformation gets a reference to the given []Reference and assigns it to the SupportingInformation field.
func (o *MedicationRequest) SetSupportingInformation(v []Reference) {
	o.SupportingInformation = v
}

// GetAuthoredOn returns the AuthoredOn field value if set, zero value otherwise.
func (o *MedicationRequest) GetAuthoredOn() string {
	if o == nil || IsNil(o.AuthoredOn) {
		var ret string
		return ret
	}
	return *o.AuthoredOn
}

// GetAuthoredOnOk returns a tuple with the AuthoredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetAuthoredOnOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoredOn) {
		return nil, false
	}
	return o.AuthoredOn, true
}

// HasAuthoredOn returns a boolean if a field has been set.
func (o *MedicationRequest) HasAuthoredOn() bool {
	if o != nil && !IsNil(o.AuthoredOn) {
		return true
	}

	return false
}

// SetAuthoredOn gets a reference to the given string and assigns it to the AuthoredOn field.
func (o *MedicationRequest) SetAuthoredOn(v string) {
	o.AuthoredOn = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *MedicationRequest) GetRequester() Reference {
	if o == nil || IsNil(o.Requester) {
		var ret Reference
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetRequesterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Requester) {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *MedicationRequest) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given Reference and assigns it to the Requester field.
func (o *MedicationRequest) SetRequester(v Reference) {
	o.Requester = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *MedicationRequest) GetPerformer() Reference {
	if o == nil || IsNil(o.Performer) {
		var ret Reference
		return ret
	}
	return *o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetPerformerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *MedicationRequest) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given Reference and assigns it to the Performer field.
func (o *MedicationRequest) SetPerformer(v Reference) {
	o.Performer = &v
}

// GetPerformerType returns the PerformerType field value if set, zero value otherwise.
func (o *MedicationRequest) GetPerformerType() CodeableConcept {
	if o == nil || IsNil(o.PerformerType) {
		var ret CodeableConcept
		return ret
	}
	return *o.PerformerType
}

// GetPerformerTypeOk returns a tuple with the PerformerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetPerformerTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PerformerType) {
		return nil, false
	}
	return o.PerformerType, true
}

// HasPerformerType returns a boolean if a field has been set.
func (o *MedicationRequest) HasPerformerType() bool {
	if o != nil && !IsNil(o.PerformerType) {
		return true
	}

	return false
}

// SetPerformerType gets a reference to the given CodeableConcept and assigns it to the PerformerType field.
func (o *MedicationRequest) SetPerformerType(v CodeableConcept) {
	o.PerformerType = &v
}

// GetRecorder returns the Recorder field value if set, zero value otherwise.
func (o *MedicationRequest) GetRecorder() Reference {
	if o == nil || IsNil(o.Recorder) {
		var ret Reference
		return ret
	}
	return *o.Recorder
}

// GetRecorderOk returns a tuple with the Recorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetRecorderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Recorder) {
		return nil, false
	}
	return o.Recorder, true
}

// HasRecorder returns a boolean if a field has been set.
func (o *MedicationRequest) HasRecorder() bool {
	if o != nil && !IsNil(o.Recorder) {
		return true
	}

	return false
}

// SetRecorder gets a reference to the given Reference and assigns it to the Recorder field.
func (o *MedicationRequest) SetRecorder(v Reference) {
	o.Recorder = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *MedicationRequest) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *MedicationRequest) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *MedicationRequest) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *MedicationRequest) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *MedicationRequest) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *MedicationRequest) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *MedicationRequest) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *MedicationRequest) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *MedicationRequest) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *MedicationRequest) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *MedicationRequest) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *MedicationRequest) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *MedicationRequest) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *MedicationRequest) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *MedicationRequest) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetGroupIdentifier returns the GroupIdentifier field value if set, zero value otherwise.
func (o *MedicationRequest) GetGroupIdentifier() Identifier {
	if o == nil || IsNil(o.GroupIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetGroupIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.GroupIdentifier) {
		return nil, false
	}
	return o.GroupIdentifier, true
}

// HasGroupIdentifier returns a boolean if a field has been set.
func (o *MedicationRequest) HasGroupIdentifier() bool {
	if o != nil && !IsNil(o.GroupIdentifier) {
		return true
	}

	return false
}

// SetGroupIdentifier gets a reference to the given Identifier and assigns it to the GroupIdentifier field.
func (o *MedicationRequest) SetGroupIdentifier(v Identifier) {
	o.GroupIdentifier = &v
}

// GetCourseOfTherapyType returns the CourseOfTherapyType field value if set, zero value otherwise.
func (o *MedicationRequest) GetCourseOfTherapyType() CodeableConcept {
	if o == nil || IsNil(o.CourseOfTherapyType) {
		var ret CodeableConcept
		return ret
	}
	return *o.CourseOfTherapyType
}

// GetCourseOfTherapyTypeOk returns a tuple with the CourseOfTherapyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetCourseOfTherapyTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CourseOfTherapyType) {
		return nil, false
	}
	return o.CourseOfTherapyType, true
}

// HasCourseOfTherapyType returns a boolean if a field has been set.
func (o *MedicationRequest) HasCourseOfTherapyType() bool {
	if o != nil && !IsNil(o.CourseOfTherapyType) {
		return true
	}

	return false
}

// SetCourseOfTherapyType gets a reference to the given CodeableConcept and assigns it to the CourseOfTherapyType field.
func (o *MedicationRequest) SetCourseOfTherapyType(v CodeableConcept) {
	o.CourseOfTherapyType = &v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *MedicationRequest) GetInsurance() []Reference {
	if o == nil || IsNil(o.Insurance) {
		var ret []Reference
		return ret
	}
	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetInsuranceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Insurance) {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *MedicationRequest) HasInsurance() bool {
	if o != nil && !IsNil(o.Insurance) {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given []Reference and assigns it to the Insurance field.
func (o *MedicationRequest) SetInsurance(v []Reference) {
	o.Insurance = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *MedicationRequest) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *MedicationRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *MedicationRequest) SetNote(v []Annotation) {
	o.Note = v
}

// GetDosageInstruction returns the DosageInstruction field value if set, zero value otherwise.
func (o *MedicationRequest) GetDosageInstruction() []Dosage {
	if o == nil || IsNil(o.DosageInstruction) {
		var ret []Dosage
		return ret
	}
	return o.DosageInstruction
}

// GetDosageInstructionOk returns a tuple with the DosageInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetDosageInstructionOk() ([]Dosage, bool) {
	if o == nil || IsNil(o.DosageInstruction) {
		return nil, false
	}
	return o.DosageInstruction, true
}

// HasDosageInstruction returns a boolean if a field has been set.
func (o *MedicationRequest) HasDosageInstruction() bool {
	if o != nil && !IsNil(o.DosageInstruction) {
		return true
	}

	return false
}

// SetDosageInstruction gets a reference to the given []Dosage and assigns it to the DosageInstruction field.
func (o *MedicationRequest) SetDosageInstruction(v []Dosage) {
	o.DosageInstruction = v
}

// GetDispenseRequest returns the DispenseRequest field value if set, zero value otherwise.
func (o *MedicationRequest) GetDispenseRequest() MedicationRequestDispenseRequest {
	if o == nil || IsNil(o.DispenseRequest) {
		var ret MedicationRequestDispenseRequest
		return ret
	}
	return *o.DispenseRequest
}

// GetDispenseRequestOk returns a tuple with the DispenseRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetDispenseRequestOk() (*MedicationRequestDispenseRequest, bool) {
	if o == nil || IsNil(o.DispenseRequest) {
		return nil, false
	}
	return o.DispenseRequest, true
}

// HasDispenseRequest returns a boolean if a field has been set.
func (o *MedicationRequest) HasDispenseRequest() bool {
	if o != nil && !IsNil(o.DispenseRequest) {
		return true
	}

	return false
}

// SetDispenseRequest gets a reference to the given MedicationRequestDispenseRequest and assigns it to the DispenseRequest field.
func (o *MedicationRequest) SetDispenseRequest(v MedicationRequestDispenseRequest) {
	o.DispenseRequest = &v
}

// GetSubstitution returns the Substitution field value if set, zero value otherwise.
func (o *MedicationRequest) GetSubstitution() MedicationRequestSubstitution {
	if o == nil || IsNil(o.Substitution) {
		var ret MedicationRequestSubstitution
		return ret
	}
	return *o.Substitution
}

// GetSubstitutionOk returns a tuple with the Substitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetSubstitutionOk() (*MedicationRequestSubstitution, bool) {
	if o == nil || IsNil(o.Substitution) {
		return nil, false
	}
	return o.Substitution, true
}

// HasSubstitution returns a boolean if a field has been set.
func (o *MedicationRequest) HasSubstitution() bool {
	if o != nil && !IsNil(o.Substitution) {
		return true
	}

	return false
}

// SetSubstitution gets a reference to the given MedicationRequestSubstitution and assigns it to the Substitution field.
func (o *MedicationRequest) SetSubstitution(v MedicationRequestSubstitution) {
	o.Substitution = &v
}

// GetPriorPrescription returns the PriorPrescription field value if set, zero value otherwise.
func (o *MedicationRequest) GetPriorPrescription() Reference {
	if o == nil || IsNil(o.PriorPrescription) {
		var ret Reference
		return ret
	}
	return *o.PriorPrescription
}

// GetPriorPrescriptionOk returns a tuple with the PriorPrescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetPriorPrescriptionOk() (*Reference, bool) {
	if o == nil || IsNil(o.PriorPrescription) {
		return nil, false
	}
	return o.PriorPrescription, true
}

// HasPriorPrescription returns a boolean if a field has been set.
func (o *MedicationRequest) HasPriorPrescription() bool {
	if o != nil && !IsNil(o.PriorPrescription) {
		return true
	}

	return false
}

// SetPriorPrescription gets a reference to the given Reference and assigns it to the PriorPrescription field.
func (o *MedicationRequest) SetPriorPrescription(v Reference) {
	o.PriorPrescription = &v
}

// GetDetectedIssue returns the DetectedIssue field value if set, zero value otherwise.
func (o *MedicationRequest) GetDetectedIssue() []Reference {
	if o == nil || IsNil(o.DetectedIssue) {
		var ret []Reference
		return ret
	}
	return o.DetectedIssue
}

// GetDetectedIssueOk returns a tuple with the DetectedIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetDetectedIssueOk() ([]Reference, bool) {
	if o == nil || IsNil(o.DetectedIssue) {
		return nil, false
	}
	return o.DetectedIssue, true
}

// HasDetectedIssue returns a boolean if a field has been set.
func (o *MedicationRequest) HasDetectedIssue() bool {
	if o != nil && !IsNil(o.DetectedIssue) {
		return true
	}

	return false
}

// SetDetectedIssue gets a reference to the given []Reference and assigns it to the DetectedIssue field.
func (o *MedicationRequest) SetDetectedIssue(v []Reference) {
	o.DetectedIssue = v
}

// GetEventHistory returns the EventHistory field value if set, zero value otherwise.
func (o *MedicationRequest) GetEventHistory() []Reference {
	if o == nil || IsNil(o.EventHistory) {
		var ret []Reference
		return ret
	}
	return o.EventHistory
}

// GetEventHistoryOk returns a tuple with the EventHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequest) GetEventHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.EventHistory) {
		return nil, false
	}
	return o.EventHistory, true
}

// HasEventHistory returns a boolean if a field has been set.
func (o *MedicationRequest) HasEventHistory() bool {
	if o != nil && !IsNil(o.EventHistory) {
		return true
	}

	return false
}

// SetEventHistory gets a reference to the given []Reference and assigns it to the EventHistory field.
func (o *MedicationRequest) SetEventHistory(v []Reference) {
	o.EventHistory = v
}

func (o MedicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.DoNotPerform) {
		toSerialize["doNotPerform"] = o.DoNotPerform
	}
	if !IsNil(o.ReportedBoolean) {
		toSerialize["reportedBoolean"] = o.ReportedBoolean
	}
	if !IsNil(o.ReportedReference) {
		toSerialize["reportedReference"] = o.ReportedReference
	}
	if !IsNil(o.MedicationCodeableConcept) {
		toSerialize["medicationCodeableConcept"] = o.MedicationCodeableConcept
	}
	if !IsNil(o.MedicationReference) {
		toSerialize["medicationReference"] = o.MedicationReference
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.SupportingInformation) {
		toSerialize["supportingInformation"] = o.SupportingInformation
	}
	if !IsNil(o.AuthoredOn) {
		toSerialize["authoredOn"] = o.AuthoredOn
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.PerformerType) {
		toSerialize["performerType"] = o.PerformerType
	}
	if !IsNil(o.Recorder) {
		toSerialize["recorder"] = o.Recorder
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.GroupIdentifier) {
		toSerialize["groupIdentifier"] = o.GroupIdentifier
	}
	if !IsNil(o.CourseOfTherapyType) {
		toSerialize["courseOfTherapyType"] = o.CourseOfTherapyType
	}
	if !IsNil(o.Insurance) {
		toSerialize["insurance"] = o.Insurance
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.DosageInstruction) {
		toSerialize["dosageInstruction"] = o.DosageInstruction
	}
	if !IsNil(o.DispenseRequest) {
		toSerialize["dispenseRequest"] = o.DispenseRequest
	}
	if !IsNil(o.Substitution) {
		toSerialize["substitution"] = o.Substitution
	}
	if !IsNil(o.PriorPrescription) {
		toSerialize["priorPrescription"] = o.PriorPrescription
	}
	if !IsNil(o.DetectedIssue) {
		toSerialize["detectedIssue"] = o.DetectedIssue
	}
	if !IsNil(o.EventHistory) {
		toSerialize["eventHistory"] = o.EventHistory
	}
	return toSerialize, nil
}

func (o *MedicationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicationRequest := _MedicationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicationRequest)

	if err != nil {
		return err
	}

	*o = MedicationRequest(varMedicationRequest)

	return err
}

type NullableMedicationRequest struct {
	value *MedicationRequest
	isSet bool
}

func (v NullableMedicationRequest) Get() *MedicationRequest {
	return v.value
}

func (v *NullableMedicationRequest) Set(val *MedicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationRequest(val *MedicationRequest) *NullableMedicationRequest {
	return &NullableMedicationRequest{value: val, isSet: true}
}

func (v NullableMedicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


