/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the UserConfigurationMenuLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConfigurationMenuLink{}

// UserConfigurationMenuLink Shortcut links to URLs.
type UserConfigurationMenuLink struct {
	// A sequence of Unicode characters
	Name string `json:"name"`
	// A URI that is a literal reference
	Target string `json:"target"`
	AdditionalProperties map[string]interface{}
}

type _UserConfigurationMenuLink UserConfigurationMenuLink

// NewUserConfigurationMenuLink instantiates a new UserConfigurationMenuLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfigurationMenuLink(name string, target string) *UserConfigurationMenuLink {
	this := UserConfigurationMenuLink{}
	this.Name = name
	this.Target = target
	return &this
}

// NewUserConfigurationMenuLinkWithDefaults instantiates a new UserConfigurationMenuLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigurationMenuLinkWithDefaults() *UserConfigurationMenuLink {
	this := UserConfigurationMenuLink{}
	return &this
}

// GetName returns the Name field value
func (o *UserConfigurationMenuLink) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserConfigurationMenuLink) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserConfigurationMenuLink) SetName(v string) {
	o.Name = v
}

// GetTarget returns the Target field value
func (o *UserConfigurationMenuLink) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *UserConfigurationMenuLink) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *UserConfigurationMenuLink) SetTarget(v string) {
	o.Target = v
}

func (o UserConfigurationMenuLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConfigurationMenuLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["target"] = o.Target

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserConfigurationMenuLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserConfigurationMenuLink := _UserConfigurationMenuLink{}

	err = json.Unmarshal(data, &varUserConfigurationMenuLink)

	if err != nil {
		return err
	}

	*o = UserConfigurationMenuLink(varUserConfigurationMenuLink)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "target")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserConfigurationMenuLink struct {
	value *UserConfigurationMenuLink
	isSet bool
}

func (v NullableUserConfigurationMenuLink) Get() *UserConfigurationMenuLink {
	return v.value
}

func (v *NullableUserConfigurationMenuLink) Set(val *UserConfigurationMenuLink) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfigurationMenuLink) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfigurationMenuLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfigurationMenuLink(val *UserConfigurationMenuLink) *NullableUserConfigurationMenuLink {
	return &NullableUserConfigurationMenuLink{value: val, isSet: true}
}

func (v NullableUserConfigurationMenuLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfigurationMenuLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


