/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BiologicallyDerivedProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BiologicallyDerivedProduct{}

// BiologicallyDerivedProduct A material substance originating from a biological entity intended to be transplanted or infused into another (possibly the same) biological entity.
type BiologicallyDerivedProduct struct {
	// This is a BiologicallyDerivedProduct resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
	Identifier []Identifier `json:"identifier,omitempty"`
	// Broad category of this product.
	ProductCategory *string `json:"productCategory,omitempty"`
	// A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
	ProductCode *CodeableConcept `json:"productCode,omitempty"`
	// Whether the product is currently available.
	Status *string `json:"status,omitempty"`
	// Procedure request to obtain this biologically derived product.
	Request []Reference `json:"request,omitempty"`
	// A whole number
	Quantity *float32 `json:"quantity,omitempty"`
	// Parent product (if any).
	Parent []Reference `json:"parent,omitempty"`
	// How this product was collected.
	Collection *BiologicallyDerivedProductCollection `json:"collection,omitempty"`
	// Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
	Processing []BiologicallyDerivedProductProcessing `json:"processing,omitempty"`
	// Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
	Manipulation *BiologicallyDerivedProductManipulation `json:"manipulation,omitempty"`
	// Product storage.
	Storage []BiologicallyDerivedProductStorage `json:"storage,omitempty"`
}

type _BiologicallyDerivedProduct BiologicallyDerivedProduct

// NewBiologicallyDerivedProduct instantiates a new BiologicallyDerivedProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiologicallyDerivedProduct(resourceType string) *BiologicallyDerivedProduct {
	this := BiologicallyDerivedProduct{}
	this.ResourceType = resourceType
	return &this
}

// NewBiologicallyDerivedProductWithDefaults instantiates a new BiologicallyDerivedProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiologicallyDerivedProductWithDefaults() *BiologicallyDerivedProduct {
	this := BiologicallyDerivedProduct{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *BiologicallyDerivedProduct) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *BiologicallyDerivedProduct) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BiologicallyDerivedProduct) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *BiologicallyDerivedProduct) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *BiologicallyDerivedProduct) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *BiologicallyDerivedProduct) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *BiologicallyDerivedProduct) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *BiologicallyDerivedProduct) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *BiologicallyDerivedProduct) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *BiologicallyDerivedProduct) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *BiologicallyDerivedProduct) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetProductCategory returns the ProductCategory field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetProductCategory() string {
	if o == nil || IsNil(o.ProductCategory) {
		var ret string
		return ret
	}
	return *o.ProductCategory
}

// GetProductCategoryOk returns a tuple with the ProductCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetProductCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCategory) {
		return nil, false
	}
	return o.ProductCategory, true
}

// HasProductCategory returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasProductCategory() bool {
	if o != nil && !IsNil(o.ProductCategory) {
		return true
	}

	return false
}

// SetProductCategory gets a reference to the given string and assigns it to the ProductCategory field.
func (o *BiologicallyDerivedProduct) SetProductCategory(v string) {
	o.ProductCategory = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetProductCode() CodeableConcept {
	if o == nil || IsNil(o.ProductCode) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetProductCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given CodeableConcept and assigns it to the ProductCode field.
func (o *BiologicallyDerivedProduct) SetProductCode(v CodeableConcept) {
	o.ProductCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BiologicallyDerivedProduct) SetStatus(v string) {
	o.Status = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetRequest() []Reference {
	if o == nil || IsNil(o.Request) {
		var ret []Reference
		return ret
	}
	return o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetRequestOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given []Reference and assigns it to the Request field.
func (o *BiologicallyDerivedProduct) SetRequest(v []Reference) {
	o.Request = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *BiologicallyDerivedProduct) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetParent() []Reference {
	if o == nil || IsNil(o.Parent) {
		var ret []Reference
		return ret
	}
	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetParentOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given []Reference and assigns it to the Parent field.
func (o *BiologicallyDerivedProduct) SetParent(v []Reference) {
	o.Parent = v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetCollection() BiologicallyDerivedProductCollection {
	if o == nil || IsNil(o.Collection) {
		var ret BiologicallyDerivedProductCollection
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetCollectionOk() (*BiologicallyDerivedProductCollection, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given BiologicallyDerivedProductCollection and assigns it to the Collection field.
func (o *BiologicallyDerivedProduct) SetCollection(v BiologicallyDerivedProductCollection) {
	o.Collection = &v
}

// GetProcessing returns the Processing field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetProcessing() []BiologicallyDerivedProductProcessing {
	if o == nil || IsNil(o.Processing) {
		var ret []BiologicallyDerivedProductProcessing
		return ret
	}
	return o.Processing
}

// GetProcessingOk returns a tuple with the Processing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetProcessingOk() ([]BiologicallyDerivedProductProcessing, bool) {
	if o == nil || IsNil(o.Processing) {
		return nil, false
	}
	return o.Processing, true
}

// HasProcessing returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasProcessing() bool {
	if o != nil && !IsNil(o.Processing) {
		return true
	}

	return false
}

// SetProcessing gets a reference to the given []BiologicallyDerivedProductProcessing and assigns it to the Processing field.
func (o *BiologicallyDerivedProduct) SetProcessing(v []BiologicallyDerivedProductProcessing) {
	o.Processing = v
}

// GetManipulation returns the Manipulation field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetManipulation() BiologicallyDerivedProductManipulation {
	if o == nil || IsNil(o.Manipulation) {
		var ret BiologicallyDerivedProductManipulation
		return ret
	}
	return *o.Manipulation
}

// GetManipulationOk returns a tuple with the Manipulation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetManipulationOk() (*BiologicallyDerivedProductManipulation, bool) {
	if o == nil || IsNil(o.Manipulation) {
		return nil, false
	}
	return o.Manipulation, true
}

// HasManipulation returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasManipulation() bool {
	if o != nil && !IsNil(o.Manipulation) {
		return true
	}

	return false
}

// SetManipulation gets a reference to the given BiologicallyDerivedProductManipulation and assigns it to the Manipulation field.
func (o *BiologicallyDerivedProduct) SetManipulation(v BiologicallyDerivedProductManipulation) {
	o.Manipulation = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *BiologicallyDerivedProduct) GetStorage() []BiologicallyDerivedProductStorage {
	if o == nil || IsNil(o.Storage) {
		var ret []BiologicallyDerivedProductStorage
		return ret
	}
	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProduct) GetStorageOk() ([]BiologicallyDerivedProductStorage, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *BiologicallyDerivedProduct) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given []BiologicallyDerivedProductStorage and assigns it to the Storage field.
func (o *BiologicallyDerivedProduct) SetStorage(v []BiologicallyDerivedProductStorage) {
	o.Storage = v
}

func (o BiologicallyDerivedProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BiologicallyDerivedProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ProductCategory) {
		toSerialize["productCategory"] = o.ProductCategory
	}
	if !IsNil(o.ProductCode) {
		toSerialize["productCode"] = o.ProductCode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !IsNil(o.Processing) {
		toSerialize["processing"] = o.Processing
	}
	if !IsNil(o.Manipulation) {
		toSerialize["manipulation"] = o.Manipulation
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	return toSerialize, nil
}

func (o *BiologicallyDerivedProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBiologicallyDerivedProduct := _BiologicallyDerivedProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBiologicallyDerivedProduct)

	if err != nil {
		return err
	}

	*o = BiologicallyDerivedProduct(varBiologicallyDerivedProduct)

	return err
}

type NullableBiologicallyDerivedProduct struct {
	value *BiologicallyDerivedProduct
	isSet bool
}

func (v NullableBiologicallyDerivedProduct) Get() *BiologicallyDerivedProduct {
	return v.value
}

func (v *NullableBiologicallyDerivedProduct) Set(val *BiologicallyDerivedProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableBiologicallyDerivedProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableBiologicallyDerivedProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiologicallyDerivedProduct(val *BiologicallyDerivedProduct) *NullableBiologicallyDerivedProduct {
	return &NullableBiologicallyDerivedProduct{value: val, isSet: true}
}

func (v NullableBiologicallyDerivedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiologicallyDerivedProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


