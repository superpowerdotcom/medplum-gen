/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Annotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Annotation{}

// Annotation A  text note which also  contains information about who made the statement and when.
type Annotation struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// The individual responsible for making the annotation.
	AuthorReference *Reference `json:"authorReference,omitempty"`
	// The individual responsible for making the annotation.
	AuthorString *string `json:"authorString,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Time *string `json:"time,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Text *string `json:"text,omitempty"`
}

// NewAnnotation instantiates a new Annotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotation() *Annotation {
	this := Annotation{}
	return &this
}

// NewAnnotationWithDefaults instantiates a new Annotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationWithDefaults() *Annotation {
	this := Annotation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Annotation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Annotation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Annotation) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Annotation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Annotation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Annotation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetAuthorReference returns the AuthorReference field value if set, zero value otherwise.
func (o *Annotation) GetAuthorReference() Reference {
	if o == nil || IsNil(o.AuthorReference) {
		var ret Reference
		return ret
	}
	return *o.AuthorReference
}

// GetAuthorReferenceOk returns a tuple with the AuthorReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetAuthorReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.AuthorReference) {
		return nil, false
	}
	return o.AuthorReference, true
}

// HasAuthorReference returns a boolean if a field has been set.
func (o *Annotation) HasAuthorReference() bool {
	if o != nil && !IsNil(o.AuthorReference) {
		return true
	}

	return false
}

// SetAuthorReference gets a reference to the given Reference and assigns it to the AuthorReference field.
func (o *Annotation) SetAuthorReference(v Reference) {
	o.AuthorReference = &v
}

// GetAuthorString returns the AuthorString field value if set, zero value otherwise.
func (o *Annotation) GetAuthorString() string {
	if o == nil || IsNil(o.AuthorString) {
		var ret string
		return ret
	}
	return *o.AuthorString
}

// GetAuthorStringOk returns a tuple with the AuthorString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetAuthorStringOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorString) {
		return nil, false
	}
	return o.AuthorString, true
}

// HasAuthorString returns a boolean if a field has been set.
func (o *Annotation) HasAuthorString() bool {
	if o != nil && !IsNil(o.AuthorString) {
		return true
	}

	return false
}

// SetAuthorString gets a reference to the given string and assigns it to the AuthorString field.
func (o *Annotation) SetAuthorString(v string) {
	o.AuthorString = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Annotation) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Annotation) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *Annotation) SetTime(v string) {
	o.Time = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Annotation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Annotation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Annotation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Annotation) SetText(v string) {
	o.Text = &v
}

func (o Annotation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Annotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.AuthorReference) {
		toSerialize["authorReference"] = o.AuthorReference
	}
	if !IsNil(o.AuthorString) {
		toSerialize["authorString"] = o.AuthorString
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableAnnotation struct {
	value *Annotation
	isSet bool
}

func (v NullableAnnotation) Get() *Annotation {
	return v.value
}

func (v *NullableAnnotation) Set(val *Annotation) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotation(val *Annotation) *NullableAnnotation {
	return &NullableAnnotation{value: val, isSet: true}
}

func (v NullableAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


