/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ValueSetContains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueSetContains{}

// ValueSetContains A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
type ValueSetContains struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// String of characters used to identify a name or a resource
	System *string `json:"system,omitempty"`
	// Value of \"true\" or \"false\"
	Abstract *bool `json:"abstract,omitempty"`
	// Value of \"true\" or \"false\"
	Inactive *bool `json:"inactive,omitempty"`
	// A sequence of Unicode characters
	Version *string `json:"version,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Code *string `json:"code,omitempty"`
	// A sequence of Unicode characters
	Display *string `json:"display,omitempty"`
	// Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
	Designation []ValueSetDesignation `json:"designation,omitempty"`
	// Other codes and entries contained under this entry in the hierarchy.
	Contains []ValueSetContains `json:"contains,omitempty"`
}

// NewValueSetContains instantiates a new ValueSetContains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueSetContains() *ValueSetContains {
	this := ValueSetContains{}
	return &this
}

// NewValueSetContainsWithDefaults instantiates a new ValueSetContains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueSetContainsWithDefaults() *ValueSetContains {
	this := ValueSetContains{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ValueSetContains) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ValueSetContains) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ValueSetContains) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ValueSetContains) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ValueSetContains) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ValueSetContains) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ValueSetContains) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ValueSetContains) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ValueSetContains) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *ValueSetContains) GetSystem() string {
	if o == nil || IsNil(o.System) {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetSystemOk() (*string, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *ValueSetContains) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *ValueSetContains) SetSystem(v string) {
	o.System = &v
}

// GetAbstract returns the Abstract field value if set, zero value otherwise.
func (o *ValueSetContains) GetAbstract() bool {
	if o == nil || IsNil(o.Abstract) {
		var ret bool
		return ret
	}
	return *o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetAbstractOk() (*bool, bool) {
	if o == nil || IsNil(o.Abstract) {
		return nil, false
	}
	return o.Abstract, true
}

// HasAbstract returns a boolean if a field has been set.
func (o *ValueSetContains) HasAbstract() bool {
	if o != nil && !IsNil(o.Abstract) {
		return true
	}

	return false
}

// SetAbstract gets a reference to the given bool and assigns it to the Abstract field.
func (o *ValueSetContains) SetAbstract(v bool) {
	o.Abstract = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ValueSetContains) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ValueSetContains) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ValueSetContains) SetInactive(v bool) {
	o.Inactive = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ValueSetContains) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ValueSetContains) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ValueSetContains) SetVersion(v string) {
	o.Version = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ValueSetContains) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ValueSetContains) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ValueSetContains) SetCode(v string) {
	o.Code = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ValueSetContains) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ValueSetContains) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *ValueSetContains) SetDisplay(v string) {
	o.Display = &v
}

// GetDesignation returns the Designation field value if set, zero value otherwise.
func (o *ValueSetContains) GetDesignation() []ValueSetDesignation {
	if o == nil || IsNil(o.Designation) {
		var ret []ValueSetDesignation
		return ret
	}
	return o.Designation
}

// GetDesignationOk returns a tuple with the Designation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetDesignationOk() ([]ValueSetDesignation, bool) {
	if o == nil || IsNil(o.Designation) {
		return nil, false
	}
	return o.Designation, true
}

// HasDesignation returns a boolean if a field has been set.
func (o *ValueSetContains) HasDesignation() bool {
	if o != nil && !IsNil(o.Designation) {
		return true
	}

	return false
}

// SetDesignation gets a reference to the given []ValueSetDesignation and assigns it to the Designation field.
func (o *ValueSetContains) SetDesignation(v []ValueSetDesignation) {
	o.Designation = v
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *ValueSetContains) GetContains() []ValueSetContains {
	if o == nil || IsNil(o.Contains) {
		var ret []ValueSetContains
		return ret
	}
	return o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueSetContains) GetContainsOk() ([]ValueSetContains, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *ValueSetContains) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given []ValueSetContains and assigns it to the Contains field.
func (o *ValueSetContains) SetContains(v []ValueSetContains) {
	o.Contains = v
}

func (o ValueSetContains) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueSetContains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.Abstract) {
		toSerialize["abstract"] = o.Abstract
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Designation) {
		toSerialize["designation"] = o.Designation
	}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	return toSerialize, nil
}

type NullableValueSetContains struct {
	value *ValueSetContains
	isSet bool
}

func (v NullableValueSetContains) Get() *ValueSetContains {
	return v.value
}

func (v *NullableValueSetContains) Set(val *ValueSetContains) {
	v.value = val
	v.isSet = true
}

func (v NullableValueSetContains) IsSet() bool {
	return v.isSet
}

func (v *NullableValueSetContains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueSetContains(val *ValueSetContains) *NullableValueSetContains {
	return &NullableValueSetContains{value: val, isSet: true}
}

func (v NullableValueSetContains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueSetContains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


