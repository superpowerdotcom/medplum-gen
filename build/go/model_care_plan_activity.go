/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CarePlanActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CarePlanActivity{}

// CarePlanActivity Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
type CarePlanActivity struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
	OutcomeCodeableConcept []CodeableConcept `json:"outcomeCodeableConcept,omitempty"`
	// Details of the outcome or action resulting from the activity.  The reference to an \"event\" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
	OutcomeReference []Reference `json:"outcomeReference,omitempty"`
	// Notes about the adherence/status/progress of the activity.
	Progress []Annotation `json:"progress,omitempty"`
	// The details of the proposed activity represented in a specific resource.
	Reference *Reference `json:"reference,omitempty"`
	// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
	Detail *CarePlanDetail `json:"detail,omitempty"`
}

// NewCarePlanActivity instantiates a new CarePlanActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarePlanActivity() *CarePlanActivity {
	this := CarePlanActivity{}
	return &this
}

// NewCarePlanActivityWithDefaults instantiates a new CarePlanActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarePlanActivityWithDefaults() *CarePlanActivity {
	this := CarePlanActivity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CarePlanActivity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CarePlanActivity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CarePlanActivity) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CarePlanActivity) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CarePlanActivity) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CarePlanActivity) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CarePlanActivity) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CarePlanActivity) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CarePlanActivity) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetOutcomeCodeableConcept returns the OutcomeCodeableConcept field value if set, zero value otherwise.
func (o *CarePlanActivity) GetOutcomeCodeableConcept() []CodeableConcept {
	if o == nil || IsNil(o.OutcomeCodeableConcept) {
		var ret []CodeableConcept
		return ret
	}
	return o.OutcomeCodeableConcept
}

// GetOutcomeCodeableConceptOk returns a tuple with the OutcomeCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetOutcomeCodeableConceptOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.OutcomeCodeableConcept) {
		return nil, false
	}
	return o.OutcomeCodeableConcept, true
}

// HasOutcomeCodeableConcept returns a boolean if a field has been set.
func (o *CarePlanActivity) HasOutcomeCodeableConcept() bool {
	if o != nil && !IsNil(o.OutcomeCodeableConcept) {
		return true
	}

	return false
}

// SetOutcomeCodeableConcept gets a reference to the given []CodeableConcept and assigns it to the OutcomeCodeableConcept field.
func (o *CarePlanActivity) SetOutcomeCodeableConcept(v []CodeableConcept) {
	o.OutcomeCodeableConcept = v
}

// GetOutcomeReference returns the OutcomeReference field value if set, zero value otherwise.
func (o *CarePlanActivity) GetOutcomeReference() []Reference {
	if o == nil || IsNil(o.OutcomeReference) {
		var ret []Reference
		return ret
	}
	return o.OutcomeReference
}

// GetOutcomeReferenceOk returns a tuple with the OutcomeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetOutcomeReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.OutcomeReference) {
		return nil, false
	}
	return o.OutcomeReference, true
}

// HasOutcomeReference returns a boolean if a field has been set.
func (o *CarePlanActivity) HasOutcomeReference() bool {
	if o != nil && !IsNil(o.OutcomeReference) {
		return true
	}

	return false
}

// SetOutcomeReference gets a reference to the given []Reference and assigns it to the OutcomeReference field.
func (o *CarePlanActivity) SetOutcomeReference(v []Reference) {
	o.OutcomeReference = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *CarePlanActivity) GetProgress() []Annotation {
	if o == nil || IsNil(o.Progress) {
		var ret []Annotation
		return ret
	}
	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetProgressOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *CarePlanActivity) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given []Annotation and assigns it to the Progress field.
func (o *CarePlanActivity) SetProgress(v []Annotation) {
	o.Progress = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *CarePlanActivity) GetReference() Reference {
	if o == nil || IsNil(o.Reference) {
		var ret Reference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *CarePlanActivity) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given Reference and assigns it to the Reference field.
func (o *CarePlanActivity) SetReference(v Reference) {
	o.Reference = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *CarePlanActivity) GetDetail() CarePlanDetail {
	if o == nil || IsNil(o.Detail) {
		var ret CarePlanDetail
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanActivity) GetDetailOk() (*CarePlanDetail, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *CarePlanActivity) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given CarePlanDetail and assigns it to the Detail field.
func (o *CarePlanActivity) SetDetail(v CarePlanDetail) {
	o.Detail = &v
}

func (o CarePlanActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CarePlanActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.OutcomeCodeableConcept) {
		toSerialize["outcomeCodeableConcept"] = o.OutcomeCodeableConcept
	}
	if !IsNil(o.OutcomeReference) {
		toSerialize["outcomeReference"] = o.OutcomeReference
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableCarePlanActivity struct {
	value *CarePlanActivity
	isSet bool
}

func (v NullableCarePlanActivity) Get() *CarePlanActivity {
	return v.value
}

func (v *NullableCarePlanActivity) Set(val *CarePlanActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableCarePlanActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableCarePlanActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarePlanActivity(val *CarePlanActivity) *NullableCarePlanActivity {
	return &NullableCarePlanActivity{value: val, isSet: true}
}

func (v NullableCarePlanActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarePlanActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


