/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstancePolymerRepeatUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstancePolymerRepeatUnit{}

// SubstancePolymerRepeatUnit Todo.
type SubstancePolymerRepeatUnit struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Todo.
	OrientationOfPolymerisation *CodeableConcept `json:"orientationOfPolymerisation,omitempty"`
	// A sequence of Unicode characters
	RepeatUnit *string `json:"repeatUnit,omitempty"`
	// Todo.
	Amount *SubstanceAmount `json:"amount,omitempty"`
	// Todo.
	DegreeOfPolymerisation []SubstancePolymerDegreeOfPolymerisation `json:"degreeOfPolymerisation,omitempty"`
	// Todo.
	StructuralRepresentation []SubstancePolymerStructuralRepresentation `json:"structuralRepresentation,omitempty"`
}

// NewSubstancePolymerRepeatUnit instantiates a new SubstancePolymerRepeatUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstancePolymerRepeatUnit() *SubstancePolymerRepeatUnit {
	this := SubstancePolymerRepeatUnit{}
	return &this
}

// NewSubstancePolymerRepeatUnitWithDefaults instantiates a new SubstancePolymerRepeatUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstancePolymerRepeatUnitWithDefaults() *SubstancePolymerRepeatUnit {
	this := SubstancePolymerRepeatUnit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstancePolymerRepeatUnit) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstancePolymerRepeatUnit) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstancePolymerRepeatUnit) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetOrientationOfPolymerisation returns the OrientationOfPolymerisation field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetOrientationOfPolymerisation() CodeableConcept {
	if o == nil || IsNil(o.OrientationOfPolymerisation) {
		var ret CodeableConcept
		return ret
	}
	return *o.OrientationOfPolymerisation
}

// GetOrientationOfPolymerisationOk returns a tuple with the OrientationOfPolymerisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetOrientationOfPolymerisationOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OrientationOfPolymerisation) {
		return nil, false
	}
	return o.OrientationOfPolymerisation, true
}

// HasOrientationOfPolymerisation returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasOrientationOfPolymerisation() bool {
	if o != nil && !IsNil(o.OrientationOfPolymerisation) {
		return true
	}

	return false
}

// SetOrientationOfPolymerisation gets a reference to the given CodeableConcept and assigns it to the OrientationOfPolymerisation field.
func (o *SubstancePolymerRepeatUnit) SetOrientationOfPolymerisation(v CodeableConcept) {
	o.OrientationOfPolymerisation = &v
}

// GetRepeatUnit returns the RepeatUnit field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetRepeatUnit() string {
	if o == nil || IsNil(o.RepeatUnit) {
		var ret string
		return ret
	}
	return *o.RepeatUnit
}

// GetRepeatUnitOk returns a tuple with the RepeatUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetRepeatUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatUnit) {
		return nil, false
	}
	return o.RepeatUnit, true
}

// HasRepeatUnit returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasRepeatUnit() bool {
	if o != nil && !IsNil(o.RepeatUnit) {
		return true
	}

	return false
}

// SetRepeatUnit gets a reference to the given string and assigns it to the RepeatUnit field.
func (o *SubstancePolymerRepeatUnit) SetRepeatUnit(v string) {
	o.RepeatUnit = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetAmount() SubstanceAmount {
	if o == nil || IsNil(o.Amount) {
		var ret SubstanceAmount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetAmountOk() (*SubstanceAmount, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given SubstanceAmount and assigns it to the Amount field.
func (o *SubstancePolymerRepeatUnit) SetAmount(v SubstanceAmount) {
	o.Amount = &v
}

// GetDegreeOfPolymerisation returns the DegreeOfPolymerisation field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetDegreeOfPolymerisation() []SubstancePolymerDegreeOfPolymerisation {
	if o == nil || IsNil(o.DegreeOfPolymerisation) {
		var ret []SubstancePolymerDegreeOfPolymerisation
		return ret
	}
	return o.DegreeOfPolymerisation
}

// GetDegreeOfPolymerisationOk returns a tuple with the DegreeOfPolymerisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetDegreeOfPolymerisationOk() ([]SubstancePolymerDegreeOfPolymerisation, bool) {
	if o == nil || IsNil(o.DegreeOfPolymerisation) {
		return nil, false
	}
	return o.DegreeOfPolymerisation, true
}

// HasDegreeOfPolymerisation returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasDegreeOfPolymerisation() bool {
	if o != nil && !IsNil(o.DegreeOfPolymerisation) {
		return true
	}

	return false
}

// SetDegreeOfPolymerisation gets a reference to the given []SubstancePolymerDegreeOfPolymerisation and assigns it to the DegreeOfPolymerisation field.
func (o *SubstancePolymerRepeatUnit) SetDegreeOfPolymerisation(v []SubstancePolymerDegreeOfPolymerisation) {
	o.DegreeOfPolymerisation = v
}

// GetStructuralRepresentation returns the StructuralRepresentation field value if set, zero value otherwise.
func (o *SubstancePolymerRepeatUnit) GetStructuralRepresentation() []SubstancePolymerStructuralRepresentation {
	if o == nil || IsNil(o.StructuralRepresentation) {
		var ret []SubstancePolymerStructuralRepresentation
		return ret
	}
	return o.StructuralRepresentation
}

// GetStructuralRepresentationOk returns a tuple with the StructuralRepresentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeatUnit) GetStructuralRepresentationOk() ([]SubstancePolymerStructuralRepresentation, bool) {
	if o == nil || IsNil(o.StructuralRepresentation) {
		return nil, false
	}
	return o.StructuralRepresentation, true
}

// HasStructuralRepresentation returns a boolean if a field has been set.
func (o *SubstancePolymerRepeatUnit) HasStructuralRepresentation() bool {
	if o != nil && !IsNil(o.StructuralRepresentation) {
		return true
	}

	return false
}

// SetStructuralRepresentation gets a reference to the given []SubstancePolymerStructuralRepresentation and assigns it to the StructuralRepresentation field.
func (o *SubstancePolymerRepeatUnit) SetStructuralRepresentation(v []SubstancePolymerStructuralRepresentation) {
	o.StructuralRepresentation = v
}

func (o SubstancePolymerRepeatUnit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstancePolymerRepeatUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.OrientationOfPolymerisation) {
		toSerialize["orientationOfPolymerisation"] = o.OrientationOfPolymerisation
	}
	if !IsNil(o.RepeatUnit) {
		toSerialize["repeatUnit"] = o.RepeatUnit
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.DegreeOfPolymerisation) {
		toSerialize["degreeOfPolymerisation"] = o.DegreeOfPolymerisation
	}
	if !IsNil(o.StructuralRepresentation) {
		toSerialize["structuralRepresentation"] = o.StructuralRepresentation
	}
	return toSerialize, nil
}

type NullableSubstancePolymerRepeatUnit struct {
	value *SubstancePolymerRepeatUnit
	isSet bool
}

func (v NullableSubstancePolymerRepeatUnit) Get() *SubstancePolymerRepeatUnit {
	return v.value
}

func (v *NullableSubstancePolymerRepeatUnit) Set(val *SubstancePolymerRepeatUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstancePolymerRepeatUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstancePolymerRepeatUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstancePolymerRepeatUnit(val *SubstancePolymerRepeatUnit) *NullableSubstancePolymerRepeatUnit {
	return &NullableSubstancePolymerRepeatUnit{value: val, isSet: true}
}

func (v NullableSubstancePolymerRepeatUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstancePolymerRepeatUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


