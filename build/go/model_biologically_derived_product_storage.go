/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the BiologicallyDerivedProductStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BiologicallyDerivedProductStorage{}

// BiologicallyDerivedProductStorage A material substance originating from a biological entity intended to be transplanted or infused into another (possibly the same) biological entity.
type BiologicallyDerivedProductStorage struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A rational number with implicit precision
	Temperature *float32 `json:"temperature,omitempty"`
	// Temperature scale used.
	Scale *string `json:"scale,omitempty"`
	// Storage timeperiod.
	Duration *Period `json:"duration,omitempty"`
}

// NewBiologicallyDerivedProductStorage instantiates a new BiologicallyDerivedProductStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiologicallyDerivedProductStorage() *BiologicallyDerivedProductStorage {
	this := BiologicallyDerivedProductStorage{}
	return &this
}

// NewBiologicallyDerivedProductStorageWithDefaults instantiates a new BiologicallyDerivedProductStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiologicallyDerivedProductStorageWithDefaults() *BiologicallyDerivedProductStorage {
	this := BiologicallyDerivedProductStorage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BiologicallyDerivedProductStorage) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *BiologicallyDerivedProductStorage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *BiologicallyDerivedProductStorage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BiologicallyDerivedProductStorage) SetDescription(v string) {
	o.Description = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *BiologicallyDerivedProductStorage) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetScale() string {
	if o == nil || IsNil(o.Scale) {
		var ret string
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetScaleOk() (*string, bool) {
	if o == nil || IsNil(o.Scale) {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasScale() bool {
	if o != nil && !IsNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given string and assigns it to the Scale field.
func (o *BiologicallyDerivedProductStorage) SetScale(v string) {
	o.Scale = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *BiologicallyDerivedProductStorage) GetDuration() Period {
	if o == nil || IsNil(o.Duration) {
		var ret Period
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiologicallyDerivedProductStorage) GetDurationOk() (*Period, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *BiologicallyDerivedProductStorage) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Period and assigns it to the Duration field.
func (o *BiologicallyDerivedProductStorage) SetDuration(v Period) {
	o.Duration = &v
}

func (o BiologicallyDerivedProductStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BiologicallyDerivedProductStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return toSerialize, nil
}

type NullableBiologicallyDerivedProductStorage struct {
	value *BiologicallyDerivedProductStorage
	isSet bool
}

func (v NullableBiologicallyDerivedProductStorage) Get() *BiologicallyDerivedProductStorage {
	return v.value
}

func (v *NullableBiologicallyDerivedProductStorage) Set(val *BiologicallyDerivedProductStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableBiologicallyDerivedProductStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableBiologicallyDerivedProductStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiologicallyDerivedProductStorage(val *BiologicallyDerivedProductStorage) *NullableBiologicallyDerivedProductStorage {
	return &NullableBiologicallyDerivedProductStorage{value: val, isSet: true}
}

func (v NullableBiologicallyDerivedProductStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiologicallyDerivedProductStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


