/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExplanationOfBenefit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplanationOfBenefit{}

// ExplanationOfBenefit This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
type ExplanationOfBenefit struct {
	// This is a ExplanationOfBenefit resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this explanation of benefit.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The status of the resource instance.
	Status *string `json:"status,omitempty"`
	// The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	Type CodeableConcept `json:"type"`
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Use *string `json:"use,omitempty"`
	// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
	Patient Reference `json:"patient"`
	// The period for which charges are being submitted.
	BillablePeriod *Period `json:"billablePeriod,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Created *string `json:"created,omitempty"`
	// Individual who created the claim, predetermination or preauthorization.
	Enterer *Reference `json:"enterer,omitempty"`
	// The party responsible for authorization, adjudication and reimbursement.
	Insurer Reference `json:"insurer"`
	// The provider which is responsible for the claim, predetermination or preauthorization.
	Provider Reference `json:"provider"`
	// The provider-required urgency of processing the request. Typical values include: stat, routine deferred.
	Priority *CodeableConcept `json:"priority,omitempty"`
	// A code to indicate whether and for whom funds are to be reserved for future claims.
	FundsReserveRequested *CodeableConcept `json:"fundsReserveRequested,omitempty"`
	// A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
	FundsReserve *CodeableConcept `json:"fundsReserve,omitempty"`
	// Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
	Related []ExplanationOfBenefitRelated `json:"related,omitempty"`
	// Prescription to support the dispensing of pharmacy, device or vision products.
	Prescription *Reference `json:"prescription,omitempty"`
	// Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
	OriginalPrescription *Reference `json:"originalPrescription,omitempty"`
	// The party to be reimbursed for cost of the products and services according to the terms of the policy.
	Payee *ExplanationOfBenefitPayee `json:"payee,omitempty"`
	// A reference to a referral resource.
	Referral *Reference `json:"referral,omitempty"`
	// Facility where the services were provided.
	Facility *Reference `json:"facility,omitempty"`
	// The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
	Claim *Reference `json:"claim,omitempty"`
	// The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
	ClaimResponse *Reference `json:"claimResponse,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Outcome *string `json:"outcome,omitempty"`
	// A sequence of Unicode characters
	Disposition *string `json:"disposition,omitempty"`
	// Reference from the Insurer which is used in later communications which refers to this adjudication.
	PreAuthRef []string `json:"preAuthRef,omitempty"`
	// The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
	PreAuthRefPeriod []Period `json:"preAuthRefPeriod,omitempty"`
	// The members of the team who provided the products and services.
	CareTeam []ExplanationOfBenefitCareTeam `json:"careTeam,omitempty"`
	// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
	SupportingInfo []ExplanationOfBenefitSupportingInfo `json:"supportingInfo,omitempty"`
	// Information about diagnoses relevant to the claim items.
	Diagnosis []ExplanationOfBenefitDiagnosis `json:"diagnosis,omitempty"`
	// Procedures performed on the patient relevant to the billing items with the claim.
	Procedure []ExplanationOfBenefitProcedure `json:"procedure,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Precedence *float32 `json:"precedence,omitempty"`
	// Financial instruments for reimbursement for the health care products and services specified on the claim.
	Insurance []ExplanationOfBenefitInsurance `json:"insurance"`
	// Details of a accident which resulted in injuries which required the products and services listed in the claim.
	Accident *ExplanationOfBenefitAccident `json:"accident,omitempty"`
	// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
	Item []ExplanationOfBenefitItem `json:"item,omitempty"`
	// The first-tier service adjudications for payor added product or service lines.
	AddItem []ExplanationOfBenefitAddItem `json:"addItem,omitempty"`
	// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
	Adjudication []ExplanationOfBenefitAdjudication `json:"adjudication,omitempty"`
	// Categorized monetary totals for the adjudication.
	Total []ExplanationOfBenefitTotal `json:"total,omitempty"`
	// Payment details for the adjudication of the claim.
	Payment *ExplanationOfBenefitPayment `json:"payment,omitempty"`
	// A code for the form to be used for printing the content.
	FormCode *CodeableConcept `json:"formCode,omitempty"`
	// The actual form, by reference or inclusion, for printing the content or an EOB.
	Form *Attachment `json:"form,omitempty"`
	// A note that describes or explains adjudication results in a human readable form.
	ProcessNote []ExplanationOfBenefitProcessNote `json:"processNote,omitempty"`
	// The term of the benefits documented in this response.
	BenefitPeriod *Period `json:"benefitPeriod,omitempty"`
	// Balance by Benefit Category.
	BenefitBalance []ExplanationOfBenefitBenefitBalance `json:"benefitBalance,omitempty"`
}

type _ExplanationOfBenefit ExplanationOfBenefit

// NewExplanationOfBenefit instantiates a new ExplanationOfBenefit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanationOfBenefit(resourceType string, type_ CodeableConcept, patient Reference, insurer Reference, provider Reference, insurance []ExplanationOfBenefitInsurance) *ExplanationOfBenefit {
	this := ExplanationOfBenefit{}
	this.ResourceType = resourceType
	this.Type = type_
	this.Patient = patient
	this.Insurer = insurer
	this.Provider = provider
	this.Insurance = insurance
	return &this
}

// NewExplanationOfBenefitWithDefaults instantiates a new ExplanationOfBenefit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationOfBenefitWithDefaults() *ExplanationOfBenefit {
	this := ExplanationOfBenefit{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ExplanationOfBenefit) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ExplanationOfBenefit) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExplanationOfBenefit) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ExplanationOfBenefit) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ExplanationOfBenefit) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ExplanationOfBenefit) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ExplanationOfBenefit) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ExplanationOfBenefit) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ExplanationOfBenefit) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ExplanationOfBenefit) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ExplanationOfBenefit) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExplanationOfBenefit) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *ExplanationOfBenefit) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExplanationOfBenefit) SetType(v CodeableConcept) {
	o.Type = v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetSubType() CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetSubTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given CodeableConcept and assigns it to the SubType field.
func (o *ExplanationOfBenefit) SetSubType(v CodeableConcept) {
	o.SubType = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *ExplanationOfBenefit) SetUse(v string) {
	o.Use = &v
}

// GetPatient returns the Patient field value
func (o *ExplanationOfBenefit) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *ExplanationOfBenefit) SetPatient(v Reference) {
	o.Patient = v
}

// GetBillablePeriod returns the BillablePeriod field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetBillablePeriod() Period {
	if o == nil || IsNil(o.BillablePeriod) {
		var ret Period
		return ret
	}
	return *o.BillablePeriod
}

// GetBillablePeriodOk returns a tuple with the BillablePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetBillablePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.BillablePeriod) {
		return nil, false
	}
	return o.BillablePeriod, true
}

// HasBillablePeriod returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasBillablePeriod() bool {
	if o != nil && !IsNil(o.BillablePeriod) {
		return true
	}

	return false
}

// SetBillablePeriod gets a reference to the given Period and assigns it to the BillablePeriod field.
func (o *ExplanationOfBenefit) SetBillablePeriod(v Period) {
	o.BillablePeriod = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ExplanationOfBenefit) SetCreated(v string) {
	o.Created = &v
}

// GetEnterer returns the Enterer field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetEnterer() Reference {
	if o == nil || IsNil(o.Enterer) {
		var ret Reference
		return ret
	}
	return *o.Enterer
}

// GetEntererOk returns a tuple with the Enterer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetEntererOk() (*Reference, bool) {
	if o == nil || IsNil(o.Enterer) {
		return nil, false
	}
	return o.Enterer, true
}

// HasEnterer returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasEnterer() bool {
	if o != nil && !IsNil(o.Enterer) {
		return true
	}

	return false
}

// SetEnterer gets a reference to the given Reference and assigns it to the Enterer field.
func (o *ExplanationOfBenefit) SetEnterer(v Reference) {
	o.Enterer = &v
}

// GetInsurer returns the Insurer field value
func (o *ExplanationOfBenefit) GetInsurer() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Insurer
}

// GetInsurerOk returns a tuple with the Insurer field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetInsurerOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Insurer, true
}

// SetInsurer sets field value
func (o *ExplanationOfBenefit) SetInsurer(v Reference) {
	o.Insurer = v
}

// GetProvider returns the Provider field value
func (o *ExplanationOfBenefit) GetProvider() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetProviderOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ExplanationOfBenefit) SetProvider(v Reference) {
	o.Provider = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPriority() CodeableConcept {
	if o == nil || IsNil(o.Priority) {
		var ret CodeableConcept
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPriorityOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given CodeableConcept and assigns it to the Priority field.
func (o *ExplanationOfBenefit) SetPriority(v CodeableConcept) {
	o.Priority = &v
}

// GetFundsReserveRequested returns the FundsReserveRequested field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetFundsReserveRequested() CodeableConcept {
	if o == nil || IsNil(o.FundsReserveRequested) {
		var ret CodeableConcept
		return ret
	}
	return *o.FundsReserveRequested
}

// GetFundsReserveRequestedOk returns a tuple with the FundsReserveRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetFundsReserveRequestedOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FundsReserveRequested) {
		return nil, false
	}
	return o.FundsReserveRequested, true
}

// HasFundsReserveRequested returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasFundsReserveRequested() bool {
	if o != nil && !IsNil(o.FundsReserveRequested) {
		return true
	}

	return false
}

// SetFundsReserveRequested gets a reference to the given CodeableConcept and assigns it to the FundsReserveRequested field.
func (o *ExplanationOfBenefit) SetFundsReserveRequested(v CodeableConcept) {
	o.FundsReserveRequested = &v
}

// GetFundsReserve returns the FundsReserve field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetFundsReserve() CodeableConcept {
	if o == nil || IsNil(o.FundsReserve) {
		var ret CodeableConcept
		return ret
	}
	return *o.FundsReserve
}

// GetFundsReserveOk returns a tuple with the FundsReserve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetFundsReserveOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FundsReserve) {
		return nil, false
	}
	return o.FundsReserve, true
}

// HasFundsReserve returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasFundsReserve() bool {
	if o != nil && !IsNil(o.FundsReserve) {
		return true
	}

	return false
}

// SetFundsReserve gets a reference to the given CodeableConcept and assigns it to the FundsReserve field.
func (o *ExplanationOfBenefit) SetFundsReserve(v CodeableConcept) {
	o.FundsReserve = &v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetRelated() []ExplanationOfBenefitRelated {
	if o == nil || IsNil(o.Related) {
		var ret []ExplanationOfBenefitRelated
		return ret
	}
	return o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetRelatedOk() ([]ExplanationOfBenefitRelated, bool) {
	if o == nil || IsNil(o.Related) {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasRelated() bool {
	if o != nil && !IsNil(o.Related) {
		return true
	}

	return false
}

// SetRelated gets a reference to the given []ExplanationOfBenefitRelated and assigns it to the Related field.
func (o *ExplanationOfBenefit) SetRelated(v []ExplanationOfBenefitRelated) {
	o.Related = v
}

// GetPrescription returns the Prescription field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPrescription() Reference {
	if o == nil || IsNil(o.Prescription) {
		var ret Reference
		return ret
	}
	return *o.Prescription
}

// GetPrescriptionOk returns a tuple with the Prescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPrescriptionOk() (*Reference, bool) {
	if o == nil || IsNil(o.Prescription) {
		return nil, false
	}
	return o.Prescription, true
}

// HasPrescription returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPrescription() bool {
	if o != nil && !IsNil(o.Prescription) {
		return true
	}

	return false
}

// SetPrescription gets a reference to the given Reference and assigns it to the Prescription field.
func (o *ExplanationOfBenefit) SetPrescription(v Reference) {
	o.Prescription = &v
}

// GetOriginalPrescription returns the OriginalPrescription field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetOriginalPrescription() Reference {
	if o == nil || IsNil(o.OriginalPrescription) {
		var ret Reference
		return ret
	}
	return *o.OriginalPrescription
}

// GetOriginalPrescriptionOk returns a tuple with the OriginalPrescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetOriginalPrescriptionOk() (*Reference, bool) {
	if o == nil || IsNil(o.OriginalPrescription) {
		return nil, false
	}
	return o.OriginalPrescription, true
}

// HasOriginalPrescription returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasOriginalPrescription() bool {
	if o != nil && !IsNil(o.OriginalPrescription) {
		return true
	}

	return false
}

// SetOriginalPrescription gets a reference to the given Reference and assigns it to the OriginalPrescription field.
func (o *ExplanationOfBenefit) SetOriginalPrescription(v Reference) {
	o.OriginalPrescription = &v
}

// GetPayee returns the Payee field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPayee() ExplanationOfBenefitPayee {
	if o == nil || IsNil(o.Payee) {
		var ret ExplanationOfBenefitPayee
		return ret
	}
	return *o.Payee
}

// GetPayeeOk returns a tuple with the Payee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPayeeOk() (*ExplanationOfBenefitPayee, bool) {
	if o == nil || IsNil(o.Payee) {
		return nil, false
	}
	return o.Payee, true
}

// HasPayee returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPayee() bool {
	if o != nil && !IsNil(o.Payee) {
		return true
	}

	return false
}

// SetPayee gets a reference to the given ExplanationOfBenefitPayee and assigns it to the Payee field.
func (o *ExplanationOfBenefit) SetPayee(v ExplanationOfBenefitPayee) {
	o.Payee = &v
}

// GetReferral returns the Referral field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetReferral() Reference {
	if o == nil || IsNil(o.Referral) {
		var ret Reference
		return ret
	}
	return *o.Referral
}

// GetReferralOk returns a tuple with the Referral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetReferralOk() (*Reference, bool) {
	if o == nil || IsNil(o.Referral) {
		return nil, false
	}
	return o.Referral, true
}

// HasReferral returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasReferral() bool {
	if o != nil && !IsNil(o.Referral) {
		return true
	}

	return false
}

// SetReferral gets a reference to the given Reference and assigns it to the Referral field.
func (o *ExplanationOfBenefit) SetReferral(v Reference) {
	o.Referral = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetFacility() Reference {
	if o == nil || IsNil(o.Facility) {
		var ret Reference
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetFacilityOk() (*Reference, bool) {
	if o == nil || IsNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasFacility() bool {
	if o != nil && !IsNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given Reference and assigns it to the Facility field.
func (o *ExplanationOfBenefit) SetFacility(v Reference) {
	o.Facility = &v
}

// GetClaim returns the Claim field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetClaim() Reference {
	if o == nil || IsNil(o.Claim) {
		var ret Reference
		return ret
	}
	return *o.Claim
}

// GetClaimOk returns a tuple with the Claim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetClaimOk() (*Reference, bool) {
	if o == nil || IsNil(o.Claim) {
		return nil, false
	}
	return o.Claim, true
}

// HasClaim returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasClaim() bool {
	if o != nil && !IsNil(o.Claim) {
		return true
	}

	return false
}

// SetClaim gets a reference to the given Reference and assigns it to the Claim field.
func (o *ExplanationOfBenefit) SetClaim(v Reference) {
	o.Claim = &v
}

// GetClaimResponse returns the ClaimResponse field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetClaimResponse() Reference {
	if o == nil || IsNil(o.ClaimResponse) {
		var ret Reference
		return ret
	}
	return *o.ClaimResponse
}

// GetClaimResponseOk returns a tuple with the ClaimResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetClaimResponseOk() (*Reference, bool) {
	if o == nil || IsNil(o.ClaimResponse) {
		return nil, false
	}
	return o.ClaimResponse, true
}

// HasClaimResponse returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasClaimResponse() bool {
	if o != nil && !IsNil(o.ClaimResponse) {
		return true
	}

	return false
}

// SetClaimResponse gets a reference to the given Reference and assigns it to the ClaimResponse field.
func (o *ExplanationOfBenefit) SetClaimResponse(v Reference) {
	o.ClaimResponse = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetOutcome() string {
	if o == nil || IsNil(o.Outcome) {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetOutcomeOk() (*string, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *ExplanationOfBenefit) SetOutcome(v string) {
	o.Outcome = &v
}

// GetDisposition returns the Disposition field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetDisposition() string {
	if o == nil || IsNil(o.Disposition) {
		var ret string
		return ret
	}
	return *o.Disposition
}

// GetDispositionOk returns a tuple with the Disposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetDispositionOk() (*string, bool) {
	if o == nil || IsNil(o.Disposition) {
		return nil, false
	}
	return o.Disposition, true
}

// HasDisposition returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasDisposition() bool {
	if o != nil && !IsNil(o.Disposition) {
		return true
	}

	return false
}

// SetDisposition gets a reference to the given string and assigns it to the Disposition field.
func (o *ExplanationOfBenefit) SetDisposition(v string) {
	o.Disposition = &v
}

// GetPreAuthRef returns the PreAuthRef field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPreAuthRef() []string {
	if o == nil || IsNil(o.PreAuthRef) {
		var ret []string
		return ret
	}
	return o.PreAuthRef
}

// GetPreAuthRefOk returns a tuple with the PreAuthRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPreAuthRefOk() ([]string, bool) {
	if o == nil || IsNil(o.PreAuthRef) {
		return nil, false
	}
	return o.PreAuthRef, true
}

// HasPreAuthRef returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPreAuthRef() bool {
	if o != nil && !IsNil(o.PreAuthRef) {
		return true
	}

	return false
}

// SetPreAuthRef gets a reference to the given []string and assigns it to the PreAuthRef field.
func (o *ExplanationOfBenefit) SetPreAuthRef(v []string) {
	o.PreAuthRef = v
}

// GetPreAuthRefPeriod returns the PreAuthRefPeriod field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPreAuthRefPeriod() []Period {
	if o == nil || IsNil(o.PreAuthRefPeriod) {
		var ret []Period
		return ret
	}
	return o.PreAuthRefPeriod
}

// GetPreAuthRefPeriodOk returns a tuple with the PreAuthRefPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPreAuthRefPeriodOk() ([]Period, bool) {
	if o == nil || IsNil(o.PreAuthRefPeriod) {
		return nil, false
	}
	return o.PreAuthRefPeriod, true
}

// HasPreAuthRefPeriod returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPreAuthRefPeriod() bool {
	if o != nil && !IsNil(o.PreAuthRefPeriod) {
		return true
	}

	return false
}

// SetPreAuthRefPeriod gets a reference to the given []Period and assigns it to the PreAuthRefPeriod field.
func (o *ExplanationOfBenefit) SetPreAuthRefPeriod(v []Period) {
	o.PreAuthRefPeriod = v
}

// GetCareTeam returns the CareTeam field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetCareTeam() []ExplanationOfBenefitCareTeam {
	if o == nil || IsNil(o.CareTeam) {
		var ret []ExplanationOfBenefitCareTeam
		return ret
	}
	return o.CareTeam
}

// GetCareTeamOk returns a tuple with the CareTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetCareTeamOk() ([]ExplanationOfBenefitCareTeam, bool) {
	if o == nil || IsNil(o.CareTeam) {
		return nil, false
	}
	return o.CareTeam, true
}

// HasCareTeam returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasCareTeam() bool {
	if o != nil && !IsNil(o.CareTeam) {
		return true
	}

	return false
}

// SetCareTeam gets a reference to the given []ExplanationOfBenefitCareTeam and assigns it to the CareTeam field.
func (o *ExplanationOfBenefit) SetCareTeam(v []ExplanationOfBenefitCareTeam) {
	o.CareTeam = v
}

// GetSupportingInfo returns the SupportingInfo field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetSupportingInfo() []ExplanationOfBenefitSupportingInfo {
	if o == nil || IsNil(o.SupportingInfo) {
		var ret []ExplanationOfBenefitSupportingInfo
		return ret
	}
	return o.SupportingInfo
}

// GetSupportingInfoOk returns a tuple with the SupportingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetSupportingInfoOk() ([]ExplanationOfBenefitSupportingInfo, bool) {
	if o == nil || IsNil(o.SupportingInfo) {
		return nil, false
	}
	return o.SupportingInfo, true
}

// HasSupportingInfo returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasSupportingInfo() bool {
	if o != nil && !IsNil(o.SupportingInfo) {
		return true
	}

	return false
}

// SetSupportingInfo gets a reference to the given []ExplanationOfBenefitSupportingInfo and assigns it to the SupportingInfo field.
func (o *ExplanationOfBenefit) SetSupportingInfo(v []ExplanationOfBenefitSupportingInfo) {
	o.SupportingInfo = v
}

// GetDiagnosis returns the Diagnosis field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetDiagnosis() []ExplanationOfBenefitDiagnosis {
	if o == nil || IsNil(o.Diagnosis) {
		var ret []ExplanationOfBenefitDiagnosis
		return ret
	}
	return o.Diagnosis
}

// GetDiagnosisOk returns a tuple with the Diagnosis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetDiagnosisOk() ([]ExplanationOfBenefitDiagnosis, bool) {
	if o == nil || IsNil(o.Diagnosis) {
		return nil, false
	}
	return o.Diagnosis, true
}

// HasDiagnosis returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasDiagnosis() bool {
	if o != nil && !IsNil(o.Diagnosis) {
		return true
	}

	return false
}

// SetDiagnosis gets a reference to the given []ExplanationOfBenefitDiagnosis and assigns it to the Diagnosis field.
func (o *ExplanationOfBenefit) SetDiagnosis(v []ExplanationOfBenefitDiagnosis) {
	o.Diagnosis = v
}

// GetProcedure returns the Procedure field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetProcedure() []ExplanationOfBenefitProcedure {
	if o == nil || IsNil(o.Procedure) {
		var ret []ExplanationOfBenefitProcedure
		return ret
	}
	return o.Procedure
}

// GetProcedureOk returns a tuple with the Procedure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetProcedureOk() ([]ExplanationOfBenefitProcedure, bool) {
	if o == nil || IsNil(o.Procedure) {
		return nil, false
	}
	return o.Procedure, true
}

// HasProcedure returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasProcedure() bool {
	if o != nil && !IsNil(o.Procedure) {
		return true
	}

	return false
}

// SetProcedure gets a reference to the given []ExplanationOfBenefitProcedure and assigns it to the Procedure field.
func (o *ExplanationOfBenefit) SetProcedure(v []ExplanationOfBenefitProcedure) {
	o.Procedure = v
}

// GetPrecedence returns the Precedence field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPrecedence() float32 {
	if o == nil || IsNil(o.Precedence) {
		var ret float32
		return ret
	}
	return *o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPrecedenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Precedence) {
		return nil, false
	}
	return o.Precedence, true
}

// HasPrecedence returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPrecedence() bool {
	if o != nil && !IsNil(o.Precedence) {
		return true
	}

	return false
}

// SetPrecedence gets a reference to the given float32 and assigns it to the Precedence field.
func (o *ExplanationOfBenefit) SetPrecedence(v float32) {
	o.Precedence = &v
}

// GetInsurance returns the Insurance field value
func (o *ExplanationOfBenefit) GetInsurance() []ExplanationOfBenefitInsurance {
	if o == nil {
		var ret []ExplanationOfBenefitInsurance
		return ret
	}

	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetInsuranceOk() ([]ExplanationOfBenefitInsurance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Insurance, true
}

// SetInsurance sets field value
func (o *ExplanationOfBenefit) SetInsurance(v []ExplanationOfBenefitInsurance) {
	o.Insurance = v
}

// GetAccident returns the Accident field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetAccident() ExplanationOfBenefitAccident {
	if o == nil || IsNil(o.Accident) {
		var ret ExplanationOfBenefitAccident
		return ret
	}
	return *o.Accident
}

// GetAccidentOk returns a tuple with the Accident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetAccidentOk() (*ExplanationOfBenefitAccident, bool) {
	if o == nil || IsNil(o.Accident) {
		return nil, false
	}
	return o.Accident, true
}

// HasAccident returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasAccident() bool {
	if o != nil && !IsNil(o.Accident) {
		return true
	}

	return false
}

// SetAccident gets a reference to the given ExplanationOfBenefitAccident and assigns it to the Accident field.
func (o *ExplanationOfBenefit) SetAccident(v ExplanationOfBenefitAccident) {
	o.Accident = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetItem() []ExplanationOfBenefitItem {
	if o == nil || IsNil(o.Item) {
		var ret []ExplanationOfBenefitItem
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetItemOk() ([]ExplanationOfBenefitItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []ExplanationOfBenefitItem and assigns it to the Item field.
func (o *ExplanationOfBenefit) SetItem(v []ExplanationOfBenefitItem) {
	o.Item = v
}

// GetAddItem returns the AddItem field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetAddItem() []ExplanationOfBenefitAddItem {
	if o == nil || IsNil(o.AddItem) {
		var ret []ExplanationOfBenefitAddItem
		return ret
	}
	return o.AddItem
}

// GetAddItemOk returns a tuple with the AddItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetAddItemOk() ([]ExplanationOfBenefitAddItem, bool) {
	if o == nil || IsNil(o.AddItem) {
		return nil, false
	}
	return o.AddItem, true
}

// HasAddItem returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasAddItem() bool {
	if o != nil && !IsNil(o.AddItem) {
		return true
	}

	return false
}

// SetAddItem gets a reference to the given []ExplanationOfBenefitAddItem and assigns it to the AddItem field.
func (o *ExplanationOfBenefit) SetAddItem(v []ExplanationOfBenefitAddItem) {
	o.AddItem = v
}

// GetAdjudication returns the Adjudication field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetAdjudication() []ExplanationOfBenefitAdjudication {
	if o == nil || IsNil(o.Adjudication) {
		var ret []ExplanationOfBenefitAdjudication
		return ret
	}
	return o.Adjudication
}

// GetAdjudicationOk returns a tuple with the Adjudication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetAdjudicationOk() ([]ExplanationOfBenefitAdjudication, bool) {
	if o == nil || IsNil(o.Adjudication) {
		return nil, false
	}
	return o.Adjudication, true
}

// HasAdjudication returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasAdjudication() bool {
	if o != nil && !IsNil(o.Adjudication) {
		return true
	}

	return false
}

// SetAdjudication gets a reference to the given []ExplanationOfBenefitAdjudication and assigns it to the Adjudication field.
func (o *ExplanationOfBenefit) SetAdjudication(v []ExplanationOfBenefitAdjudication) {
	o.Adjudication = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetTotal() []ExplanationOfBenefitTotal {
	if o == nil || IsNil(o.Total) {
		var ret []ExplanationOfBenefitTotal
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetTotalOk() ([]ExplanationOfBenefitTotal, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given []ExplanationOfBenefitTotal and assigns it to the Total field.
func (o *ExplanationOfBenefit) SetTotal(v []ExplanationOfBenefitTotal) {
	o.Total = v
}

// GetPayment returns the Payment field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetPayment() ExplanationOfBenefitPayment {
	if o == nil || IsNil(o.Payment) {
		var ret ExplanationOfBenefitPayment
		return ret
	}
	return *o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetPaymentOk() (*ExplanationOfBenefitPayment, bool) {
	if o == nil || IsNil(o.Payment) {
		return nil, false
	}
	return o.Payment, true
}

// HasPayment returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasPayment() bool {
	if o != nil && !IsNil(o.Payment) {
		return true
	}

	return false
}

// SetPayment gets a reference to the given ExplanationOfBenefitPayment and assigns it to the Payment field.
func (o *ExplanationOfBenefit) SetPayment(v ExplanationOfBenefitPayment) {
	o.Payment = &v
}

// GetFormCode returns the FormCode field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetFormCode() CodeableConcept {
	if o == nil || IsNil(o.FormCode) {
		var ret CodeableConcept
		return ret
	}
	return *o.FormCode
}

// GetFormCodeOk returns a tuple with the FormCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetFormCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FormCode) {
		return nil, false
	}
	return o.FormCode, true
}

// HasFormCode returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasFormCode() bool {
	if o != nil && !IsNil(o.FormCode) {
		return true
	}

	return false
}

// SetFormCode gets a reference to the given CodeableConcept and assigns it to the FormCode field.
func (o *ExplanationOfBenefit) SetFormCode(v CodeableConcept) {
	o.FormCode = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetForm() Attachment {
	if o == nil || IsNil(o.Form) {
		var ret Attachment
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetFormOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasForm() bool {
	if o != nil && !IsNil(o.Form) {
		return true
	}

	return false
}

// SetForm gets a reference to the given Attachment and assigns it to the Form field.
func (o *ExplanationOfBenefit) SetForm(v Attachment) {
	o.Form = &v
}

// GetProcessNote returns the ProcessNote field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetProcessNote() []ExplanationOfBenefitProcessNote {
	if o == nil || IsNil(o.ProcessNote) {
		var ret []ExplanationOfBenefitProcessNote
		return ret
	}
	return o.ProcessNote
}

// GetProcessNoteOk returns a tuple with the ProcessNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetProcessNoteOk() ([]ExplanationOfBenefitProcessNote, bool) {
	if o == nil || IsNil(o.ProcessNote) {
		return nil, false
	}
	return o.ProcessNote, true
}

// HasProcessNote returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasProcessNote() bool {
	if o != nil && !IsNil(o.ProcessNote) {
		return true
	}

	return false
}

// SetProcessNote gets a reference to the given []ExplanationOfBenefitProcessNote and assigns it to the ProcessNote field.
func (o *ExplanationOfBenefit) SetProcessNote(v []ExplanationOfBenefitProcessNote) {
	o.ProcessNote = v
}

// GetBenefitPeriod returns the BenefitPeriod field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetBenefitPeriod() Period {
	if o == nil || IsNil(o.BenefitPeriod) {
		var ret Period
		return ret
	}
	return *o.BenefitPeriod
}

// GetBenefitPeriodOk returns a tuple with the BenefitPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetBenefitPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.BenefitPeriod) {
		return nil, false
	}
	return o.BenefitPeriod, true
}

// HasBenefitPeriod returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasBenefitPeriod() bool {
	if o != nil && !IsNil(o.BenefitPeriod) {
		return true
	}

	return false
}

// SetBenefitPeriod gets a reference to the given Period and assigns it to the BenefitPeriod field.
func (o *ExplanationOfBenefit) SetBenefitPeriod(v Period) {
	o.BenefitPeriod = &v
}

// GetBenefitBalance returns the BenefitBalance field value if set, zero value otherwise.
func (o *ExplanationOfBenefit) GetBenefitBalance() []ExplanationOfBenefitBenefitBalance {
	if o == nil || IsNil(o.BenefitBalance) {
		var ret []ExplanationOfBenefitBenefitBalance
		return ret
	}
	return o.BenefitBalance
}

// GetBenefitBalanceOk returns a tuple with the BenefitBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefit) GetBenefitBalanceOk() ([]ExplanationOfBenefitBenefitBalance, bool) {
	if o == nil || IsNil(o.BenefitBalance) {
		return nil, false
	}
	return o.BenefitBalance, true
}

// HasBenefitBalance returns a boolean if a field has been set.
func (o *ExplanationOfBenefit) HasBenefitBalance() bool {
	if o != nil && !IsNil(o.BenefitBalance) {
		return true
	}

	return false
}

// SetBenefitBalance gets a reference to the given []ExplanationOfBenefitBenefitBalance and assigns it to the BenefitBalance field.
func (o *ExplanationOfBenefit) SetBenefitBalance(v []ExplanationOfBenefitBenefitBalance) {
	o.BenefitBalance = v
}

func (o ExplanationOfBenefit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplanationOfBenefit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.BillablePeriod) {
		toSerialize["billablePeriod"] = o.BillablePeriod
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Enterer) {
		toSerialize["enterer"] = o.Enterer
	}
	toSerialize["insurer"] = o.Insurer
	toSerialize["provider"] = o.Provider
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.FundsReserveRequested) {
		toSerialize["fundsReserveRequested"] = o.FundsReserveRequested
	}
	if !IsNil(o.FundsReserve) {
		toSerialize["fundsReserve"] = o.FundsReserve
	}
	if !IsNil(o.Related) {
		toSerialize["related"] = o.Related
	}
	if !IsNil(o.Prescription) {
		toSerialize["prescription"] = o.Prescription
	}
	if !IsNil(o.OriginalPrescription) {
		toSerialize["originalPrescription"] = o.OriginalPrescription
	}
	if !IsNil(o.Payee) {
		toSerialize["payee"] = o.Payee
	}
	if !IsNil(o.Referral) {
		toSerialize["referral"] = o.Referral
	}
	if !IsNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !IsNil(o.Claim) {
		toSerialize["claim"] = o.Claim
	}
	if !IsNil(o.ClaimResponse) {
		toSerialize["claimResponse"] = o.ClaimResponse
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.Disposition) {
		toSerialize["disposition"] = o.Disposition
	}
	if !IsNil(o.PreAuthRef) {
		toSerialize["preAuthRef"] = o.PreAuthRef
	}
	if !IsNil(o.PreAuthRefPeriod) {
		toSerialize["preAuthRefPeriod"] = o.PreAuthRefPeriod
	}
	if !IsNil(o.CareTeam) {
		toSerialize["careTeam"] = o.CareTeam
	}
	if !IsNil(o.SupportingInfo) {
		toSerialize["supportingInfo"] = o.SupportingInfo
	}
	if !IsNil(o.Diagnosis) {
		toSerialize["diagnosis"] = o.Diagnosis
	}
	if !IsNil(o.Procedure) {
		toSerialize["procedure"] = o.Procedure
	}
	if !IsNil(o.Precedence) {
		toSerialize["precedence"] = o.Precedence
	}
	toSerialize["insurance"] = o.Insurance
	if !IsNil(o.Accident) {
		toSerialize["accident"] = o.Accident
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.AddItem) {
		toSerialize["addItem"] = o.AddItem
	}
	if !IsNil(o.Adjudication) {
		toSerialize["adjudication"] = o.Adjudication
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Payment) {
		toSerialize["payment"] = o.Payment
	}
	if !IsNil(o.FormCode) {
		toSerialize["formCode"] = o.FormCode
	}
	if !IsNil(o.Form) {
		toSerialize["form"] = o.Form
	}
	if !IsNil(o.ProcessNote) {
		toSerialize["processNote"] = o.ProcessNote
	}
	if !IsNil(o.BenefitPeriod) {
		toSerialize["benefitPeriod"] = o.BenefitPeriod
	}
	if !IsNil(o.BenefitBalance) {
		toSerialize["benefitBalance"] = o.BenefitBalance
	}
	return toSerialize, nil
}

func (o *ExplanationOfBenefit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"type",
		"patient",
		"insurer",
		"provider",
		"insurance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExplanationOfBenefit := _ExplanationOfBenefit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExplanationOfBenefit)

	if err != nil {
		return err
	}

	*o = ExplanationOfBenefit(varExplanationOfBenefit)

	return err
}

type NullableExplanationOfBenefit struct {
	value *ExplanationOfBenefit
	isSet bool
}

func (v NullableExplanationOfBenefit) Get() *ExplanationOfBenefit {
	return v.value
}

func (v *NullableExplanationOfBenefit) Set(val *ExplanationOfBenefit) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanationOfBenefit) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanationOfBenefit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanationOfBenefit(val *ExplanationOfBenefit) *NullableExplanationOfBenefit {
	return &NullableExplanationOfBenefit{value: val, isSet: true}
}

func (v NullableExplanationOfBenefit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanationOfBenefit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


