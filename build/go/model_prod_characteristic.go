/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ProdCharacteristic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProdCharacteristic{}

// ProdCharacteristic The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
type ProdCharacteristic struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	Height *Quantity `json:"height,omitempty"`
	// Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	Width *Quantity `json:"width,omitempty"`
	// Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	Depth *Quantity `json:"depth,omitempty"`
	// Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	Weight *Quantity `json:"weight,omitempty"`
	// Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	NominalVolume *Quantity `json:"nominalVolume,omitempty"`
	// Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	ExternalDiameter *Quantity `json:"externalDiameter,omitempty"`
	// A sequence of Unicode characters
	Shape *string `json:"shape,omitempty"`
	// Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
	Color []string `json:"color,omitempty"`
	// Where applicable, the imprint can be specified as text.
	Imprint []string `json:"imprint,omitempty"`
	// Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
	Image []Attachment `json:"image,omitempty"`
	// Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
	Scoring *CodeableConcept `json:"scoring,omitempty"`
}

// NewProdCharacteristic instantiates a new ProdCharacteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProdCharacteristic() *ProdCharacteristic {
	this := ProdCharacteristic{}
	return &this
}

// NewProdCharacteristicWithDefaults instantiates a new ProdCharacteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProdCharacteristicWithDefaults() *ProdCharacteristic {
	this := ProdCharacteristic{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProdCharacteristic) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ProdCharacteristic) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ProdCharacteristic) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetHeight() Quantity {
	if o == nil || IsNil(o.Height) {
		var ret Quantity
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetHeightOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given Quantity and assigns it to the Height field.
func (o *ProdCharacteristic) SetHeight(v Quantity) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetWidth() Quantity {
	if o == nil || IsNil(o.Width) {
		var ret Quantity
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetWidthOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given Quantity and assigns it to the Width field.
func (o *ProdCharacteristic) SetWidth(v Quantity) {
	o.Width = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetDepth() Quantity {
	if o == nil || IsNil(o.Depth) {
		var ret Quantity
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetDepthOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given Quantity and assigns it to the Depth field.
func (o *ProdCharacteristic) SetDepth(v Quantity) {
	o.Depth = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetWeight() Quantity {
	if o == nil || IsNil(o.Weight) {
		var ret Quantity
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetWeightOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given Quantity and assigns it to the Weight field.
func (o *ProdCharacteristic) SetWeight(v Quantity) {
	o.Weight = &v
}

// GetNominalVolume returns the NominalVolume field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetNominalVolume() Quantity {
	if o == nil || IsNil(o.NominalVolume) {
		var ret Quantity
		return ret
	}
	return *o.NominalVolume
}

// GetNominalVolumeOk returns a tuple with the NominalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetNominalVolumeOk() (*Quantity, bool) {
	if o == nil || IsNil(o.NominalVolume) {
		return nil, false
	}
	return o.NominalVolume, true
}

// HasNominalVolume returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasNominalVolume() bool {
	if o != nil && !IsNil(o.NominalVolume) {
		return true
	}

	return false
}

// SetNominalVolume gets a reference to the given Quantity and assigns it to the NominalVolume field.
func (o *ProdCharacteristic) SetNominalVolume(v Quantity) {
	o.NominalVolume = &v
}

// GetExternalDiameter returns the ExternalDiameter field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetExternalDiameter() Quantity {
	if o == nil || IsNil(o.ExternalDiameter) {
		var ret Quantity
		return ret
	}
	return *o.ExternalDiameter
}

// GetExternalDiameterOk returns a tuple with the ExternalDiameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetExternalDiameterOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ExternalDiameter) {
		return nil, false
	}
	return o.ExternalDiameter, true
}

// HasExternalDiameter returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasExternalDiameter() bool {
	if o != nil && !IsNil(o.ExternalDiameter) {
		return true
	}

	return false
}

// SetExternalDiameter gets a reference to the given Quantity and assigns it to the ExternalDiameter field.
func (o *ProdCharacteristic) SetExternalDiameter(v Quantity) {
	o.ExternalDiameter = &v
}

// GetShape returns the Shape field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetShape() string {
	if o == nil || IsNil(o.Shape) {
		var ret string
		return ret
	}
	return *o.Shape
}

// GetShapeOk returns a tuple with the Shape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetShapeOk() (*string, bool) {
	if o == nil || IsNil(o.Shape) {
		return nil, false
	}
	return o.Shape, true
}

// HasShape returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasShape() bool {
	if o != nil && !IsNil(o.Shape) {
		return true
	}

	return false
}

// SetShape gets a reference to the given string and assigns it to the Shape field.
func (o *ProdCharacteristic) SetShape(v string) {
	o.Shape = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetColor() []string {
	if o == nil || IsNil(o.Color) {
		var ret []string
		return ret
	}
	return o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetColorOk() ([]string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given []string and assigns it to the Color field.
func (o *ProdCharacteristic) SetColor(v []string) {
	o.Color = v
}

// GetImprint returns the Imprint field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetImprint() []string {
	if o == nil || IsNil(o.Imprint) {
		var ret []string
		return ret
	}
	return o.Imprint
}

// GetImprintOk returns a tuple with the Imprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetImprintOk() ([]string, bool) {
	if o == nil || IsNil(o.Imprint) {
		return nil, false
	}
	return o.Imprint, true
}

// HasImprint returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasImprint() bool {
	if o != nil && !IsNil(o.Imprint) {
		return true
	}

	return false
}

// SetImprint gets a reference to the given []string and assigns it to the Imprint field.
func (o *ProdCharacteristic) SetImprint(v []string) {
	o.Imprint = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetImage() []Attachment {
	if o == nil || IsNil(o.Image) {
		var ret []Attachment
		return ret
	}
	return o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetImageOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given []Attachment and assigns it to the Image field.
func (o *ProdCharacteristic) SetImage(v []Attachment) {
	o.Image = v
}

// GetScoring returns the Scoring field value if set, zero value otherwise.
func (o *ProdCharacteristic) GetScoring() CodeableConcept {
	if o == nil || IsNil(o.Scoring) {
		var ret CodeableConcept
		return ret
	}
	return *o.Scoring
}

// GetScoringOk returns a tuple with the Scoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdCharacteristic) GetScoringOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Scoring) {
		return nil, false
	}
	return o.Scoring, true
}

// HasScoring returns a boolean if a field has been set.
func (o *ProdCharacteristic) HasScoring() bool {
	if o != nil && !IsNil(o.Scoring) {
		return true
	}

	return false
}

// SetScoring gets a reference to the given CodeableConcept and assigns it to the Scoring field.
func (o *ProdCharacteristic) SetScoring(v CodeableConcept) {
	o.Scoring = &v
}

func (o ProdCharacteristic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProdCharacteristic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.NominalVolume) {
		toSerialize["nominalVolume"] = o.NominalVolume
	}
	if !IsNil(o.ExternalDiameter) {
		toSerialize["externalDiameter"] = o.ExternalDiameter
	}
	if !IsNil(o.Shape) {
		toSerialize["shape"] = o.Shape
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Imprint) {
		toSerialize["imprint"] = o.Imprint
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Scoring) {
		toSerialize["scoring"] = o.Scoring
	}
	return toSerialize, nil
}

type NullableProdCharacteristic struct {
	value *ProdCharacteristic
	isSet bool
}

func (v NullableProdCharacteristic) Get() *ProdCharacteristic {
	return v.value
}

func (v *NullableProdCharacteristic) Set(val *ProdCharacteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableProdCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableProdCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProdCharacteristic(val *ProdCharacteristic) *NullableProdCharacteristic {
	return &NullableProdCharacteristic{value: val, isSet: true}
}

func (v NullableProdCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProdCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


