/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ContractValuedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractValuedItem{}

// ContractValuedItem Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractValuedItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Specific type of Contract Valued Item that may be priced.
	EntityCodeableConcept *CodeableConcept `json:"entityCodeableConcept,omitempty"`
	// Specific type of Contract Valued Item that may be priced.
	EntityReference *Reference `json:"entityReference,omitempty"`
	// Identifies a Contract Valued Item instance.
	Identifier *Identifier `json:"identifier,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	EffectiveTime *string `json:"effectiveTime,omitempty"`
	// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
	Quantity *Quantity `json:"quantity,omitempty"`
	// A Contract Valued Item unit valuation measure.
	UnitPrice *Money `json:"unitPrice,omitempty"`
	// A rational number with implicit precision
	Factor *float32 `json:"factor,omitempty"`
	// A rational number with implicit precision
	Points *float32 `json:"points,omitempty"`
	// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
	Net *Money `json:"net,omitempty"`
	// A sequence of Unicode characters
	Payment *string `json:"payment,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	PaymentDate *string `json:"paymentDate,omitempty"`
	// Who will make payment.
	Responsible *Reference `json:"responsible,omitempty"`
	// Who will receive payment.
	Recipient *Reference `json:"recipient,omitempty"`
	// Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
	LinkId []string `json:"linkId,omitempty"`
	// A set of security labels that define which terms are controlled by this condition.
	SecurityLabelNumber []float32 `json:"securityLabelNumber,omitempty"`
}

// NewContractValuedItem instantiates a new ContractValuedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractValuedItem() *ContractValuedItem {
	this := ContractValuedItem{}
	return &this
}

// NewContractValuedItemWithDefaults instantiates a new ContractValuedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractValuedItemWithDefaults() *ContractValuedItem {
	this := ContractValuedItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContractValuedItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContractValuedItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContractValuedItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ContractValuedItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ContractValuedItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ContractValuedItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ContractValuedItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ContractValuedItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ContractValuedItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetEntityCodeableConcept returns the EntityCodeableConcept field value if set, zero value otherwise.
func (o *ContractValuedItem) GetEntityCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.EntityCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.EntityCodeableConcept
}

// GetEntityCodeableConceptOk returns a tuple with the EntityCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetEntityCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.EntityCodeableConcept) {
		return nil, false
	}
	return o.EntityCodeableConcept, true
}

// HasEntityCodeableConcept returns a boolean if a field has been set.
func (o *ContractValuedItem) HasEntityCodeableConcept() bool {
	if o != nil && !IsNil(o.EntityCodeableConcept) {
		return true
	}

	return false
}

// SetEntityCodeableConcept gets a reference to the given CodeableConcept and assigns it to the EntityCodeableConcept field.
func (o *ContractValuedItem) SetEntityCodeableConcept(v CodeableConcept) {
	o.EntityCodeableConcept = &v
}

// GetEntityReference returns the EntityReference field value if set, zero value otherwise.
func (o *ContractValuedItem) GetEntityReference() Reference {
	if o == nil || IsNil(o.EntityReference) {
		var ret Reference
		return ret
	}
	return *o.EntityReference
}

// GetEntityReferenceOk returns a tuple with the EntityReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetEntityReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.EntityReference) {
		return nil, false
	}
	return o.EntityReference, true
}

// HasEntityReference returns a boolean if a field has been set.
func (o *ContractValuedItem) HasEntityReference() bool {
	if o != nil && !IsNil(o.EntityReference) {
		return true
	}

	return false
}

// SetEntityReference gets a reference to the given Reference and assigns it to the EntityReference field.
func (o *ContractValuedItem) SetEntityReference(v Reference) {
	o.EntityReference = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ContractValuedItem) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ContractValuedItem) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *ContractValuedItem) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetEffectiveTime returns the EffectiveTime field value if set, zero value otherwise.
func (o *ContractValuedItem) GetEffectiveTime() string {
	if o == nil || IsNil(o.EffectiveTime) {
		var ret string
		return ret
	}
	return *o.EffectiveTime
}

// GetEffectiveTimeOk returns a tuple with the EffectiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetEffectiveTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveTime) {
		return nil, false
	}
	return o.EffectiveTime, true
}

// HasEffectiveTime returns a boolean if a field has been set.
func (o *ContractValuedItem) HasEffectiveTime() bool {
	if o != nil && !IsNil(o.EffectiveTime) {
		return true
	}

	return false
}

// SetEffectiveTime gets a reference to the given string and assigns it to the EffectiveTime field.
func (o *ContractValuedItem) SetEffectiveTime(v string) {
	o.EffectiveTime = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ContractValuedItem) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ContractValuedItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *ContractValuedItem) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *ContractValuedItem) GetUnitPrice() Money {
	if o == nil || IsNil(o.UnitPrice) {
		var ret Money
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetUnitPriceOk() (*Money, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ContractValuedItem) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given Money and assigns it to the UnitPrice field.
func (o *ContractValuedItem) SetUnitPrice(v Money) {
	o.UnitPrice = &v
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *ContractValuedItem) GetFactor() float32 {
	if o == nil || IsNil(o.Factor) {
		var ret float32
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *ContractValuedItem) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float32 and assigns it to the Factor field.
func (o *ContractValuedItem) SetFactor(v float32) {
	o.Factor = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *ContractValuedItem) GetPoints() float32 {
	if o == nil || IsNil(o.Points) {
		var ret float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *ContractValuedItem) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float32 and assigns it to the Points field.
func (o *ContractValuedItem) SetPoints(v float32) {
	o.Points = &v
}

// GetNet returns the Net field value if set, zero value otherwise.
func (o *ContractValuedItem) GetNet() Money {
	if o == nil || IsNil(o.Net) {
		var ret Money
		return ret
	}
	return *o.Net
}

// GetNetOk returns a tuple with the Net field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetNetOk() (*Money, bool) {
	if o == nil || IsNil(o.Net) {
		return nil, false
	}
	return o.Net, true
}

// HasNet returns a boolean if a field has been set.
func (o *ContractValuedItem) HasNet() bool {
	if o != nil && !IsNil(o.Net) {
		return true
	}

	return false
}

// SetNet gets a reference to the given Money and assigns it to the Net field.
func (o *ContractValuedItem) SetNet(v Money) {
	o.Net = &v
}

// GetPayment returns the Payment field value if set, zero value otherwise.
func (o *ContractValuedItem) GetPayment() string {
	if o == nil || IsNil(o.Payment) {
		var ret string
		return ret
	}
	return *o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetPaymentOk() (*string, bool) {
	if o == nil || IsNil(o.Payment) {
		return nil, false
	}
	return o.Payment, true
}

// HasPayment returns a boolean if a field has been set.
func (o *ContractValuedItem) HasPayment() bool {
	if o != nil && !IsNil(o.Payment) {
		return true
	}

	return false
}

// SetPayment gets a reference to the given string and assigns it to the Payment field.
func (o *ContractValuedItem) SetPayment(v string) {
	o.Payment = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *ContractValuedItem) GetPaymentDate() string {
	if o == nil || IsNil(o.PaymentDate) {
		var ret string
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *ContractValuedItem) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given string and assigns it to the PaymentDate field.
func (o *ContractValuedItem) SetPaymentDate(v string) {
	o.PaymentDate = &v
}

// GetResponsible returns the Responsible field value if set, zero value otherwise.
func (o *ContractValuedItem) GetResponsible() Reference {
	if o == nil || IsNil(o.Responsible) {
		var ret Reference
		return ret
	}
	return *o.Responsible
}

// GetResponsibleOk returns a tuple with the Responsible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetResponsibleOk() (*Reference, bool) {
	if o == nil || IsNil(o.Responsible) {
		return nil, false
	}
	return o.Responsible, true
}

// HasResponsible returns a boolean if a field has been set.
func (o *ContractValuedItem) HasResponsible() bool {
	if o != nil && !IsNil(o.Responsible) {
		return true
	}

	return false
}

// SetResponsible gets a reference to the given Reference and assigns it to the Responsible field.
func (o *ContractValuedItem) SetResponsible(v Reference) {
	o.Responsible = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *ContractValuedItem) GetRecipient() Reference {
	if o == nil || IsNil(o.Recipient) {
		var ret Reference
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetRecipientOk() (*Reference, bool) {
	if o == nil || IsNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *ContractValuedItem) HasRecipient() bool {
	if o != nil && !IsNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given Reference and assigns it to the Recipient field.
func (o *ContractValuedItem) SetRecipient(v Reference) {
	o.Recipient = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *ContractValuedItem) GetLinkId() []string {
	if o == nil || IsNil(o.LinkId) {
		var ret []string
		return ret
	}
	return o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetLinkIdOk() ([]string, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *ContractValuedItem) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given []string and assigns it to the LinkId field.
func (o *ContractValuedItem) SetLinkId(v []string) {
	o.LinkId = v
}

// GetSecurityLabelNumber returns the SecurityLabelNumber field value if set, zero value otherwise.
func (o *ContractValuedItem) GetSecurityLabelNumber() []float32 {
	if o == nil || IsNil(o.SecurityLabelNumber) {
		var ret []float32
		return ret
	}
	return o.SecurityLabelNumber
}

// GetSecurityLabelNumberOk returns a tuple with the SecurityLabelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractValuedItem) GetSecurityLabelNumberOk() ([]float32, bool) {
	if o == nil || IsNil(o.SecurityLabelNumber) {
		return nil, false
	}
	return o.SecurityLabelNumber, true
}

// HasSecurityLabelNumber returns a boolean if a field has been set.
func (o *ContractValuedItem) HasSecurityLabelNumber() bool {
	if o != nil && !IsNil(o.SecurityLabelNumber) {
		return true
	}

	return false
}

// SetSecurityLabelNumber gets a reference to the given []float32 and assigns it to the SecurityLabelNumber field.
func (o *ContractValuedItem) SetSecurityLabelNumber(v []float32) {
	o.SecurityLabelNumber = v
}

func (o ContractValuedItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractValuedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.EntityCodeableConcept) {
		toSerialize["entityCodeableConcept"] = o.EntityCodeableConcept
	}
	if !IsNil(o.EntityReference) {
		toSerialize["entityReference"] = o.EntityReference
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.EffectiveTime) {
		toSerialize["effectiveTime"] = o.EffectiveTime
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Net) {
		toSerialize["net"] = o.Net
	}
	if !IsNil(o.Payment) {
		toSerialize["payment"] = o.Payment
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.Responsible) {
		toSerialize["responsible"] = o.Responsible
	}
	if !IsNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	if !IsNil(o.SecurityLabelNumber) {
		toSerialize["securityLabelNumber"] = o.SecurityLabelNumber
	}
	return toSerialize, nil
}

type NullableContractValuedItem struct {
	value *ContractValuedItem
	isSet bool
}

func (v NullableContractValuedItem) Get() *ContractValuedItem {
	return v.value
}

func (v *NullableContractValuedItem) Set(val *ContractValuedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableContractValuedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableContractValuedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractValuedItem(val *ContractValuedItem) *NullableContractValuedItem {
	return &NullableContractValuedItem{value: val, isSet: true}
}

func (v NullableContractValuedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractValuedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


