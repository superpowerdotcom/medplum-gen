/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RiskEvidenceSynthesis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskEvidenceSynthesis{}

// RiskEvidenceSynthesis The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
type RiskEvidenceSynthesis struct {
	// This is a RiskEvidenceSynthesis resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// String of characters used to identify a name or a resource
	Url *string `json:"url,omitempty"`
	// A formal identifier that is used to identify this risk evidence synthesis when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Version *string `json:"version,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// The status of this risk evidence synthesis. Enables tracking the life-cycle of the content.
	Status *string `json:"status,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// A sequence of Unicode characters
	Publisher *string `json:"publisher,omitempty"`
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []ContactDetail `json:"contact,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Description *string `json:"description,omitempty"`
	// A human-readable string to clarify or explain concepts about the resource.
	Note []Annotation `json:"note,omitempty"`
	// The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate risk evidence synthesis instances.
	UseContext []UsageContext `json:"useContext,omitempty"`
	// A legal or geographic region in which the risk evidence synthesis is intended to be used.
	Jurisdiction []CodeableConcept `json:"jurisdiction,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Copyright *string `json:"copyright,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	ApprovalDate *string `json:"approvalDate,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	LastReviewDate *string `json:"lastReviewDate,omitempty"`
	// The period during which the risk evidence synthesis content was or is planned to be in active use.
	EffectivePeriod *Period `json:"effectivePeriod,omitempty"`
	// Descriptive topics related to the content of the RiskEvidenceSynthesis. Topics provide a high-level categorization grouping types of EffectEvidenceSynthesiss that can be useful for filtering and searching.
	Topic []CodeableConcept `json:"topic,omitempty"`
	// An individiual or organization primarily involved in the creation and maintenance of the content.
	Author []ContactDetail `json:"author,omitempty"`
	// An individual or organization primarily responsible for internal coherence of the content.
	Editor []ContactDetail `json:"editor,omitempty"`
	// An individual or organization primarily responsible for review of some aspect of the content.
	Reviewer []ContactDetail `json:"reviewer,omitempty"`
	// An individual or organization responsible for officially endorsing the content for use in some setting.
	Endorser []ContactDetail `json:"endorser,omitempty"`
	// Related artifacts such as additional documentation, justification, or bibliographic references.
	RelatedArtifact []RelatedArtifact `json:"relatedArtifact,omitempty"`
	// Type of synthesis eg meta-analysis.
	SynthesisType *CodeableConcept `json:"synthesisType,omitempty"`
	// Type of study eg randomized trial.
	StudyType *CodeableConcept `json:"studyType,omitempty"`
	// A reference to a EvidenceVariable resource that defines the population for the research.
	Population Reference `json:"population"`
	// A reference to a EvidenceVariable resource that defines the exposure for the research.
	Exposure *Reference `json:"exposure,omitempty"`
	// A reference to a EvidenceVariable resomece that defines the outcome for the research.
	Outcome Reference `json:"outcome"`
	// A description of the size of the sample involved in the synthesis.
	SampleSize *RiskEvidenceSynthesisSampleSize `json:"sampleSize,omitempty"`
	// The estimated risk of the outcome.
	RiskEstimate *RiskEvidenceSynthesisRiskEstimate `json:"riskEstimate,omitempty"`
	// A description of the certainty of the risk estimate.
	Certainty []RiskEvidenceSynthesisCertainty `json:"certainty,omitempty"`
}

type _RiskEvidenceSynthesis RiskEvidenceSynthesis

// NewRiskEvidenceSynthesis instantiates a new RiskEvidenceSynthesis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskEvidenceSynthesis(resourceType string, population Reference, outcome Reference) *RiskEvidenceSynthesis {
	this := RiskEvidenceSynthesis{}
	this.ResourceType = resourceType
	this.Population = population
	this.Outcome = outcome
	return &this
}

// NewRiskEvidenceSynthesisWithDefaults instantiates a new RiskEvidenceSynthesis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskEvidenceSynthesisWithDefaults() *RiskEvidenceSynthesis {
	this := RiskEvidenceSynthesis{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *RiskEvidenceSynthesis) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *RiskEvidenceSynthesis) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RiskEvidenceSynthesis) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *RiskEvidenceSynthesis) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *RiskEvidenceSynthesis) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *RiskEvidenceSynthesis) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *RiskEvidenceSynthesis) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *RiskEvidenceSynthesis) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *RiskEvidenceSynthesis) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *RiskEvidenceSynthesis) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RiskEvidenceSynthesis) SetUrl(v string) {
	o.Url = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *RiskEvidenceSynthesis) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RiskEvidenceSynthesis) SetVersion(v string) {
	o.Version = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RiskEvidenceSynthesis) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RiskEvidenceSynthesis) SetTitle(v string) {
	o.Title = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RiskEvidenceSynthesis) SetStatus(v string) {
	o.Status = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *RiskEvidenceSynthesis) SetDate(v string) {
	o.Date = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *RiskEvidenceSynthesis) SetPublisher(v string) {
	o.Publisher = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetContact() []ContactDetail {
	if o == nil || IsNil(o.Contact) {
		var ret []ContactDetail
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetContactOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []ContactDetail and assigns it to the Contact field.
func (o *RiskEvidenceSynthesis) SetContact(v []ContactDetail) {
	o.Contact = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RiskEvidenceSynthesis) SetDescription(v string) {
	o.Description = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *RiskEvidenceSynthesis) SetNote(v []Annotation) {
	o.Note = v
}

// GetUseContext returns the UseContext field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetUseContext() []UsageContext {
	if o == nil || IsNil(o.UseContext) {
		var ret []UsageContext
		return ret
	}
	return o.UseContext
}

// GetUseContextOk returns a tuple with the UseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetUseContextOk() ([]UsageContext, bool) {
	if o == nil || IsNil(o.UseContext) {
		return nil, false
	}
	return o.UseContext, true
}

// HasUseContext returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasUseContext() bool {
	if o != nil && !IsNil(o.UseContext) {
		return true
	}

	return false
}

// SetUseContext gets a reference to the given []UsageContext and assigns it to the UseContext field.
func (o *RiskEvidenceSynthesis) SetUseContext(v []UsageContext) {
	o.UseContext = v
}

// GetJurisdiction returns the Jurisdiction field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetJurisdiction() []CodeableConcept {
	if o == nil || IsNil(o.Jurisdiction) {
		var ret []CodeableConcept
		return ret
	}
	return o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetJurisdictionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Jurisdiction) {
		return nil, false
	}
	return o.Jurisdiction, true
}

// HasJurisdiction returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasJurisdiction() bool {
	if o != nil && !IsNil(o.Jurisdiction) {
		return true
	}

	return false
}

// SetJurisdiction gets a reference to the given []CodeableConcept and assigns it to the Jurisdiction field.
func (o *RiskEvidenceSynthesis) SetJurisdiction(v []CodeableConcept) {
	o.Jurisdiction = v
}

// GetCopyright returns the Copyright field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetCopyright() string {
	if o == nil || IsNil(o.Copyright) {
		var ret string
		return ret
	}
	return *o.Copyright
}

// GetCopyrightOk returns a tuple with the Copyright field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetCopyrightOk() (*string, bool) {
	if o == nil || IsNil(o.Copyright) {
		return nil, false
	}
	return o.Copyright, true
}

// HasCopyright returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasCopyright() bool {
	if o != nil && !IsNil(o.Copyright) {
		return true
	}

	return false
}

// SetCopyright gets a reference to the given string and assigns it to the Copyright field.
func (o *RiskEvidenceSynthesis) SetCopyright(v string) {
	o.Copyright = &v
}

// GetApprovalDate returns the ApprovalDate field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetApprovalDate() string {
	if o == nil || IsNil(o.ApprovalDate) {
		var ret string
		return ret
	}
	return *o.ApprovalDate
}

// GetApprovalDateOk returns a tuple with the ApprovalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetApprovalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalDate) {
		return nil, false
	}
	return o.ApprovalDate, true
}

// HasApprovalDate returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasApprovalDate() bool {
	if o != nil && !IsNil(o.ApprovalDate) {
		return true
	}

	return false
}

// SetApprovalDate gets a reference to the given string and assigns it to the ApprovalDate field.
func (o *RiskEvidenceSynthesis) SetApprovalDate(v string) {
	o.ApprovalDate = &v
}

// GetLastReviewDate returns the LastReviewDate field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetLastReviewDate() string {
	if o == nil || IsNil(o.LastReviewDate) {
		var ret string
		return ret
	}
	return *o.LastReviewDate
}

// GetLastReviewDateOk returns a tuple with the LastReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetLastReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastReviewDate) {
		return nil, false
	}
	return o.LastReviewDate, true
}

// HasLastReviewDate returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasLastReviewDate() bool {
	if o != nil && !IsNil(o.LastReviewDate) {
		return true
	}

	return false
}

// SetLastReviewDate gets a reference to the given string and assigns it to the LastReviewDate field.
func (o *RiskEvidenceSynthesis) SetLastReviewDate(v string) {
	o.LastReviewDate = &v
}

// GetEffectivePeriod returns the EffectivePeriod field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetEffectivePeriod() Period {
	if o == nil || IsNil(o.EffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.EffectivePeriod
}

// GetEffectivePeriodOk returns a tuple with the EffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.EffectivePeriod) {
		return nil, false
	}
	return o.EffectivePeriod, true
}

// HasEffectivePeriod returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasEffectivePeriod() bool {
	if o != nil && !IsNil(o.EffectivePeriod) {
		return true
	}

	return false
}

// SetEffectivePeriod gets a reference to the given Period and assigns it to the EffectivePeriod field.
func (o *RiskEvidenceSynthesis) SetEffectivePeriod(v Period) {
	o.EffectivePeriod = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetTopic() []CodeableConcept {
	if o == nil || IsNil(o.Topic) {
		var ret []CodeableConcept
		return ret
	}
	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetTopicOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given []CodeableConcept and assigns it to the Topic field.
func (o *RiskEvidenceSynthesis) SetTopic(v []CodeableConcept) {
	o.Topic = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetAuthor() []ContactDetail {
	if o == nil || IsNil(o.Author) {
		var ret []ContactDetail
		return ret
	}
	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetAuthorOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given []ContactDetail and assigns it to the Author field.
func (o *RiskEvidenceSynthesis) SetAuthor(v []ContactDetail) {
	o.Author = v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetEditor() []ContactDetail {
	if o == nil || IsNil(o.Editor) {
		var ret []ContactDetail
		return ret
	}
	return o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetEditorOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Editor) {
		return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasEditor() bool {
	if o != nil && !IsNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given []ContactDetail and assigns it to the Editor field.
func (o *RiskEvidenceSynthesis) SetEditor(v []ContactDetail) {
	o.Editor = v
}

// GetReviewer returns the Reviewer field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetReviewer() []ContactDetail {
	if o == nil || IsNil(o.Reviewer) {
		var ret []ContactDetail
		return ret
	}
	return o.Reviewer
}

// GetReviewerOk returns a tuple with the Reviewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetReviewerOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Reviewer) {
		return nil, false
	}
	return o.Reviewer, true
}

// HasReviewer returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasReviewer() bool {
	if o != nil && !IsNil(o.Reviewer) {
		return true
	}

	return false
}

// SetReviewer gets a reference to the given []ContactDetail and assigns it to the Reviewer field.
func (o *RiskEvidenceSynthesis) SetReviewer(v []ContactDetail) {
	o.Reviewer = v
}

// GetEndorser returns the Endorser field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetEndorser() []ContactDetail {
	if o == nil || IsNil(o.Endorser) {
		var ret []ContactDetail
		return ret
	}
	return o.Endorser
}

// GetEndorserOk returns a tuple with the Endorser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetEndorserOk() ([]ContactDetail, bool) {
	if o == nil || IsNil(o.Endorser) {
		return nil, false
	}
	return o.Endorser, true
}

// HasEndorser returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasEndorser() bool {
	if o != nil && !IsNil(o.Endorser) {
		return true
	}

	return false
}

// SetEndorser gets a reference to the given []ContactDetail and assigns it to the Endorser field.
func (o *RiskEvidenceSynthesis) SetEndorser(v []ContactDetail) {
	o.Endorser = v
}

// GetRelatedArtifact returns the RelatedArtifact field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetRelatedArtifact() []RelatedArtifact {
	if o == nil || IsNil(o.RelatedArtifact) {
		var ret []RelatedArtifact
		return ret
	}
	return o.RelatedArtifact
}

// GetRelatedArtifactOk returns a tuple with the RelatedArtifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetRelatedArtifactOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.RelatedArtifact) {
		return nil, false
	}
	return o.RelatedArtifact, true
}

// HasRelatedArtifact returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasRelatedArtifact() bool {
	if o != nil && !IsNil(o.RelatedArtifact) {
		return true
	}

	return false
}

// SetRelatedArtifact gets a reference to the given []RelatedArtifact and assigns it to the RelatedArtifact field.
func (o *RiskEvidenceSynthesis) SetRelatedArtifact(v []RelatedArtifact) {
	o.RelatedArtifact = v
}

// GetSynthesisType returns the SynthesisType field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetSynthesisType() CodeableConcept {
	if o == nil || IsNil(o.SynthesisType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SynthesisType
}

// GetSynthesisTypeOk returns a tuple with the SynthesisType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetSynthesisTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SynthesisType) {
		return nil, false
	}
	return o.SynthesisType, true
}

// HasSynthesisType returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasSynthesisType() bool {
	if o != nil && !IsNil(o.SynthesisType) {
		return true
	}

	return false
}

// SetSynthesisType gets a reference to the given CodeableConcept and assigns it to the SynthesisType field.
func (o *RiskEvidenceSynthesis) SetSynthesisType(v CodeableConcept) {
	o.SynthesisType = &v
}

// GetStudyType returns the StudyType field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetStudyType() CodeableConcept {
	if o == nil || IsNil(o.StudyType) {
		var ret CodeableConcept
		return ret
	}
	return *o.StudyType
}

// GetStudyTypeOk returns a tuple with the StudyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetStudyTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StudyType) {
		return nil, false
	}
	return o.StudyType, true
}

// HasStudyType returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasStudyType() bool {
	if o != nil && !IsNil(o.StudyType) {
		return true
	}

	return false
}

// SetStudyType gets a reference to the given CodeableConcept and assigns it to the StudyType field.
func (o *RiskEvidenceSynthesis) SetStudyType(v CodeableConcept) {
	o.StudyType = &v
}

// GetPopulation returns the Population field value
func (o *RiskEvidenceSynthesis) GetPopulation() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Population
}

// GetPopulationOk returns a tuple with the Population field value
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetPopulationOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Population, true
}

// SetPopulation sets field value
func (o *RiskEvidenceSynthesis) SetPopulation(v Reference) {
	o.Population = v
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetExposure() Reference {
	if o == nil || IsNil(o.Exposure) {
		var ret Reference
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetExposureOk() (*Reference, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given Reference and assigns it to the Exposure field.
func (o *RiskEvidenceSynthesis) SetExposure(v Reference) {
	o.Exposure = &v
}

// GetOutcome returns the Outcome field value
func (o *RiskEvidenceSynthesis) GetOutcome() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetOutcomeOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outcome, true
}

// SetOutcome sets field value
func (o *RiskEvidenceSynthesis) SetOutcome(v Reference) {
	o.Outcome = v
}

// GetSampleSize returns the SampleSize field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetSampleSize() RiskEvidenceSynthesisSampleSize {
	if o == nil || IsNil(o.SampleSize) {
		var ret RiskEvidenceSynthesisSampleSize
		return ret
	}
	return *o.SampleSize
}

// GetSampleSizeOk returns a tuple with the SampleSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetSampleSizeOk() (*RiskEvidenceSynthesisSampleSize, bool) {
	if o == nil || IsNil(o.SampleSize) {
		return nil, false
	}
	return o.SampleSize, true
}

// HasSampleSize returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasSampleSize() bool {
	if o != nil && !IsNil(o.SampleSize) {
		return true
	}

	return false
}

// SetSampleSize gets a reference to the given RiskEvidenceSynthesisSampleSize and assigns it to the SampleSize field.
func (o *RiskEvidenceSynthesis) SetSampleSize(v RiskEvidenceSynthesisSampleSize) {
	o.SampleSize = &v
}

// GetRiskEstimate returns the RiskEstimate field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetRiskEstimate() RiskEvidenceSynthesisRiskEstimate {
	if o == nil || IsNil(o.RiskEstimate) {
		var ret RiskEvidenceSynthesisRiskEstimate
		return ret
	}
	return *o.RiskEstimate
}

// GetRiskEstimateOk returns a tuple with the RiskEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetRiskEstimateOk() (*RiskEvidenceSynthesisRiskEstimate, bool) {
	if o == nil || IsNil(o.RiskEstimate) {
		return nil, false
	}
	return o.RiskEstimate, true
}

// HasRiskEstimate returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasRiskEstimate() bool {
	if o != nil && !IsNil(o.RiskEstimate) {
		return true
	}

	return false
}

// SetRiskEstimate gets a reference to the given RiskEvidenceSynthesisRiskEstimate and assigns it to the RiskEstimate field.
func (o *RiskEvidenceSynthesis) SetRiskEstimate(v RiskEvidenceSynthesisRiskEstimate) {
	o.RiskEstimate = &v
}

// GetCertainty returns the Certainty field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesis) GetCertainty() []RiskEvidenceSynthesisCertainty {
	if o == nil || IsNil(o.Certainty) {
		var ret []RiskEvidenceSynthesisCertainty
		return ret
	}
	return o.Certainty
}

// GetCertaintyOk returns a tuple with the Certainty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesis) GetCertaintyOk() ([]RiskEvidenceSynthesisCertainty, bool) {
	if o == nil || IsNil(o.Certainty) {
		return nil, false
	}
	return o.Certainty, true
}

// HasCertainty returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesis) HasCertainty() bool {
	if o != nil && !IsNil(o.Certainty) {
		return true
	}

	return false
}

// SetCertainty gets a reference to the given []RiskEvidenceSynthesisCertainty and assigns it to the Certainty field.
func (o *RiskEvidenceSynthesis) SetCertainty(v []RiskEvidenceSynthesisCertainty) {
	o.Certainty = v
}

func (o RiskEvidenceSynthesis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskEvidenceSynthesis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.UseContext) {
		toSerialize["useContext"] = o.UseContext
	}
	if !IsNil(o.Jurisdiction) {
		toSerialize["jurisdiction"] = o.Jurisdiction
	}
	if !IsNil(o.Copyright) {
		toSerialize["copyright"] = o.Copyright
	}
	if !IsNil(o.ApprovalDate) {
		toSerialize["approvalDate"] = o.ApprovalDate
	}
	if !IsNil(o.LastReviewDate) {
		toSerialize["lastReviewDate"] = o.LastReviewDate
	}
	if !IsNil(o.EffectivePeriod) {
		toSerialize["effectivePeriod"] = o.EffectivePeriod
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	if !IsNil(o.Reviewer) {
		toSerialize["reviewer"] = o.Reviewer
	}
	if !IsNil(o.Endorser) {
		toSerialize["endorser"] = o.Endorser
	}
	if !IsNil(o.RelatedArtifact) {
		toSerialize["relatedArtifact"] = o.RelatedArtifact
	}
	if !IsNil(o.SynthesisType) {
		toSerialize["synthesisType"] = o.SynthesisType
	}
	if !IsNil(o.StudyType) {
		toSerialize["studyType"] = o.StudyType
	}
	toSerialize["population"] = o.Population
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	toSerialize["outcome"] = o.Outcome
	if !IsNil(o.SampleSize) {
		toSerialize["sampleSize"] = o.SampleSize
	}
	if !IsNil(o.RiskEstimate) {
		toSerialize["riskEstimate"] = o.RiskEstimate
	}
	if !IsNil(o.Certainty) {
		toSerialize["certainty"] = o.Certainty
	}
	return toSerialize, nil
}

func (o *RiskEvidenceSynthesis) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"population",
		"outcome",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRiskEvidenceSynthesis := _RiskEvidenceSynthesis{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRiskEvidenceSynthesis)

	if err != nil {
		return err
	}

	*o = RiskEvidenceSynthesis(varRiskEvidenceSynthesis)

	return err
}

type NullableRiskEvidenceSynthesis struct {
	value *RiskEvidenceSynthesis
	isSet bool
}

func (v NullableRiskEvidenceSynthesis) Get() *RiskEvidenceSynthesis {
	return v.value
}

func (v *NullableRiskEvidenceSynthesis) Set(val *RiskEvidenceSynthesis) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskEvidenceSynthesis) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskEvidenceSynthesis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskEvidenceSynthesis(val *RiskEvidenceSynthesis) *NullableRiskEvidenceSynthesis {
	return &NullableRiskEvidenceSynthesis{value: val, isSet: true}
}

func (v NullableRiskEvidenceSynthesis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskEvidenceSynthesis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


