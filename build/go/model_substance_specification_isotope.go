/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSpecificationIsotope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSpecificationIsotope{}

// SubstanceSpecificationIsotope The detailed description of a substance, typically at a level beyond what is used for prescribing.
type SubstanceSpecificationIsotope struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Substance identifier for each non-natural or radioisotope.
	Identifier *Identifier `json:"identifier,omitempty"`
	// Substance name for each non-natural or radioisotope.
	Name *CodeableConcept `json:"name,omitempty"`
	// The type of isotopic substitution present in a single substance.
	Substitution *CodeableConcept `json:"substitution,omitempty"`
	// Half life - for a non-natural nuclide.
	HalfLife *Quantity `json:"halfLife,omitempty"`
	// The molecular weight or weight range (for proteins, polymers or nucleic acids).
	MolecularWeight *SubstanceSpecificationMolecularWeight `json:"molecularWeight,omitempty"`
}

// NewSubstanceSpecificationIsotope instantiates a new SubstanceSpecificationIsotope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSpecificationIsotope() *SubstanceSpecificationIsotope {
	this := SubstanceSpecificationIsotope{}
	return &this
}

// NewSubstanceSpecificationIsotopeWithDefaults instantiates a new SubstanceSpecificationIsotope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSpecificationIsotopeWithDefaults() *SubstanceSpecificationIsotope {
	this := SubstanceSpecificationIsotope{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSpecificationIsotope) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSpecificationIsotope) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSpecificationIsotope) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *SubstanceSpecificationIsotope) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetName() CodeableConcept {
	if o == nil || IsNil(o.Name) {
		var ret CodeableConcept
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetNameOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given CodeableConcept and assigns it to the Name field.
func (o *SubstanceSpecificationIsotope) SetName(v CodeableConcept) {
	o.Name = &v
}

// GetSubstitution returns the Substitution field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetSubstitution() CodeableConcept {
	if o == nil || IsNil(o.Substitution) {
		var ret CodeableConcept
		return ret
	}
	return *o.Substitution
}

// GetSubstitutionOk returns a tuple with the Substitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetSubstitutionOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Substitution) {
		return nil, false
	}
	return o.Substitution, true
}

// HasSubstitution returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasSubstitution() bool {
	if o != nil && !IsNil(o.Substitution) {
		return true
	}

	return false
}

// SetSubstitution gets a reference to the given CodeableConcept and assigns it to the Substitution field.
func (o *SubstanceSpecificationIsotope) SetSubstitution(v CodeableConcept) {
	o.Substitution = &v
}

// GetHalfLife returns the HalfLife field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetHalfLife() Quantity {
	if o == nil || IsNil(o.HalfLife) {
		var ret Quantity
		return ret
	}
	return *o.HalfLife
}

// GetHalfLifeOk returns a tuple with the HalfLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetHalfLifeOk() (*Quantity, bool) {
	if o == nil || IsNil(o.HalfLife) {
		return nil, false
	}
	return o.HalfLife, true
}

// HasHalfLife returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasHalfLife() bool {
	if o != nil && !IsNil(o.HalfLife) {
		return true
	}

	return false
}

// SetHalfLife gets a reference to the given Quantity and assigns it to the HalfLife field.
func (o *SubstanceSpecificationIsotope) SetHalfLife(v Quantity) {
	o.HalfLife = &v
}

// GetMolecularWeight returns the MolecularWeight field value if set, zero value otherwise.
func (o *SubstanceSpecificationIsotope) GetMolecularWeight() SubstanceSpecificationMolecularWeight {
	if o == nil || IsNil(o.MolecularWeight) {
		var ret SubstanceSpecificationMolecularWeight
		return ret
	}
	return *o.MolecularWeight
}

// GetMolecularWeightOk returns a tuple with the MolecularWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationIsotope) GetMolecularWeightOk() (*SubstanceSpecificationMolecularWeight, bool) {
	if o == nil || IsNil(o.MolecularWeight) {
		return nil, false
	}
	return o.MolecularWeight, true
}

// HasMolecularWeight returns a boolean if a field has been set.
func (o *SubstanceSpecificationIsotope) HasMolecularWeight() bool {
	if o != nil && !IsNil(o.MolecularWeight) {
		return true
	}

	return false
}

// SetMolecularWeight gets a reference to the given SubstanceSpecificationMolecularWeight and assigns it to the MolecularWeight field.
func (o *SubstanceSpecificationIsotope) SetMolecularWeight(v SubstanceSpecificationMolecularWeight) {
	o.MolecularWeight = &v
}

func (o SubstanceSpecificationIsotope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSpecificationIsotope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Substitution) {
		toSerialize["substitution"] = o.Substitution
	}
	if !IsNil(o.HalfLife) {
		toSerialize["halfLife"] = o.HalfLife
	}
	if !IsNil(o.MolecularWeight) {
		toSerialize["molecularWeight"] = o.MolecularWeight
	}
	return toSerialize, nil
}

type NullableSubstanceSpecificationIsotope struct {
	value *SubstanceSpecificationIsotope
	isSet bool
}

func (v NullableSubstanceSpecificationIsotope) Get() *SubstanceSpecificationIsotope {
	return v.value
}

func (v *NullableSubstanceSpecificationIsotope) Set(val *SubstanceSpecificationIsotope) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSpecificationIsotope) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSpecificationIsotope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSpecificationIsotope(val *SubstanceSpecificationIsotope) *NullableSubstanceSpecificationIsotope {
	return &NullableSubstanceSpecificationIsotope{value: val, isSet: true}
}

func (v NullableSubstanceSpecificationIsotope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSpecificationIsotope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


