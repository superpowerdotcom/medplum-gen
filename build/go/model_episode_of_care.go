/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EpisodeOfCare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EpisodeOfCare{}

// EpisodeOfCare An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
type EpisodeOfCare struct {
	// This is a EpisodeOfCare resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
	Identifier []Identifier `json:"identifier,omitempty"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status *string `json:"status,omitempty"`
	// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
	StatusHistory []EpisodeOfCareStatusHistory `json:"statusHistory,omitempty"`
	// A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
	Type []CodeableConcept `json:"type,omitempty"`
	// The list of diagnosis relevant to this episode of care.
	Diagnosis []EpisodeOfCareDiagnosis `json:"diagnosis,omitempty"`
	// The patient who is the focus of this episode of care.
	Patient Reference `json:"patient"`
	// The organization that has assumed the specific responsibilities for the specified duration.
	ManagingOrganization *Reference `json:"managingOrganization,omitempty"`
	// The interval during which the managing organization assumes the defined responsibility.
	Period *Period `json:"period,omitempty"`
	// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
	ReferralRequest []Reference `json:"referralRequest,omitempty"`
	// The practitioner that is the care manager/care coordinator for this patient.
	CareManager *Reference `json:"careManager,omitempty"`
	// The list of practitioners that may be facilitating this episode of care for specific purposes.
	Team []Reference `json:"team,omitempty"`
	// The set of accounts that may be used for billing for this EpisodeOfCare.
	Account []Reference `json:"account,omitempty"`
}

type _EpisodeOfCare EpisodeOfCare

// NewEpisodeOfCare instantiates a new EpisodeOfCare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpisodeOfCare(resourceType string, patient Reference) *EpisodeOfCare {
	this := EpisodeOfCare{}
	this.ResourceType = resourceType
	this.Patient = patient
	return &this
}

// NewEpisodeOfCareWithDefaults instantiates a new EpisodeOfCare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpisodeOfCareWithDefaults() *EpisodeOfCare {
	this := EpisodeOfCare{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *EpisodeOfCare) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *EpisodeOfCare) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EpisodeOfCare) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *EpisodeOfCare) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *EpisodeOfCare) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *EpisodeOfCare) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *EpisodeOfCare) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *EpisodeOfCare) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *EpisodeOfCare) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *EpisodeOfCare) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *EpisodeOfCare) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EpisodeOfCare) SetStatus(v string) {
	o.Status = &v
}

// GetStatusHistory returns the StatusHistory field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetStatusHistory() []EpisodeOfCareStatusHistory {
	if o == nil || IsNil(o.StatusHistory) {
		var ret []EpisodeOfCareStatusHistory
		return ret
	}
	return o.StatusHistory
}

// GetStatusHistoryOk returns a tuple with the StatusHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetStatusHistoryOk() ([]EpisodeOfCareStatusHistory, bool) {
	if o == nil || IsNil(o.StatusHistory) {
		return nil, false
	}
	return o.StatusHistory, true
}

// HasStatusHistory returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasStatusHistory() bool {
	if o != nil && !IsNil(o.StatusHistory) {
		return true
	}

	return false
}

// SetStatusHistory gets a reference to the given []EpisodeOfCareStatusHistory and assigns it to the StatusHistory field.
func (o *EpisodeOfCare) SetStatusHistory(v []EpisodeOfCareStatusHistory) {
	o.StatusHistory = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetType() []CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret []CodeableConcept
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []CodeableConcept and assigns it to the Type field.
func (o *EpisodeOfCare) SetType(v []CodeableConcept) {
	o.Type = v
}

// GetDiagnosis returns the Diagnosis field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetDiagnosis() []EpisodeOfCareDiagnosis {
	if o == nil || IsNil(o.Diagnosis) {
		var ret []EpisodeOfCareDiagnosis
		return ret
	}
	return o.Diagnosis
}

// GetDiagnosisOk returns a tuple with the Diagnosis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetDiagnosisOk() ([]EpisodeOfCareDiagnosis, bool) {
	if o == nil || IsNil(o.Diagnosis) {
		return nil, false
	}
	return o.Diagnosis, true
}

// HasDiagnosis returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasDiagnosis() bool {
	if o != nil && !IsNil(o.Diagnosis) {
		return true
	}

	return false
}

// SetDiagnosis gets a reference to the given []EpisodeOfCareDiagnosis and assigns it to the Diagnosis field.
func (o *EpisodeOfCare) SetDiagnosis(v []EpisodeOfCareDiagnosis) {
	o.Diagnosis = v
}

// GetPatient returns the Patient field value
func (o *EpisodeOfCare) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *EpisodeOfCare) SetPatient(v Reference) {
	o.Patient = v
}

// GetManagingOrganization returns the ManagingOrganization field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetManagingOrganization() Reference {
	if o == nil || IsNil(o.ManagingOrganization) {
		var ret Reference
		return ret
	}
	return *o.ManagingOrganization
}

// GetManagingOrganizationOk returns a tuple with the ManagingOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetManagingOrganizationOk() (*Reference, bool) {
	if o == nil || IsNil(o.ManagingOrganization) {
		return nil, false
	}
	return o.ManagingOrganization, true
}

// HasManagingOrganization returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasManagingOrganization() bool {
	if o != nil && !IsNil(o.ManagingOrganization) {
		return true
	}

	return false
}

// SetManagingOrganization gets a reference to the given Reference and assigns it to the ManagingOrganization field.
func (o *EpisodeOfCare) SetManagingOrganization(v Reference) {
	o.ManagingOrganization = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *EpisodeOfCare) SetPeriod(v Period) {
	o.Period = &v
}

// GetReferralRequest returns the ReferralRequest field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetReferralRequest() []Reference {
	if o == nil || IsNil(o.ReferralRequest) {
		var ret []Reference
		return ret
	}
	return o.ReferralRequest
}

// GetReferralRequestOk returns a tuple with the ReferralRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetReferralRequestOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReferralRequest) {
		return nil, false
	}
	return o.ReferralRequest, true
}

// HasReferralRequest returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasReferralRequest() bool {
	if o != nil && !IsNil(o.ReferralRequest) {
		return true
	}

	return false
}

// SetReferralRequest gets a reference to the given []Reference and assigns it to the ReferralRequest field.
func (o *EpisodeOfCare) SetReferralRequest(v []Reference) {
	o.ReferralRequest = v
}

// GetCareManager returns the CareManager field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetCareManager() Reference {
	if o == nil || IsNil(o.CareManager) {
		var ret Reference
		return ret
	}
	return *o.CareManager
}

// GetCareManagerOk returns a tuple with the CareManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetCareManagerOk() (*Reference, bool) {
	if o == nil || IsNil(o.CareManager) {
		return nil, false
	}
	return o.CareManager, true
}

// HasCareManager returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasCareManager() bool {
	if o != nil && !IsNil(o.CareManager) {
		return true
	}

	return false
}

// SetCareManager gets a reference to the given Reference and assigns it to the CareManager field.
func (o *EpisodeOfCare) SetCareManager(v Reference) {
	o.CareManager = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetTeam() []Reference {
	if o == nil || IsNil(o.Team) {
		var ret []Reference
		return ret
	}
	return o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetTeamOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given []Reference and assigns it to the Team field.
func (o *EpisodeOfCare) SetTeam(v []Reference) {
	o.Team = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *EpisodeOfCare) GetAccount() []Reference {
	if o == nil || IsNil(o.Account) {
		var ret []Reference
		return ret
	}
	return o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCare) GetAccountOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *EpisodeOfCare) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given []Reference and assigns it to the Account field.
func (o *EpisodeOfCare) SetAccount(v []Reference) {
	o.Account = v
}

func (o EpisodeOfCare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EpisodeOfCare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusHistory) {
		toSerialize["statusHistory"] = o.StatusHistory
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Diagnosis) {
		toSerialize["diagnosis"] = o.Diagnosis
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.ManagingOrganization) {
		toSerialize["managingOrganization"] = o.ManagingOrganization
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.ReferralRequest) {
		toSerialize["referralRequest"] = o.ReferralRequest
	}
	if !IsNil(o.CareManager) {
		toSerialize["careManager"] = o.CareManager
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	return toSerialize, nil
}

func (o *EpisodeOfCare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"patient",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEpisodeOfCare := _EpisodeOfCare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEpisodeOfCare)

	if err != nil {
		return err
	}

	*o = EpisodeOfCare(varEpisodeOfCare)

	return err
}

type NullableEpisodeOfCare struct {
	value *EpisodeOfCare
	isSet bool
}

func (v NullableEpisodeOfCare) Get() *EpisodeOfCare {
	return v.value
}

func (v *NullableEpisodeOfCare) Set(val *EpisodeOfCare) {
	v.value = val
	v.isSet = true
}

func (v NullableEpisodeOfCare) IsSet() bool {
	return v.isSet
}

func (v *NullableEpisodeOfCare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpisodeOfCare(val *EpisodeOfCare) *NullableEpisodeOfCare {
	return &NullableEpisodeOfCare{value: val, isSet: true}
}

func (v NullableEpisodeOfCare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpisodeOfCare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


