/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MedicationRequestSubstitution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationRequestSubstitution{}

// MedicationRequestSubstitution An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type MedicationRequestSubstitution struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedBoolean *bool `json:"allowedBoolean,omitempty"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedCodeableConcept *CodeableConcept `json:"allowedCodeableConcept,omitempty"`
	// Indicates the reason for the substitution, or why substitution must or must not be performed.
	Reason *CodeableConcept `json:"reason,omitempty"`
}

// NewMedicationRequestSubstitution instantiates a new MedicationRequestSubstitution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationRequestSubstitution() *MedicationRequestSubstitution {
	this := MedicationRequestSubstitution{}
	return &this
}

// NewMedicationRequestSubstitutionWithDefaults instantiates a new MedicationRequestSubstitution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationRequestSubstitutionWithDefaults() *MedicationRequestSubstitution {
	this := MedicationRequestSubstitution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationRequestSubstitution) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationRequestSubstitution) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationRequestSubstitution) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAllowedBoolean returns the AllowedBoolean field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetAllowedBoolean() bool {
	if o == nil || IsNil(o.AllowedBoolean) {
		var ret bool
		return ret
	}
	return *o.AllowedBoolean
}

// GetAllowedBooleanOk returns a tuple with the AllowedBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetAllowedBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowedBoolean) {
		return nil, false
	}
	return o.AllowedBoolean, true
}

// HasAllowedBoolean returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasAllowedBoolean() bool {
	if o != nil && !IsNil(o.AllowedBoolean) {
		return true
	}

	return false
}

// SetAllowedBoolean gets a reference to the given bool and assigns it to the AllowedBoolean field.
func (o *MedicationRequestSubstitution) SetAllowedBoolean(v bool) {
	o.AllowedBoolean = &v
}

// GetAllowedCodeableConcept returns the AllowedCodeableConcept field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetAllowedCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.AllowedCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.AllowedCodeableConcept
}

// GetAllowedCodeableConceptOk returns a tuple with the AllowedCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetAllowedCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AllowedCodeableConcept) {
		return nil, false
	}
	return o.AllowedCodeableConcept, true
}

// HasAllowedCodeableConcept returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasAllowedCodeableConcept() bool {
	if o != nil && !IsNil(o.AllowedCodeableConcept) {
		return true
	}

	return false
}

// SetAllowedCodeableConcept gets a reference to the given CodeableConcept and assigns it to the AllowedCodeableConcept field.
func (o *MedicationRequestSubstitution) SetAllowedCodeableConcept(v CodeableConcept) {
	o.AllowedCodeableConcept = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *MedicationRequestSubstitution) GetReason() CodeableConcept {
	if o == nil || IsNil(o.Reason) {
		var ret CodeableConcept
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestSubstitution) GetReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *MedicationRequestSubstitution) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CodeableConcept and assigns it to the Reason field.
func (o *MedicationRequestSubstitution) SetReason(v CodeableConcept) {
	o.Reason = &v
}

func (o MedicationRequestSubstitution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationRequestSubstitution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.AllowedBoolean) {
		toSerialize["allowedBoolean"] = o.AllowedBoolean
	}
	if !IsNil(o.AllowedCodeableConcept) {
		toSerialize["allowedCodeableConcept"] = o.AllowedCodeableConcept
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableMedicationRequestSubstitution struct {
	value *MedicationRequestSubstitution
	isSet bool
}

func (v NullableMedicationRequestSubstitution) Get() *MedicationRequestSubstitution {
	return v.value
}

func (v *NullableMedicationRequestSubstitution) Set(val *MedicationRequestSubstitution) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationRequestSubstitution) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationRequestSubstitution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationRequestSubstitution(val *MedicationRequestSubstitution) *NullableMedicationRequestSubstitution {
	return &NullableMedicationRequestSubstitution{value: val, isSet: true}
}

func (v NullableMedicationRequestSubstitution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationRequestSubstitution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


