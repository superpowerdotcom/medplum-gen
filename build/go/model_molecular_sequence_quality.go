/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MolecularSequenceQuality type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MolecularSequenceQuality{}

// MolecularSequenceQuality Raw data describing a biological sequence.
type MolecularSequenceQuality struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// INDEL / SNP / Undefined variant.
	Type *string `json:"type,omitempty"`
	// Gold standard sequence used for comparing against.
	StandardSequence *CodeableConcept `json:"standardSequence,omitempty"`
	// A whole number
	Start *float32 `json:"start,omitempty"`
	// A whole number
	End *float32 `json:"end,omitempty"`
	// The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
	Score *Quantity `json:"score,omitempty"`
	// Which method is used to get sequence quality.
	Method *CodeableConcept `json:"method,omitempty"`
	// A rational number with implicit precision
	TruthTP *float32 `json:"truthTP,omitempty"`
	// A rational number with implicit precision
	QueryTP *float32 `json:"queryTP,omitempty"`
	// A rational number with implicit precision
	TruthFN *float32 `json:"truthFN,omitempty"`
	// A rational number with implicit precision
	QueryFP *float32 `json:"queryFP,omitempty"`
	// A rational number with implicit precision
	GtFP *float32 `json:"gtFP,omitempty"`
	// A rational number with implicit precision
	Precision *float32 `json:"precision,omitempty"`
	// A rational number with implicit precision
	Recall *float32 `json:"recall,omitempty"`
	// A rational number with implicit precision
	FScore *float32 `json:"fScore,omitempty"`
	// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
	Roc *MolecularSequenceRoc `json:"roc,omitempty"`
}

// NewMolecularSequenceQuality instantiates a new MolecularSequenceQuality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMolecularSequenceQuality() *MolecularSequenceQuality {
	this := MolecularSequenceQuality{}
	return &this
}

// NewMolecularSequenceQualityWithDefaults instantiates a new MolecularSequenceQuality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMolecularSequenceQualityWithDefaults() *MolecularSequenceQuality {
	this := MolecularSequenceQuality{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MolecularSequenceQuality) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MolecularSequenceQuality) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MolecularSequenceQuality) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MolecularSequenceQuality) SetType(v string) {
	o.Type = &v
}

// GetStandardSequence returns the StandardSequence field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetStandardSequence() CodeableConcept {
	if o == nil || IsNil(o.StandardSequence) {
		var ret CodeableConcept
		return ret
	}
	return *o.StandardSequence
}

// GetStandardSequenceOk returns a tuple with the StandardSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetStandardSequenceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StandardSequence) {
		return nil, false
	}
	return o.StandardSequence, true
}

// HasStandardSequence returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasStandardSequence() bool {
	if o != nil && !IsNil(o.StandardSequence) {
		return true
	}

	return false
}

// SetStandardSequence gets a reference to the given CodeableConcept and assigns it to the StandardSequence field.
func (o *MolecularSequenceQuality) SetStandardSequence(v CodeableConcept) {
	o.StandardSequence = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetStart() float32 {
	if o == nil || IsNil(o.Start) {
		var ret float32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetStartOk() (*float32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given float32 and assigns it to the Start field.
func (o *MolecularSequenceQuality) SetStart(v float32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetEnd() float32 {
	if o == nil || IsNil(o.End) {
		var ret float32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetEndOk() (*float32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given float32 and assigns it to the End field.
func (o *MolecularSequenceQuality) SetEnd(v float32) {
	o.End = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetScore() Quantity {
	if o == nil || IsNil(o.Score) {
		var ret Quantity
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetScoreOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given Quantity and assigns it to the Score field.
func (o *MolecularSequenceQuality) SetScore(v Quantity) {
	o.Score = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *MolecularSequenceQuality) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetTruthTP returns the TruthTP field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetTruthTP() float32 {
	if o == nil || IsNil(o.TruthTP) {
		var ret float32
		return ret
	}
	return *o.TruthTP
}

// GetTruthTPOk returns a tuple with the TruthTP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetTruthTPOk() (*float32, bool) {
	if o == nil || IsNil(o.TruthTP) {
		return nil, false
	}
	return o.TruthTP, true
}

// HasTruthTP returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasTruthTP() bool {
	if o != nil && !IsNil(o.TruthTP) {
		return true
	}

	return false
}

// SetTruthTP gets a reference to the given float32 and assigns it to the TruthTP field.
func (o *MolecularSequenceQuality) SetTruthTP(v float32) {
	o.TruthTP = &v
}

// GetQueryTP returns the QueryTP field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetQueryTP() float32 {
	if o == nil || IsNil(o.QueryTP) {
		var ret float32
		return ret
	}
	return *o.QueryTP
}

// GetQueryTPOk returns a tuple with the QueryTP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetQueryTPOk() (*float32, bool) {
	if o == nil || IsNil(o.QueryTP) {
		return nil, false
	}
	return o.QueryTP, true
}

// HasQueryTP returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasQueryTP() bool {
	if o != nil && !IsNil(o.QueryTP) {
		return true
	}

	return false
}

// SetQueryTP gets a reference to the given float32 and assigns it to the QueryTP field.
func (o *MolecularSequenceQuality) SetQueryTP(v float32) {
	o.QueryTP = &v
}

// GetTruthFN returns the TruthFN field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetTruthFN() float32 {
	if o == nil || IsNil(o.TruthFN) {
		var ret float32
		return ret
	}
	return *o.TruthFN
}

// GetTruthFNOk returns a tuple with the TruthFN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetTruthFNOk() (*float32, bool) {
	if o == nil || IsNil(o.TruthFN) {
		return nil, false
	}
	return o.TruthFN, true
}

// HasTruthFN returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasTruthFN() bool {
	if o != nil && !IsNil(o.TruthFN) {
		return true
	}

	return false
}

// SetTruthFN gets a reference to the given float32 and assigns it to the TruthFN field.
func (o *MolecularSequenceQuality) SetTruthFN(v float32) {
	o.TruthFN = &v
}

// GetQueryFP returns the QueryFP field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetQueryFP() float32 {
	if o == nil || IsNil(o.QueryFP) {
		var ret float32
		return ret
	}
	return *o.QueryFP
}

// GetQueryFPOk returns a tuple with the QueryFP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetQueryFPOk() (*float32, bool) {
	if o == nil || IsNil(o.QueryFP) {
		return nil, false
	}
	return o.QueryFP, true
}

// HasQueryFP returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasQueryFP() bool {
	if o != nil && !IsNil(o.QueryFP) {
		return true
	}

	return false
}

// SetQueryFP gets a reference to the given float32 and assigns it to the QueryFP field.
func (o *MolecularSequenceQuality) SetQueryFP(v float32) {
	o.QueryFP = &v
}

// GetGtFP returns the GtFP field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetGtFP() float32 {
	if o == nil || IsNil(o.GtFP) {
		var ret float32
		return ret
	}
	return *o.GtFP
}

// GetGtFPOk returns a tuple with the GtFP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetGtFPOk() (*float32, bool) {
	if o == nil || IsNil(o.GtFP) {
		return nil, false
	}
	return o.GtFP, true
}

// HasGtFP returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasGtFP() bool {
	if o != nil && !IsNil(o.GtFP) {
		return true
	}

	return false
}

// SetGtFP gets a reference to the given float32 and assigns it to the GtFP field.
func (o *MolecularSequenceQuality) SetGtFP(v float32) {
	o.GtFP = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetPrecision() float32 {
	if o == nil || IsNil(o.Precision) {
		var ret float32
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetPrecisionOk() (*float32, bool) {
	if o == nil || IsNil(o.Precision) {
		return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasPrecision() bool {
	if o != nil && !IsNil(o.Precision) {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given float32 and assigns it to the Precision field.
func (o *MolecularSequenceQuality) SetPrecision(v float32) {
	o.Precision = &v
}

// GetRecall returns the Recall field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetRecall() float32 {
	if o == nil || IsNil(o.Recall) {
		var ret float32
		return ret
	}
	return *o.Recall
}

// GetRecallOk returns a tuple with the Recall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetRecallOk() (*float32, bool) {
	if o == nil || IsNil(o.Recall) {
		return nil, false
	}
	return o.Recall, true
}

// HasRecall returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasRecall() bool {
	if o != nil && !IsNil(o.Recall) {
		return true
	}

	return false
}

// SetRecall gets a reference to the given float32 and assigns it to the Recall field.
func (o *MolecularSequenceQuality) SetRecall(v float32) {
	o.Recall = &v
}

// GetFScore returns the FScore field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetFScore() float32 {
	if o == nil || IsNil(o.FScore) {
		var ret float32
		return ret
	}
	return *o.FScore
}

// GetFScoreOk returns a tuple with the FScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetFScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.FScore) {
		return nil, false
	}
	return o.FScore, true
}

// HasFScore returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasFScore() bool {
	if o != nil && !IsNil(o.FScore) {
		return true
	}

	return false
}

// SetFScore gets a reference to the given float32 and assigns it to the FScore field.
func (o *MolecularSequenceQuality) SetFScore(v float32) {
	o.FScore = &v
}

// GetRoc returns the Roc field value if set, zero value otherwise.
func (o *MolecularSequenceQuality) GetRoc() MolecularSequenceRoc {
	if o == nil || IsNil(o.Roc) {
		var ret MolecularSequenceRoc
		return ret
	}
	return *o.Roc
}

// GetRocOk returns a tuple with the Roc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MolecularSequenceQuality) GetRocOk() (*MolecularSequenceRoc, bool) {
	if o == nil || IsNil(o.Roc) {
		return nil, false
	}
	return o.Roc, true
}

// HasRoc returns a boolean if a field has been set.
func (o *MolecularSequenceQuality) HasRoc() bool {
	if o != nil && !IsNil(o.Roc) {
		return true
	}

	return false
}

// SetRoc gets a reference to the given MolecularSequenceRoc and assigns it to the Roc field.
func (o *MolecularSequenceQuality) SetRoc(v MolecularSequenceRoc) {
	o.Roc = &v
}

func (o MolecularSequenceQuality) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MolecularSequenceQuality) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.StandardSequence) {
		toSerialize["standardSequence"] = o.StandardSequence
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.TruthTP) {
		toSerialize["truthTP"] = o.TruthTP
	}
	if !IsNil(o.QueryTP) {
		toSerialize["queryTP"] = o.QueryTP
	}
	if !IsNil(o.TruthFN) {
		toSerialize["truthFN"] = o.TruthFN
	}
	if !IsNil(o.QueryFP) {
		toSerialize["queryFP"] = o.QueryFP
	}
	if !IsNil(o.GtFP) {
		toSerialize["gtFP"] = o.GtFP
	}
	if !IsNil(o.Precision) {
		toSerialize["precision"] = o.Precision
	}
	if !IsNil(o.Recall) {
		toSerialize["recall"] = o.Recall
	}
	if !IsNil(o.FScore) {
		toSerialize["fScore"] = o.FScore
	}
	if !IsNil(o.Roc) {
		toSerialize["roc"] = o.Roc
	}
	return toSerialize, nil
}

type NullableMolecularSequenceQuality struct {
	value *MolecularSequenceQuality
	isSet bool
}

func (v NullableMolecularSequenceQuality) Get() *MolecularSequenceQuality {
	return v.value
}

func (v *NullableMolecularSequenceQuality) Set(val *MolecularSequenceQuality) {
	v.value = val
	v.isSet = true
}

func (v NullableMolecularSequenceQuality) IsSet() bool {
	return v.isSet
}

func (v *NullableMolecularSequenceQuality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMolecularSequenceQuality(val *MolecularSequenceQuality) *NullableMolecularSequenceQuality {
	return &NullableMolecularSequenceQuality{value: val, isSet: true}
}

func (v NullableMolecularSequenceQuality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMolecularSequenceQuality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


