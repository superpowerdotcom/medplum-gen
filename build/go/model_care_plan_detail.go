/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CarePlanDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CarePlanDetail{}

// CarePlanDetail Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
type CarePlanDetail struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Kind *string `json:"kind,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// Detailed description of the type of planned activity; e.g. what lab test, what procedure, what kind of encounter.
	Code *CodeableConcept `json:"code,omitempty"`
	// Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Indicates another resource, such as the health condition(s), whose existence justifies this request and drove the inclusion of this particular activity as part of the plan.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
	Goal []Reference `json:"goal,omitempty"`
	// Identifies what progress is being made for the specific activity.
	Status *string `json:"status,omitempty"`
	// Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
	StatusReason *CodeableConcept `json:"statusReason,omitempty"`
	// Value of \"true\" or \"false\"
	DoNotPerform *bool `json:"doNotPerform,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	ScheduledTiming *Timing `json:"scheduledTiming,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	ScheduledPeriod *Period `json:"scheduledPeriod,omitempty"`
	// The period, timing or frequency upon which the described activity is to occur.
	ScheduledString *string `json:"scheduledString,omitempty"`
	// Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
	Location *Reference `json:"location,omitempty"`
	// Identifies who's expected to be involved in the activity.
	Performer []Reference `json:"performer,omitempty"`
	// Identifies the food, drug or other product to be consumed or supplied in the activity.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept,omitempty"`
	// Identifies the food, drug or other product to be consumed or supplied in the activity.
	ProductReference *Reference `json:"productReference,omitempty"`
	// Identifies the quantity expected to be consumed in a given day.
	DailyAmount *Quantity `json:"dailyAmount,omitempty"`
	// Identifies the quantity expected to be supplied, administered or consumed by the subject.
	Quantity *Quantity `json:"quantity,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
}

// NewCarePlanDetail instantiates a new CarePlanDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarePlanDetail() *CarePlanDetail {
	this := CarePlanDetail{}
	return &this
}

// NewCarePlanDetailWithDefaults instantiates a new CarePlanDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarePlanDetailWithDefaults() *CarePlanDetail {
	this := CarePlanDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CarePlanDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CarePlanDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CarePlanDetail) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CarePlanDetail) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CarePlanDetail) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CarePlanDetail) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CarePlanDetail) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CarePlanDetail) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CarePlanDetail) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CarePlanDetail) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CarePlanDetail) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CarePlanDetail) SetKind(v string) {
	o.Kind = &v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *CarePlanDetail) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *CarePlanDetail) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *CarePlanDetail) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *CarePlanDetail) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *CarePlanDetail) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *CarePlanDetail) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CarePlanDetail) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CarePlanDetail) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *CarePlanDetail) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *CarePlanDetail) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *CarePlanDetail) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *CarePlanDetail) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *CarePlanDetail) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *CarePlanDetail) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *CarePlanDetail) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetGoal returns the Goal field value if set, zero value otherwise.
func (o *CarePlanDetail) GetGoal() []Reference {
	if o == nil || IsNil(o.Goal) {
		var ret []Reference
		return ret
	}
	return o.Goal
}

// GetGoalOk returns a tuple with the Goal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetGoalOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Goal) {
		return nil, false
	}
	return o.Goal, true
}

// HasGoal returns a boolean if a field has been set.
func (o *CarePlanDetail) HasGoal() bool {
	if o != nil && !IsNil(o.Goal) {
		return true
	}

	return false
}

// SetGoal gets a reference to the given []Reference and assigns it to the Goal field.
func (o *CarePlanDetail) SetGoal(v []Reference) {
	o.Goal = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CarePlanDetail) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CarePlanDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CarePlanDetail) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *CarePlanDetail) GetStatusReason() CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetStatusReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *CarePlanDetail) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given CodeableConcept and assigns it to the StatusReason field.
func (o *CarePlanDetail) SetStatusReason(v CodeableConcept) {
	o.StatusReason = &v
}

// GetDoNotPerform returns the DoNotPerform field value if set, zero value otherwise.
func (o *CarePlanDetail) GetDoNotPerform() bool {
	if o == nil || IsNil(o.DoNotPerform) {
		var ret bool
		return ret
	}
	return *o.DoNotPerform
}

// GetDoNotPerformOk returns a tuple with the DoNotPerform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetDoNotPerformOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotPerform) {
		return nil, false
	}
	return o.DoNotPerform, true
}

// HasDoNotPerform returns a boolean if a field has been set.
func (o *CarePlanDetail) HasDoNotPerform() bool {
	if o != nil && !IsNil(o.DoNotPerform) {
		return true
	}

	return false
}

// SetDoNotPerform gets a reference to the given bool and assigns it to the DoNotPerform field.
func (o *CarePlanDetail) SetDoNotPerform(v bool) {
	o.DoNotPerform = &v
}

// GetScheduledTiming returns the ScheduledTiming field value if set, zero value otherwise.
func (o *CarePlanDetail) GetScheduledTiming() Timing {
	if o == nil || IsNil(o.ScheduledTiming) {
		var ret Timing
		return ret
	}
	return *o.ScheduledTiming
}

// GetScheduledTimingOk returns a tuple with the ScheduledTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetScheduledTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.ScheduledTiming) {
		return nil, false
	}
	return o.ScheduledTiming, true
}

// HasScheduledTiming returns a boolean if a field has been set.
func (o *CarePlanDetail) HasScheduledTiming() bool {
	if o != nil && !IsNil(o.ScheduledTiming) {
		return true
	}

	return false
}

// SetScheduledTiming gets a reference to the given Timing and assigns it to the ScheduledTiming field.
func (o *CarePlanDetail) SetScheduledTiming(v Timing) {
	o.ScheduledTiming = &v
}

// GetScheduledPeriod returns the ScheduledPeriod field value if set, zero value otherwise.
func (o *CarePlanDetail) GetScheduledPeriod() Period {
	if o == nil || IsNil(o.ScheduledPeriod) {
		var ret Period
		return ret
	}
	return *o.ScheduledPeriod
}

// GetScheduledPeriodOk returns a tuple with the ScheduledPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetScheduledPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ScheduledPeriod) {
		return nil, false
	}
	return o.ScheduledPeriod, true
}

// HasScheduledPeriod returns a boolean if a field has been set.
func (o *CarePlanDetail) HasScheduledPeriod() bool {
	if o != nil && !IsNil(o.ScheduledPeriod) {
		return true
	}

	return false
}

// SetScheduledPeriod gets a reference to the given Period and assigns it to the ScheduledPeriod field.
func (o *CarePlanDetail) SetScheduledPeriod(v Period) {
	o.ScheduledPeriod = &v
}

// GetScheduledString returns the ScheduledString field value if set, zero value otherwise.
func (o *CarePlanDetail) GetScheduledString() string {
	if o == nil || IsNil(o.ScheduledString) {
		var ret string
		return ret
	}
	return *o.ScheduledString
}

// GetScheduledStringOk returns a tuple with the ScheduledString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetScheduledStringOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledString) {
		return nil, false
	}
	return o.ScheduledString, true
}

// HasScheduledString returns a boolean if a field has been set.
func (o *CarePlanDetail) HasScheduledString() bool {
	if o != nil && !IsNil(o.ScheduledString) {
		return true
	}

	return false
}

// SetScheduledString gets a reference to the given string and assigns it to the ScheduledString field.
func (o *CarePlanDetail) SetScheduledString(v string) {
	o.ScheduledString = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CarePlanDetail) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CarePlanDetail) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *CarePlanDetail) SetLocation(v Reference) {
	o.Location = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *CarePlanDetail) GetPerformer() []Reference {
	if o == nil || IsNil(o.Performer) {
		var ret []Reference
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetPerformerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *CarePlanDetail) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []Reference and assigns it to the Performer field.
func (o *CarePlanDetail) SetPerformer(v []Reference) {
	o.Performer = v
}

// GetProductCodeableConcept returns the ProductCodeableConcept field value if set, zero value otherwise.
func (o *CarePlanDetail) GetProductCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductCodeableConcept
}

// GetProductCodeableConceptOk returns a tuple with the ProductCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetProductCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		return nil, false
	}
	return o.ProductCodeableConcept, true
}

// HasProductCodeableConcept returns a boolean if a field has been set.
func (o *CarePlanDetail) HasProductCodeableConcept() bool {
	if o != nil && !IsNil(o.ProductCodeableConcept) {
		return true
	}

	return false
}

// SetProductCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ProductCodeableConcept field.
func (o *CarePlanDetail) SetProductCodeableConcept(v CodeableConcept) {
	o.ProductCodeableConcept = &v
}

// GetProductReference returns the ProductReference field value if set, zero value otherwise.
func (o *CarePlanDetail) GetProductReference() Reference {
	if o == nil || IsNil(o.ProductReference) {
		var ret Reference
		return ret
	}
	return *o.ProductReference
}

// GetProductReferenceOk returns a tuple with the ProductReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetProductReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProductReference) {
		return nil, false
	}
	return o.ProductReference, true
}

// HasProductReference returns a boolean if a field has been set.
func (o *CarePlanDetail) HasProductReference() bool {
	if o != nil && !IsNil(o.ProductReference) {
		return true
	}

	return false
}

// SetProductReference gets a reference to the given Reference and assigns it to the ProductReference field.
func (o *CarePlanDetail) SetProductReference(v Reference) {
	o.ProductReference = &v
}

// GetDailyAmount returns the DailyAmount field value if set, zero value otherwise.
func (o *CarePlanDetail) GetDailyAmount() Quantity {
	if o == nil || IsNil(o.DailyAmount) {
		var ret Quantity
		return ret
	}
	return *o.DailyAmount
}

// GetDailyAmountOk returns a tuple with the DailyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetDailyAmountOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DailyAmount) {
		return nil, false
	}
	return o.DailyAmount, true
}

// HasDailyAmount returns a boolean if a field has been set.
func (o *CarePlanDetail) HasDailyAmount() bool {
	if o != nil && !IsNil(o.DailyAmount) {
		return true
	}

	return false
}

// SetDailyAmount gets a reference to the given Quantity and assigns it to the DailyAmount field.
func (o *CarePlanDetail) SetDailyAmount(v Quantity) {
	o.DailyAmount = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CarePlanDetail) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CarePlanDetail) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *CarePlanDetail) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CarePlanDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarePlanDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CarePlanDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CarePlanDetail) SetDescription(v string) {
	o.Description = &v
}

func (o CarePlanDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CarePlanDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Goal) {
		toSerialize["goal"] = o.Goal
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.DoNotPerform) {
		toSerialize["doNotPerform"] = o.DoNotPerform
	}
	if !IsNil(o.ScheduledTiming) {
		toSerialize["scheduledTiming"] = o.ScheduledTiming
	}
	if !IsNil(o.ScheduledPeriod) {
		toSerialize["scheduledPeriod"] = o.ScheduledPeriod
	}
	if !IsNil(o.ScheduledString) {
		toSerialize["scheduledString"] = o.ScheduledString
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.ProductCodeableConcept) {
		toSerialize["productCodeableConcept"] = o.ProductCodeableConcept
	}
	if !IsNil(o.ProductReference) {
		toSerialize["productReference"] = o.ProductReference
	}
	if !IsNil(o.DailyAmount) {
		toSerialize["dailyAmount"] = o.DailyAmount
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableCarePlanDetail struct {
	value *CarePlanDetail
	isSet bool
}

func (v NullableCarePlanDetail) Get() *CarePlanDetail {
	return v.value
}

func (v *NullableCarePlanDetail) Set(val *CarePlanDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCarePlanDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCarePlanDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarePlanDetail(val *CarePlanDetail) *NullableCarePlanDetail {
	return &NullableCarePlanDetail{value: val, isSet: true}
}

func (v NullableCarePlanDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarePlanDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


