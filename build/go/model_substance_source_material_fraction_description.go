/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSourceMaterialFractionDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSourceMaterialFractionDescription{}

// SubstanceSourceMaterialFractionDescription Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterialFractionDescription struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Fraction *string `json:"fraction,omitempty"`
	// The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
	MaterialType *CodeableConcept `json:"materialType,omitempty"`
}

// NewSubstanceSourceMaterialFractionDescription instantiates a new SubstanceSourceMaterialFractionDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSourceMaterialFractionDescription() *SubstanceSourceMaterialFractionDescription {
	this := SubstanceSourceMaterialFractionDescription{}
	return &this
}

// NewSubstanceSourceMaterialFractionDescriptionWithDefaults instantiates a new SubstanceSourceMaterialFractionDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSourceMaterialFractionDescriptionWithDefaults() *SubstanceSourceMaterialFractionDescription {
	this := SubstanceSourceMaterialFractionDescription{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialFractionDescription) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialFractionDescription) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialFractionDescription) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSourceMaterialFractionDescription) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialFractionDescription) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialFractionDescription) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialFractionDescription) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSourceMaterialFractionDescription) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialFractionDescription) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialFractionDescription) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialFractionDescription) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSourceMaterialFractionDescription) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetFraction returns the Fraction field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialFractionDescription) GetFraction() string {
	if o == nil || IsNil(o.Fraction) {
		var ret string
		return ret
	}
	return *o.Fraction
}

// GetFractionOk returns a tuple with the Fraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialFractionDescription) GetFractionOk() (*string, bool) {
	if o == nil || IsNil(o.Fraction) {
		return nil, false
	}
	return o.Fraction, true
}

// HasFraction returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialFractionDescription) HasFraction() bool {
	if o != nil && !IsNil(o.Fraction) {
		return true
	}

	return false
}

// SetFraction gets a reference to the given string and assigns it to the Fraction field.
func (o *SubstanceSourceMaterialFractionDescription) SetFraction(v string) {
	o.Fraction = &v
}

// GetMaterialType returns the MaterialType field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialFractionDescription) GetMaterialType() CodeableConcept {
	if o == nil || IsNil(o.MaterialType) {
		var ret CodeableConcept
		return ret
	}
	return *o.MaterialType
}

// GetMaterialTypeOk returns a tuple with the MaterialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialFractionDescription) GetMaterialTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.MaterialType) {
		return nil, false
	}
	return o.MaterialType, true
}

// HasMaterialType returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialFractionDescription) HasMaterialType() bool {
	if o != nil && !IsNil(o.MaterialType) {
		return true
	}

	return false
}

// SetMaterialType gets a reference to the given CodeableConcept and assigns it to the MaterialType field.
func (o *SubstanceSourceMaterialFractionDescription) SetMaterialType(v CodeableConcept) {
	o.MaterialType = &v
}

func (o SubstanceSourceMaterialFractionDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSourceMaterialFractionDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Fraction) {
		toSerialize["fraction"] = o.Fraction
	}
	if !IsNil(o.MaterialType) {
		toSerialize["materialType"] = o.MaterialType
	}
	return toSerialize, nil
}

type NullableSubstanceSourceMaterialFractionDescription struct {
	value *SubstanceSourceMaterialFractionDescription
	isSet bool
}

func (v NullableSubstanceSourceMaterialFractionDescription) Get() *SubstanceSourceMaterialFractionDescription {
	return v.value
}

func (v *NullableSubstanceSourceMaterialFractionDescription) Set(val *SubstanceSourceMaterialFractionDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSourceMaterialFractionDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSourceMaterialFractionDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSourceMaterialFractionDescription(val *SubstanceSourceMaterialFractionDescription) *NullableSubstanceSourceMaterialFractionDescription {
	return &NullableSubstanceSourceMaterialFractionDescription{value: val, isSet: true}
}

func (v NullableSubstanceSourceMaterialFractionDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSourceMaterialFractionDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


