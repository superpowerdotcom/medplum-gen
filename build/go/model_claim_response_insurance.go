/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimResponseInsurance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimResponseInsurance{}

// ClaimResponseInsurance This resource provides the adjudication details from the processing of a Claim resource.
type ClaimResponseInsurance struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// Value of \"true\" or \"false\"
	Focal *bool `json:"focal,omitempty"`
	// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	Coverage Reference `json:"coverage"`
	// A sequence of Unicode characters
	BusinessArrangement *string `json:"businessArrangement,omitempty"`
	// The result of the adjudication of the line items for the Coverage specified in this insurance.
	ClaimResponse *Reference `json:"claimResponse,omitempty"`
}

type _ClaimResponseInsurance ClaimResponseInsurance

// NewClaimResponseInsurance instantiates a new ClaimResponseInsurance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimResponseInsurance(coverage Reference) *ClaimResponseInsurance {
	this := ClaimResponseInsurance{}
	this.Coverage = coverage
	return &this
}

// NewClaimResponseInsuranceWithDefaults instantiates a new ClaimResponseInsurance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimResponseInsuranceWithDefaults() *ClaimResponseInsurance {
	this := ClaimResponseInsurance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClaimResponseInsurance) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ClaimResponseInsurance) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ClaimResponseInsurance) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ClaimResponseInsurance) SetSequence(v float32) {
	o.Sequence = &v
}

// GetFocal returns the Focal field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetFocal() bool {
	if o == nil || IsNil(o.Focal) {
		var ret bool
		return ret
	}
	return *o.Focal
}

// GetFocalOk returns a tuple with the Focal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetFocalOk() (*bool, bool) {
	if o == nil || IsNil(o.Focal) {
		return nil, false
	}
	return o.Focal, true
}

// HasFocal returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasFocal() bool {
	if o != nil && !IsNil(o.Focal) {
		return true
	}

	return false
}

// SetFocal gets a reference to the given bool and assigns it to the Focal field.
func (o *ClaimResponseInsurance) SetFocal(v bool) {
	o.Focal = &v
}

// GetCoverage returns the Coverage field value
func (o *ClaimResponseInsurance) GetCoverage() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Coverage
}

// GetCoverageOk returns a tuple with the Coverage field value
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetCoverageOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coverage, true
}

// SetCoverage sets field value
func (o *ClaimResponseInsurance) SetCoverage(v Reference) {
	o.Coverage = v
}

// GetBusinessArrangement returns the BusinessArrangement field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetBusinessArrangement() string {
	if o == nil || IsNil(o.BusinessArrangement) {
		var ret string
		return ret
	}
	return *o.BusinessArrangement
}

// GetBusinessArrangementOk returns a tuple with the BusinessArrangement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetBusinessArrangementOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessArrangement) {
		return nil, false
	}
	return o.BusinessArrangement, true
}

// HasBusinessArrangement returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasBusinessArrangement() bool {
	if o != nil && !IsNil(o.BusinessArrangement) {
		return true
	}

	return false
}

// SetBusinessArrangement gets a reference to the given string and assigns it to the BusinessArrangement field.
func (o *ClaimResponseInsurance) SetBusinessArrangement(v string) {
	o.BusinessArrangement = &v
}

// GetClaimResponse returns the ClaimResponse field value if set, zero value otherwise.
func (o *ClaimResponseInsurance) GetClaimResponse() Reference {
	if o == nil || IsNil(o.ClaimResponse) {
		var ret Reference
		return ret
	}
	return *o.ClaimResponse
}

// GetClaimResponseOk returns a tuple with the ClaimResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimResponseInsurance) GetClaimResponseOk() (*Reference, bool) {
	if o == nil || IsNil(o.ClaimResponse) {
		return nil, false
	}
	return o.ClaimResponse, true
}

// HasClaimResponse returns a boolean if a field has been set.
func (o *ClaimResponseInsurance) HasClaimResponse() bool {
	if o != nil && !IsNil(o.ClaimResponse) {
		return true
	}

	return false
}

// SetClaimResponse gets a reference to the given Reference and assigns it to the ClaimResponse field.
func (o *ClaimResponseInsurance) SetClaimResponse(v Reference) {
	o.ClaimResponse = &v
}

func (o ClaimResponseInsurance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimResponseInsurance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Focal) {
		toSerialize["focal"] = o.Focal
	}
	toSerialize["coverage"] = o.Coverage
	if !IsNil(o.BusinessArrangement) {
		toSerialize["businessArrangement"] = o.BusinessArrangement
	}
	if !IsNil(o.ClaimResponse) {
		toSerialize["claimResponse"] = o.ClaimResponse
	}
	return toSerialize, nil
}

func (o *ClaimResponseInsurance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coverage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimResponseInsurance := _ClaimResponseInsurance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimResponseInsurance)

	if err != nil {
		return err
	}

	*o = ClaimResponseInsurance(varClaimResponseInsurance)

	return err
}

type NullableClaimResponseInsurance struct {
	value *ClaimResponseInsurance
	isSet bool
}

func (v NullableClaimResponseInsurance) Get() *ClaimResponseInsurance {
	return v.value
}

func (v *NullableClaimResponseInsurance) Set(val *ClaimResponseInsurance) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimResponseInsurance) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimResponseInsurance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimResponseInsurance(val *ClaimResponseInsurance) *NullableClaimResponseInsurance {
	return &NullableClaimResponseInsurance{value: val, isSet: true}
}

func (v NullableClaimResponseInsurance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimResponseInsurance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


