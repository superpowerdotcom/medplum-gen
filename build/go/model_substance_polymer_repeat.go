/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstancePolymerRepeat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstancePolymerRepeat{}

// SubstancePolymerRepeat Todo.
type SubstancePolymerRepeat struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A whole number
	NumberOfUnits *float32 `json:"numberOfUnits,omitempty"`
	// A sequence of Unicode characters
	AverageMolecularFormula *string `json:"averageMolecularFormula,omitempty"`
	// Todo.
	RepeatUnitAmountType *CodeableConcept `json:"repeatUnitAmountType,omitempty"`
	// Todo.
	RepeatUnit []SubstancePolymerRepeatUnit `json:"repeatUnit,omitempty"`
}

// NewSubstancePolymerRepeat instantiates a new SubstancePolymerRepeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstancePolymerRepeat() *SubstancePolymerRepeat {
	this := SubstancePolymerRepeat{}
	return &this
}

// NewSubstancePolymerRepeatWithDefaults instantiates a new SubstancePolymerRepeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstancePolymerRepeatWithDefaults() *SubstancePolymerRepeat {
	this := SubstancePolymerRepeat{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstancePolymerRepeat) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstancePolymerRepeat) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstancePolymerRepeat) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetNumberOfUnits returns the NumberOfUnits field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetNumberOfUnits() float32 {
	if o == nil || IsNil(o.NumberOfUnits) {
		var ret float32
		return ret
	}
	return *o.NumberOfUnits
}

// GetNumberOfUnitsOk returns a tuple with the NumberOfUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetNumberOfUnitsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfUnits) {
		return nil, false
	}
	return o.NumberOfUnits, true
}

// HasNumberOfUnits returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasNumberOfUnits() bool {
	if o != nil && !IsNil(o.NumberOfUnits) {
		return true
	}

	return false
}

// SetNumberOfUnits gets a reference to the given float32 and assigns it to the NumberOfUnits field.
func (o *SubstancePolymerRepeat) SetNumberOfUnits(v float32) {
	o.NumberOfUnits = &v
}

// GetAverageMolecularFormula returns the AverageMolecularFormula field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetAverageMolecularFormula() string {
	if o == nil || IsNil(o.AverageMolecularFormula) {
		var ret string
		return ret
	}
	return *o.AverageMolecularFormula
}

// GetAverageMolecularFormulaOk returns a tuple with the AverageMolecularFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetAverageMolecularFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.AverageMolecularFormula) {
		return nil, false
	}
	return o.AverageMolecularFormula, true
}

// HasAverageMolecularFormula returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasAverageMolecularFormula() bool {
	if o != nil && !IsNil(o.AverageMolecularFormula) {
		return true
	}

	return false
}

// SetAverageMolecularFormula gets a reference to the given string and assigns it to the AverageMolecularFormula field.
func (o *SubstancePolymerRepeat) SetAverageMolecularFormula(v string) {
	o.AverageMolecularFormula = &v
}

// GetRepeatUnitAmountType returns the RepeatUnitAmountType field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetRepeatUnitAmountType() CodeableConcept {
	if o == nil || IsNil(o.RepeatUnitAmountType) {
		var ret CodeableConcept
		return ret
	}
	return *o.RepeatUnitAmountType
}

// GetRepeatUnitAmountTypeOk returns a tuple with the RepeatUnitAmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetRepeatUnitAmountTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.RepeatUnitAmountType) {
		return nil, false
	}
	return o.RepeatUnitAmountType, true
}

// HasRepeatUnitAmountType returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasRepeatUnitAmountType() bool {
	if o != nil && !IsNil(o.RepeatUnitAmountType) {
		return true
	}

	return false
}

// SetRepeatUnitAmountType gets a reference to the given CodeableConcept and assigns it to the RepeatUnitAmountType field.
func (o *SubstancePolymerRepeat) SetRepeatUnitAmountType(v CodeableConcept) {
	o.RepeatUnitAmountType = &v
}

// GetRepeatUnit returns the RepeatUnit field value if set, zero value otherwise.
func (o *SubstancePolymerRepeat) GetRepeatUnit() []SubstancePolymerRepeatUnit {
	if o == nil || IsNil(o.RepeatUnit) {
		var ret []SubstancePolymerRepeatUnit
		return ret
	}
	return o.RepeatUnit
}

// GetRepeatUnitOk returns a tuple with the RepeatUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstancePolymerRepeat) GetRepeatUnitOk() ([]SubstancePolymerRepeatUnit, bool) {
	if o == nil || IsNil(o.RepeatUnit) {
		return nil, false
	}
	return o.RepeatUnit, true
}

// HasRepeatUnit returns a boolean if a field has been set.
func (o *SubstancePolymerRepeat) HasRepeatUnit() bool {
	if o != nil && !IsNil(o.RepeatUnit) {
		return true
	}

	return false
}

// SetRepeatUnit gets a reference to the given []SubstancePolymerRepeatUnit and assigns it to the RepeatUnit field.
func (o *SubstancePolymerRepeat) SetRepeatUnit(v []SubstancePolymerRepeatUnit) {
	o.RepeatUnit = v
}

func (o SubstancePolymerRepeat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstancePolymerRepeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.NumberOfUnits) {
		toSerialize["numberOfUnits"] = o.NumberOfUnits
	}
	if !IsNil(o.AverageMolecularFormula) {
		toSerialize["averageMolecularFormula"] = o.AverageMolecularFormula
	}
	if !IsNil(o.RepeatUnitAmountType) {
		toSerialize["repeatUnitAmountType"] = o.RepeatUnitAmountType
	}
	if !IsNil(o.RepeatUnit) {
		toSerialize["repeatUnit"] = o.RepeatUnit
	}
	return toSerialize, nil
}

type NullableSubstancePolymerRepeat struct {
	value *SubstancePolymerRepeat
	isSet bool
}

func (v NullableSubstancePolymerRepeat) Get() *SubstancePolymerRepeat {
	return v.value
}

func (v *NullableSubstancePolymerRepeat) Set(val *SubstancePolymerRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstancePolymerRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstancePolymerRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstancePolymerRepeat(val *SubstancePolymerRepeat) *NullableSubstancePolymerRepeat {
	return &NullableSubstancePolymerRepeat{value: val, isSet: true}
}

func (v NullableSubstancePolymerRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstancePolymerRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


