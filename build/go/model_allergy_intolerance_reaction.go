/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AllergyIntoleranceReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllergyIntoleranceReaction{}

// AllergyIntoleranceReaction Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type AllergyIntoleranceReaction struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Substance *CodeableConcept `json:"substance,omitempty"`
	// Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
	Manifestation []CodeableConcept `json:"manifestation"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Onset *string `json:"onset,omitempty"`
	// Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
	Severity *string `json:"severity,omitempty"`
	// Identification of the route by which the subject was exposed to the substance.
	ExposureRoute *CodeableConcept `json:"exposureRoute,omitempty"`
	// Additional text about the adverse reaction event not captured in other fields.
	Note []Annotation `json:"note,omitempty"`
}

type _AllergyIntoleranceReaction AllergyIntoleranceReaction

// NewAllergyIntoleranceReaction instantiates a new AllergyIntoleranceReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllergyIntoleranceReaction(manifestation []CodeableConcept) *AllergyIntoleranceReaction {
	this := AllergyIntoleranceReaction{}
	this.Manifestation = manifestation
	return &this
}

// NewAllergyIntoleranceReactionWithDefaults instantiates a new AllergyIntoleranceReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllergyIntoleranceReactionWithDefaults() *AllergyIntoleranceReaction {
	this := AllergyIntoleranceReaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AllergyIntoleranceReaction) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *AllergyIntoleranceReaction) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *AllergyIntoleranceReaction) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubstance returns the Substance field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetSubstance() CodeableConcept {
	if o == nil || IsNil(o.Substance) {
		var ret CodeableConcept
		return ret
	}
	return *o.Substance
}

// GetSubstanceOk returns a tuple with the Substance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetSubstanceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Substance) {
		return nil, false
	}
	return o.Substance, true
}

// HasSubstance returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasSubstance() bool {
	if o != nil && !IsNil(o.Substance) {
		return true
	}

	return false
}

// SetSubstance gets a reference to the given CodeableConcept and assigns it to the Substance field.
func (o *AllergyIntoleranceReaction) SetSubstance(v CodeableConcept) {
	o.Substance = &v
}

// GetManifestation returns the Manifestation field value
func (o *AllergyIntoleranceReaction) GetManifestation() []CodeableConcept {
	if o == nil {
		var ret []CodeableConcept
		return ret
	}

	return o.Manifestation
}

// GetManifestationOk returns a tuple with the Manifestation field value
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetManifestationOk() ([]CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manifestation, true
}

// SetManifestation sets field value
func (o *AllergyIntoleranceReaction) SetManifestation(v []CodeableConcept) {
	o.Manifestation = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AllergyIntoleranceReaction) SetDescription(v string) {
	o.Description = &v
}

// GetOnset returns the Onset field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetOnset() string {
	if o == nil || IsNil(o.Onset) {
		var ret string
		return ret
	}
	return *o.Onset
}

// GetOnsetOk returns a tuple with the Onset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetOnsetOk() (*string, bool) {
	if o == nil || IsNil(o.Onset) {
		return nil, false
	}
	return o.Onset, true
}

// HasOnset returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasOnset() bool {
	if o != nil && !IsNil(o.Onset) {
		return true
	}

	return false
}

// SetOnset gets a reference to the given string and assigns it to the Onset field.
func (o *AllergyIntoleranceReaction) SetOnset(v string) {
	o.Onset = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AllergyIntoleranceReaction) SetSeverity(v string) {
	o.Severity = &v
}

// GetExposureRoute returns the ExposureRoute field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetExposureRoute() CodeableConcept {
	if o == nil || IsNil(o.ExposureRoute) {
		var ret CodeableConcept
		return ret
	}
	return *o.ExposureRoute
}

// GetExposureRouteOk returns a tuple with the ExposureRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetExposureRouteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ExposureRoute) {
		return nil, false
	}
	return o.ExposureRoute, true
}

// HasExposureRoute returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasExposureRoute() bool {
	if o != nil && !IsNil(o.ExposureRoute) {
		return true
	}

	return false
}

// SetExposureRoute gets a reference to the given CodeableConcept and assigns it to the ExposureRoute field.
func (o *AllergyIntoleranceReaction) SetExposureRoute(v CodeableConcept) {
	o.ExposureRoute = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *AllergyIntoleranceReaction) SetNote(v []Annotation) {
	o.Note = v
}

func (o AllergyIntoleranceReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllergyIntoleranceReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Substance) {
		toSerialize["substance"] = o.Substance
	}
	toSerialize["manifestation"] = o.Manifestation
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Onset) {
		toSerialize["onset"] = o.Onset
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.ExposureRoute) {
		toSerialize["exposureRoute"] = o.ExposureRoute
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *AllergyIntoleranceReaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manifestation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllergyIntoleranceReaction := _AllergyIntoleranceReaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllergyIntoleranceReaction)

	if err != nil {
		return err
	}

	*o = AllergyIntoleranceReaction(varAllergyIntoleranceReaction)

	return err
}

type NullableAllergyIntoleranceReaction struct {
	value *AllergyIntoleranceReaction
	isSet bool
}

func (v NullableAllergyIntoleranceReaction) Get() *AllergyIntoleranceReaction {
	return v.value
}

func (v *NullableAllergyIntoleranceReaction) Set(val *AllergyIntoleranceReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAllergyIntoleranceReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAllergyIntoleranceReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllergyIntoleranceReaction(val *AllergyIntoleranceReaction) *NullableAllergyIntoleranceReaction {
	return &NullableAllergyIntoleranceReaction{value: val, isSet: true}
}

func (v NullableAllergyIntoleranceReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllergyIntoleranceReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


