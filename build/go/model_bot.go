/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Bot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bot{}

// Bot Bot account for automated actions.
type Bot struct {
	// This is a Bot resource
	ResourceType string `json:"resourceType"`
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []string `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An identifier for this bot.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// The identifier of the bot runtime environment (i.e., vmcontext, awslambda, etc).
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
	// Image of the bot.
	Photo *Attachment `json:"photo,omitempty"`
	// A schedule for the bot to be executed.
	CronTiming *Timing `json:"cronTiming,omitempty"`
	// A sequence of Unicode characters
	CronString *string `json:"cronString,omitempty"`
	// A code that classifies the service for searching, sorting and display purposes (e.g. \"Surgical Procedure\").
	Category []CodeableConcept `json:"category,omitempty"`
	// Value of \"true\" or \"false\"
	RunAsUser *bool `json:"runAsUser,omitempty"`
	// Criteria for creating an AuditEvent as a result of the bot invocation. Possible values are 'always', 'never', 'on-error', or 'on-output'. Default value is 'always'.
	AuditEventTrigger *string `json:"auditEventTrigger,omitempty"`
	// The destination system in which the AuditEvent is to be sent. Possible values are 'log' or 'resource'. Default value is 'resource'.
	AuditEventDestination []string `json:"auditEventDestination,omitempty"`
	// Bot logic in original source code form written by developers.
	SourceCode *Attachment `json:"sourceCode,omitempty"`
	// Bot logic in executable form as a result of compiling and bundling source code.
	ExecutableCode *Attachment `json:"executableCode,omitempty"`
	// A sequence of Unicode characters
	Code *string `json:"code,omitempty"`
}

type _Bot Bot

// NewBot instantiates a new Bot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBot(resourceType string) *Bot {
	this := Bot{}
	this.ResourceType = resourceType
	return &this
}

// NewBotWithDefaults instantiates a new Bot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBotWithDefaults() *Bot {
	this := Bot{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Bot) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Bot) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Bot) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Bot) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Bot) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Bot) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Bot) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Bot) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Bot) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Bot) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Bot) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Bot) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Bot) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Bot) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Bot) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Bot) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Bot) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Bot) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Bot) GetContained() []string {
	if o == nil || IsNil(o.Contained) {
		var ret []string
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetContainedOk() ([]string, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Bot) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []string and assigns it to the Contained field.
func (o *Bot) SetContained(v []string) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Bot) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Bot) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Bot) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Bot) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Bot) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Bot) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Bot) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Bot) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Bot) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Bot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Bot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Bot) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Bot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Bot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Bot) SetDescription(v string) {
	o.Description = &v
}

// GetRuntimeVersion returns the RuntimeVersion field value if set, zero value otherwise.
func (o *Bot) GetRuntimeVersion() string {
	if o == nil || IsNil(o.RuntimeVersion) {
		var ret string
		return ret
	}
	return *o.RuntimeVersion
}

// GetRuntimeVersionOk returns a tuple with the RuntimeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetRuntimeVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeVersion) {
		return nil, false
	}
	return o.RuntimeVersion, true
}

// HasRuntimeVersion returns a boolean if a field has been set.
func (o *Bot) HasRuntimeVersion() bool {
	if o != nil && !IsNil(o.RuntimeVersion) {
		return true
	}

	return false
}

// SetRuntimeVersion gets a reference to the given string and assigns it to the RuntimeVersion field.
func (o *Bot) SetRuntimeVersion(v string) {
	o.RuntimeVersion = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise.
func (o *Bot) GetPhoto() Attachment {
	if o == nil || IsNil(o.Photo) {
		var ret Attachment
		return ret
	}
	return *o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetPhotoOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Photo) {
		return nil, false
	}
	return o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *Bot) HasPhoto() bool {
	if o != nil && !IsNil(o.Photo) {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given Attachment and assigns it to the Photo field.
func (o *Bot) SetPhoto(v Attachment) {
	o.Photo = &v
}

// GetCronTiming returns the CronTiming field value if set, zero value otherwise.
func (o *Bot) GetCronTiming() Timing {
	if o == nil || IsNil(o.CronTiming) {
		var ret Timing
		return ret
	}
	return *o.CronTiming
}

// GetCronTimingOk returns a tuple with the CronTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetCronTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.CronTiming) {
		return nil, false
	}
	return o.CronTiming, true
}

// HasCronTiming returns a boolean if a field has been set.
func (o *Bot) HasCronTiming() bool {
	if o != nil && !IsNil(o.CronTiming) {
		return true
	}

	return false
}

// SetCronTiming gets a reference to the given Timing and assigns it to the CronTiming field.
func (o *Bot) SetCronTiming(v Timing) {
	o.CronTiming = &v
}

// GetCronString returns the CronString field value if set, zero value otherwise.
func (o *Bot) GetCronString() string {
	if o == nil || IsNil(o.CronString) {
		var ret string
		return ret
	}
	return *o.CronString
}

// GetCronStringOk returns a tuple with the CronString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetCronStringOk() (*string, bool) {
	if o == nil || IsNil(o.CronString) {
		return nil, false
	}
	return o.CronString, true
}

// HasCronString returns a boolean if a field has been set.
func (o *Bot) HasCronString() bool {
	if o != nil && !IsNil(o.CronString) {
		return true
	}

	return false
}

// SetCronString gets a reference to the given string and assigns it to the CronString field.
func (o *Bot) SetCronString(v string) {
	o.CronString = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Bot) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Bot) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *Bot) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *Bot) GetRunAsUser() bool {
	if o == nil || IsNil(o.RunAsUser) {
		var ret bool
		return ret
	}
	return *o.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetRunAsUserOk() (*bool, bool) {
	if o == nil || IsNil(o.RunAsUser) {
		return nil, false
	}
	return o.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *Bot) HasRunAsUser() bool {
	if o != nil && !IsNil(o.RunAsUser) {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given bool and assigns it to the RunAsUser field.
func (o *Bot) SetRunAsUser(v bool) {
	o.RunAsUser = &v
}

// GetAuditEventTrigger returns the AuditEventTrigger field value if set, zero value otherwise.
func (o *Bot) GetAuditEventTrigger() string {
	if o == nil || IsNil(o.AuditEventTrigger) {
		var ret string
		return ret
	}
	return *o.AuditEventTrigger
}

// GetAuditEventTriggerOk returns a tuple with the AuditEventTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetAuditEventTriggerOk() (*string, bool) {
	if o == nil || IsNil(o.AuditEventTrigger) {
		return nil, false
	}
	return o.AuditEventTrigger, true
}

// HasAuditEventTrigger returns a boolean if a field has been set.
func (o *Bot) HasAuditEventTrigger() bool {
	if o != nil && !IsNil(o.AuditEventTrigger) {
		return true
	}

	return false
}

// SetAuditEventTrigger gets a reference to the given string and assigns it to the AuditEventTrigger field.
func (o *Bot) SetAuditEventTrigger(v string) {
	o.AuditEventTrigger = &v
}

// GetAuditEventDestination returns the AuditEventDestination field value if set, zero value otherwise.
func (o *Bot) GetAuditEventDestination() []string {
	if o == nil || IsNil(o.AuditEventDestination) {
		var ret []string
		return ret
	}
	return o.AuditEventDestination
}

// GetAuditEventDestinationOk returns a tuple with the AuditEventDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetAuditEventDestinationOk() ([]string, bool) {
	if o == nil || IsNil(o.AuditEventDestination) {
		return nil, false
	}
	return o.AuditEventDestination, true
}

// HasAuditEventDestination returns a boolean if a field has been set.
func (o *Bot) HasAuditEventDestination() bool {
	if o != nil && !IsNil(o.AuditEventDestination) {
		return true
	}

	return false
}

// SetAuditEventDestination gets a reference to the given []string and assigns it to the AuditEventDestination field.
func (o *Bot) SetAuditEventDestination(v []string) {
	o.AuditEventDestination = v
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *Bot) GetSourceCode() Attachment {
	if o == nil || IsNil(o.SourceCode) {
		var ret Attachment
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetSourceCodeOk() (*Attachment, bool) {
	if o == nil || IsNil(o.SourceCode) {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *Bot) HasSourceCode() bool {
	if o != nil && !IsNil(o.SourceCode) {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given Attachment and assigns it to the SourceCode field.
func (o *Bot) SetSourceCode(v Attachment) {
	o.SourceCode = &v
}

// GetExecutableCode returns the ExecutableCode field value if set, zero value otherwise.
func (o *Bot) GetExecutableCode() Attachment {
	if o == nil || IsNil(o.ExecutableCode) {
		var ret Attachment
		return ret
	}
	return *o.ExecutableCode
}

// GetExecutableCodeOk returns a tuple with the ExecutableCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetExecutableCodeOk() (*Attachment, bool) {
	if o == nil || IsNil(o.ExecutableCode) {
		return nil, false
	}
	return o.ExecutableCode, true
}

// HasExecutableCode returns a boolean if a field has been set.
func (o *Bot) HasExecutableCode() bool {
	if o != nil && !IsNil(o.ExecutableCode) {
		return true
	}

	return false
}

// SetExecutableCode gets a reference to the given Attachment and assigns it to the ExecutableCode field.
func (o *Bot) SetExecutableCode(v Attachment) {
	o.ExecutableCode = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Bot) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bot) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Bot) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Bot) SetCode(v string) {
	o.Code = &v
}

func (o Bot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RuntimeVersion) {
		toSerialize["runtimeVersion"] = o.RuntimeVersion
	}
	if !IsNil(o.Photo) {
		toSerialize["photo"] = o.Photo
	}
	if !IsNil(o.CronTiming) {
		toSerialize["cronTiming"] = o.CronTiming
	}
	if !IsNil(o.CronString) {
		toSerialize["cronString"] = o.CronString
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.RunAsUser) {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	if !IsNil(o.AuditEventTrigger) {
		toSerialize["auditEventTrigger"] = o.AuditEventTrigger
	}
	if !IsNil(o.AuditEventDestination) {
		toSerialize["auditEventDestination"] = o.AuditEventDestination
	}
	if !IsNil(o.SourceCode) {
		toSerialize["sourceCode"] = o.SourceCode
	}
	if !IsNil(o.ExecutableCode) {
		toSerialize["executableCode"] = o.ExecutableCode
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

func (o *Bot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBot := _Bot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBot)

	if err != nil {
		return err
	}

	*o = Bot(varBot)

	return err
}

type NullableBot struct {
	value *Bot
	isSet bool
}

func (v NullableBot) Get() *Bot {
	return v.value
}

func (v *NullableBot) Set(val *Bot) {
	v.value = val
	v.isSet = true
}

func (v NullableBot) IsSet() bool {
	return v.isSet
}

func (v *NullableBot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBot(val *Bot) *NullableBot {
	return &NullableBot{value: val, isSet: true}
}

func (v NullableBot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


