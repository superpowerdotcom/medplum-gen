/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Observation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Observation{}

// Observation Measurements and simple assertions made about a patient, device or other subject.
type Observation struct {
	// This is a Observation resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this observation.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
	PartOf []Reference `json:"partOf,omitempty"`
	// The status of the result value.
	Status *string `json:"status,omitempty"`
	// A code that classifies the general type of observation being made.
	Category []CodeableConcept `json:"category,omitempty"`
	// Describes what was observed. Sometimes this is called the observation \"name\".
	Code CodeableConcept `json:"code"`
	// The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
	Subject *Reference `json:"subject,omitempty"`
	// The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
	Focus []Reference `json:"focus,omitempty"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
	Encounter *Reference `json:"encounter,omitempty"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectivePeriod *Period `json:"effectivePeriod,omitempty"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveTiming *Timing `json:"effectiveTiming,omitempty"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveInstant *string `json:"effectiveInstant,omitempty"`
	// An instant in time - known at least to the second
	Issued *string `json:"issued,omitempty"`
	// Who was responsible for asserting the observed value as \"true\".
	Performer []Reference `json:"performer,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"valueString,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *float32 `json:"valueInteger,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *Range `json:"valueRange,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *Ratio `json:"valueRatio,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *SampledData `json:"valueSampledData,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *string `json:"valueTime,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *string `json:"valueDateTime,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *Period `json:"valuePeriod,omitempty"`
	// Provides a reason why the expected value in the element Observation.value[x] is missing.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason,omitempty"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []CodeableConcept `json:"interpretation,omitempty"`
	// Comments about the observation or the results.
	Note []Annotation `json:"note,omitempty"`
	// Indicates the site on the subject's body where the observation was made (i.e. the target site).
	BodySite *CodeableConcept `json:"bodySite,omitempty"`
	// Indicates the mechanism used to perform the observation.
	Method *CodeableConcept `json:"method,omitempty"`
	// The specimen that was used when this observation was made.
	Specimen *Reference `json:"specimen,omitempty"`
	// The device used to generate the observation data.
	Device *Reference `json:"device,omitempty"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an \"OR\".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
	ReferenceRange []ObservationReferenceRange `json:"referenceRange,omitempty"`
	// This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
	HasMember []Reference `json:"hasMember,omitempty"`
	// The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
	DerivedFrom []Reference `json:"derivedFrom,omitempty"`
	// Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
	Component []ObservationComponent `json:"component,omitempty"`
}

type _Observation Observation

// NewObservation instantiates a new Observation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservation(resourceType string, code CodeableConcept) *Observation {
	this := Observation{}
	this.ResourceType = resourceType
	this.Code = code
	return &this
}

// NewObservationWithDefaults instantiates a new Observation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationWithDefaults() *Observation {
	this := Observation{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Observation) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Observation) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Observation) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Observation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Observation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Observation) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Observation) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Observation) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Observation) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Observation) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Observation) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Observation) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Observation) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Observation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Observation) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Observation) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Observation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Observation) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Observation) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Observation) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Observation) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Observation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Observation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Observation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Observation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Observation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Observation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Observation) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Observation) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Observation) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *Observation) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *Observation) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *Observation) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *Observation) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *Observation) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *Observation) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Observation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Observation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Observation) SetStatus(v string) {
	o.Status = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Observation) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Observation) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *Observation) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetCode returns the Code field value
func (o *Observation) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Observation) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Observation) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Observation) GetSubject() Reference {
	if o == nil || IsNil(o.Subject) {
		var ret Reference
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetSubjectOk() (*Reference, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Observation) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Reference and assigns it to the Subject field.
func (o *Observation) SetSubject(v Reference) {
	o.Subject = &v
}

// GetFocus returns the Focus field value if set, zero value otherwise.
func (o *Observation) GetFocus() []Reference {
	if o == nil || IsNil(o.Focus) {
		var ret []Reference
		return ret
	}
	return o.Focus
}

// GetFocusOk returns a tuple with the Focus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetFocusOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Focus) {
		return nil, false
	}
	return o.Focus, true
}

// HasFocus returns a boolean if a field has been set.
func (o *Observation) HasFocus() bool {
	if o != nil && !IsNil(o.Focus) {
		return true
	}

	return false
}

// SetFocus gets a reference to the given []Reference and assigns it to the Focus field.
func (o *Observation) SetFocus(v []Reference) {
	o.Focus = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *Observation) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *Observation) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *Observation) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetEffectiveDateTime returns the EffectiveDateTime field value if set, zero value otherwise.
func (o *Observation) GetEffectiveDateTime() string {
	if o == nil || IsNil(o.EffectiveDateTime) {
		var ret string
		return ret
	}
	return *o.EffectiveDateTime
}

// GetEffectiveDateTimeOk returns a tuple with the EffectiveDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetEffectiveDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDateTime) {
		return nil, false
	}
	return o.EffectiveDateTime, true
}

// HasEffectiveDateTime returns a boolean if a field has been set.
func (o *Observation) HasEffectiveDateTime() bool {
	if o != nil && !IsNil(o.EffectiveDateTime) {
		return true
	}

	return false
}

// SetEffectiveDateTime gets a reference to the given string and assigns it to the EffectiveDateTime field.
func (o *Observation) SetEffectiveDateTime(v string) {
	o.EffectiveDateTime = &v
}

// GetEffectivePeriod returns the EffectivePeriod field value if set, zero value otherwise.
func (o *Observation) GetEffectivePeriod() Period {
	if o == nil || IsNil(o.EffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.EffectivePeriod
}

// GetEffectivePeriodOk returns a tuple with the EffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.EffectivePeriod) {
		return nil, false
	}
	return o.EffectivePeriod, true
}

// HasEffectivePeriod returns a boolean if a field has been set.
func (o *Observation) HasEffectivePeriod() bool {
	if o != nil && !IsNil(o.EffectivePeriod) {
		return true
	}

	return false
}

// SetEffectivePeriod gets a reference to the given Period and assigns it to the EffectivePeriod field.
func (o *Observation) SetEffectivePeriod(v Period) {
	o.EffectivePeriod = &v
}

// GetEffectiveTiming returns the EffectiveTiming field value if set, zero value otherwise.
func (o *Observation) GetEffectiveTiming() Timing {
	if o == nil || IsNil(o.EffectiveTiming) {
		var ret Timing
		return ret
	}
	return *o.EffectiveTiming
}

// GetEffectiveTimingOk returns a tuple with the EffectiveTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetEffectiveTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.EffectiveTiming) {
		return nil, false
	}
	return o.EffectiveTiming, true
}

// HasEffectiveTiming returns a boolean if a field has been set.
func (o *Observation) HasEffectiveTiming() bool {
	if o != nil && !IsNil(o.EffectiveTiming) {
		return true
	}

	return false
}

// SetEffectiveTiming gets a reference to the given Timing and assigns it to the EffectiveTiming field.
func (o *Observation) SetEffectiveTiming(v Timing) {
	o.EffectiveTiming = &v
}

// GetEffectiveInstant returns the EffectiveInstant field value if set, zero value otherwise.
func (o *Observation) GetEffectiveInstant() string {
	if o == nil || IsNil(o.EffectiveInstant) {
		var ret string
		return ret
	}
	return *o.EffectiveInstant
}

// GetEffectiveInstantOk returns a tuple with the EffectiveInstant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetEffectiveInstantOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveInstant) {
		return nil, false
	}
	return o.EffectiveInstant, true
}

// HasEffectiveInstant returns a boolean if a field has been set.
func (o *Observation) HasEffectiveInstant() bool {
	if o != nil && !IsNil(o.EffectiveInstant) {
		return true
	}

	return false
}

// SetEffectiveInstant gets a reference to the given string and assigns it to the EffectiveInstant field.
func (o *Observation) SetEffectiveInstant(v string) {
	o.EffectiveInstant = &v
}

// GetIssued returns the Issued field value if set, zero value otherwise.
func (o *Observation) GetIssued() string {
	if o == nil || IsNil(o.Issued) {
		var ret string
		return ret
	}
	return *o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetIssuedOk() (*string, bool) {
	if o == nil || IsNil(o.Issued) {
		return nil, false
	}
	return o.Issued, true
}

// HasIssued returns a boolean if a field has been set.
func (o *Observation) HasIssued() bool {
	if o != nil && !IsNil(o.Issued) {
		return true
	}

	return false
}

// SetIssued gets a reference to the given string and assigns it to the Issued field.
func (o *Observation) SetIssued(v string) {
	o.Issued = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *Observation) GetPerformer() []Reference {
	if o == nil || IsNil(o.Performer) {
		var ret []Reference
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPerformerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *Observation) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []Reference and assigns it to the Performer field.
func (o *Observation) SetPerformer(v []Reference) {
	o.Performer = v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *Observation) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *Observation) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *Observation) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueCodeableConcept returns the ValueCodeableConcept field value if set, zero value otherwise.
func (o *Observation) GetValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValueCodeableConcept
}

// GetValueCodeableConceptOk returns a tuple with the ValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		return nil, false
	}
	return o.ValueCodeableConcept, true
}

// HasValueCodeableConcept returns a boolean if a field has been set.
func (o *Observation) HasValueCodeableConcept() bool {
	if o != nil && !IsNil(o.ValueCodeableConcept) {
		return true
	}

	return false
}

// SetValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ValueCodeableConcept field.
func (o *Observation) SetValueCodeableConcept(v CodeableConcept) {
	o.ValueCodeableConcept = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *Observation) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *Observation) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *Observation) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *Observation) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *Observation) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *Observation) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueInteger returns the ValueInteger field value if set, zero value otherwise.
func (o *Observation) GetValueInteger() float32 {
	if o == nil || IsNil(o.ValueInteger) {
		var ret float32
		return ret
	}
	return *o.ValueInteger
}

// GetValueIntegerOk returns a tuple with the ValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueInteger) {
		return nil, false
	}
	return o.ValueInteger, true
}

// HasValueInteger returns a boolean if a field has been set.
func (o *Observation) HasValueInteger() bool {
	if o != nil && !IsNil(o.ValueInteger) {
		return true
	}

	return false
}

// SetValueInteger gets a reference to the given float32 and assigns it to the ValueInteger field.
func (o *Observation) SetValueInteger(v float32) {
	o.ValueInteger = &v
}

// GetValueRange returns the ValueRange field value if set, zero value otherwise.
func (o *Observation) GetValueRange() Range {
	if o == nil || IsNil(o.ValueRange) {
		var ret Range
		return ret
	}
	return *o.ValueRange
}

// GetValueRangeOk returns a tuple with the ValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.ValueRange) {
		return nil, false
	}
	return o.ValueRange, true
}

// HasValueRange returns a boolean if a field has been set.
func (o *Observation) HasValueRange() bool {
	if o != nil && !IsNil(o.ValueRange) {
		return true
	}

	return false
}

// SetValueRange gets a reference to the given Range and assigns it to the ValueRange field.
func (o *Observation) SetValueRange(v Range) {
	o.ValueRange = &v
}

// GetValueRatio returns the ValueRatio field value if set, zero value otherwise.
func (o *Observation) GetValueRatio() Ratio {
	if o == nil || IsNil(o.ValueRatio) {
		var ret Ratio
		return ret
	}
	return *o.ValueRatio
}

// GetValueRatioOk returns a tuple with the ValueRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.ValueRatio) {
		return nil, false
	}
	return o.ValueRatio, true
}

// HasValueRatio returns a boolean if a field has been set.
func (o *Observation) HasValueRatio() bool {
	if o != nil && !IsNil(o.ValueRatio) {
		return true
	}

	return false
}

// SetValueRatio gets a reference to the given Ratio and assigns it to the ValueRatio field.
func (o *Observation) SetValueRatio(v Ratio) {
	o.ValueRatio = &v
}

// GetValueSampledData returns the ValueSampledData field value if set, zero value otherwise.
func (o *Observation) GetValueSampledData() SampledData {
	if o == nil || IsNil(o.ValueSampledData) {
		var ret SampledData
		return ret
	}
	return *o.ValueSampledData
}

// GetValueSampledDataOk returns a tuple with the ValueSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.ValueSampledData) {
		return nil, false
	}
	return o.ValueSampledData, true
}

// HasValueSampledData returns a boolean if a field has been set.
func (o *Observation) HasValueSampledData() bool {
	if o != nil && !IsNil(o.ValueSampledData) {
		return true
	}

	return false
}

// SetValueSampledData gets a reference to the given SampledData and assigns it to the ValueSampledData field.
func (o *Observation) SetValueSampledData(v SampledData) {
	o.ValueSampledData = &v
}

// GetValueTime returns the ValueTime field value if set, zero value otherwise.
func (o *Observation) GetValueTime() string {
	if o == nil || IsNil(o.ValueTime) {
		var ret string
		return ret
	}
	return *o.ValueTime
}

// GetValueTimeOk returns a tuple with the ValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueTime) {
		return nil, false
	}
	return o.ValueTime, true
}

// HasValueTime returns a boolean if a field has been set.
func (o *Observation) HasValueTime() bool {
	if o != nil && !IsNil(o.ValueTime) {
		return true
	}

	return false
}

// SetValueTime gets a reference to the given string and assigns it to the ValueTime field.
func (o *Observation) SetValueTime(v string) {
	o.ValueTime = &v
}

// GetValueDateTime returns the ValueDateTime field value if set, zero value otherwise.
func (o *Observation) GetValueDateTime() string {
	if o == nil || IsNil(o.ValueDateTime) {
		var ret string
		return ret
	}
	return *o.ValueDateTime
}

// GetValueDateTimeOk returns a tuple with the ValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueDateTime) {
		return nil, false
	}
	return o.ValueDateTime, true
}

// HasValueDateTime returns a boolean if a field has been set.
func (o *Observation) HasValueDateTime() bool {
	if o != nil && !IsNil(o.ValueDateTime) {
		return true
	}

	return false
}

// SetValueDateTime gets a reference to the given string and assigns it to the ValueDateTime field.
func (o *Observation) SetValueDateTime(v string) {
	o.ValueDateTime = &v
}

// GetValuePeriod returns the ValuePeriod field value if set, zero value otherwise.
func (o *Observation) GetValuePeriod() Period {
	if o == nil || IsNil(o.ValuePeriod) {
		var ret Period
		return ret
	}
	return *o.ValuePeriod
}

// GetValuePeriodOk returns a tuple with the ValuePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetValuePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ValuePeriod) {
		return nil, false
	}
	return o.ValuePeriod, true
}

// HasValuePeriod returns a boolean if a field has been set.
func (o *Observation) HasValuePeriod() bool {
	if o != nil && !IsNil(o.ValuePeriod) {
		return true
	}

	return false
}

// SetValuePeriod gets a reference to the given Period and assigns it to the ValuePeriod field.
func (o *Observation) SetValuePeriod(v Period) {
	o.ValuePeriod = &v
}

// GetDataAbsentReason returns the DataAbsentReason field value if set, zero value otherwise.
func (o *Observation) GetDataAbsentReason() CodeableConcept {
	if o == nil || IsNil(o.DataAbsentReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.DataAbsentReason
}

// GetDataAbsentReasonOk returns a tuple with the DataAbsentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetDataAbsentReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DataAbsentReason) {
		return nil, false
	}
	return o.DataAbsentReason, true
}

// HasDataAbsentReason returns a boolean if a field has been set.
func (o *Observation) HasDataAbsentReason() bool {
	if o != nil && !IsNil(o.DataAbsentReason) {
		return true
	}

	return false
}

// SetDataAbsentReason gets a reference to the given CodeableConcept and assigns it to the DataAbsentReason field.
func (o *Observation) SetDataAbsentReason(v CodeableConcept) {
	o.DataAbsentReason = &v
}

// GetInterpretation returns the Interpretation field value if set, zero value otherwise.
func (o *Observation) GetInterpretation() []CodeableConcept {
	if o == nil || IsNil(o.Interpretation) {
		var ret []CodeableConcept
		return ret
	}
	return o.Interpretation
}

// GetInterpretationOk returns a tuple with the Interpretation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetInterpretationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Interpretation) {
		return nil, false
	}
	return o.Interpretation, true
}

// HasInterpretation returns a boolean if a field has been set.
func (o *Observation) HasInterpretation() bool {
	if o != nil && !IsNil(o.Interpretation) {
		return true
	}

	return false
}

// SetInterpretation gets a reference to the given []CodeableConcept and assigns it to the Interpretation field.
func (o *Observation) SetInterpretation(v []CodeableConcept) {
	o.Interpretation = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Observation) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Observation) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *Observation) SetNote(v []Annotation) {
	o.Note = v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *Observation) GetBodySite() CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret CodeableConcept
		return ret
	}
	return *o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetBodySiteOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *Observation) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given CodeableConcept and assigns it to the BodySite field.
func (o *Observation) SetBodySite(v CodeableConcept) {
	o.BodySite = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Observation) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Observation) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *Observation) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetSpecimen returns the Specimen field value if set, zero value otherwise.
func (o *Observation) GetSpecimen() Reference {
	if o == nil || IsNil(o.Specimen) {
		var ret Reference
		return ret
	}
	return *o.Specimen
}

// GetSpecimenOk returns a tuple with the Specimen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetSpecimenOk() (*Reference, bool) {
	if o == nil || IsNil(o.Specimen) {
		return nil, false
	}
	return o.Specimen, true
}

// HasSpecimen returns a boolean if a field has been set.
func (o *Observation) HasSpecimen() bool {
	if o != nil && !IsNil(o.Specimen) {
		return true
	}

	return false
}

// SetSpecimen gets a reference to the given Reference and assigns it to the Specimen field.
func (o *Observation) SetSpecimen(v Reference) {
	o.Specimen = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Observation) GetDevice() Reference {
	if o == nil || IsNil(o.Device) {
		var ret Reference
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetDeviceOk() (*Reference, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Observation) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given Reference and assigns it to the Device field.
func (o *Observation) SetDevice(v Reference) {
	o.Device = &v
}

// GetReferenceRange returns the ReferenceRange field value if set, zero value otherwise.
func (o *Observation) GetReferenceRange() []ObservationReferenceRange {
	if o == nil || IsNil(o.ReferenceRange) {
		var ret []ObservationReferenceRange
		return ret
	}
	return o.ReferenceRange
}

// GetReferenceRangeOk returns a tuple with the ReferenceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetReferenceRangeOk() ([]ObservationReferenceRange, bool) {
	if o == nil || IsNil(o.ReferenceRange) {
		return nil, false
	}
	return o.ReferenceRange, true
}

// HasReferenceRange returns a boolean if a field has been set.
func (o *Observation) HasReferenceRange() bool {
	if o != nil && !IsNil(o.ReferenceRange) {
		return true
	}

	return false
}

// SetReferenceRange gets a reference to the given []ObservationReferenceRange and assigns it to the ReferenceRange field.
func (o *Observation) SetReferenceRange(v []ObservationReferenceRange) {
	o.ReferenceRange = v
}

// GetHasMember returns the HasMember field value if set, zero value otherwise.
func (o *Observation) GetHasMember() []Reference {
	if o == nil || IsNil(o.HasMember) {
		var ret []Reference
		return ret
	}
	return o.HasMember
}

// GetHasMemberOk returns a tuple with the HasMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetHasMemberOk() ([]Reference, bool) {
	if o == nil || IsNil(o.HasMember) {
		return nil, false
	}
	return o.HasMember, true
}

// HasHasMember returns a boolean if a field has been set.
func (o *Observation) HasHasMember() bool {
	if o != nil && !IsNil(o.HasMember) {
		return true
	}

	return false
}

// SetHasMember gets a reference to the given []Reference and assigns it to the HasMember field.
func (o *Observation) SetHasMember(v []Reference) {
	o.HasMember = v
}

// GetDerivedFrom returns the DerivedFrom field value if set, zero value otherwise.
func (o *Observation) GetDerivedFrom() []Reference {
	if o == nil || IsNil(o.DerivedFrom) {
		var ret []Reference
		return ret
	}
	return o.DerivedFrom
}

// GetDerivedFromOk returns a tuple with the DerivedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetDerivedFromOk() ([]Reference, bool) {
	if o == nil || IsNil(o.DerivedFrom) {
		return nil, false
	}
	return o.DerivedFrom, true
}

// HasDerivedFrom returns a boolean if a field has been set.
func (o *Observation) HasDerivedFrom() bool {
	if o != nil && !IsNil(o.DerivedFrom) {
		return true
	}

	return false
}

// SetDerivedFrom gets a reference to the given []Reference and assigns it to the DerivedFrom field.
func (o *Observation) SetDerivedFrom(v []Reference) {
	o.DerivedFrom = v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *Observation) GetComponent() []ObservationComponent {
	if o == nil || IsNil(o.Component) {
		var ret []ObservationComponent
		return ret
	}
	return o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetComponentOk() ([]ObservationComponent, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *Observation) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given []ObservationComponent and assigns it to the Component field.
func (o *Observation) SetComponent(v []ObservationComponent) {
	o.Component = v
}

func (o Observation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Observation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Focus) {
		toSerialize["focus"] = o.Focus
	}
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.EffectiveDateTime) {
		toSerialize["effectiveDateTime"] = o.EffectiveDateTime
	}
	if !IsNil(o.EffectivePeriod) {
		toSerialize["effectivePeriod"] = o.EffectivePeriod
	}
	if !IsNil(o.EffectiveTiming) {
		toSerialize["effectiveTiming"] = o.EffectiveTiming
	}
	if !IsNil(o.EffectiveInstant) {
		toSerialize["effectiveInstant"] = o.EffectiveInstant
	}
	if !IsNil(o.Issued) {
		toSerialize["issued"] = o.Issued
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueCodeableConcept) {
		toSerialize["valueCodeableConcept"] = o.ValueCodeableConcept
	}
	if !IsNil(o.ValueString) {
		toSerialize["valueString"] = o.ValueString
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueInteger) {
		toSerialize["valueInteger"] = o.ValueInteger
	}
	if !IsNil(o.ValueRange) {
		toSerialize["valueRange"] = o.ValueRange
	}
	if !IsNil(o.ValueRatio) {
		toSerialize["valueRatio"] = o.ValueRatio
	}
	if !IsNil(o.ValueSampledData) {
		toSerialize["valueSampledData"] = o.ValueSampledData
	}
	if !IsNil(o.ValueTime) {
		toSerialize["valueTime"] = o.ValueTime
	}
	if !IsNil(o.ValueDateTime) {
		toSerialize["valueDateTime"] = o.ValueDateTime
	}
	if !IsNil(o.ValuePeriod) {
		toSerialize["valuePeriod"] = o.ValuePeriod
	}
	if !IsNil(o.DataAbsentReason) {
		toSerialize["dataAbsentReason"] = o.DataAbsentReason
	}
	if !IsNil(o.Interpretation) {
		toSerialize["interpretation"] = o.Interpretation
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Specimen) {
		toSerialize["specimen"] = o.Specimen
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.ReferenceRange) {
		toSerialize["referenceRange"] = o.ReferenceRange
	}
	if !IsNil(o.HasMember) {
		toSerialize["hasMember"] = o.HasMember
	}
	if !IsNil(o.DerivedFrom) {
		toSerialize["derivedFrom"] = o.DerivedFrom
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	return toSerialize, nil
}

func (o *Observation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservation := _Observation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservation)

	if err != nil {
		return err
	}

	*o = Observation(varObservation)

	return err
}

type NullableObservation struct {
	value *Observation
	isSet bool
}

func (v NullableObservation) Get() *Observation {
	return v.value
}

func (v *NullableObservation) Set(val *Observation) {
	v.value = val
	v.isSet = true
}

func (v NullableObservation) IsSet() bool {
	return v.isSet
}

func (v *NullableObservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservation(val *Observation) *NullableObservation {
	return &NullableObservation{value: val, isSet: true}
}

func (v NullableObservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


