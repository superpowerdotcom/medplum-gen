/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the DeviceDefinitionClassification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDefinitionClassification{}

// DeviceDefinitionClassification What kind of device or device system this is.
type DeviceDefinitionClassification struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A classification or risk class of the device model.
	Type *CodeableConcept `json:"type,omitempty"`
	// Further information qualifying this classification of the device model.
	Justification *RelatedArtifact `json:"justification,omitempty"`
}

// NewDeviceDefinitionClassification instantiates a new DeviceDefinitionClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDefinitionClassification() *DeviceDefinitionClassification {
	this := DeviceDefinitionClassification{}
	return &this
}

// NewDeviceDefinitionClassificationWithDefaults instantiates a new DeviceDefinitionClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDefinitionClassificationWithDefaults() *DeviceDefinitionClassification {
	this := DeviceDefinitionClassification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceDefinitionClassification) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionClassification) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceDefinitionClassification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceDefinitionClassification) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceDefinitionClassification) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionClassification) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionClassification) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceDefinitionClassification) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceDefinitionClassification) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionClassification) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionClassification) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceDefinitionClassification) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceDefinitionClassification) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionClassification) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceDefinitionClassification) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *DeviceDefinitionClassification) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetJustification returns the Justification field value if set, zero value otherwise.
func (o *DeviceDefinitionClassification) GetJustification() RelatedArtifact {
	if o == nil || IsNil(o.Justification) {
		var ret RelatedArtifact
		return ret
	}
	return *o.Justification
}

// GetJustificationOk returns a tuple with the Justification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionClassification) GetJustificationOk() (*RelatedArtifact, bool) {
	if o == nil || IsNil(o.Justification) {
		return nil, false
	}
	return o.Justification, true
}

// HasJustification returns a boolean if a field has been set.
func (o *DeviceDefinitionClassification) HasJustification() bool {
	if o != nil && !IsNil(o.Justification) {
		return true
	}

	return false
}

// SetJustification gets a reference to the given RelatedArtifact and assigns it to the Justification field.
func (o *DeviceDefinitionClassification) SetJustification(v RelatedArtifact) {
	o.Justification = &v
}

func (o DeviceDefinitionClassification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDefinitionClassification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Justification) {
		toSerialize["justification"] = o.Justification
	}
	return toSerialize, nil
}

type NullableDeviceDefinitionClassification struct {
	value *DeviceDefinitionClassification
	isSet bool
}

func (v NullableDeviceDefinitionClassification) Get() *DeviceDefinitionClassification {
	return v.value
}

func (v *NullableDeviceDefinitionClassification) Set(val *DeviceDefinitionClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDefinitionClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDefinitionClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDefinitionClassification(val *DeviceDefinitionClassification) *NullableDeviceDefinitionClassification {
	return &NullableDeviceDefinitionClassification{value: val, isSet: true}
}

func (v NullableDeviceDefinitionClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDefinitionClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


