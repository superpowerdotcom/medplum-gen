/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NutritionOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NutritionOrder{}

// NutritionOrder A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
type NutritionOrder struct {
	// This is a NutritionOrder resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers assigned to this order by the order sender or by the order receiver.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
	Instantiates []string `json:"instantiates,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Intent *string `json:"intent,omitempty"`
	// The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
	Patient Reference `json:"patient"`
	// An encounter that provides additional information about the healthcare context in which this request is made.
	Encounter *Reference `json:"encounter,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	DateTime *string `json:"dateTime,omitempty"`
	// The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
	Orderer *Reference `json:"orderer,omitempty"`
	// A link to a record of allergies or intolerances  which should be included in the nutrition order.
	AllergyIntolerance []Reference `json:"allergyIntolerance,omitempty"`
	// This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
	FoodPreferenceModifier []CodeableConcept `json:"foodPreferenceModifier,omitempty"`
	// This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patientâ€™s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
	ExcludeFoodModifier []CodeableConcept `json:"excludeFoodModifier,omitempty"`
	// Diet given orally in contrast to enteral (tube) feeding.
	OralDiet *NutritionOrderOralDiet `json:"oralDiet,omitempty"`
	// Oral nutritional products given in order to add further nutritional value to the patient's diet.
	Supplement []NutritionOrderSupplement `json:"supplement,omitempty"`
	// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
	EnteralFormula *NutritionOrderEnteralFormula `json:"enteralFormula,omitempty"`
	// Comments made about the {{title}} by the requester, performer, subject or other participants.
	Note []Annotation `json:"note,omitempty"`
}

type _NutritionOrder NutritionOrder

// NewNutritionOrder instantiates a new NutritionOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNutritionOrder(resourceType string, patient Reference) *NutritionOrder {
	this := NutritionOrder{}
	this.ResourceType = resourceType
	this.Patient = patient
	return &this
}

// NewNutritionOrderWithDefaults instantiates a new NutritionOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNutritionOrderWithDefaults() *NutritionOrder {
	this := NutritionOrder{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *NutritionOrder) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *NutritionOrder) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NutritionOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NutritionOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NutritionOrder) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *NutritionOrder) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *NutritionOrder) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *NutritionOrder) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *NutritionOrder) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *NutritionOrder) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *NutritionOrder) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *NutritionOrder) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *NutritionOrder) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *NutritionOrder) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *NutritionOrder) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *NutritionOrder) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *NutritionOrder) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *NutritionOrder) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *NutritionOrder) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *NutritionOrder) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *NutritionOrder) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *NutritionOrder) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *NutritionOrder) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *NutritionOrder) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *NutritionOrder) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *NutritionOrder) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *NutritionOrder) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *NutritionOrder) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *NutritionOrder) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *NutritionOrder) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *NutritionOrder) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *NutritionOrder) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *NutritionOrder) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *NutritionOrder) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *NutritionOrder) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetInstantiates returns the Instantiates field value if set, zero value otherwise.
func (o *NutritionOrder) GetInstantiates() []string {
	if o == nil || IsNil(o.Instantiates) {
		var ret []string
		return ret
	}
	return o.Instantiates
}

// GetInstantiatesOk returns a tuple with the Instantiates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetInstantiatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Instantiates) {
		return nil, false
	}
	return o.Instantiates, true
}

// HasInstantiates returns a boolean if a field has been set.
func (o *NutritionOrder) HasInstantiates() bool {
	if o != nil && !IsNil(o.Instantiates) {
		return true
	}

	return false
}

// SetInstantiates gets a reference to the given []string and assigns it to the Instantiates field.
func (o *NutritionOrder) SetInstantiates(v []string) {
	o.Instantiates = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NutritionOrder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NutritionOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NutritionOrder) SetStatus(v string) {
	o.Status = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *NutritionOrder) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *NutritionOrder) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *NutritionOrder) SetIntent(v string) {
	o.Intent = &v
}

// GetPatient returns the Patient field value
func (o *NutritionOrder) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *NutritionOrder) SetPatient(v Reference) {
	o.Patient = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *NutritionOrder) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *NutritionOrder) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *NutritionOrder) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *NutritionOrder) GetDateTime() string {
	if o == nil || IsNil(o.DateTime) {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *NutritionOrder) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *NutritionOrder) SetDateTime(v string) {
	o.DateTime = &v
}

// GetOrderer returns the Orderer field value if set, zero value otherwise.
func (o *NutritionOrder) GetOrderer() Reference {
	if o == nil || IsNil(o.Orderer) {
		var ret Reference
		return ret
	}
	return *o.Orderer
}

// GetOrdererOk returns a tuple with the Orderer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetOrdererOk() (*Reference, bool) {
	if o == nil || IsNil(o.Orderer) {
		return nil, false
	}
	return o.Orderer, true
}

// HasOrderer returns a boolean if a field has been set.
func (o *NutritionOrder) HasOrderer() bool {
	if o != nil && !IsNil(o.Orderer) {
		return true
	}

	return false
}

// SetOrderer gets a reference to the given Reference and assigns it to the Orderer field.
func (o *NutritionOrder) SetOrderer(v Reference) {
	o.Orderer = &v
}

// GetAllergyIntolerance returns the AllergyIntolerance field value if set, zero value otherwise.
func (o *NutritionOrder) GetAllergyIntolerance() []Reference {
	if o == nil || IsNil(o.AllergyIntolerance) {
		var ret []Reference
		return ret
	}
	return o.AllergyIntolerance
}

// GetAllergyIntoleranceOk returns a tuple with the AllergyIntolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetAllergyIntoleranceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.AllergyIntolerance) {
		return nil, false
	}
	return o.AllergyIntolerance, true
}

// HasAllergyIntolerance returns a boolean if a field has been set.
func (o *NutritionOrder) HasAllergyIntolerance() bool {
	if o != nil && !IsNil(o.AllergyIntolerance) {
		return true
	}

	return false
}

// SetAllergyIntolerance gets a reference to the given []Reference and assigns it to the AllergyIntolerance field.
func (o *NutritionOrder) SetAllergyIntolerance(v []Reference) {
	o.AllergyIntolerance = v
}

// GetFoodPreferenceModifier returns the FoodPreferenceModifier field value if set, zero value otherwise.
func (o *NutritionOrder) GetFoodPreferenceModifier() []CodeableConcept {
	if o == nil || IsNil(o.FoodPreferenceModifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.FoodPreferenceModifier
}

// GetFoodPreferenceModifierOk returns a tuple with the FoodPreferenceModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetFoodPreferenceModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.FoodPreferenceModifier) {
		return nil, false
	}
	return o.FoodPreferenceModifier, true
}

// HasFoodPreferenceModifier returns a boolean if a field has been set.
func (o *NutritionOrder) HasFoodPreferenceModifier() bool {
	if o != nil && !IsNil(o.FoodPreferenceModifier) {
		return true
	}

	return false
}

// SetFoodPreferenceModifier gets a reference to the given []CodeableConcept and assigns it to the FoodPreferenceModifier field.
func (o *NutritionOrder) SetFoodPreferenceModifier(v []CodeableConcept) {
	o.FoodPreferenceModifier = v
}

// GetExcludeFoodModifier returns the ExcludeFoodModifier field value if set, zero value otherwise.
func (o *NutritionOrder) GetExcludeFoodModifier() []CodeableConcept {
	if o == nil || IsNil(o.ExcludeFoodModifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.ExcludeFoodModifier
}

// GetExcludeFoodModifierOk returns a tuple with the ExcludeFoodModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetExcludeFoodModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ExcludeFoodModifier) {
		return nil, false
	}
	return o.ExcludeFoodModifier, true
}

// HasExcludeFoodModifier returns a boolean if a field has been set.
func (o *NutritionOrder) HasExcludeFoodModifier() bool {
	if o != nil && !IsNil(o.ExcludeFoodModifier) {
		return true
	}

	return false
}

// SetExcludeFoodModifier gets a reference to the given []CodeableConcept and assigns it to the ExcludeFoodModifier field.
func (o *NutritionOrder) SetExcludeFoodModifier(v []CodeableConcept) {
	o.ExcludeFoodModifier = v
}

// GetOralDiet returns the OralDiet field value if set, zero value otherwise.
func (o *NutritionOrder) GetOralDiet() NutritionOrderOralDiet {
	if o == nil || IsNil(o.OralDiet) {
		var ret NutritionOrderOralDiet
		return ret
	}
	return *o.OralDiet
}

// GetOralDietOk returns a tuple with the OralDiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetOralDietOk() (*NutritionOrderOralDiet, bool) {
	if o == nil || IsNil(o.OralDiet) {
		return nil, false
	}
	return o.OralDiet, true
}

// HasOralDiet returns a boolean if a field has been set.
func (o *NutritionOrder) HasOralDiet() bool {
	if o != nil && !IsNil(o.OralDiet) {
		return true
	}

	return false
}

// SetOralDiet gets a reference to the given NutritionOrderOralDiet and assigns it to the OralDiet field.
func (o *NutritionOrder) SetOralDiet(v NutritionOrderOralDiet) {
	o.OralDiet = &v
}

// GetSupplement returns the Supplement field value if set, zero value otherwise.
func (o *NutritionOrder) GetSupplement() []NutritionOrderSupplement {
	if o == nil || IsNil(o.Supplement) {
		var ret []NutritionOrderSupplement
		return ret
	}
	return o.Supplement
}

// GetSupplementOk returns a tuple with the Supplement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetSupplementOk() ([]NutritionOrderSupplement, bool) {
	if o == nil || IsNil(o.Supplement) {
		return nil, false
	}
	return o.Supplement, true
}

// HasSupplement returns a boolean if a field has been set.
func (o *NutritionOrder) HasSupplement() bool {
	if o != nil && !IsNil(o.Supplement) {
		return true
	}

	return false
}

// SetSupplement gets a reference to the given []NutritionOrderSupplement and assigns it to the Supplement field.
func (o *NutritionOrder) SetSupplement(v []NutritionOrderSupplement) {
	o.Supplement = v
}

// GetEnteralFormula returns the EnteralFormula field value if set, zero value otherwise.
func (o *NutritionOrder) GetEnteralFormula() NutritionOrderEnteralFormula {
	if o == nil || IsNil(o.EnteralFormula) {
		var ret NutritionOrderEnteralFormula
		return ret
	}
	return *o.EnteralFormula
}

// GetEnteralFormulaOk returns a tuple with the EnteralFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetEnteralFormulaOk() (*NutritionOrderEnteralFormula, bool) {
	if o == nil || IsNil(o.EnteralFormula) {
		return nil, false
	}
	return o.EnteralFormula, true
}

// HasEnteralFormula returns a boolean if a field has been set.
func (o *NutritionOrder) HasEnteralFormula() bool {
	if o != nil && !IsNil(o.EnteralFormula) {
		return true
	}

	return false
}

// SetEnteralFormula gets a reference to the given NutritionOrderEnteralFormula and assigns it to the EnteralFormula field.
func (o *NutritionOrder) SetEnteralFormula(v NutritionOrderEnteralFormula) {
	o.EnteralFormula = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *NutritionOrder) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrder) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *NutritionOrder) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *NutritionOrder) SetNote(v []Annotation) {
	o.Note = v
}

func (o NutritionOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NutritionOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.Instantiates) {
		toSerialize["instantiates"] = o.Instantiates
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.Orderer) {
		toSerialize["orderer"] = o.Orderer
	}
	if !IsNil(o.AllergyIntolerance) {
		toSerialize["allergyIntolerance"] = o.AllergyIntolerance
	}
	if !IsNil(o.FoodPreferenceModifier) {
		toSerialize["foodPreferenceModifier"] = o.FoodPreferenceModifier
	}
	if !IsNil(o.ExcludeFoodModifier) {
		toSerialize["excludeFoodModifier"] = o.ExcludeFoodModifier
	}
	if !IsNil(o.OralDiet) {
		toSerialize["oralDiet"] = o.OralDiet
	}
	if !IsNil(o.Supplement) {
		toSerialize["supplement"] = o.Supplement
	}
	if !IsNil(o.EnteralFormula) {
		toSerialize["enteralFormula"] = o.EnteralFormula
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *NutritionOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"patient",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNutritionOrder := _NutritionOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNutritionOrder)

	if err != nil {
		return err
	}

	*o = NutritionOrder(varNutritionOrder)

	return err
}

type NullableNutritionOrder struct {
	value *NutritionOrder
	isSet bool
}

func (v NullableNutritionOrder) Get() *NutritionOrder {
	return v.value
}

func (v *NullableNutritionOrder) Set(val *NutritionOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableNutritionOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableNutritionOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNutritionOrder(val *NutritionOrder) *NullableNutritionOrder {
	return &NullableNutritionOrder{value: val, isSet: true}
}

func (v NullableNutritionOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNutritionOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


