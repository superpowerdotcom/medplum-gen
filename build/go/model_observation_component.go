/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservationComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationComponent{}

// ObservationComponent Measurements and simple assertions made about a patient, device or other subject.
type ObservationComponent struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Describes what was observed. Sometimes this is called the observation \"code\".
	Code CodeableConcept `json:"code"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"valueString,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *float32 `json:"valueInteger,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *Range `json:"valueRange,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *Ratio `json:"valueRatio,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *SampledData `json:"valueSampledData,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *string `json:"valueTime,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *string `json:"valueDateTime,omitempty"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *Period `json:"valuePeriod,omitempty"`
	// Provides a reason why the expected value in the element Observation.component.value[x] is missing.
	DataAbsentReason *CodeableConcept `json:"dataAbsentReason,omitempty"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []CodeableConcept `json:"interpretation,omitempty"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.
	ReferenceRange []ObservationReferenceRange `json:"referenceRange,omitempty"`
}

type _ObservationComponent ObservationComponent

// NewObservationComponent instantiates a new ObservationComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationComponent(code CodeableConcept) *ObservationComponent {
	this := ObservationComponent{}
	this.Code = code
	return &this
}

// NewObservationComponentWithDefaults instantiates a new ObservationComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationComponentWithDefaults() *ObservationComponent {
	this := ObservationComponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationComponent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationComponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationComponent) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ObservationComponent) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ObservationComponent) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ObservationComponent) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ObservationComponent) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ObservationComponent) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ObservationComponent) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value
func (o *ObservationComponent) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ObservationComponent) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *ObservationComponent) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueCodeableConcept returns the ValueCodeableConcept field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValueCodeableConcept
}

// GetValueCodeableConceptOk returns a tuple with the ValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		return nil, false
	}
	return o.ValueCodeableConcept, true
}

// HasValueCodeableConcept returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueCodeableConcept() bool {
	if o != nil && !IsNil(o.ValueCodeableConcept) {
		return true
	}

	return false
}

// SetValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ValueCodeableConcept field.
func (o *ObservationComponent) SetValueCodeableConcept(v CodeableConcept) {
	o.ValueCodeableConcept = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *ObservationComponent) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *ObservationComponent) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueInteger returns the ValueInteger field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueInteger() float32 {
	if o == nil || IsNil(o.ValueInteger) {
		var ret float32
		return ret
	}
	return *o.ValueInteger
}

// GetValueIntegerOk returns a tuple with the ValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueIntegerOk() (*float32, bool) {
	if o == nil || IsNil(o.ValueInteger) {
		return nil, false
	}
	return o.ValueInteger, true
}

// HasValueInteger returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueInteger() bool {
	if o != nil && !IsNil(o.ValueInteger) {
		return true
	}

	return false
}

// SetValueInteger gets a reference to the given float32 and assigns it to the ValueInteger field.
func (o *ObservationComponent) SetValueInteger(v float32) {
	o.ValueInteger = &v
}

// GetValueRange returns the ValueRange field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueRange() Range {
	if o == nil || IsNil(o.ValueRange) {
		var ret Range
		return ret
	}
	return *o.ValueRange
}

// GetValueRangeOk returns a tuple with the ValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.ValueRange) {
		return nil, false
	}
	return o.ValueRange, true
}

// HasValueRange returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueRange() bool {
	if o != nil && !IsNil(o.ValueRange) {
		return true
	}

	return false
}

// SetValueRange gets a reference to the given Range and assigns it to the ValueRange field.
func (o *ObservationComponent) SetValueRange(v Range) {
	o.ValueRange = &v
}

// GetValueRatio returns the ValueRatio field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueRatio() Ratio {
	if o == nil || IsNil(o.ValueRatio) {
		var ret Ratio
		return ret
	}
	return *o.ValueRatio
}

// GetValueRatioOk returns a tuple with the ValueRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.ValueRatio) {
		return nil, false
	}
	return o.ValueRatio, true
}

// HasValueRatio returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueRatio() bool {
	if o != nil && !IsNil(o.ValueRatio) {
		return true
	}

	return false
}

// SetValueRatio gets a reference to the given Ratio and assigns it to the ValueRatio field.
func (o *ObservationComponent) SetValueRatio(v Ratio) {
	o.ValueRatio = &v
}

// GetValueSampledData returns the ValueSampledData field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueSampledData() SampledData {
	if o == nil || IsNil(o.ValueSampledData) {
		var ret SampledData
		return ret
	}
	return *o.ValueSampledData
}

// GetValueSampledDataOk returns a tuple with the ValueSampledData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueSampledDataOk() (*SampledData, bool) {
	if o == nil || IsNil(o.ValueSampledData) {
		return nil, false
	}
	return o.ValueSampledData, true
}

// HasValueSampledData returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueSampledData() bool {
	if o != nil && !IsNil(o.ValueSampledData) {
		return true
	}

	return false
}

// SetValueSampledData gets a reference to the given SampledData and assigns it to the ValueSampledData field.
func (o *ObservationComponent) SetValueSampledData(v SampledData) {
	o.ValueSampledData = &v
}

// GetValueTime returns the ValueTime field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueTime() string {
	if o == nil || IsNil(o.ValueTime) {
		var ret string
		return ret
	}
	return *o.ValueTime
}

// GetValueTimeOk returns a tuple with the ValueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueTime) {
		return nil, false
	}
	return o.ValueTime, true
}

// HasValueTime returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueTime() bool {
	if o != nil && !IsNil(o.ValueTime) {
		return true
	}

	return false
}

// SetValueTime gets a reference to the given string and assigns it to the ValueTime field.
func (o *ObservationComponent) SetValueTime(v string) {
	o.ValueTime = &v
}

// GetValueDateTime returns the ValueDateTime field value if set, zero value otherwise.
func (o *ObservationComponent) GetValueDateTime() string {
	if o == nil || IsNil(o.ValueDateTime) {
		var ret string
		return ret
	}
	return *o.ValueDateTime
}

// GetValueDateTimeOk returns a tuple with the ValueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValueDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueDateTime) {
		return nil, false
	}
	return o.ValueDateTime, true
}

// HasValueDateTime returns a boolean if a field has been set.
func (o *ObservationComponent) HasValueDateTime() bool {
	if o != nil && !IsNil(o.ValueDateTime) {
		return true
	}

	return false
}

// SetValueDateTime gets a reference to the given string and assigns it to the ValueDateTime field.
func (o *ObservationComponent) SetValueDateTime(v string) {
	o.ValueDateTime = &v
}

// GetValuePeriod returns the ValuePeriod field value if set, zero value otherwise.
func (o *ObservationComponent) GetValuePeriod() Period {
	if o == nil || IsNil(o.ValuePeriod) {
		var ret Period
		return ret
	}
	return *o.ValuePeriod
}

// GetValuePeriodOk returns a tuple with the ValuePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetValuePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ValuePeriod) {
		return nil, false
	}
	return o.ValuePeriod, true
}

// HasValuePeriod returns a boolean if a field has been set.
func (o *ObservationComponent) HasValuePeriod() bool {
	if o != nil && !IsNil(o.ValuePeriod) {
		return true
	}

	return false
}

// SetValuePeriod gets a reference to the given Period and assigns it to the ValuePeriod field.
func (o *ObservationComponent) SetValuePeriod(v Period) {
	o.ValuePeriod = &v
}

// GetDataAbsentReason returns the DataAbsentReason field value if set, zero value otherwise.
func (o *ObservationComponent) GetDataAbsentReason() CodeableConcept {
	if o == nil || IsNil(o.DataAbsentReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.DataAbsentReason
}

// GetDataAbsentReasonOk returns a tuple with the DataAbsentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetDataAbsentReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DataAbsentReason) {
		return nil, false
	}
	return o.DataAbsentReason, true
}

// HasDataAbsentReason returns a boolean if a field has been set.
func (o *ObservationComponent) HasDataAbsentReason() bool {
	if o != nil && !IsNil(o.DataAbsentReason) {
		return true
	}

	return false
}

// SetDataAbsentReason gets a reference to the given CodeableConcept and assigns it to the DataAbsentReason field.
func (o *ObservationComponent) SetDataAbsentReason(v CodeableConcept) {
	o.DataAbsentReason = &v
}

// GetInterpretation returns the Interpretation field value if set, zero value otherwise.
func (o *ObservationComponent) GetInterpretation() []CodeableConcept {
	if o == nil || IsNil(o.Interpretation) {
		var ret []CodeableConcept
		return ret
	}
	return o.Interpretation
}

// GetInterpretationOk returns a tuple with the Interpretation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetInterpretationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Interpretation) {
		return nil, false
	}
	return o.Interpretation, true
}

// HasInterpretation returns a boolean if a field has been set.
func (o *ObservationComponent) HasInterpretation() bool {
	if o != nil && !IsNil(o.Interpretation) {
		return true
	}

	return false
}

// SetInterpretation gets a reference to the given []CodeableConcept and assigns it to the Interpretation field.
func (o *ObservationComponent) SetInterpretation(v []CodeableConcept) {
	o.Interpretation = v
}

// GetReferenceRange returns the ReferenceRange field value if set, zero value otherwise.
func (o *ObservationComponent) GetReferenceRange() []ObservationReferenceRange {
	if o == nil || IsNil(o.ReferenceRange) {
		var ret []ObservationReferenceRange
		return ret
	}
	return o.ReferenceRange
}

// GetReferenceRangeOk returns a tuple with the ReferenceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationComponent) GetReferenceRangeOk() ([]ObservationReferenceRange, bool) {
	if o == nil || IsNil(o.ReferenceRange) {
		return nil, false
	}
	return o.ReferenceRange, true
}

// HasReferenceRange returns a boolean if a field has been set.
func (o *ObservationComponent) HasReferenceRange() bool {
	if o != nil && !IsNil(o.ReferenceRange) {
		return true
	}

	return false
}

// SetReferenceRange gets a reference to the given []ObservationReferenceRange and assigns it to the ReferenceRange field.
func (o *ObservationComponent) SetReferenceRange(v []ObservationReferenceRange) {
	o.ReferenceRange = v
}

func (o ObservationComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueCodeableConcept) {
		toSerialize["valueCodeableConcept"] = o.ValueCodeableConcept
	}
	if !IsNil(o.ValueString) {
		toSerialize["valueString"] = o.ValueString
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueInteger) {
		toSerialize["valueInteger"] = o.ValueInteger
	}
	if !IsNil(o.ValueRange) {
		toSerialize["valueRange"] = o.ValueRange
	}
	if !IsNil(o.ValueRatio) {
		toSerialize["valueRatio"] = o.ValueRatio
	}
	if !IsNil(o.ValueSampledData) {
		toSerialize["valueSampledData"] = o.ValueSampledData
	}
	if !IsNil(o.ValueTime) {
		toSerialize["valueTime"] = o.ValueTime
	}
	if !IsNil(o.ValueDateTime) {
		toSerialize["valueDateTime"] = o.ValueDateTime
	}
	if !IsNil(o.ValuePeriod) {
		toSerialize["valuePeriod"] = o.ValuePeriod
	}
	if !IsNil(o.DataAbsentReason) {
		toSerialize["dataAbsentReason"] = o.DataAbsentReason
	}
	if !IsNil(o.Interpretation) {
		toSerialize["interpretation"] = o.Interpretation
	}
	if !IsNil(o.ReferenceRange) {
		toSerialize["referenceRange"] = o.ReferenceRange
	}
	return toSerialize, nil
}

func (o *ObservationComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservationComponent := _ObservationComponent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservationComponent)

	if err != nil {
		return err
	}

	*o = ObservationComponent(varObservationComponent)

	return err
}

type NullableObservationComponent struct {
	value *ObservationComponent
	isSet bool
}

func (v NullableObservationComponent) Get() *ObservationComponent {
	return v.value
}

func (v *NullableObservationComponent) Set(val *ObservationComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationComponent(val *ObservationComponent) *NullableObservationComponent {
	return &NullableObservationComponent{value: val, isSet: true}
}

func (v NullableObservationComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


