/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the UserConfigurationMenu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConfigurationMenu{}

// UserConfigurationMenu Optional menu of shortcuts to URLs.
type UserConfigurationMenu struct {
	// A sequence of Unicode characters
	Title string `json:"title"`
	// Shortcut links to URLs.
	Link []UserConfigurationMenuLink `json:"link,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserConfigurationMenu UserConfigurationMenu

// NewUserConfigurationMenu instantiates a new UserConfigurationMenu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfigurationMenu(title string) *UserConfigurationMenu {
	this := UserConfigurationMenu{}
	this.Title = title
	return &this
}

// NewUserConfigurationMenuWithDefaults instantiates a new UserConfigurationMenu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigurationMenuWithDefaults() *UserConfigurationMenu {
	this := UserConfigurationMenu{}
	return &this
}

// GetTitle returns the Title field value
func (o *UserConfigurationMenu) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *UserConfigurationMenu) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *UserConfigurationMenu) SetTitle(v string) {
	o.Title = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *UserConfigurationMenu) GetLink() []UserConfigurationMenuLink {
	if o == nil || IsNil(o.Link) {
		var ret []UserConfigurationMenuLink
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfigurationMenu) GetLinkOk() ([]UserConfigurationMenuLink, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *UserConfigurationMenu) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given []UserConfigurationMenuLink and assigns it to the Link field.
func (o *UserConfigurationMenu) SetLink(v []UserConfigurationMenuLink) {
	o.Link = v
}

func (o UserConfigurationMenu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConfigurationMenu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserConfigurationMenu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserConfigurationMenu := _UserConfigurationMenu{}

	err = json.Unmarshal(data, &varUserConfigurationMenu)

	if err != nil {
		return err
	}

	*o = UserConfigurationMenu(varUserConfigurationMenu)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "link")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserConfigurationMenu struct {
	value *UserConfigurationMenu
	isSet bool
}

func (v NullableUserConfigurationMenu) Get() *UserConfigurationMenu {
	return v.value
}

func (v *NullableUserConfigurationMenu) Set(val *UserConfigurationMenu) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfigurationMenu) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfigurationMenu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfigurationMenu(val *UserConfigurationMenu) *NullableUserConfigurationMenu {
	return &NullableUserConfigurationMenu{value: val, isSet: true}
}

func (v NullableUserConfigurationMenu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfigurationMenu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


