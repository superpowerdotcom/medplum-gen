/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceNucleicAcidLinkage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceNucleicAcidLinkage{}

// SubstanceNucleicAcidLinkage Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
type SubstanceNucleicAcidLinkage struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Connectivity *string `json:"connectivity,omitempty"`
	// Each linkage will be registered as a fragment and have an ID.
	Identifier *Identifier `json:"identifier,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	ResidueSite *string `json:"residueSite,omitempty"`
}

// NewSubstanceNucleicAcidLinkage instantiates a new SubstanceNucleicAcidLinkage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceNucleicAcidLinkage() *SubstanceNucleicAcidLinkage {
	this := SubstanceNucleicAcidLinkage{}
	return &this
}

// NewSubstanceNucleicAcidLinkageWithDefaults instantiates a new SubstanceNucleicAcidLinkage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceNucleicAcidLinkageWithDefaults() *SubstanceNucleicAcidLinkage {
	this := SubstanceNucleicAcidLinkage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceNucleicAcidLinkage) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceNucleicAcidLinkage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceNucleicAcidLinkage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetConnectivity returns the Connectivity field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetConnectivity() string {
	if o == nil || IsNil(o.Connectivity) {
		var ret string
		return ret
	}
	return *o.Connectivity
}

// GetConnectivityOk returns a tuple with the Connectivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetConnectivityOk() (*string, bool) {
	if o == nil || IsNil(o.Connectivity) {
		return nil, false
	}
	return o.Connectivity, true
}

// HasConnectivity returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasConnectivity() bool {
	if o != nil && !IsNil(o.Connectivity) {
		return true
	}

	return false
}

// SetConnectivity gets a reference to the given string and assigns it to the Connectivity field.
func (o *SubstanceNucleicAcidLinkage) SetConnectivity(v string) {
	o.Connectivity = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *SubstanceNucleicAcidLinkage) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubstanceNucleicAcidLinkage) SetName(v string) {
	o.Name = &v
}

// GetResidueSite returns the ResidueSite field value if set, zero value otherwise.
func (o *SubstanceNucleicAcidLinkage) GetResidueSite() string {
	if o == nil || IsNil(o.ResidueSite) {
		var ret string
		return ret
	}
	return *o.ResidueSite
}

// GetResidueSiteOk returns a tuple with the ResidueSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceNucleicAcidLinkage) GetResidueSiteOk() (*string, bool) {
	if o == nil || IsNil(o.ResidueSite) {
		return nil, false
	}
	return o.ResidueSite, true
}

// HasResidueSite returns a boolean if a field has been set.
func (o *SubstanceNucleicAcidLinkage) HasResidueSite() bool {
	if o != nil && !IsNil(o.ResidueSite) {
		return true
	}

	return false
}

// SetResidueSite gets a reference to the given string and assigns it to the ResidueSite field.
func (o *SubstanceNucleicAcidLinkage) SetResidueSite(v string) {
	o.ResidueSite = &v
}

func (o SubstanceNucleicAcidLinkage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceNucleicAcidLinkage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Connectivity) {
		toSerialize["connectivity"] = o.Connectivity
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ResidueSite) {
		toSerialize["residueSite"] = o.ResidueSite
	}
	return toSerialize, nil
}

type NullableSubstanceNucleicAcidLinkage struct {
	value *SubstanceNucleicAcidLinkage
	isSet bool
}

func (v NullableSubstanceNucleicAcidLinkage) Get() *SubstanceNucleicAcidLinkage {
	return v.value
}

func (v *NullableSubstanceNucleicAcidLinkage) Set(val *SubstanceNucleicAcidLinkage) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceNucleicAcidLinkage) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceNucleicAcidLinkage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceNucleicAcidLinkage(val *SubstanceNucleicAcidLinkage) *NullableSubstanceNucleicAcidLinkage {
	return &NullableSubstanceNucleicAcidLinkage{value: val, isSet: true}
}

func (v NullableSubstanceNucleicAcidLinkage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceNucleicAcidLinkage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


