/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CoverageEligibilityResponseItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageEligibilityResponseItem{}

// CoverageEligibilityResponseItem This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
type CoverageEligibilityResponseItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Code to identify the general type of benefits under which products and services are provided.
	Category *CodeableConcept `json:"category,omitempty"`
	// This contains the product, service, drug or other billing code for the item.
	ProductOrService *CodeableConcept `json:"productOrService,omitempty"`
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// The practitioner who is eligible for the provision of the product or service.
	Provider *Reference `json:"provider,omitempty"`
	// Value of \"true\" or \"false\"
	Excluded *bool `json:"excluded,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
	Network *CodeableConcept `json:"network,omitempty"`
	// Indicates if the benefits apply to an individual or to the family.
	Unit *CodeableConcept `json:"unit,omitempty"`
	// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
	Term *CodeableConcept `json:"term,omitempty"`
	// Benefits used to date.
	Benefit []CoverageEligibilityResponseBenefit `json:"benefit,omitempty"`
	// Value of \"true\" or \"false\"
	AuthorizationRequired *bool `json:"authorizationRequired,omitempty"`
	// Codes or comments regarding information or actions associated with the preauthorization.
	AuthorizationSupporting []CodeableConcept `json:"authorizationSupporting,omitempty"`
	// String of characters used to identify a name or a resource
	AuthorizationUrl *string `json:"authorizationUrl,omitempty"`
}

// NewCoverageEligibilityResponseItem instantiates a new CoverageEligibilityResponseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageEligibilityResponseItem() *CoverageEligibilityResponseItem {
	this := CoverageEligibilityResponseItem{}
	return &this
}

// NewCoverageEligibilityResponseItemWithDefaults instantiates a new CoverageEligibilityResponseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageEligibilityResponseItemWithDefaults() *CoverageEligibilityResponseItem {
	this := CoverageEligibilityResponseItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoverageEligibilityResponseItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CoverageEligibilityResponseItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CoverageEligibilityResponseItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *CoverageEligibilityResponseItem) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetProductOrService returns the ProductOrService field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetProductOrService() CodeableConcept {
	if o == nil || IsNil(o.ProductOrService) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductOrService
}

// GetProductOrServiceOk returns a tuple with the ProductOrService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetProductOrServiceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductOrService) {
		return nil, false
	}
	return o.ProductOrService, true
}

// HasProductOrService returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasProductOrService() bool {
	if o != nil && !IsNil(o.ProductOrService) {
		return true
	}

	return false
}

// SetProductOrService gets a reference to the given CodeableConcept and assigns it to the ProductOrService field.
func (o *CoverageEligibilityResponseItem) SetProductOrService(v CodeableConcept) {
	o.ProductOrService = &v
}

// GetModifier returns the Modifier field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetModifier() []CodeableConcept {
	if o == nil || IsNil(o.Modifier) {
		var ret []CodeableConcept
		return ret
	}
	return o.Modifier
}

// GetModifierOk returns a tuple with the Modifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetModifierOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Modifier) {
		return nil, false
	}
	return o.Modifier, true
}

// HasModifier returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasModifier() bool {
	if o != nil && !IsNil(o.Modifier) {
		return true
	}

	return false
}

// SetModifier gets a reference to the given []CodeableConcept and assigns it to the Modifier field.
func (o *CoverageEligibilityResponseItem) SetModifier(v []CodeableConcept) {
	o.Modifier = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetProvider() Reference {
	if o == nil || IsNil(o.Provider) {
		var ret Reference
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetProviderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given Reference and assigns it to the Provider field.
func (o *CoverageEligibilityResponseItem) SetProvider(v Reference) {
	o.Provider = &v
}

// GetExcluded returns the Excluded field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetExcluded() bool {
	if o == nil || IsNil(o.Excluded) {
		var ret bool
		return ret
	}
	return *o.Excluded
}

// GetExcludedOk returns a tuple with the Excluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetExcludedOk() (*bool, bool) {
	if o == nil || IsNil(o.Excluded) {
		return nil, false
	}
	return o.Excluded, true
}

// HasExcluded returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasExcluded() bool {
	if o != nil && !IsNil(o.Excluded) {
		return true
	}

	return false
}

// SetExcluded gets a reference to the given bool and assigns it to the Excluded field.
func (o *CoverageEligibilityResponseItem) SetExcluded(v bool) {
	o.Excluded = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CoverageEligibilityResponseItem) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CoverageEligibilityResponseItem) SetDescription(v string) {
	o.Description = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetNetwork() CodeableConcept {
	if o == nil || IsNil(o.Network) {
		var ret CodeableConcept
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetNetworkOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given CodeableConcept and assigns it to the Network field.
func (o *CoverageEligibilityResponseItem) SetNetwork(v CodeableConcept) {
	o.Network = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetUnit() CodeableConcept {
	if o == nil || IsNil(o.Unit) {
		var ret CodeableConcept
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetUnitOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CodeableConcept and assigns it to the Unit field.
func (o *CoverageEligibilityResponseItem) SetUnit(v CodeableConcept) {
	o.Unit = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetTerm() CodeableConcept {
	if o == nil || IsNil(o.Term) {
		var ret CodeableConcept
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetTermOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given CodeableConcept and assigns it to the Term field.
func (o *CoverageEligibilityResponseItem) SetTerm(v CodeableConcept) {
	o.Term = &v
}

// GetBenefit returns the Benefit field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetBenefit() []CoverageEligibilityResponseBenefit {
	if o == nil || IsNil(o.Benefit) {
		var ret []CoverageEligibilityResponseBenefit
		return ret
	}
	return o.Benefit
}

// GetBenefitOk returns a tuple with the Benefit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetBenefitOk() ([]CoverageEligibilityResponseBenefit, bool) {
	if o == nil || IsNil(o.Benefit) {
		return nil, false
	}
	return o.Benefit, true
}

// HasBenefit returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasBenefit() bool {
	if o != nil && !IsNil(o.Benefit) {
		return true
	}

	return false
}

// SetBenefit gets a reference to the given []CoverageEligibilityResponseBenefit and assigns it to the Benefit field.
func (o *CoverageEligibilityResponseItem) SetBenefit(v []CoverageEligibilityResponseBenefit) {
	o.Benefit = v
}

// GetAuthorizationRequired returns the AuthorizationRequired field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetAuthorizationRequired() bool {
	if o == nil || IsNil(o.AuthorizationRequired) {
		var ret bool
		return ret
	}
	return *o.AuthorizationRequired
}

// GetAuthorizationRequiredOk returns a tuple with the AuthorizationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetAuthorizationRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthorizationRequired) {
		return nil, false
	}
	return o.AuthorizationRequired, true
}

// HasAuthorizationRequired returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasAuthorizationRequired() bool {
	if o != nil && !IsNil(o.AuthorizationRequired) {
		return true
	}

	return false
}

// SetAuthorizationRequired gets a reference to the given bool and assigns it to the AuthorizationRequired field.
func (o *CoverageEligibilityResponseItem) SetAuthorizationRequired(v bool) {
	o.AuthorizationRequired = &v
}

// GetAuthorizationSupporting returns the AuthorizationSupporting field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetAuthorizationSupporting() []CodeableConcept {
	if o == nil || IsNil(o.AuthorizationSupporting) {
		var ret []CodeableConcept
		return ret
	}
	return o.AuthorizationSupporting
}

// GetAuthorizationSupportingOk returns a tuple with the AuthorizationSupporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetAuthorizationSupportingOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.AuthorizationSupporting) {
		return nil, false
	}
	return o.AuthorizationSupporting, true
}

// HasAuthorizationSupporting returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasAuthorizationSupporting() bool {
	if o != nil && !IsNil(o.AuthorizationSupporting) {
		return true
	}

	return false
}

// SetAuthorizationSupporting gets a reference to the given []CodeableConcept and assigns it to the AuthorizationSupporting field.
func (o *CoverageEligibilityResponseItem) SetAuthorizationSupporting(v []CodeableConcept) {
	o.AuthorizationSupporting = v
}

// GetAuthorizationUrl returns the AuthorizationUrl field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseItem) GetAuthorizationUrl() string {
	if o == nil || IsNil(o.AuthorizationUrl) {
		var ret string
		return ret
	}
	return *o.AuthorizationUrl
}

// GetAuthorizationUrlOk returns a tuple with the AuthorizationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseItem) GetAuthorizationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationUrl) {
		return nil, false
	}
	return o.AuthorizationUrl, true
}

// HasAuthorizationUrl returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseItem) HasAuthorizationUrl() bool {
	if o != nil && !IsNil(o.AuthorizationUrl) {
		return true
	}

	return false
}

// SetAuthorizationUrl gets a reference to the given string and assigns it to the AuthorizationUrl field.
func (o *CoverageEligibilityResponseItem) SetAuthorizationUrl(v string) {
	o.AuthorizationUrl = &v
}

func (o CoverageEligibilityResponseItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageEligibilityResponseItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.ProductOrService) {
		toSerialize["productOrService"] = o.ProductOrService
	}
	if !IsNil(o.Modifier) {
		toSerialize["modifier"] = o.Modifier
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Excluded) {
		toSerialize["excluded"] = o.Excluded
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Benefit) {
		toSerialize["benefit"] = o.Benefit
	}
	if !IsNil(o.AuthorizationRequired) {
		toSerialize["authorizationRequired"] = o.AuthorizationRequired
	}
	if !IsNil(o.AuthorizationSupporting) {
		toSerialize["authorizationSupporting"] = o.AuthorizationSupporting
	}
	if !IsNil(o.AuthorizationUrl) {
		toSerialize["authorizationUrl"] = o.AuthorizationUrl
	}
	return toSerialize, nil
}

type NullableCoverageEligibilityResponseItem struct {
	value *CoverageEligibilityResponseItem
	isSet bool
}

func (v NullableCoverageEligibilityResponseItem) Get() *CoverageEligibilityResponseItem {
	return v.value
}

func (v *NullableCoverageEligibilityResponseItem) Set(val *CoverageEligibilityResponseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageEligibilityResponseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageEligibilityResponseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageEligibilityResponseItem(val *CoverageEligibilityResponseItem) *NullableCoverageEligibilityResponseItem {
	return &NullableCoverageEligibilityResponseItem{value: val, isSet: true}
}

func (v NullableCoverageEligibilityResponseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageEligibilityResponseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


