/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StructureMapRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructureMapRule{}

// StructureMapRule A Map of relationships between 2 structures that can be used to transform data.
type StructureMapRule struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Name *string `json:"name,omitempty"`
	// Source inputs to the mapping.
	Source []StructureMapSource `json:"source"`
	// Content to create because of this mapping rule.
	Target []StructureMapTarget `json:"target,omitempty"`
	// Rules contained in this rule.
	Rule []StructureMapRule `json:"rule,omitempty"`
	// Which other rules to apply in the context of this rule.
	Dependent []StructureMapDependent `json:"dependent,omitempty"`
	// A sequence of Unicode characters
	Documentation *string `json:"documentation,omitempty"`
}

type _StructureMapRule StructureMapRule

// NewStructureMapRule instantiates a new StructureMapRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructureMapRule(source []StructureMapSource) *StructureMapRule {
	this := StructureMapRule{}
	this.Source = source
	return &this
}

// NewStructureMapRuleWithDefaults instantiates a new StructureMapRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructureMapRuleWithDefaults() *StructureMapRule {
	this := StructureMapRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StructureMapRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StructureMapRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StructureMapRule) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *StructureMapRule) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *StructureMapRule) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *StructureMapRule) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *StructureMapRule) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *StructureMapRule) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *StructureMapRule) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StructureMapRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StructureMapRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StructureMapRule) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value
func (o *StructureMapRule) GetSource() []StructureMapSource {
	if o == nil {
		var ret []StructureMapSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetSourceOk() ([]StructureMapSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *StructureMapRule) SetSource(v []StructureMapSource) {
	o.Source = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *StructureMapRule) GetTarget() []StructureMapTarget {
	if o == nil || IsNil(o.Target) {
		var ret []StructureMapTarget
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetTargetOk() ([]StructureMapTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *StructureMapRule) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given []StructureMapTarget and assigns it to the Target field.
func (o *StructureMapRule) SetTarget(v []StructureMapTarget) {
	o.Target = v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *StructureMapRule) GetRule() []StructureMapRule {
	if o == nil || IsNil(o.Rule) {
		var ret []StructureMapRule
		return ret
	}
	return o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetRuleOk() ([]StructureMapRule, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *StructureMapRule) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given []StructureMapRule and assigns it to the Rule field.
func (o *StructureMapRule) SetRule(v []StructureMapRule) {
	o.Rule = v
}

// GetDependent returns the Dependent field value if set, zero value otherwise.
func (o *StructureMapRule) GetDependent() []StructureMapDependent {
	if o == nil || IsNil(o.Dependent) {
		var ret []StructureMapDependent
		return ret
	}
	return o.Dependent
}

// GetDependentOk returns a tuple with the Dependent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetDependentOk() ([]StructureMapDependent, bool) {
	if o == nil || IsNil(o.Dependent) {
		return nil, false
	}
	return o.Dependent, true
}

// HasDependent returns a boolean if a field has been set.
func (o *StructureMapRule) HasDependent() bool {
	if o != nil && !IsNil(o.Dependent) {
		return true
	}

	return false
}

// SetDependent gets a reference to the given []StructureMapDependent and assigns it to the Dependent field.
func (o *StructureMapRule) SetDependent(v []StructureMapDependent) {
	o.Dependent = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *StructureMapRule) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructureMapRule) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *StructureMapRule) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *StructureMapRule) SetDocumentation(v string) {
	o.Documentation = &v
}

func (o StructureMapRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructureMapRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.Dependent) {
		toSerialize["dependent"] = o.Dependent
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	return toSerialize, nil
}

func (o *StructureMapRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStructureMapRule := _StructureMapRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStructureMapRule)

	if err != nil {
		return err
	}

	*o = StructureMapRule(varStructureMapRule)

	return err
}

type NullableStructureMapRule struct {
	value *StructureMapRule
	isSet bool
}

func (v NullableStructureMapRule) Get() *StructureMapRule {
	return v.value
}

func (v *NullableStructureMapRule) Set(val *StructureMapRule) {
	v.value = val
	v.isSet = true
}

func (v NullableStructureMapRule) IsSet() bool {
	return v.isSet
}

func (v *NullableStructureMapRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructureMapRule(val *StructureMapRule) *NullableStructureMapRule {
	return &NullableStructureMapRule{value: val, isSet: true}
}

func (v NullableStructureMapRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructureMapRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


