/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the Identifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Identifier{}

// Identifier An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
type Identifier struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// The purpose of this identifier.
	Use *string `json:"use,omitempty"`
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	Type *CodeableConcept `json:"type,omitempty"`
	// String of characters used to identify a name or a resource
	System *string `json:"system,omitempty"`
	// A sequence of Unicode characters
	Value *string `json:"value,omitempty"`
	// Time period during which identifier is/was valid for use.
	Period *Period `json:"period,omitempty"`
	// Organization that issued/manages the identifier.
	Assigner *Reference `json:"assigner,omitempty"`
}

// NewIdentifier instantiates a new Identifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifier() *Identifier {
	this := Identifier{}
	return &this
}

// NewIdentifierWithDefaults instantiates a new Identifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifierWithDefaults() *Identifier {
	this := Identifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Identifier) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Identifier) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Identifier) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Identifier) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Identifier) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Identifier) SetExtension(v []Extension) {
	o.Extension = v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *Identifier) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *Identifier) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *Identifier) SetUse(v string) {
	o.Use = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Identifier) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Identifier) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *Identifier) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Identifier) GetSystem() string {
	if o == nil || IsNil(o.System) {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetSystemOk() (*string, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Identifier) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *Identifier) SetSystem(v string) {
	o.System = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Identifier) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Identifier) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Identifier) SetValue(v string) {
	o.Value = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Identifier) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Identifier) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *Identifier) SetPeriod(v Period) {
	o.Period = &v
}

// GetAssigner returns the Assigner field value if set, zero value otherwise.
func (o *Identifier) GetAssigner() Reference {
	if o == nil || IsNil(o.Assigner) {
		var ret Reference
		return ret
	}
	return *o.Assigner
}

// GetAssignerOk returns a tuple with the Assigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identifier) GetAssignerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Assigner) {
		return nil, false
	}
	return o.Assigner, true
}

// HasAssigner returns a boolean if a field has been set.
func (o *Identifier) HasAssigner() bool {
	if o != nil && !IsNil(o.Assigner) {
		return true
	}

	return false
}

// SetAssigner gets a reference to the given Reference and assigns it to the Assigner field.
func (o *Identifier) SetAssigner(v Reference) {
	o.Assigner = &v
}

func (o Identifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Identifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Assigner) {
		toSerialize["assigner"] = o.Assigner
	}
	return toSerialize, nil
}

type NullableIdentifier struct {
	value *Identifier
	isSet bool
}

func (v NullableIdentifier) Get() *Identifier {
	return v.value
}

func (v *NullableIdentifier) Set(val *Identifier) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifier(val *Identifier) *NullableIdentifier {
	return &NullableIdentifier{value: val, isSet: true}
}

func (v NullableIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


