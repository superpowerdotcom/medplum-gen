/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Goal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Goal{}

// Goal Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
type Goal struct {
	// This is a Goal resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The state of the goal throughout its lifecycle.
	LifecycleStatus *string `json:"lifecycleStatus,omitempty"`
	// Describes the progression, or lack thereof, towards the goal against the target.
	AchievementStatus *CodeableConcept `json:"achievementStatus,omitempty"`
	// Indicates a category the goal falls within.
	Category []CodeableConcept `json:"category,omitempty"`
	// Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
	Priority *CodeableConcept `json:"priority,omitempty"`
	// Human-readable and/or coded description of a specific desired objective of care, such as \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at wedding\".
	Description CodeableConcept `json:"description"`
	// Identifies the patient, group or organization for whom the goal is being established.
	Subject Reference `json:"subject"`
	// The date or event after which the goal should begin being pursued.
	StartDate *string `json:"startDate,omitempty"`
	// The date or event after which the goal should begin being pursued.
	StartCodeableConcept *CodeableConcept `json:"startCodeableConcept,omitempty"`
	// Indicates what should be done by when.
	Target []GoalTarget `json:"target,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	StatusDate *string `json:"statusDate,omitempty"`
	// A sequence of Unicode characters
	StatusReason *string `json:"statusReason,omitempty"`
	// Indicates whose goal this is - patient goal, practitioner goal, etc.
	ExpressedBy *Reference `json:"expressedBy,omitempty"`
	// The identified conditions and other health record elements that are intended to be addressed by the goal.
	Addresses []Reference `json:"addresses,omitempty"`
	// Any comments related to the goal.
	Note []Annotation `json:"note,omitempty"`
	// Identifies the change (or lack of change) at the point when the status of the goal is assessed.
	OutcomeCode []CodeableConcept `json:"outcomeCode,omitempty"`
	// Details of what's changed (or not changed).
	OutcomeReference []Reference `json:"outcomeReference,omitempty"`
}

type _Goal Goal

// NewGoal instantiates a new Goal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoal(resourceType string, description CodeableConcept, subject Reference) *Goal {
	this := Goal{}
	this.ResourceType = resourceType
	this.Description = description
	this.Subject = subject
	return &this
}

// NewGoalWithDefaults instantiates a new Goal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalWithDefaults() *Goal {
	this := Goal{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Goal) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Goal) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Goal) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Goal) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Goal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Goal) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Goal) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Goal) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Goal) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Goal) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Goal) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Goal) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Goal) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Goal) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Goal) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Goal) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Goal) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Goal) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Goal) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Goal) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Goal) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Goal) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Goal) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Goal) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Goal) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Goal) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Goal) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Goal) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Goal) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Goal) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetLifecycleStatus returns the LifecycleStatus field value if set, zero value otherwise.
func (o *Goal) GetLifecycleStatus() string {
	if o == nil || IsNil(o.LifecycleStatus) {
		var ret string
		return ret
	}
	return *o.LifecycleStatus
}

// GetLifecycleStatusOk returns a tuple with the LifecycleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetLifecycleStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LifecycleStatus) {
		return nil, false
	}
	return o.LifecycleStatus, true
}

// HasLifecycleStatus returns a boolean if a field has been set.
func (o *Goal) HasLifecycleStatus() bool {
	if o != nil && !IsNil(o.LifecycleStatus) {
		return true
	}

	return false
}

// SetLifecycleStatus gets a reference to the given string and assigns it to the LifecycleStatus field.
func (o *Goal) SetLifecycleStatus(v string) {
	o.LifecycleStatus = &v
}

// GetAchievementStatus returns the AchievementStatus field value if set, zero value otherwise.
func (o *Goal) GetAchievementStatus() CodeableConcept {
	if o == nil || IsNil(o.AchievementStatus) {
		var ret CodeableConcept
		return ret
	}
	return *o.AchievementStatus
}

// GetAchievementStatusOk returns a tuple with the AchievementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetAchievementStatusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AchievementStatus) {
		return nil, false
	}
	return o.AchievementStatus, true
}

// HasAchievementStatus returns a boolean if a field has been set.
func (o *Goal) HasAchievementStatus() bool {
	if o != nil && !IsNil(o.AchievementStatus) {
		return true
	}

	return false
}

// SetAchievementStatus gets a reference to the given CodeableConcept and assigns it to the AchievementStatus field.
func (o *Goal) SetAchievementStatus(v CodeableConcept) {
	o.AchievementStatus = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Goal) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Goal) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *Goal) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Goal) GetPriority() CodeableConcept {
	if o == nil || IsNil(o.Priority) {
		var ret CodeableConcept
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetPriorityOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Goal) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given CodeableConcept and assigns it to the Priority field.
func (o *Goal) SetPriority(v CodeableConcept) {
	o.Priority = &v
}

// GetDescription returns the Description field value
func (o *Goal) GetDescription() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Goal) GetDescriptionOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Goal) SetDescription(v CodeableConcept) {
	o.Description = v
}

// GetSubject returns the Subject field value
func (o *Goal) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Goal) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *Goal) SetSubject(v Reference) {
	o.Subject = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Goal) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Goal) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Goal) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStartCodeableConcept returns the StartCodeableConcept field value if set, zero value otherwise.
func (o *Goal) GetStartCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.StartCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.StartCodeableConcept
}

// GetStartCodeableConceptOk returns a tuple with the StartCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetStartCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StartCodeableConcept) {
		return nil, false
	}
	return o.StartCodeableConcept, true
}

// HasStartCodeableConcept returns a boolean if a field has been set.
func (o *Goal) HasStartCodeableConcept() bool {
	if o != nil && !IsNil(o.StartCodeableConcept) {
		return true
	}

	return false
}

// SetStartCodeableConcept gets a reference to the given CodeableConcept and assigns it to the StartCodeableConcept field.
func (o *Goal) SetStartCodeableConcept(v CodeableConcept) {
	o.StartCodeableConcept = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Goal) GetTarget() []GoalTarget {
	if o == nil || IsNil(o.Target) {
		var ret []GoalTarget
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetTargetOk() ([]GoalTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Goal) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given []GoalTarget and assigns it to the Target field.
func (o *Goal) SetTarget(v []GoalTarget) {
	o.Target = v
}

// GetStatusDate returns the StatusDate field value if set, zero value otherwise.
func (o *Goal) GetStatusDate() string {
	if o == nil || IsNil(o.StatusDate) {
		var ret string
		return ret
	}
	return *o.StatusDate
}

// GetStatusDateOk returns a tuple with the StatusDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetStatusDateOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDate) {
		return nil, false
	}
	return o.StatusDate, true
}

// HasStatusDate returns a boolean if a field has been set.
func (o *Goal) HasStatusDate() bool {
	if o != nil && !IsNil(o.StatusDate) {
		return true
	}

	return false
}

// SetStatusDate gets a reference to the given string and assigns it to the StatusDate field.
func (o *Goal) SetStatusDate(v string) {
	o.StatusDate = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *Goal) GetStatusReason() string {
	if o == nil || IsNil(o.StatusReason) {
		var ret string
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *Goal) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given string and assigns it to the StatusReason field.
func (o *Goal) SetStatusReason(v string) {
	o.StatusReason = &v
}

// GetExpressedBy returns the ExpressedBy field value if set, zero value otherwise.
func (o *Goal) GetExpressedBy() Reference {
	if o == nil || IsNil(o.ExpressedBy) {
		var ret Reference
		return ret
	}
	return *o.ExpressedBy
}

// GetExpressedByOk returns a tuple with the ExpressedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetExpressedByOk() (*Reference, bool) {
	if o == nil || IsNil(o.ExpressedBy) {
		return nil, false
	}
	return o.ExpressedBy, true
}

// HasExpressedBy returns a boolean if a field has been set.
func (o *Goal) HasExpressedBy() bool {
	if o != nil && !IsNil(o.ExpressedBy) {
		return true
	}

	return false
}

// SetExpressedBy gets a reference to the given Reference and assigns it to the ExpressedBy field.
func (o *Goal) SetExpressedBy(v Reference) {
	o.ExpressedBy = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Goal) GetAddresses() []Reference {
	if o == nil || IsNil(o.Addresses) {
		var ret []Reference
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetAddressesOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Goal) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []Reference and assigns it to the Addresses field.
func (o *Goal) SetAddresses(v []Reference) {
	o.Addresses = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Goal) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Goal) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *Goal) SetNote(v []Annotation) {
	o.Note = v
}

// GetOutcomeCode returns the OutcomeCode field value if set, zero value otherwise.
func (o *Goal) GetOutcomeCode() []CodeableConcept {
	if o == nil || IsNil(o.OutcomeCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.OutcomeCode
}

// GetOutcomeCodeOk returns a tuple with the OutcomeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetOutcomeCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.OutcomeCode) {
		return nil, false
	}
	return o.OutcomeCode, true
}

// HasOutcomeCode returns a boolean if a field has been set.
func (o *Goal) HasOutcomeCode() bool {
	if o != nil && !IsNil(o.OutcomeCode) {
		return true
	}

	return false
}

// SetOutcomeCode gets a reference to the given []CodeableConcept and assigns it to the OutcomeCode field.
func (o *Goal) SetOutcomeCode(v []CodeableConcept) {
	o.OutcomeCode = v
}

// GetOutcomeReference returns the OutcomeReference field value if set, zero value otherwise.
func (o *Goal) GetOutcomeReference() []Reference {
	if o == nil || IsNil(o.OutcomeReference) {
		var ret []Reference
		return ret
	}
	return o.OutcomeReference
}

// GetOutcomeReferenceOk returns a tuple with the OutcomeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goal) GetOutcomeReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.OutcomeReference) {
		return nil, false
	}
	return o.OutcomeReference, true
}

// HasOutcomeReference returns a boolean if a field has been set.
func (o *Goal) HasOutcomeReference() bool {
	if o != nil && !IsNil(o.OutcomeReference) {
		return true
	}

	return false
}

// SetOutcomeReference gets a reference to the given []Reference and assigns it to the OutcomeReference field.
func (o *Goal) SetOutcomeReference(v []Reference) {
	o.OutcomeReference = v
}

func (o Goal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Goal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.LifecycleStatus) {
		toSerialize["lifecycleStatus"] = o.LifecycleStatus
	}
	if !IsNil(o.AchievementStatus) {
		toSerialize["achievementStatus"] = o.AchievementStatus
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	toSerialize["description"] = o.Description
	toSerialize["subject"] = o.Subject
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.StartCodeableConcept) {
		toSerialize["startCodeableConcept"] = o.StartCodeableConcept
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.StatusDate) {
		toSerialize["statusDate"] = o.StatusDate
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.ExpressedBy) {
		toSerialize["expressedBy"] = o.ExpressedBy
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.OutcomeCode) {
		toSerialize["outcomeCode"] = o.OutcomeCode
	}
	if !IsNil(o.OutcomeReference) {
		toSerialize["outcomeReference"] = o.OutcomeReference
	}
	return toSerialize, nil
}

func (o *Goal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"description",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoal := _Goal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoal)

	if err != nil {
		return err
	}

	*o = Goal(varGoal)

	return err
}

type NullableGoal struct {
	value *Goal
	isSet bool
}

func (v NullableGoal) Get() *Goal {
	return v.value
}

func (v *NullableGoal) Set(val *Goal) {
	v.value = val
	v.isSet = true
}

func (v NullableGoal) IsSet() bool {
	return v.isSet
}

func (v *NullableGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoal(val *Goal) *NullableGoal {
	return &NullableGoal{value: val, isSet: true}
}

func (v NullableGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


