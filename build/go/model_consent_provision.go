/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ConsentProvision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsentProvision{}

// ConsentProvision A record of a healthcare consumerâ€™s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
type ConsentProvision struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
	Type *string `json:"type,omitempty"`
	// The timeframe in this rule is valid.
	Period *Period `json:"period,omitempty"`
	// Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
	Actor []ConsentActor `json:"actor,omitempty"`
	// Actions controlled by this Rule.
	Action []CodeableConcept `json:"action,omitempty"`
	// A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
	SecurityLabel []Coding `json:"securityLabel,omitempty"`
	// The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
	Purpose []Coding `json:"purpose,omitempty"`
	// The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
	Class []Coding `json:"class,omitempty"`
	// If this code is found in an instance, then the rule applies.
	Code []CodeableConcept `json:"code,omitempty"`
	// Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
	DataPeriod *Period `json:"dataPeriod,omitempty"`
	// The resources controlled by this rule if specific resources are referenced.
	Data []ConsentData `json:"data,omitempty"`
	// Rules which provide exceptions to the base rule or subrules.
	Provision []ConsentProvision `json:"provision,omitempty"`
}

// NewConsentProvision instantiates a new ConsentProvision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentProvision() *ConsentProvision {
	this := ConsentProvision{}
	return &this
}

// NewConsentProvisionWithDefaults instantiates a new ConsentProvision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentProvisionWithDefaults() *ConsentProvision {
	this := ConsentProvision{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConsentProvision) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConsentProvision) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConsentProvision) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ConsentProvision) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ConsentProvision) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ConsentProvision) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ConsentProvision) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ConsentProvision) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ConsentProvision) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConsentProvision) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConsentProvision) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConsentProvision) SetType(v string) {
	o.Type = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *ConsentProvision) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *ConsentProvision) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *ConsentProvision) SetPeriod(v Period) {
	o.Period = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *ConsentProvision) GetActor() []ConsentActor {
	if o == nil || IsNil(o.Actor) {
		var ret []ConsentActor
		return ret
	}
	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetActorOk() ([]ConsentActor, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *ConsentProvision) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given []ConsentActor and assigns it to the Actor field.
func (o *ConsentProvision) SetActor(v []ConsentActor) {
	o.Actor = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ConsentProvision) GetAction() []CodeableConcept {
	if o == nil || IsNil(o.Action) {
		var ret []CodeableConcept
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetActionOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ConsentProvision) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []CodeableConcept and assigns it to the Action field.
func (o *ConsentProvision) SetAction(v []CodeableConcept) {
	o.Action = v
}

// GetSecurityLabel returns the SecurityLabel field value if set, zero value otherwise.
func (o *ConsentProvision) GetSecurityLabel() []Coding {
	if o == nil || IsNil(o.SecurityLabel) {
		var ret []Coding
		return ret
	}
	return o.SecurityLabel
}

// GetSecurityLabelOk returns a tuple with the SecurityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetSecurityLabelOk() ([]Coding, bool) {
	if o == nil || IsNil(o.SecurityLabel) {
		return nil, false
	}
	return o.SecurityLabel, true
}

// HasSecurityLabel returns a boolean if a field has been set.
func (o *ConsentProvision) HasSecurityLabel() bool {
	if o != nil && !IsNil(o.SecurityLabel) {
		return true
	}

	return false
}

// SetSecurityLabel gets a reference to the given []Coding and assigns it to the SecurityLabel field.
func (o *ConsentProvision) SetSecurityLabel(v []Coding) {
	o.SecurityLabel = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *ConsentProvision) GetPurpose() []Coding {
	if o == nil || IsNil(o.Purpose) {
		var ret []Coding
		return ret
	}
	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetPurposeOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *ConsentProvision) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given []Coding and assigns it to the Purpose field.
func (o *ConsentProvision) SetPurpose(v []Coding) {
	o.Purpose = v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ConsentProvision) GetClass() []Coding {
	if o == nil || IsNil(o.Class) {
		var ret []Coding
		return ret
	}
	return o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetClassOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ConsentProvision) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given []Coding and assigns it to the Class field.
func (o *ConsentProvision) SetClass(v []Coding) {
	o.Class = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConsentProvision) GetCode() []CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret []CodeableConcept
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConsentProvision) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []CodeableConcept and assigns it to the Code field.
func (o *ConsentProvision) SetCode(v []CodeableConcept) {
	o.Code = v
}

// GetDataPeriod returns the DataPeriod field value if set, zero value otherwise.
func (o *ConsentProvision) GetDataPeriod() Period {
	if o == nil || IsNil(o.DataPeriod) {
		var ret Period
		return ret
	}
	return *o.DataPeriod
}

// GetDataPeriodOk returns a tuple with the DataPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetDataPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.DataPeriod) {
		return nil, false
	}
	return o.DataPeriod, true
}

// HasDataPeriod returns a boolean if a field has been set.
func (o *ConsentProvision) HasDataPeriod() bool {
	if o != nil && !IsNil(o.DataPeriod) {
		return true
	}

	return false
}

// SetDataPeriod gets a reference to the given Period and assigns it to the DataPeriod field.
func (o *ConsentProvision) SetDataPeriod(v Period) {
	o.DataPeriod = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConsentProvision) GetData() []ConsentData {
	if o == nil || IsNil(o.Data) {
		var ret []ConsentData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetDataOk() ([]ConsentData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConsentProvision) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ConsentData and assigns it to the Data field.
func (o *ConsentProvision) SetData(v []ConsentData) {
	o.Data = v
}

// GetProvision returns the Provision field value if set, zero value otherwise.
func (o *ConsentProvision) GetProvision() []ConsentProvision {
	if o == nil || IsNil(o.Provision) {
		var ret []ConsentProvision
		return ret
	}
	return o.Provision
}

// GetProvisionOk returns a tuple with the Provision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentProvision) GetProvisionOk() ([]ConsentProvision, bool) {
	if o == nil || IsNil(o.Provision) {
		return nil, false
	}
	return o.Provision, true
}

// HasProvision returns a boolean if a field has been set.
func (o *ConsentProvision) HasProvision() bool {
	if o != nil && !IsNil(o.Provision) {
		return true
	}

	return false
}

// SetProvision gets a reference to the given []ConsentProvision and assigns it to the Provision field.
func (o *ConsentProvision) SetProvision(v []ConsentProvision) {
	o.Provision = v
}

func (o ConsentProvision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsentProvision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.SecurityLabel) {
		toSerialize["securityLabel"] = o.SecurityLabel
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DataPeriod) {
		toSerialize["dataPeriod"] = o.DataPeriod
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Provision) {
		toSerialize["provision"] = o.Provision
	}
	return toSerialize, nil
}

type NullableConsentProvision struct {
	value *ConsentProvision
	isSet bool
}

func (v NullableConsentProvision) Get() *ConsentProvision {
	return v.value
}

func (v *NullableConsentProvision) Set(val *ConsentProvision) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentProvision) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentProvision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentProvision(val *ConsentProvision) *NullableConsentProvision {
	return &NullableConsentProvision{value: val, isSet: true}
}

func (v NullableConsentProvision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentProvision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


