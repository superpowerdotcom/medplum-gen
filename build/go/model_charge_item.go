/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeItem{}

// ChargeItem The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
type ChargeItem struct {
	// This is a ChargeItem resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers assigned to this event performer or other systems.
	Identifier []Identifier `json:"identifier,omitempty"`
	// References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
	DefinitionUri []string `json:"definitionUri,omitempty"`
	// References the source of pricing information, rules of application for the code this ChargeItem uses.
	DefinitionCanonical []string `json:"definitionCanonical,omitempty"`
	// The current state of the ChargeItem.
	Status *string `json:"status,omitempty"`
	// ChargeItems can be grouped to larger ChargeItems covering the whole set.
	PartOf []Reference `json:"partOf,omitempty"`
	// A code that identifies the charge, like a billing code.
	Code CodeableConcept `json:"code"`
	// The individual or set of individuals the action is being or was performed on.
	Subject Reference `json:"subject"`
	// The encounter or episode of care that establishes the context for this event.
	Context *Reference `json:"context,omitempty"`
	// Date/time(s) or duration when the charged service was applied.
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// Date/time(s) or duration when the charged service was applied.
	OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`
	// Date/time(s) or duration when the charged service was applied.
	OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`
	// Indicates who or what performed or participated in the charged service.
	Performer []ChargeItemPerformer `json:"performer,omitempty"`
	// The organization requesting the service.
	PerformingOrganization *Reference `json:"performingOrganization,omitempty"`
	// The organization performing the service.
	RequestingOrganization *Reference `json:"requestingOrganization,omitempty"`
	// The financial cost center permits the tracking of charge attribution.
	CostCenter *Reference `json:"costCenter,omitempty"`
	// Quantity of which the charge item has been serviced.
	Quantity *Quantity `json:"quantity,omitempty"`
	// The anatomical location where the related service has been applied.
	Bodysite []CodeableConcept `json:"bodysite,omitempty"`
	// A rational number with implicit precision
	FactorOverride *float32 `json:"factorOverride,omitempty"`
	// Total price of the charge overriding the list price associated with the code.
	PriceOverride *Money `json:"priceOverride,omitempty"`
	// A sequence of Unicode characters
	OverrideReason *string `json:"overrideReason,omitempty"`
	// The device, practitioner, etc. who entered the charge item.
	Enterer *Reference `json:"enterer,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	EnteredDate *string `json:"enteredDate,omitempty"`
	// Describes why the event occurred in coded or textual form.
	Reason []CodeableConcept `json:"reason,omitempty"`
	// Indicated the rendered service that caused this charge.
	Service []Reference `json:"service,omitempty"`
	// Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
	ProductReference *Reference `json:"productReference,omitempty"`
	// Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
	ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept,omitempty"`
	// Account into which this ChargeItems belongs.
	Account []Reference `json:"account,omitempty"`
	// Comments made about the event by the performer, subject or other participants.
	Note []Annotation `json:"note,omitempty"`
	// Further information supporting this charge.
	SupportingInformation []Reference `json:"supportingInformation,omitempty"`
}

type _ChargeItem ChargeItem

// NewChargeItem instantiates a new ChargeItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeItem(resourceType string, code CodeableConcept, subject Reference) *ChargeItem {
	this := ChargeItem{}
	this.ResourceType = resourceType
	this.Code = code
	this.Subject = subject
	return &this
}

// NewChargeItemWithDefaults instantiates a new ChargeItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeItemWithDefaults() *ChargeItem {
	this := ChargeItem{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ChargeItem) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ChargeItem) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChargeItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChargeItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChargeItem) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ChargeItem) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ChargeItem) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ChargeItem) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ChargeItem) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ChargeItem) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ChargeItem) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ChargeItem) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ChargeItem) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ChargeItem) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ChargeItem) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ChargeItem) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ChargeItem) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ChargeItem) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ChargeItem) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ChargeItem) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ChargeItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ChargeItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ChargeItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ChargeItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ChargeItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ChargeItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ChargeItem) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ChargeItem) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ChargeItem) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetDefinitionUri returns the DefinitionUri field value if set, zero value otherwise.
func (o *ChargeItem) GetDefinitionUri() []string {
	if o == nil || IsNil(o.DefinitionUri) {
		var ret []string
		return ret
	}
	return o.DefinitionUri
}

// GetDefinitionUriOk returns a tuple with the DefinitionUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetDefinitionUriOk() ([]string, bool) {
	if o == nil || IsNil(o.DefinitionUri) {
		return nil, false
	}
	return o.DefinitionUri, true
}

// HasDefinitionUri returns a boolean if a field has been set.
func (o *ChargeItem) HasDefinitionUri() bool {
	if o != nil && !IsNil(o.DefinitionUri) {
		return true
	}

	return false
}

// SetDefinitionUri gets a reference to the given []string and assigns it to the DefinitionUri field.
func (o *ChargeItem) SetDefinitionUri(v []string) {
	o.DefinitionUri = v
}

// GetDefinitionCanonical returns the DefinitionCanonical field value if set, zero value otherwise.
func (o *ChargeItem) GetDefinitionCanonical() []string {
	if o == nil || IsNil(o.DefinitionCanonical) {
		var ret []string
		return ret
	}
	return o.DefinitionCanonical
}

// GetDefinitionCanonicalOk returns a tuple with the DefinitionCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetDefinitionCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.DefinitionCanonical) {
		return nil, false
	}
	return o.DefinitionCanonical, true
}

// HasDefinitionCanonical returns a boolean if a field has been set.
func (o *ChargeItem) HasDefinitionCanonical() bool {
	if o != nil && !IsNil(o.DefinitionCanonical) {
		return true
	}

	return false
}

// SetDefinitionCanonical gets a reference to the given []string and assigns it to the DefinitionCanonical field.
func (o *ChargeItem) SetDefinitionCanonical(v []string) {
	o.DefinitionCanonical = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ChargeItem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ChargeItem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ChargeItem) SetStatus(v string) {
	o.Status = &v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *ChargeItem) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *ChargeItem) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *ChargeItem) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetCode returns the Code field value
func (o *ChargeItem) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ChargeItem) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetSubject returns the Subject field value
func (o *ChargeItem) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *ChargeItem) SetSubject(v Reference) {
	o.Subject = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ChargeItem) GetContext() Reference {
	if o == nil || IsNil(o.Context) {
		var ret Reference
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetContextOk() (*Reference, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ChargeItem) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Reference and assigns it to the Context field.
func (o *ChargeItem) SetContext(v Reference) {
	o.Context = &v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *ChargeItem) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *ChargeItem) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *ChargeItem) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrencePeriod returns the OccurrencePeriod field value if set, zero value otherwise.
func (o *ChargeItem) GetOccurrencePeriod() Period {
	if o == nil || IsNil(o.OccurrencePeriod) {
		var ret Period
		return ret
	}
	return *o.OccurrencePeriod
}

// GetOccurrencePeriodOk returns a tuple with the OccurrencePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetOccurrencePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OccurrencePeriod) {
		return nil, false
	}
	return o.OccurrencePeriod, true
}

// HasOccurrencePeriod returns a boolean if a field has been set.
func (o *ChargeItem) HasOccurrencePeriod() bool {
	if o != nil && !IsNil(o.OccurrencePeriod) {
		return true
	}

	return false
}

// SetOccurrencePeriod gets a reference to the given Period and assigns it to the OccurrencePeriod field.
func (o *ChargeItem) SetOccurrencePeriod(v Period) {
	o.OccurrencePeriod = &v
}

// GetOccurrenceTiming returns the OccurrenceTiming field value if set, zero value otherwise.
func (o *ChargeItem) GetOccurrenceTiming() Timing {
	if o == nil || IsNil(o.OccurrenceTiming) {
		var ret Timing
		return ret
	}
	return *o.OccurrenceTiming
}

// GetOccurrenceTimingOk returns a tuple with the OccurrenceTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetOccurrenceTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.OccurrenceTiming) {
		return nil, false
	}
	return o.OccurrenceTiming, true
}

// HasOccurrenceTiming returns a boolean if a field has been set.
func (o *ChargeItem) HasOccurrenceTiming() bool {
	if o != nil && !IsNil(o.OccurrenceTiming) {
		return true
	}

	return false
}

// SetOccurrenceTiming gets a reference to the given Timing and assigns it to the OccurrenceTiming field.
func (o *ChargeItem) SetOccurrenceTiming(v Timing) {
	o.OccurrenceTiming = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *ChargeItem) GetPerformer() []ChargeItemPerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []ChargeItemPerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetPerformerOk() ([]ChargeItemPerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *ChargeItem) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []ChargeItemPerformer and assigns it to the Performer field.
func (o *ChargeItem) SetPerformer(v []ChargeItemPerformer) {
	o.Performer = v
}

// GetPerformingOrganization returns the PerformingOrganization field value if set, zero value otherwise.
func (o *ChargeItem) GetPerformingOrganization() Reference {
	if o == nil || IsNil(o.PerformingOrganization) {
		var ret Reference
		return ret
	}
	return *o.PerformingOrganization
}

// GetPerformingOrganizationOk returns a tuple with the PerformingOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetPerformingOrganizationOk() (*Reference, bool) {
	if o == nil || IsNil(o.PerformingOrganization) {
		return nil, false
	}
	return o.PerformingOrganization, true
}

// HasPerformingOrganization returns a boolean if a field has been set.
func (o *ChargeItem) HasPerformingOrganization() bool {
	if o != nil && !IsNil(o.PerformingOrganization) {
		return true
	}

	return false
}

// SetPerformingOrganization gets a reference to the given Reference and assigns it to the PerformingOrganization field.
func (o *ChargeItem) SetPerformingOrganization(v Reference) {
	o.PerformingOrganization = &v
}

// GetRequestingOrganization returns the RequestingOrganization field value if set, zero value otherwise.
func (o *ChargeItem) GetRequestingOrganization() Reference {
	if o == nil || IsNil(o.RequestingOrganization) {
		var ret Reference
		return ret
	}
	return *o.RequestingOrganization
}

// GetRequestingOrganizationOk returns a tuple with the RequestingOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetRequestingOrganizationOk() (*Reference, bool) {
	if o == nil || IsNil(o.RequestingOrganization) {
		return nil, false
	}
	return o.RequestingOrganization, true
}

// HasRequestingOrganization returns a boolean if a field has been set.
func (o *ChargeItem) HasRequestingOrganization() bool {
	if o != nil && !IsNil(o.RequestingOrganization) {
		return true
	}

	return false
}

// SetRequestingOrganization gets a reference to the given Reference and assigns it to the RequestingOrganization field.
func (o *ChargeItem) SetRequestingOrganization(v Reference) {
	o.RequestingOrganization = &v
}

// GetCostCenter returns the CostCenter field value if set, zero value otherwise.
func (o *ChargeItem) GetCostCenter() Reference {
	if o == nil || IsNil(o.CostCenter) {
		var ret Reference
		return ret
	}
	return *o.CostCenter
}

// GetCostCenterOk returns a tuple with the CostCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetCostCenterOk() (*Reference, bool) {
	if o == nil || IsNil(o.CostCenter) {
		return nil, false
	}
	return o.CostCenter, true
}

// HasCostCenter returns a boolean if a field has been set.
func (o *ChargeItem) HasCostCenter() bool {
	if o != nil && !IsNil(o.CostCenter) {
		return true
	}

	return false
}

// SetCostCenter gets a reference to the given Reference and assigns it to the CostCenter field.
func (o *ChargeItem) SetCostCenter(v Reference) {
	o.CostCenter = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ChargeItem) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ChargeItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *ChargeItem) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetBodysite returns the Bodysite field value if set, zero value otherwise.
func (o *ChargeItem) GetBodysite() []CodeableConcept {
	if o == nil || IsNil(o.Bodysite) {
		var ret []CodeableConcept
		return ret
	}
	return o.Bodysite
}

// GetBodysiteOk returns a tuple with the Bodysite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetBodysiteOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Bodysite) {
		return nil, false
	}
	return o.Bodysite, true
}

// HasBodysite returns a boolean if a field has been set.
func (o *ChargeItem) HasBodysite() bool {
	if o != nil && !IsNil(o.Bodysite) {
		return true
	}

	return false
}

// SetBodysite gets a reference to the given []CodeableConcept and assigns it to the Bodysite field.
func (o *ChargeItem) SetBodysite(v []CodeableConcept) {
	o.Bodysite = v
}

// GetFactorOverride returns the FactorOverride field value if set, zero value otherwise.
func (o *ChargeItem) GetFactorOverride() float32 {
	if o == nil || IsNil(o.FactorOverride) {
		var ret float32
		return ret
	}
	return *o.FactorOverride
}

// GetFactorOverrideOk returns a tuple with the FactorOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetFactorOverrideOk() (*float32, bool) {
	if o == nil || IsNil(o.FactorOverride) {
		return nil, false
	}
	return o.FactorOverride, true
}

// HasFactorOverride returns a boolean if a field has been set.
func (o *ChargeItem) HasFactorOverride() bool {
	if o != nil && !IsNil(o.FactorOverride) {
		return true
	}

	return false
}

// SetFactorOverride gets a reference to the given float32 and assigns it to the FactorOverride field.
func (o *ChargeItem) SetFactorOverride(v float32) {
	o.FactorOverride = &v
}

// GetPriceOverride returns the PriceOverride field value if set, zero value otherwise.
func (o *ChargeItem) GetPriceOverride() Money {
	if o == nil || IsNil(o.PriceOverride) {
		var ret Money
		return ret
	}
	return *o.PriceOverride
}

// GetPriceOverrideOk returns a tuple with the PriceOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetPriceOverrideOk() (*Money, bool) {
	if o == nil || IsNil(o.PriceOverride) {
		return nil, false
	}
	return o.PriceOverride, true
}

// HasPriceOverride returns a boolean if a field has been set.
func (o *ChargeItem) HasPriceOverride() bool {
	if o != nil && !IsNil(o.PriceOverride) {
		return true
	}

	return false
}

// SetPriceOverride gets a reference to the given Money and assigns it to the PriceOverride field.
func (o *ChargeItem) SetPriceOverride(v Money) {
	o.PriceOverride = &v
}

// GetOverrideReason returns the OverrideReason field value if set, zero value otherwise.
func (o *ChargeItem) GetOverrideReason() string {
	if o == nil || IsNil(o.OverrideReason) {
		var ret string
		return ret
	}
	return *o.OverrideReason
}

// GetOverrideReasonOk returns a tuple with the OverrideReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetOverrideReasonOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideReason) {
		return nil, false
	}
	return o.OverrideReason, true
}

// HasOverrideReason returns a boolean if a field has been set.
func (o *ChargeItem) HasOverrideReason() bool {
	if o != nil && !IsNil(o.OverrideReason) {
		return true
	}

	return false
}

// SetOverrideReason gets a reference to the given string and assigns it to the OverrideReason field.
func (o *ChargeItem) SetOverrideReason(v string) {
	o.OverrideReason = &v
}

// GetEnterer returns the Enterer field value if set, zero value otherwise.
func (o *ChargeItem) GetEnterer() Reference {
	if o == nil || IsNil(o.Enterer) {
		var ret Reference
		return ret
	}
	return *o.Enterer
}

// GetEntererOk returns a tuple with the Enterer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetEntererOk() (*Reference, bool) {
	if o == nil || IsNil(o.Enterer) {
		return nil, false
	}
	return o.Enterer, true
}

// HasEnterer returns a boolean if a field has been set.
func (o *ChargeItem) HasEnterer() bool {
	if o != nil && !IsNil(o.Enterer) {
		return true
	}

	return false
}

// SetEnterer gets a reference to the given Reference and assigns it to the Enterer field.
func (o *ChargeItem) SetEnterer(v Reference) {
	o.Enterer = &v
}

// GetEnteredDate returns the EnteredDate field value if set, zero value otherwise.
func (o *ChargeItem) GetEnteredDate() string {
	if o == nil || IsNil(o.EnteredDate) {
		var ret string
		return ret
	}
	return *o.EnteredDate
}

// GetEnteredDateOk returns a tuple with the EnteredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetEnteredDateOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredDate) {
		return nil, false
	}
	return o.EnteredDate, true
}

// HasEnteredDate returns a boolean if a field has been set.
func (o *ChargeItem) HasEnteredDate() bool {
	if o != nil && !IsNil(o.EnteredDate) {
		return true
	}

	return false
}

// SetEnteredDate gets a reference to the given string and assigns it to the EnteredDate field.
func (o *ChargeItem) SetEnteredDate(v string) {
	o.EnteredDate = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ChargeItem) GetReason() []CodeableConcept {
	if o == nil || IsNil(o.Reason) {
		var ret []CodeableConcept
		return ret
	}
	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ChargeItem) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given []CodeableConcept and assigns it to the Reason field.
func (o *ChargeItem) SetReason(v []CodeableConcept) {
	o.Reason = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ChargeItem) GetService() []Reference {
	if o == nil || IsNil(o.Service) {
		var ret []Reference
		return ret
	}
	return o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetServiceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ChargeItem) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given []Reference and assigns it to the Service field.
func (o *ChargeItem) SetService(v []Reference) {
	o.Service = v
}

// GetProductReference returns the ProductReference field value if set, zero value otherwise.
func (o *ChargeItem) GetProductReference() Reference {
	if o == nil || IsNil(o.ProductReference) {
		var ret Reference
		return ret
	}
	return *o.ProductReference
}

// GetProductReferenceOk returns a tuple with the ProductReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetProductReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProductReference) {
		return nil, false
	}
	return o.ProductReference, true
}

// HasProductReference returns a boolean if a field has been set.
func (o *ChargeItem) HasProductReference() bool {
	if o != nil && !IsNil(o.ProductReference) {
		return true
	}

	return false
}

// SetProductReference gets a reference to the given Reference and assigns it to the ProductReference field.
func (o *ChargeItem) SetProductReference(v Reference) {
	o.ProductReference = &v
}

// GetProductCodeableConcept returns the ProductCodeableConcept field value if set, zero value otherwise.
func (o *ChargeItem) GetProductCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ProductCodeableConcept
}

// GetProductCodeableConceptOk returns a tuple with the ProductCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetProductCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ProductCodeableConcept) {
		return nil, false
	}
	return o.ProductCodeableConcept, true
}

// HasProductCodeableConcept returns a boolean if a field has been set.
func (o *ChargeItem) HasProductCodeableConcept() bool {
	if o != nil && !IsNil(o.ProductCodeableConcept) {
		return true
	}

	return false
}

// SetProductCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ProductCodeableConcept field.
func (o *ChargeItem) SetProductCodeableConcept(v CodeableConcept) {
	o.ProductCodeableConcept = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ChargeItem) GetAccount() []Reference {
	if o == nil || IsNil(o.Account) {
		var ret []Reference
		return ret
	}
	return o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetAccountOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ChargeItem) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given []Reference and assigns it to the Account field.
func (o *ChargeItem) SetAccount(v []Reference) {
	o.Account = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ChargeItem) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ChargeItem) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *ChargeItem) SetNote(v []Annotation) {
	o.Note = v
}

// GetSupportingInformation returns the SupportingInformation field value if set, zero value otherwise.
func (o *ChargeItem) GetSupportingInformation() []Reference {
	if o == nil || IsNil(o.SupportingInformation) {
		var ret []Reference
		return ret
	}
	return o.SupportingInformation
}

// GetSupportingInformationOk returns a tuple with the SupportingInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItem) GetSupportingInformationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInformation) {
		return nil, false
	}
	return o.SupportingInformation, true
}

// HasSupportingInformation returns a boolean if a field has been set.
func (o *ChargeItem) HasSupportingInformation() bool {
	if o != nil && !IsNil(o.SupportingInformation) {
		return true
	}

	return false
}

// SetSupportingInformation gets a reference to the given []Reference and assigns it to the SupportingInformation field.
func (o *ChargeItem) SetSupportingInformation(v []Reference) {
	o.SupportingInformation = v
}

func (o ChargeItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.DefinitionUri) {
		toSerialize["definitionUri"] = o.DefinitionUri
	}
	if !IsNil(o.DefinitionCanonical) {
		toSerialize["definitionCanonical"] = o.DefinitionCanonical
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	toSerialize["code"] = o.Code
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrencePeriod) {
		toSerialize["occurrencePeriod"] = o.OccurrencePeriod
	}
	if !IsNil(o.OccurrenceTiming) {
		toSerialize["occurrenceTiming"] = o.OccurrenceTiming
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.PerformingOrganization) {
		toSerialize["performingOrganization"] = o.PerformingOrganization
	}
	if !IsNil(o.RequestingOrganization) {
		toSerialize["requestingOrganization"] = o.RequestingOrganization
	}
	if !IsNil(o.CostCenter) {
		toSerialize["costCenter"] = o.CostCenter
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Bodysite) {
		toSerialize["bodysite"] = o.Bodysite
	}
	if !IsNil(o.FactorOverride) {
		toSerialize["factorOverride"] = o.FactorOverride
	}
	if !IsNil(o.PriceOverride) {
		toSerialize["priceOverride"] = o.PriceOverride
	}
	if !IsNil(o.OverrideReason) {
		toSerialize["overrideReason"] = o.OverrideReason
	}
	if !IsNil(o.Enterer) {
		toSerialize["enterer"] = o.Enterer
	}
	if !IsNil(o.EnteredDate) {
		toSerialize["enteredDate"] = o.EnteredDate
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.ProductReference) {
		toSerialize["productReference"] = o.ProductReference
	}
	if !IsNil(o.ProductCodeableConcept) {
		toSerialize["productCodeableConcept"] = o.ProductCodeableConcept
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.SupportingInformation) {
		toSerialize["supportingInformation"] = o.SupportingInformation
	}
	return toSerialize, nil
}

func (o *ChargeItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"code",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeItem := _ChargeItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeItem)

	if err != nil {
		return err
	}

	*o = ChargeItem(varChargeItem)

	return err
}

type NullableChargeItem struct {
	value *ChargeItem
	isSet bool
}

func (v NullableChargeItem) Get() *ChargeItem {
	return v.value
}

func (v *NullableChargeItem) Set(val *ChargeItem) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeItem) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeItem(val *ChargeItem) *NullableChargeItem {
	return &NullableChargeItem{value: val, isSet: true}
}

func (v NullableChargeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


