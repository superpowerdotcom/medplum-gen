/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the BundleEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BundleEntry{}

// BundleEntry A container for a collection of resources.
type BundleEntry struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A series of links that provide context to this entry.
	Link []BundleLink `json:"link,omitempty"`
	// String of characters used to identify a name or a resource
	FullUrl *string `json:"fullUrl,omitempty"`
	// The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.
	Resource *ResourceList `json:"resource,omitempty"`
	// Information about the search process that lead to the creation of this entry.
	Search *BundleSearch `json:"search,omitempty"`
	// Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
	Request *BundleRequest `json:"request,omitempty"`
	// Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
	Response *BundleResponse `json:"response,omitempty"`
}

// NewBundleEntry instantiates a new BundleEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundleEntry() *BundleEntry {
	this := BundleEntry{}
	return &this
}

// NewBundleEntryWithDefaults instantiates a new BundleEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleEntryWithDefaults() *BundleEntry {
	this := BundleEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BundleEntry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BundleEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BundleEntry) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *BundleEntry) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *BundleEntry) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *BundleEntry) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *BundleEntry) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *BundleEntry) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *BundleEntry) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *BundleEntry) GetLink() []BundleLink {
	if o == nil || IsNil(o.Link) {
		var ret []BundleLink
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetLinkOk() ([]BundleLink, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *BundleEntry) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given []BundleLink and assigns it to the Link field.
func (o *BundleEntry) SetLink(v []BundleLink) {
	o.Link = v
}

// GetFullUrl returns the FullUrl field value if set, zero value otherwise.
func (o *BundleEntry) GetFullUrl() string {
	if o == nil || IsNil(o.FullUrl) {
		var ret string
		return ret
	}
	return *o.FullUrl
}

// GetFullUrlOk returns a tuple with the FullUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetFullUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FullUrl) {
		return nil, false
	}
	return o.FullUrl, true
}

// HasFullUrl returns a boolean if a field has been set.
func (o *BundleEntry) HasFullUrl() bool {
	if o != nil && !IsNil(o.FullUrl) {
		return true
	}

	return false
}

// SetFullUrl gets a reference to the given string and assigns it to the FullUrl field.
func (o *BundleEntry) SetFullUrl(v string) {
	o.FullUrl = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *BundleEntry) GetResource() ResourceList {
	if o == nil || IsNil(o.Resource) {
		var ret ResourceList
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetResourceOk() (*ResourceList, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *BundleEntry) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given ResourceList and assigns it to the Resource field.
func (o *BundleEntry) SetResource(v ResourceList) {
	o.Resource = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *BundleEntry) GetSearch() BundleSearch {
	if o == nil || IsNil(o.Search) {
		var ret BundleSearch
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetSearchOk() (*BundleSearch, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *BundleEntry) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given BundleSearch and assigns it to the Search field.
func (o *BundleEntry) SetSearch(v BundleSearch) {
	o.Search = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *BundleEntry) GetRequest() BundleRequest {
	if o == nil || IsNil(o.Request) {
		var ret BundleRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetRequestOk() (*BundleRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *BundleEntry) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given BundleRequest and assigns it to the Request field.
func (o *BundleEntry) SetRequest(v BundleRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *BundleEntry) GetResponse() BundleResponse {
	if o == nil || IsNil(o.Response) {
		var ret BundleResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BundleEntry) GetResponseOk() (*BundleResponse, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *BundleEntry) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given BundleResponse and assigns it to the Response field.
func (o *BundleEntry) SetResponse(v BundleResponse) {
	o.Response = &v
}

func (o BundleEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BundleEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.FullUrl) {
		toSerialize["fullUrl"] = o.FullUrl
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	return toSerialize, nil
}

type NullableBundleEntry struct {
	value *BundleEntry
	isSet bool
}

func (v NullableBundleEntry) Get() *BundleEntry {
	return v.value
}

func (v *NullableBundleEntry) Set(val *BundleEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleEntry(val *BundleEntry) *NullableBundleEntry {
	return &NullableBundleEntry{value: val, isSet: true}
}

func (v NullableBundleEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


