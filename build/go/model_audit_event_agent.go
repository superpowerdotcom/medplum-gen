/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the AuditEventAgent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEventAgent{}

// AuditEventAgent A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEventAgent struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Specification of the participation type the user plays when performing the event.
	Type *CodeableConcept `json:"type,omitempty"`
	// The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
	Role []CodeableConcept `json:"role,omitempty"`
	// Reference to who this agent is that was involved in the event.
	Who *Reference `json:"who,omitempty"`
	// A sequence of Unicode characters
	AltId *string `json:"altId,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// Value of \"true\" or \"false\"
	Requestor *bool `json:"requestor,omitempty"`
	// Where the event occurred.
	Location *Reference `json:"location,omitempty"`
	// The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
	Policy []string `json:"policy,omitempty"`
	// Type of media involved. Used when the event is about exporting/importing onto media.
	Media *Coding `json:"media,omitempty"`
	// Logical network location for application activity, if the activity has a network location.
	Network *AuditEventNetwork `json:"network,omitempty"`
	// The reason (purpose of use), specific to this agent, that was used during the event being recorded.
	PurposeOfUse []CodeableConcept `json:"purposeOfUse,omitempty"`
}

// NewAuditEventAgent instantiates a new AuditEventAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEventAgent() *AuditEventAgent {
	this := AuditEventAgent{}
	return &this
}

// NewAuditEventAgentWithDefaults instantiates a new AuditEventAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventAgentWithDefaults() *AuditEventAgent {
	this := AuditEventAgent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditEventAgent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditEventAgent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditEventAgent) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AuditEventAgent) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AuditEventAgent) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *AuditEventAgent) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *AuditEventAgent) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *AuditEventAgent) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *AuditEventAgent) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuditEventAgent) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuditEventAgent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *AuditEventAgent) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AuditEventAgent) GetRole() []CodeableConcept {
	if o == nil || IsNil(o.Role) {
		var ret []CodeableConcept
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetRoleOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AuditEventAgent) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given []CodeableConcept and assigns it to the Role field.
func (o *AuditEventAgent) SetRole(v []CodeableConcept) {
	o.Role = v
}

// GetWho returns the Who field value if set, zero value otherwise.
func (o *AuditEventAgent) GetWho() Reference {
	if o == nil || IsNil(o.Who) {
		var ret Reference
		return ret
	}
	return *o.Who
}

// GetWhoOk returns a tuple with the Who field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetWhoOk() (*Reference, bool) {
	if o == nil || IsNil(o.Who) {
		return nil, false
	}
	return o.Who, true
}

// HasWho returns a boolean if a field has been set.
func (o *AuditEventAgent) HasWho() bool {
	if o != nil && !IsNil(o.Who) {
		return true
	}

	return false
}

// SetWho gets a reference to the given Reference and assigns it to the Who field.
func (o *AuditEventAgent) SetWho(v Reference) {
	o.Who = &v
}

// GetAltId returns the AltId field value if set, zero value otherwise.
func (o *AuditEventAgent) GetAltId() string {
	if o == nil || IsNil(o.AltId) {
		var ret string
		return ret
	}
	return *o.AltId
}

// GetAltIdOk returns a tuple with the AltId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetAltIdOk() (*string, bool) {
	if o == nil || IsNil(o.AltId) {
		return nil, false
	}
	return o.AltId, true
}

// HasAltId returns a boolean if a field has been set.
func (o *AuditEventAgent) HasAltId() bool {
	if o != nil && !IsNil(o.AltId) {
		return true
	}

	return false
}

// SetAltId gets a reference to the given string and assigns it to the AltId field.
func (o *AuditEventAgent) SetAltId(v string) {
	o.AltId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuditEventAgent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuditEventAgent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuditEventAgent) SetName(v string) {
	o.Name = &v
}

// GetRequestor returns the Requestor field value if set, zero value otherwise.
func (o *AuditEventAgent) GetRequestor() bool {
	if o == nil || IsNil(o.Requestor) {
		var ret bool
		return ret
	}
	return *o.Requestor
}

// GetRequestorOk returns a tuple with the Requestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetRequestorOk() (*bool, bool) {
	if o == nil || IsNil(o.Requestor) {
		return nil, false
	}
	return o.Requestor, true
}

// HasRequestor returns a boolean if a field has been set.
func (o *AuditEventAgent) HasRequestor() bool {
	if o != nil && !IsNil(o.Requestor) {
		return true
	}

	return false
}

// SetRequestor gets a reference to the given bool and assigns it to the Requestor field.
func (o *AuditEventAgent) SetRequestor(v bool) {
	o.Requestor = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AuditEventAgent) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AuditEventAgent) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *AuditEventAgent) SetLocation(v Reference) {
	o.Location = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *AuditEventAgent) GetPolicy() []string {
	if o == nil || IsNil(o.Policy) {
		var ret []string
		return ret
	}
	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetPolicyOk() ([]string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *AuditEventAgent) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given []string and assigns it to the Policy field.
func (o *AuditEventAgent) SetPolicy(v []string) {
	o.Policy = v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *AuditEventAgent) GetMedia() Coding {
	if o == nil || IsNil(o.Media) {
		var ret Coding
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetMediaOk() (*Coding, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *AuditEventAgent) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given Coding and assigns it to the Media field.
func (o *AuditEventAgent) SetMedia(v Coding) {
	o.Media = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *AuditEventAgent) GetNetwork() AuditEventNetwork {
	if o == nil || IsNil(o.Network) {
		var ret AuditEventNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetNetworkOk() (*AuditEventNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *AuditEventAgent) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given AuditEventNetwork and assigns it to the Network field.
func (o *AuditEventAgent) SetNetwork(v AuditEventNetwork) {
	o.Network = &v
}

// GetPurposeOfUse returns the PurposeOfUse field value if set, zero value otherwise.
func (o *AuditEventAgent) GetPurposeOfUse() []CodeableConcept {
	if o == nil || IsNil(o.PurposeOfUse) {
		var ret []CodeableConcept
		return ret
	}
	return o.PurposeOfUse
}

// GetPurposeOfUseOk returns a tuple with the PurposeOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAgent) GetPurposeOfUseOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.PurposeOfUse) {
		return nil, false
	}
	return o.PurposeOfUse, true
}

// HasPurposeOfUse returns a boolean if a field has been set.
func (o *AuditEventAgent) HasPurposeOfUse() bool {
	if o != nil && !IsNil(o.PurposeOfUse) {
		return true
	}

	return false
}

// SetPurposeOfUse gets a reference to the given []CodeableConcept and assigns it to the PurposeOfUse field.
func (o *AuditEventAgent) SetPurposeOfUse(v []CodeableConcept) {
	o.PurposeOfUse = v
}

func (o AuditEventAgent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEventAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Who) {
		toSerialize["who"] = o.Who
	}
	if !IsNil(o.AltId) {
		toSerialize["altId"] = o.AltId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Requestor) {
		toSerialize["requestor"] = o.Requestor
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.PurposeOfUse) {
		toSerialize["purposeOfUse"] = o.PurposeOfUse
	}
	return toSerialize, nil
}

type NullableAuditEventAgent struct {
	value *AuditEventAgent
	isSet bool
}

func (v NullableAuditEventAgent) Get() *AuditEventAgent {
	return v.value
}

func (v *NullableAuditEventAgent) Set(val *AuditEventAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventAgent(val *AuditEventAgent) *NullableAuditEventAgent {
	return &NullableAuditEventAgent{value: val, isSet: true}
}

func (v NullableAuditEventAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


