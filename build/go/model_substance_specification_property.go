/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSpecificationProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSpecificationProperty{}

// SubstanceSpecificationProperty The detailed description of a substance, typically at a level beyond what is used for prescribing.
type SubstanceSpecificationProperty struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A category for this property, e.g. Physical, Chemical, Enzymatic.
	Category *CodeableConcept `json:"category,omitempty"`
	// Property type e.g. viscosity, pH, isoelectric point.
	Code *CodeableConcept `json:"code,omitempty"`
	// A sequence of Unicode characters
	Parameters *string `json:"parameters,omitempty"`
	// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
	DefiningSubstanceReference *Reference `json:"definingSubstanceReference,omitempty"`
	// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
	DefiningSubstanceCodeableConcept *CodeableConcept `json:"definingSubstanceCodeableConcept,omitempty"`
	// Quantitative value for this property.
	AmountQuantity *Quantity `json:"amountQuantity,omitempty"`
	// Quantitative value for this property.
	AmountString *string `json:"amountString,omitempty"`
}

// NewSubstanceSpecificationProperty instantiates a new SubstanceSpecificationProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSpecificationProperty() *SubstanceSpecificationProperty {
	this := SubstanceSpecificationProperty{}
	return &this
}

// NewSubstanceSpecificationPropertyWithDefaults instantiates a new SubstanceSpecificationProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSpecificationPropertyWithDefaults() *SubstanceSpecificationProperty {
	this := SubstanceSpecificationProperty{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSpecificationProperty) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSpecificationProperty) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSpecificationProperty) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *SubstanceSpecificationProperty) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *SubstanceSpecificationProperty) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetParameters() string {
	if o == nil || IsNil(o.Parameters) {
		var ret string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetParametersOk() (*string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given string and assigns it to the Parameters field.
func (o *SubstanceSpecificationProperty) SetParameters(v string) {
	o.Parameters = &v
}

// GetDefiningSubstanceReference returns the DefiningSubstanceReference field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetDefiningSubstanceReference() Reference {
	if o == nil || IsNil(o.DefiningSubstanceReference) {
		var ret Reference
		return ret
	}
	return *o.DefiningSubstanceReference
}

// GetDefiningSubstanceReferenceOk returns a tuple with the DefiningSubstanceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetDefiningSubstanceReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.DefiningSubstanceReference) {
		return nil, false
	}
	return o.DefiningSubstanceReference, true
}

// HasDefiningSubstanceReference returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasDefiningSubstanceReference() bool {
	if o != nil && !IsNil(o.DefiningSubstanceReference) {
		return true
	}

	return false
}

// SetDefiningSubstanceReference gets a reference to the given Reference and assigns it to the DefiningSubstanceReference field.
func (o *SubstanceSpecificationProperty) SetDefiningSubstanceReference(v Reference) {
	o.DefiningSubstanceReference = &v
}

// GetDefiningSubstanceCodeableConcept returns the DefiningSubstanceCodeableConcept field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetDefiningSubstanceCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DefiningSubstanceCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DefiningSubstanceCodeableConcept
}

// GetDefiningSubstanceCodeableConceptOk returns a tuple with the DefiningSubstanceCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetDefiningSubstanceCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DefiningSubstanceCodeableConcept) {
		return nil, false
	}
	return o.DefiningSubstanceCodeableConcept, true
}

// HasDefiningSubstanceCodeableConcept returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasDefiningSubstanceCodeableConcept() bool {
	if o != nil && !IsNil(o.DefiningSubstanceCodeableConcept) {
		return true
	}

	return false
}

// SetDefiningSubstanceCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DefiningSubstanceCodeableConcept field.
func (o *SubstanceSpecificationProperty) SetDefiningSubstanceCodeableConcept(v CodeableConcept) {
	o.DefiningSubstanceCodeableConcept = &v
}

// GetAmountQuantity returns the AmountQuantity field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetAmountQuantity() Quantity {
	if o == nil || IsNil(o.AmountQuantity) {
		var ret Quantity
		return ret
	}
	return *o.AmountQuantity
}

// GetAmountQuantityOk returns a tuple with the AmountQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetAmountQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.AmountQuantity) {
		return nil, false
	}
	return o.AmountQuantity, true
}

// HasAmountQuantity returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasAmountQuantity() bool {
	if o != nil && !IsNil(o.AmountQuantity) {
		return true
	}

	return false
}

// SetAmountQuantity gets a reference to the given Quantity and assigns it to the AmountQuantity field.
func (o *SubstanceSpecificationProperty) SetAmountQuantity(v Quantity) {
	o.AmountQuantity = &v
}

// GetAmountString returns the AmountString field value if set, zero value otherwise.
func (o *SubstanceSpecificationProperty) GetAmountString() string {
	if o == nil || IsNil(o.AmountString) {
		var ret string
		return ret
	}
	return *o.AmountString
}

// GetAmountStringOk returns a tuple with the AmountString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSpecificationProperty) GetAmountStringOk() (*string, bool) {
	if o == nil || IsNil(o.AmountString) {
		return nil, false
	}
	return o.AmountString, true
}

// HasAmountString returns a boolean if a field has been set.
func (o *SubstanceSpecificationProperty) HasAmountString() bool {
	if o != nil && !IsNil(o.AmountString) {
		return true
	}

	return false
}

// SetAmountString gets a reference to the given string and assigns it to the AmountString field.
func (o *SubstanceSpecificationProperty) SetAmountString(v string) {
	o.AmountString = &v
}

func (o SubstanceSpecificationProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSpecificationProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.DefiningSubstanceReference) {
		toSerialize["definingSubstanceReference"] = o.DefiningSubstanceReference
	}
	if !IsNil(o.DefiningSubstanceCodeableConcept) {
		toSerialize["definingSubstanceCodeableConcept"] = o.DefiningSubstanceCodeableConcept
	}
	if !IsNil(o.AmountQuantity) {
		toSerialize["amountQuantity"] = o.AmountQuantity
	}
	if !IsNil(o.AmountString) {
		toSerialize["amountString"] = o.AmountString
	}
	return toSerialize, nil
}

type NullableSubstanceSpecificationProperty struct {
	value *SubstanceSpecificationProperty
	isSet bool
}

func (v NullableSubstanceSpecificationProperty) Get() *SubstanceSpecificationProperty {
	return v.value
}

func (v *NullableSubstanceSpecificationProperty) Set(val *SubstanceSpecificationProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSpecificationProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSpecificationProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSpecificationProperty(val *SubstanceSpecificationProperty) *NullableSubstanceSpecificationProperty {
	return &NullableSubstanceSpecificationProperty{value: val, isSet: true}
}

func (v NullableSubstanceSpecificationProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSpecificationProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


