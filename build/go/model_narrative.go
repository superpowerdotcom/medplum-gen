/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Narrative type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Narrative{}

// Narrative A human-readable summary of the resource conveying the essential clinical and business information for the resource.
type Narrative struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
	Status *string `json:"status,omitempty"`
	Div interface{} `json:"div"`
}

type _Narrative Narrative

// NewNarrative instantiates a new Narrative object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNarrative(div interface{}) *Narrative {
	this := Narrative{}
	this.Div = div
	return &this
}

// NewNarrativeWithDefaults instantiates a new Narrative object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNarrativeWithDefaults() *Narrative {
	this := Narrative{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Narrative) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Narrative) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Narrative) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Narrative) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Narrative) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Narrative) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Narrative) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Narrative) SetExtension(v []Extension) {
	o.Extension = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Narrative) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Narrative) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Narrative) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Narrative) SetStatus(v string) {
	o.Status = &v
}

// GetDiv returns the Div field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Narrative) GetDiv() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Div
}

// GetDivOk returns a tuple with the Div field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Narrative) GetDivOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Div) {
		return nil, false
	}
	return &o.Div, true
}

// SetDiv sets field value
func (o *Narrative) SetDiv(v interface{}) {
	o.Div = v
}

func (o Narrative) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Narrative) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Div != nil {
		toSerialize["div"] = o.Div
	}
	return toSerialize, nil
}

func (o *Narrative) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"div",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNarrative := _Narrative{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNarrative)

	if err != nil {
		return err
	}

	*o = Narrative(varNarrative)

	return err
}

type NullableNarrative struct {
	value *Narrative
	isSet bool
}

func (v NullableNarrative) Get() *Narrative {
	return v.value
}

func (v *NullableNarrative) Set(val *Narrative) {
	v.value = val
	v.isSet = true
}

func (v NullableNarrative) IsSet() bool {
	return v.isSet
}

func (v *NullableNarrative) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNarrative(val *Narrative) *NullableNarrative {
	return &NullableNarrative{value: val, isSet: true}
}

func (v NullableNarrative) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNarrative) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


