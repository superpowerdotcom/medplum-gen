/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductPackagedBatchIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductPackagedBatchIdentifier{}

// MedicinalProductPackagedBatchIdentifier A medicinal product in a container or package.
type MedicinalProductPackagedBatchIdentifier struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A number appearing on the outer packaging of a specific batch.
	OuterPackaging Identifier `json:"outerPackaging"`
	// A number appearing on the immediate packaging (and not the outer packaging).
	ImmediatePackaging *Identifier `json:"immediatePackaging,omitempty"`
}

type _MedicinalProductPackagedBatchIdentifier MedicinalProductPackagedBatchIdentifier

// NewMedicinalProductPackagedBatchIdentifier instantiates a new MedicinalProductPackagedBatchIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductPackagedBatchIdentifier(outerPackaging Identifier) *MedicinalProductPackagedBatchIdentifier {
	this := MedicinalProductPackagedBatchIdentifier{}
	this.OuterPackaging = outerPackaging
	return &this
}

// NewMedicinalProductPackagedBatchIdentifierWithDefaults instantiates a new MedicinalProductPackagedBatchIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductPackagedBatchIdentifierWithDefaults() *MedicinalProductPackagedBatchIdentifier {
	this := MedicinalProductPackagedBatchIdentifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductPackagedBatchIdentifier) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedBatchIdentifier) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductPackagedBatchIdentifier) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductPackagedBatchIdentifier) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductPackagedBatchIdentifier) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedBatchIdentifier) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductPackagedBatchIdentifier) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductPackagedBatchIdentifier) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductPackagedBatchIdentifier) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedBatchIdentifier) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductPackagedBatchIdentifier) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductPackagedBatchIdentifier) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetOuterPackaging returns the OuterPackaging field value
func (o *MedicinalProductPackagedBatchIdentifier) GetOuterPackaging() Identifier {
	if o == nil {
		var ret Identifier
		return ret
	}

	return o.OuterPackaging
}

// GetOuterPackagingOk returns a tuple with the OuterPackaging field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedBatchIdentifier) GetOuterPackagingOk() (*Identifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OuterPackaging, true
}

// SetOuterPackaging sets field value
func (o *MedicinalProductPackagedBatchIdentifier) SetOuterPackaging(v Identifier) {
	o.OuterPackaging = v
}

// GetImmediatePackaging returns the ImmediatePackaging field value if set, zero value otherwise.
func (o *MedicinalProductPackagedBatchIdentifier) GetImmediatePackaging() Identifier {
	if o == nil || IsNil(o.ImmediatePackaging) {
		var ret Identifier
		return ret
	}
	return *o.ImmediatePackaging
}

// GetImmediatePackagingOk returns a tuple with the ImmediatePackaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedBatchIdentifier) GetImmediatePackagingOk() (*Identifier, bool) {
	if o == nil || IsNil(o.ImmediatePackaging) {
		return nil, false
	}
	return o.ImmediatePackaging, true
}

// HasImmediatePackaging returns a boolean if a field has been set.
func (o *MedicinalProductPackagedBatchIdentifier) HasImmediatePackaging() bool {
	if o != nil && !IsNil(o.ImmediatePackaging) {
		return true
	}

	return false
}

// SetImmediatePackaging gets a reference to the given Identifier and assigns it to the ImmediatePackaging field.
func (o *MedicinalProductPackagedBatchIdentifier) SetImmediatePackaging(v Identifier) {
	o.ImmediatePackaging = &v
}

func (o MedicinalProductPackagedBatchIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductPackagedBatchIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["outerPackaging"] = o.OuterPackaging
	if !IsNil(o.ImmediatePackaging) {
		toSerialize["immediatePackaging"] = o.ImmediatePackaging
	}
	return toSerialize, nil
}

func (o *MedicinalProductPackagedBatchIdentifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"outerPackaging",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductPackagedBatchIdentifier := _MedicinalProductPackagedBatchIdentifier{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductPackagedBatchIdentifier)

	if err != nil {
		return err
	}

	*o = MedicinalProductPackagedBatchIdentifier(varMedicinalProductPackagedBatchIdentifier)

	return err
}

type NullableMedicinalProductPackagedBatchIdentifier struct {
	value *MedicinalProductPackagedBatchIdentifier
	isSet bool
}

func (v NullableMedicinalProductPackagedBatchIdentifier) Get() *MedicinalProductPackagedBatchIdentifier {
	return v.value
}

func (v *NullableMedicinalProductPackagedBatchIdentifier) Set(val *MedicinalProductPackagedBatchIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductPackagedBatchIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductPackagedBatchIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductPackagedBatchIdentifier(val *MedicinalProductPackagedBatchIdentifier) *NullableMedicinalProductPackagedBatchIdentifier {
	return &NullableMedicinalProductPackagedBatchIdentifier{value: val, isSet: true}
}

func (v NullableMedicinalProductPackagedBatchIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductPackagedBatchIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


