/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceRequest{}

// DeviceRequest Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
type DeviceRequest struct {
	// This is a DeviceRequest resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers assigned to this order by the orderer or by the receiver.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// Plan/proposal/order fulfilled by this request.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// The request takes the place of the referenced completed or terminated request(s).
	PriorRequest []Reference `json:"priorRequest,omitempty"`
	// Composite request this is part of.
	GroupIdentifier *Identifier `json:"groupIdentifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Intent *string `json:"intent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// The details of the device to be used.
	CodeReference *Reference `json:"codeReference,omitempty"`
	// The details of the device to be used.
	CodeCodeableConcept *CodeableConcept `json:"codeCodeableConcept,omitempty"`
	// Specific parameters for the ordered item.  For example, the prism value for lenses.
	Parameter []DeviceRequestParameter `json:"parameter,omitempty"`
	// The patient who will use the device.
	Subject Reference `json:"subject"`
	// An encounter that provides additional context in which this request is made.
	Encounter *Reference `json:"encounter,omitempty"`
	// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".
	OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`
	// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".
	OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	AuthoredOn *string `json:"authoredOn,omitempty"`
	// The individual who initiated the request and has responsibility for its activation.
	Requester *Reference `json:"requester,omitempty"`
	// Desired type of performer for doing the diagnostic testing.
	PerformerType *CodeableConcept `json:"performerType,omitempty"`
	// The desired performer for doing the diagnostic testing.
	Performer *Reference `json:"performer,omitempty"`
	// Reason or justification for the use of this device.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Reason or justification for the use of this device.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	Insurance []Reference `json:"insurance,omitempty"`
	// Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
	SupportingInfo []Reference `json:"supportingInfo,omitempty"`
	// Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
	Note []Annotation `json:"note,omitempty"`
	// Key events in the history of the request.
	RelevantHistory []Reference `json:"relevantHistory,omitempty"`
}

type _DeviceRequest DeviceRequest

// NewDeviceRequest instantiates a new DeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRequest(resourceType string, subject Reference) *DeviceRequest {
	this := DeviceRequest{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewDeviceRequestWithDefaults instantiates a new DeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRequestWithDefaults() *DeviceRequest {
	this := DeviceRequest{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *DeviceRequest) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DeviceRequest) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceRequest) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DeviceRequest) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DeviceRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DeviceRequest) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *DeviceRequest) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *DeviceRequest) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *DeviceRequest) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DeviceRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DeviceRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DeviceRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DeviceRequest) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DeviceRequest) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *DeviceRequest) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *DeviceRequest) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *DeviceRequest) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *DeviceRequest) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceRequest) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceRequest) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceRequest) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceRequest) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceRequest) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceRequest) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DeviceRequest) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DeviceRequest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *DeviceRequest) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *DeviceRequest) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *DeviceRequest) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *DeviceRequest) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *DeviceRequest) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *DeviceRequest) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *DeviceRequest) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *DeviceRequest) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *DeviceRequest) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *DeviceRequest) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetPriorRequest returns the PriorRequest field value if set, zero value otherwise.
func (o *DeviceRequest) GetPriorRequest() []Reference {
	if o == nil || IsNil(o.PriorRequest) {
		var ret []Reference
		return ret
	}
	return o.PriorRequest
}

// GetPriorRequestOk returns a tuple with the PriorRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetPriorRequestOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PriorRequest) {
		return nil, false
	}
	return o.PriorRequest, true
}

// HasPriorRequest returns a boolean if a field has been set.
func (o *DeviceRequest) HasPriorRequest() bool {
	if o != nil && !IsNil(o.PriorRequest) {
		return true
	}

	return false
}

// SetPriorRequest gets a reference to the given []Reference and assigns it to the PriorRequest field.
func (o *DeviceRequest) SetPriorRequest(v []Reference) {
	o.PriorRequest = v
}

// GetGroupIdentifier returns the GroupIdentifier field value if set, zero value otherwise.
func (o *DeviceRequest) GetGroupIdentifier() Identifier {
	if o == nil || IsNil(o.GroupIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetGroupIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.GroupIdentifier) {
		return nil, false
	}
	return o.GroupIdentifier, true
}

// HasGroupIdentifier returns a boolean if a field has been set.
func (o *DeviceRequest) HasGroupIdentifier() bool {
	if o != nil && !IsNil(o.GroupIdentifier) {
		return true
	}

	return false
}

// SetGroupIdentifier gets a reference to the given Identifier and assigns it to the GroupIdentifier field.
func (o *DeviceRequest) SetGroupIdentifier(v Identifier) {
	o.GroupIdentifier = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceRequest) SetStatus(v string) {
	o.Status = &v
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *DeviceRequest) GetIntent() string {
	if o == nil || IsNil(o.Intent) {
		var ret string
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetIntentOk() (*string, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *DeviceRequest) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given string and assigns it to the Intent field.
func (o *DeviceRequest) SetIntent(v string) {
	o.Intent = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *DeviceRequest) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *DeviceRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *DeviceRequest) SetPriority(v string) {
	o.Priority = &v
}

// GetCodeReference returns the CodeReference field value if set, zero value otherwise.
func (o *DeviceRequest) GetCodeReference() Reference {
	if o == nil || IsNil(o.CodeReference) {
		var ret Reference
		return ret
	}
	return *o.CodeReference
}

// GetCodeReferenceOk returns a tuple with the CodeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetCodeReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.CodeReference) {
		return nil, false
	}
	return o.CodeReference, true
}

// HasCodeReference returns a boolean if a field has been set.
func (o *DeviceRequest) HasCodeReference() bool {
	if o != nil && !IsNil(o.CodeReference) {
		return true
	}

	return false
}

// SetCodeReference gets a reference to the given Reference and assigns it to the CodeReference field.
func (o *DeviceRequest) SetCodeReference(v Reference) {
	o.CodeReference = &v
}

// GetCodeCodeableConcept returns the CodeCodeableConcept field value if set, zero value otherwise.
func (o *DeviceRequest) GetCodeCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.CodeCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.CodeCodeableConcept
}

// GetCodeCodeableConceptOk returns a tuple with the CodeCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetCodeCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CodeCodeableConcept) {
		return nil, false
	}
	return o.CodeCodeableConcept, true
}

// HasCodeCodeableConcept returns a boolean if a field has been set.
func (o *DeviceRequest) HasCodeCodeableConcept() bool {
	if o != nil && !IsNil(o.CodeCodeableConcept) {
		return true
	}

	return false
}

// SetCodeCodeableConcept gets a reference to the given CodeableConcept and assigns it to the CodeCodeableConcept field.
func (o *DeviceRequest) SetCodeCodeableConcept(v CodeableConcept) {
	o.CodeCodeableConcept = &v
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *DeviceRequest) GetParameter() []DeviceRequestParameter {
	if o == nil || IsNil(o.Parameter) {
		var ret []DeviceRequestParameter
		return ret
	}
	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetParameterOk() ([]DeviceRequestParameter, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *DeviceRequest) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given []DeviceRequestParameter and assigns it to the Parameter field.
func (o *DeviceRequest) SetParameter(v []DeviceRequestParameter) {
	o.Parameter = v
}

// GetSubject returns the Subject field value
func (o *DeviceRequest) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *DeviceRequest) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *DeviceRequest) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *DeviceRequest) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *DeviceRequest) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *DeviceRequest) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *DeviceRequest) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *DeviceRequest) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrencePeriod returns the OccurrencePeriod field value if set, zero value otherwise.
func (o *DeviceRequest) GetOccurrencePeriod() Period {
	if o == nil || IsNil(o.OccurrencePeriod) {
		var ret Period
		return ret
	}
	return *o.OccurrencePeriod
}

// GetOccurrencePeriodOk returns a tuple with the OccurrencePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetOccurrencePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OccurrencePeriod) {
		return nil, false
	}
	return o.OccurrencePeriod, true
}

// HasOccurrencePeriod returns a boolean if a field has been set.
func (o *DeviceRequest) HasOccurrencePeriod() bool {
	if o != nil && !IsNil(o.OccurrencePeriod) {
		return true
	}

	return false
}

// SetOccurrencePeriod gets a reference to the given Period and assigns it to the OccurrencePeriod field.
func (o *DeviceRequest) SetOccurrencePeriod(v Period) {
	o.OccurrencePeriod = &v
}

// GetOccurrenceTiming returns the OccurrenceTiming field value if set, zero value otherwise.
func (o *DeviceRequest) GetOccurrenceTiming() Timing {
	if o == nil || IsNil(o.OccurrenceTiming) {
		var ret Timing
		return ret
	}
	return *o.OccurrenceTiming
}

// GetOccurrenceTimingOk returns a tuple with the OccurrenceTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetOccurrenceTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.OccurrenceTiming) {
		return nil, false
	}
	return o.OccurrenceTiming, true
}

// HasOccurrenceTiming returns a boolean if a field has been set.
func (o *DeviceRequest) HasOccurrenceTiming() bool {
	if o != nil && !IsNil(o.OccurrenceTiming) {
		return true
	}

	return false
}

// SetOccurrenceTiming gets a reference to the given Timing and assigns it to the OccurrenceTiming field.
func (o *DeviceRequest) SetOccurrenceTiming(v Timing) {
	o.OccurrenceTiming = &v
}

// GetAuthoredOn returns the AuthoredOn field value if set, zero value otherwise.
func (o *DeviceRequest) GetAuthoredOn() string {
	if o == nil || IsNil(o.AuthoredOn) {
		var ret string
		return ret
	}
	return *o.AuthoredOn
}

// GetAuthoredOnOk returns a tuple with the AuthoredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetAuthoredOnOk() (*string, bool) {
	if o == nil || IsNil(o.AuthoredOn) {
		return nil, false
	}
	return o.AuthoredOn, true
}

// HasAuthoredOn returns a boolean if a field has been set.
func (o *DeviceRequest) HasAuthoredOn() bool {
	if o != nil && !IsNil(o.AuthoredOn) {
		return true
	}

	return false
}

// SetAuthoredOn gets a reference to the given string and assigns it to the AuthoredOn field.
func (o *DeviceRequest) SetAuthoredOn(v string) {
	o.AuthoredOn = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *DeviceRequest) GetRequester() Reference {
	if o == nil || IsNil(o.Requester) {
		var ret Reference
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetRequesterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Requester) {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *DeviceRequest) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given Reference and assigns it to the Requester field.
func (o *DeviceRequest) SetRequester(v Reference) {
	o.Requester = &v
}

// GetPerformerType returns the PerformerType field value if set, zero value otherwise.
func (o *DeviceRequest) GetPerformerType() CodeableConcept {
	if o == nil || IsNil(o.PerformerType) {
		var ret CodeableConcept
		return ret
	}
	return *o.PerformerType
}

// GetPerformerTypeOk returns a tuple with the PerformerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetPerformerTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.PerformerType) {
		return nil, false
	}
	return o.PerformerType, true
}

// HasPerformerType returns a boolean if a field has been set.
func (o *DeviceRequest) HasPerformerType() bool {
	if o != nil && !IsNil(o.PerformerType) {
		return true
	}

	return false
}

// SetPerformerType gets a reference to the given CodeableConcept and assigns it to the PerformerType field.
func (o *DeviceRequest) SetPerformerType(v CodeableConcept) {
	o.PerformerType = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *DeviceRequest) GetPerformer() Reference {
	if o == nil || IsNil(o.Performer) {
		var ret Reference
		return ret
	}
	return *o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetPerformerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *DeviceRequest) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given Reference and assigns it to the Performer field.
func (o *DeviceRequest) SetPerformer(v Reference) {
	o.Performer = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *DeviceRequest) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *DeviceRequest) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *DeviceRequest) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *DeviceRequest) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *DeviceRequest) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *DeviceRequest) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *DeviceRequest) GetInsurance() []Reference {
	if o == nil || IsNil(o.Insurance) {
		var ret []Reference
		return ret
	}
	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetInsuranceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Insurance) {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *DeviceRequest) HasInsurance() bool {
	if o != nil && !IsNil(o.Insurance) {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given []Reference and assigns it to the Insurance field.
func (o *DeviceRequest) SetInsurance(v []Reference) {
	o.Insurance = v
}

// GetSupportingInfo returns the SupportingInfo field value if set, zero value otherwise.
func (o *DeviceRequest) GetSupportingInfo() []Reference {
	if o == nil || IsNil(o.SupportingInfo) {
		var ret []Reference
		return ret
	}
	return o.SupportingInfo
}

// GetSupportingInfoOk returns a tuple with the SupportingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetSupportingInfoOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInfo) {
		return nil, false
	}
	return o.SupportingInfo, true
}

// HasSupportingInfo returns a boolean if a field has been set.
func (o *DeviceRequest) HasSupportingInfo() bool {
	if o != nil && !IsNil(o.SupportingInfo) {
		return true
	}

	return false
}

// SetSupportingInfo gets a reference to the given []Reference and assigns it to the SupportingInfo field.
func (o *DeviceRequest) SetSupportingInfo(v []Reference) {
	o.SupportingInfo = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *DeviceRequest) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *DeviceRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *DeviceRequest) SetNote(v []Annotation) {
	o.Note = v
}

// GetRelevantHistory returns the RelevantHistory field value if set, zero value otherwise.
func (o *DeviceRequest) GetRelevantHistory() []Reference {
	if o == nil || IsNil(o.RelevantHistory) {
		var ret []Reference
		return ret
	}
	return o.RelevantHistory
}

// GetRelevantHistoryOk returns a tuple with the RelevantHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetRelevantHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.RelevantHistory) {
		return nil, false
	}
	return o.RelevantHistory, true
}

// HasRelevantHistory returns a boolean if a field has been set.
func (o *DeviceRequest) HasRelevantHistory() bool {
	if o != nil && !IsNil(o.RelevantHistory) {
		return true
	}

	return false
}

// SetRelevantHistory gets a reference to the given []Reference and assigns it to the RelevantHistory field.
func (o *DeviceRequest) SetRelevantHistory(v []Reference) {
	o.RelevantHistory = v
}

func (o DeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.PriorRequest) {
		toSerialize["priorRequest"] = o.PriorRequest
	}
	if !IsNil(o.GroupIdentifier) {
		toSerialize["groupIdentifier"] = o.GroupIdentifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.CodeReference) {
		toSerialize["codeReference"] = o.CodeReference
	}
	if !IsNil(o.CodeCodeableConcept) {
		toSerialize["codeCodeableConcept"] = o.CodeCodeableConcept
	}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrencePeriod) {
		toSerialize["occurrencePeriod"] = o.OccurrencePeriod
	}
	if !IsNil(o.OccurrenceTiming) {
		toSerialize["occurrenceTiming"] = o.OccurrenceTiming
	}
	if !IsNil(o.AuthoredOn) {
		toSerialize["authoredOn"] = o.AuthoredOn
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.PerformerType) {
		toSerialize["performerType"] = o.PerformerType
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Insurance) {
		toSerialize["insurance"] = o.Insurance
	}
	if !IsNil(o.SupportingInfo) {
		toSerialize["supportingInfo"] = o.SupportingInfo
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.RelevantHistory) {
		toSerialize["relevantHistory"] = o.RelevantHistory
	}
	return toSerialize, nil
}

func (o *DeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceRequest := _DeviceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceRequest)

	if err != nil {
		return err
	}

	*o = DeviceRequest(varDeviceRequest)

	return err
}

type NullableDeviceRequest struct {
	value *DeviceRequest
	isSet bool
}

func (v NullableDeviceRequest) Get() *DeviceRequest {
	return v.value
}

func (v *NullableDeviceRequest) Set(val *DeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRequest(val *DeviceRequest) *NullableDeviceRequest {
	return &NullableDeviceRequest{value: val, isSet: true}
}

func (v NullableDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


