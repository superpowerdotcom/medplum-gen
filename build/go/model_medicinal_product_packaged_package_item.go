/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductPackagedPackageItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductPackagedPackageItem{}

// MedicinalProductPackagedPackageItem A medicinal product in a container or package.
type MedicinalProductPackagedPackageItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Including possibly Data Carrier Identifier.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The physical type of the container of the medicine.
	Type CodeableConcept `json:"type"`
	// The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
	Quantity Quantity `json:"quantity"`
	// Material type of the package item.
	Material []CodeableConcept `json:"material,omitempty"`
	// A possible alternate material for the packaging.
	AlternateMaterial []CodeableConcept `json:"alternateMaterial,omitempty"`
	// A device accompanying a medicinal product.
	Device []Reference `json:"device,omitempty"`
	// The manufactured item as contained in the packaged medicinal product.
	ManufacturedItem []Reference `json:"manufacturedItem,omitempty"`
	// Allows containers within containers.
	PackageItem []MedicinalProductPackagedPackageItem `json:"packageItem,omitempty"`
	// Dimensions, color etc.
	PhysicalCharacteristics *ProdCharacteristic `json:"physicalCharacteristics,omitempty"`
	// Other codeable characteristics.
	OtherCharacteristics []CodeableConcept `json:"otherCharacteristics,omitempty"`
	// Shelf Life and storage information.
	ShelfLifeStorage []ProductShelfLife `json:"shelfLifeStorage,omitempty"`
	// Manufacturer of this Package Item.
	Manufacturer []Reference `json:"manufacturer,omitempty"`
}

type _MedicinalProductPackagedPackageItem MedicinalProductPackagedPackageItem

// NewMedicinalProductPackagedPackageItem instantiates a new MedicinalProductPackagedPackageItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductPackagedPackageItem(type_ CodeableConcept, quantity Quantity) *MedicinalProductPackagedPackageItem {
	this := MedicinalProductPackagedPackageItem{}
	this.Type = type_
	this.Quantity = quantity
	return &this
}

// NewMedicinalProductPackagedPackageItemWithDefaults instantiates a new MedicinalProductPackagedPackageItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductPackagedPackageItemWithDefaults() *MedicinalProductPackagedPackageItem {
	this := MedicinalProductPackagedPackageItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductPackagedPackageItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductPackagedPackageItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductPackagedPackageItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *MedicinalProductPackagedPackageItem) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetType returns the Type field value
func (o *MedicinalProductPackagedPackageItem) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MedicinalProductPackagedPackageItem) SetType(v CodeableConcept) {
	o.Type = v
}

// GetQuantity returns the Quantity field value
func (o *MedicinalProductPackagedPackageItem) GetQuantity() Quantity {
	if o == nil {
		var ret Quantity
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetQuantityOk() (*Quantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *MedicinalProductPackagedPackageItem) SetQuantity(v Quantity) {
	o.Quantity = v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetMaterial() []CodeableConcept {
	if o == nil || IsNil(o.Material) {
		var ret []CodeableConcept
		return ret
	}
	return o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetMaterialOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given []CodeableConcept and assigns it to the Material field.
func (o *MedicinalProductPackagedPackageItem) SetMaterial(v []CodeableConcept) {
	o.Material = v
}

// GetAlternateMaterial returns the AlternateMaterial field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetAlternateMaterial() []CodeableConcept {
	if o == nil || IsNil(o.AlternateMaterial) {
		var ret []CodeableConcept
		return ret
	}
	return o.AlternateMaterial
}

// GetAlternateMaterialOk returns a tuple with the AlternateMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetAlternateMaterialOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.AlternateMaterial) {
		return nil, false
	}
	return o.AlternateMaterial, true
}

// HasAlternateMaterial returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasAlternateMaterial() bool {
	if o != nil && !IsNil(o.AlternateMaterial) {
		return true
	}

	return false
}

// SetAlternateMaterial gets a reference to the given []CodeableConcept and assigns it to the AlternateMaterial field.
func (o *MedicinalProductPackagedPackageItem) SetAlternateMaterial(v []CodeableConcept) {
	o.AlternateMaterial = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetDevice() []Reference {
	if o == nil || IsNil(o.Device) {
		var ret []Reference
		return ret
	}
	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetDeviceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given []Reference and assigns it to the Device field.
func (o *MedicinalProductPackagedPackageItem) SetDevice(v []Reference) {
	o.Device = v
}

// GetManufacturedItem returns the ManufacturedItem field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetManufacturedItem() []Reference {
	if o == nil || IsNil(o.ManufacturedItem) {
		var ret []Reference
		return ret
	}
	return o.ManufacturedItem
}

// GetManufacturedItemOk returns a tuple with the ManufacturedItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetManufacturedItemOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ManufacturedItem) {
		return nil, false
	}
	return o.ManufacturedItem, true
}

// HasManufacturedItem returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasManufacturedItem() bool {
	if o != nil && !IsNil(o.ManufacturedItem) {
		return true
	}

	return false
}

// SetManufacturedItem gets a reference to the given []Reference and assigns it to the ManufacturedItem field.
func (o *MedicinalProductPackagedPackageItem) SetManufacturedItem(v []Reference) {
	o.ManufacturedItem = v
}

// GetPackageItem returns the PackageItem field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetPackageItem() []MedicinalProductPackagedPackageItem {
	if o == nil || IsNil(o.PackageItem) {
		var ret []MedicinalProductPackagedPackageItem
		return ret
	}
	return o.PackageItem
}

// GetPackageItemOk returns a tuple with the PackageItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetPackageItemOk() ([]MedicinalProductPackagedPackageItem, bool) {
	if o == nil || IsNil(o.PackageItem) {
		return nil, false
	}
	return o.PackageItem, true
}

// HasPackageItem returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasPackageItem() bool {
	if o != nil && !IsNil(o.PackageItem) {
		return true
	}

	return false
}

// SetPackageItem gets a reference to the given []MedicinalProductPackagedPackageItem and assigns it to the PackageItem field.
func (o *MedicinalProductPackagedPackageItem) SetPackageItem(v []MedicinalProductPackagedPackageItem) {
	o.PackageItem = v
}

// GetPhysicalCharacteristics returns the PhysicalCharacteristics field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetPhysicalCharacteristics() ProdCharacteristic {
	if o == nil || IsNil(o.PhysicalCharacteristics) {
		var ret ProdCharacteristic
		return ret
	}
	return *o.PhysicalCharacteristics
}

// GetPhysicalCharacteristicsOk returns a tuple with the PhysicalCharacteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetPhysicalCharacteristicsOk() (*ProdCharacteristic, bool) {
	if o == nil || IsNil(o.PhysicalCharacteristics) {
		return nil, false
	}
	return o.PhysicalCharacteristics, true
}

// HasPhysicalCharacteristics returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasPhysicalCharacteristics() bool {
	if o != nil && !IsNil(o.PhysicalCharacteristics) {
		return true
	}

	return false
}

// SetPhysicalCharacteristics gets a reference to the given ProdCharacteristic and assigns it to the PhysicalCharacteristics field.
func (o *MedicinalProductPackagedPackageItem) SetPhysicalCharacteristics(v ProdCharacteristic) {
	o.PhysicalCharacteristics = &v
}

// GetOtherCharacteristics returns the OtherCharacteristics field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetOtherCharacteristics() []CodeableConcept {
	if o == nil || IsNil(o.OtherCharacteristics) {
		var ret []CodeableConcept
		return ret
	}
	return o.OtherCharacteristics
}

// GetOtherCharacteristicsOk returns a tuple with the OtherCharacteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetOtherCharacteristicsOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.OtherCharacteristics) {
		return nil, false
	}
	return o.OtherCharacteristics, true
}

// HasOtherCharacteristics returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasOtherCharacteristics() bool {
	if o != nil && !IsNil(o.OtherCharacteristics) {
		return true
	}

	return false
}

// SetOtherCharacteristics gets a reference to the given []CodeableConcept and assigns it to the OtherCharacteristics field.
func (o *MedicinalProductPackagedPackageItem) SetOtherCharacteristics(v []CodeableConcept) {
	o.OtherCharacteristics = v
}

// GetShelfLifeStorage returns the ShelfLifeStorage field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetShelfLifeStorage() []ProductShelfLife {
	if o == nil || IsNil(o.ShelfLifeStorage) {
		var ret []ProductShelfLife
		return ret
	}
	return o.ShelfLifeStorage
}

// GetShelfLifeStorageOk returns a tuple with the ShelfLifeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetShelfLifeStorageOk() ([]ProductShelfLife, bool) {
	if o == nil || IsNil(o.ShelfLifeStorage) {
		return nil, false
	}
	return o.ShelfLifeStorage, true
}

// HasShelfLifeStorage returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasShelfLifeStorage() bool {
	if o != nil && !IsNil(o.ShelfLifeStorage) {
		return true
	}

	return false
}

// SetShelfLifeStorage gets a reference to the given []ProductShelfLife and assigns it to the ShelfLifeStorage field.
func (o *MedicinalProductPackagedPackageItem) SetShelfLifeStorage(v []ProductShelfLife) {
	o.ShelfLifeStorage = v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *MedicinalProductPackagedPackageItem) GetManufacturer() []Reference {
	if o == nil || IsNil(o.Manufacturer) {
		var ret []Reference
		return ret
	}
	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPackagedPackageItem) GetManufacturerOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *MedicinalProductPackagedPackageItem) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given []Reference and assigns it to the Manufacturer field.
func (o *MedicinalProductPackagedPackageItem) SetManufacturer(v []Reference) {
	o.Manufacturer = v
}

func (o MedicinalProductPackagedPackageItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductPackagedPackageItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["type"] = o.Type
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.AlternateMaterial) {
		toSerialize["alternateMaterial"] = o.AlternateMaterial
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.ManufacturedItem) {
		toSerialize["manufacturedItem"] = o.ManufacturedItem
	}
	if !IsNil(o.PackageItem) {
		toSerialize["packageItem"] = o.PackageItem
	}
	if !IsNil(o.PhysicalCharacteristics) {
		toSerialize["physicalCharacteristics"] = o.PhysicalCharacteristics
	}
	if !IsNil(o.OtherCharacteristics) {
		toSerialize["otherCharacteristics"] = o.OtherCharacteristics
	}
	if !IsNil(o.ShelfLifeStorage) {
		toSerialize["shelfLifeStorage"] = o.ShelfLifeStorage
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	return toSerialize, nil
}

func (o *MedicinalProductPackagedPackageItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductPackagedPackageItem := _MedicinalProductPackagedPackageItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductPackagedPackageItem)

	if err != nil {
		return err
	}

	*o = MedicinalProductPackagedPackageItem(varMedicinalProductPackagedPackageItem)

	return err
}

type NullableMedicinalProductPackagedPackageItem struct {
	value *MedicinalProductPackagedPackageItem
	isSet bool
}

func (v NullableMedicinalProductPackagedPackageItem) Get() *MedicinalProductPackagedPackageItem {
	return v.value
}

func (v *NullableMedicinalProductPackagedPackageItem) Set(val *MedicinalProductPackagedPackageItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductPackagedPackageItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductPackagedPackageItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductPackagedPackageItem(val *MedicinalProductPackagedPackageItem) *NullableMedicinalProductPackagedPackageItem {
	return &NullableMedicinalProductPackagedPackageItem{value: val, isSet: true}
}

func (v NullableMedicinalProductPackagedPackageItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductPackagedPackageItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


