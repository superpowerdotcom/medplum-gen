/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CodeSystemConcept type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeSystemConcept{}

// CodeSystemConcept The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
type CodeSystemConcept struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Code *string `json:"code,omitempty"`
	// A sequence of Unicode characters
	Display *string `json:"display,omitempty"`
	// A sequence of Unicode characters
	Definition *string `json:"definition,omitempty"`
	// Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
	Designation []CodeSystemDesignation `json:"designation,omitempty"`
	// A property value for this concept.
	Property []CodeSystemProperty1 `json:"property,omitempty"`
	// Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
	Concept []CodeSystemConcept `json:"concept,omitempty"`
}

// NewCodeSystemConcept instantiates a new CodeSystemConcept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeSystemConcept() *CodeSystemConcept {
	this := CodeSystemConcept{}
	return &this
}

// NewCodeSystemConceptWithDefaults instantiates a new CodeSystemConcept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeSystemConceptWithDefaults() *CodeSystemConcept {
	this := CodeSystemConcept{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CodeSystemConcept) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CodeSystemConcept) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CodeSystemConcept) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CodeSystemConcept) SetCode(v string) {
	o.Code = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *CodeSystemConcept) SetDisplay(v string) {
	o.Display = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *CodeSystemConcept) SetDefinition(v string) {
	o.Definition = &v
}

// GetDesignation returns the Designation field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetDesignation() []CodeSystemDesignation {
	if o == nil || IsNil(o.Designation) {
		var ret []CodeSystemDesignation
		return ret
	}
	return o.Designation
}

// GetDesignationOk returns a tuple with the Designation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetDesignationOk() ([]CodeSystemDesignation, bool) {
	if o == nil || IsNil(o.Designation) {
		return nil, false
	}
	return o.Designation, true
}

// HasDesignation returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasDesignation() bool {
	if o != nil && !IsNil(o.Designation) {
		return true
	}

	return false
}

// SetDesignation gets a reference to the given []CodeSystemDesignation and assigns it to the Designation field.
func (o *CodeSystemConcept) SetDesignation(v []CodeSystemDesignation) {
	o.Designation = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetProperty() []CodeSystemProperty1 {
	if o == nil || IsNil(o.Property) {
		var ret []CodeSystemProperty1
		return ret
	}
	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetPropertyOk() ([]CodeSystemProperty1, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given []CodeSystemProperty1 and assigns it to the Property field.
func (o *CodeSystemConcept) SetProperty(v []CodeSystemProperty1) {
	o.Property = v
}

// GetConcept returns the Concept field value if set, zero value otherwise.
func (o *CodeSystemConcept) GetConcept() []CodeSystemConcept {
	if o == nil || IsNil(o.Concept) {
		var ret []CodeSystemConcept
		return ret
	}
	return o.Concept
}

// GetConceptOk returns a tuple with the Concept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeSystemConcept) GetConceptOk() ([]CodeSystemConcept, bool) {
	if o == nil || IsNil(o.Concept) {
		return nil, false
	}
	return o.Concept, true
}

// HasConcept returns a boolean if a field has been set.
func (o *CodeSystemConcept) HasConcept() bool {
	if o != nil && !IsNil(o.Concept) {
		return true
	}

	return false
}

// SetConcept gets a reference to the given []CodeSystemConcept and assigns it to the Concept field.
func (o *CodeSystemConcept) SetConcept(v []CodeSystemConcept) {
	o.Concept = v
}

func (o CodeSystemConcept) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeSystemConcept) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.Designation) {
		toSerialize["designation"] = o.Designation
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Concept) {
		toSerialize["concept"] = o.Concept
	}
	return toSerialize, nil
}

type NullableCodeSystemConcept struct {
	value *CodeSystemConcept
	isSet bool
}

func (v NullableCodeSystemConcept) Get() *CodeSystemConcept {
	return v.value
}

func (v *NullableCodeSystemConcept) Set(val *CodeSystemConcept) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeSystemConcept) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeSystemConcept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeSystemConcept(val *CodeSystemConcept) *NullableCodeSystemConcept {
	return &NullableCodeSystemConcept{value: val, isSet: true}
}

func (v NullableCodeSystemConcept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeSystemConcept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


