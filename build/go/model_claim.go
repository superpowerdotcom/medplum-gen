/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Claim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Claim{}

// Claim A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type Claim struct {
	// This is a Claim resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A unique identifier assigned to this claim.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
	Type CodeableConcept `json:"type"`
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	SubType *CodeableConcept `json:"subType,omitempty"`
	// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
	Use *string `json:"use,omitempty"`
	// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
	Patient Reference `json:"patient"`
	// The period for which charges are being submitted.
	BillablePeriod *Period `json:"billablePeriod,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Created *string `json:"created,omitempty"`
	// Individual who created the claim, predetermination or preauthorization.
	Enterer *Reference `json:"enterer,omitempty"`
	// The Insurer who is target of the request.
	Insurer *Reference `json:"insurer,omitempty"`
	// The provider which is responsible for the claim, predetermination or preauthorization.
	Provider Reference `json:"provider"`
	// The provider-required urgency of processing the request. Typical values include: stat, routine deferred.
	Priority CodeableConcept `json:"priority"`
	// A code to indicate whether and for whom funds are to be reserved for future claims.
	FundsReserve *CodeableConcept `json:"fundsReserve,omitempty"`
	// Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
	Related []ClaimRelated `json:"related,omitempty"`
	// Prescription to support the dispensing of pharmacy, device or vision products.
	Prescription *Reference `json:"prescription,omitempty"`
	// Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
	OriginalPrescription *Reference `json:"originalPrescription,omitempty"`
	// The party to be reimbursed for cost of the products and services according to the terms of the policy.
	Payee *ClaimPayee `json:"payee,omitempty"`
	// A reference to a referral resource.
	Referral *Reference `json:"referral,omitempty"`
	// Facility where the services were provided.
	Facility *Reference `json:"facility,omitempty"`
	// The members of the team who provided the products and services.
	CareTeam []ClaimCareTeam `json:"careTeam,omitempty"`
	// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
	SupportingInfo []ClaimSupportingInfo `json:"supportingInfo,omitempty"`
	// Information about diagnoses relevant to the claim items.
	Diagnosis []ClaimDiagnosis `json:"diagnosis,omitempty"`
	// Procedures performed on the patient relevant to the billing items with the claim.
	Procedure []ClaimProcedure `json:"procedure,omitempty"`
	// Financial instruments for reimbursement for the health care products and services specified on the claim.
	Insurance []ClaimInsurance `json:"insurance"`
	// Details of an accident which resulted in injuries which required the products and services listed in the claim.
	Accident *ClaimAccident `json:"accident,omitempty"`
	// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
	Item []ClaimItem `json:"item,omitempty"`
	// The total value of the all the items in the claim.
	Total *Money `json:"total,omitempty"`
}

type _Claim Claim

// NewClaim instantiates a new Claim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaim(resourceType string, type_ CodeableConcept, patient Reference, provider Reference, priority CodeableConcept, insurance []ClaimInsurance) *Claim {
	this := Claim{}
	this.ResourceType = resourceType
	this.Type = type_
	this.Patient = patient
	this.Provider = provider
	this.Priority = priority
	this.Insurance = insurance
	return &this
}

// NewClaimWithDefaults instantiates a new Claim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimWithDefaults() *Claim {
	this := Claim{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Claim) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Claim) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Claim) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Claim) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Claim) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Claim) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Claim) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Claim) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Claim) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Claim) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Claim) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Claim) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Claim) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Claim) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Claim) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Claim) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Claim) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Claim) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Claim) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Claim) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Claim) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Claim) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Claim) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Claim) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Claim) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Claim) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Claim) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Claim) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Claim) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Claim) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Claim) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Claim) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Claim) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *Claim) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Claim) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Claim) SetType(v CodeableConcept) {
	o.Type = v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *Claim) GetSubType() CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetSubTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *Claim) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given CodeableConcept and assigns it to the SubType field.
func (o *Claim) SetSubType(v CodeableConcept) {
	o.SubType = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *Claim) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *Claim) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *Claim) SetUse(v string) {
	o.Use = &v
}

// GetPatient returns the Patient field value
func (o *Claim) GetPatient() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Patient
}

// GetPatientOk returns a tuple with the Patient field value
// and a boolean to check if the value has been set.
func (o *Claim) GetPatientOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patient, true
}

// SetPatient sets field value
func (o *Claim) SetPatient(v Reference) {
	o.Patient = v
}

// GetBillablePeriod returns the BillablePeriod field value if set, zero value otherwise.
func (o *Claim) GetBillablePeriod() Period {
	if o == nil || IsNil(o.BillablePeriod) {
		var ret Period
		return ret
	}
	return *o.BillablePeriod
}

// GetBillablePeriodOk returns a tuple with the BillablePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetBillablePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.BillablePeriod) {
		return nil, false
	}
	return o.BillablePeriod, true
}

// HasBillablePeriod returns a boolean if a field has been set.
func (o *Claim) HasBillablePeriod() bool {
	if o != nil && !IsNil(o.BillablePeriod) {
		return true
	}

	return false
}

// SetBillablePeriod gets a reference to the given Period and assigns it to the BillablePeriod field.
func (o *Claim) SetBillablePeriod(v Period) {
	o.BillablePeriod = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Claim) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Claim) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Claim) SetCreated(v string) {
	o.Created = &v
}

// GetEnterer returns the Enterer field value if set, zero value otherwise.
func (o *Claim) GetEnterer() Reference {
	if o == nil || IsNil(o.Enterer) {
		var ret Reference
		return ret
	}
	return *o.Enterer
}

// GetEntererOk returns a tuple with the Enterer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetEntererOk() (*Reference, bool) {
	if o == nil || IsNil(o.Enterer) {
		return nil, false
	}
	return o.Enterer, true
}

// HasEnterer returns a boolean if a field has been set.
func (o *Claim) HasEnterer() bool {
	if o != nil && !IsNil(o.Enterer) {
		return true
	}

	return false
}

// SetEnterer gets a reference to the given Reference and assigns it to the Enterer field.
func (o *Claim) SetEnterer(v Reference) {
	o.Enterer = &v
}

// GetInsurer returns the Insurer field value if set, zero value otherwise.
func (o *Claim) GetInsurer() Reference {
	if o == nil || IsNil(o.Insurer) {
		var ret Reference
		return ret
	}
	return *o.Insurer
}

// GetInsurerOk returns a tuple with the Insurer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetInsurerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Insurer) {
		return nil, false
	}
	return o.Insurer, true
}

// HasInsurer returns a boolean if a field has been set.
func (o *Claim) HasInsurer() bool {
	if o != nil && !IsNil(o.Insurer) {
		return true
	}

	return false
}

// SetInsurer gets a reference to the given Reference and assigns it to the Insurer field.
func (o *Claim) SetInsurer(v Reference) {
	o.Insurer = &v
}

// GetProvider returns the Provider field value
func (o *Claim) GetProvider() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Claim) GetProviderOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *Claim) SetProvider(v Reference) {
	o.Provider = v
}

// GetPriority returns the Priority field value
func (o *Claim) GetPriority() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Claim) GetPriorityOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Claim) SetPriority(v CodeableConcept) {
	o.Priority = v
}

// GetFundsReserve returns the FundsReserve field value if set, zero value otherwise.
func (o *Claim) GetFundsReserve() CodeableConcept {
	if o == nil || IsNil(o.FundsReserve) {
		var ret CodeableConcept
		return ret
	}
	return *o.FundsReserve
}

// GetFundsReserveOk returns a tuple with the FundsReserve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetFundsReserveOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FundsReserve) {
		return nil, false
	}
	return o.FundsReserve, true
}

// HasFundsReserve returns a boolean if a field has been set.
func (o *Claim) HasFundsReserve() bool {
	if o != nil && !IsNil(o.FundsReserve) {
		return true
	}

	return false
}

// SetFundsReserve gets a reference to the given CodeableConcept and assigns it to the FundsReserve field.
func (o *Claim) SetFundsReserve(v CodeableConcept) {
	o.FundsReserve = &v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *Claim) GetRelated() []ClaimRelated {
	if o == nil || IsNil(o.Related) {
		var ret []ClaimRelated
		return ret
	}
	return o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetRelatedOk() ([]ClaimRelated, bool) {
	if o == nil || IsNil(o.Related) {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *Claim) HasRelated() bool {
	if o != nil && !IsNil(o.Related) {
		return true
	}

	return false
}

// SetRelated gets a reference to the given []ClaimRelated and assigns it to the Related field.
func (o *Claim) SetRelated(v []ClaimRelated) {
	o.Related = v
}

// GetPrescription returns the Prescription field value if set, zero value otherwise.
func (o *Claim) GetPrescription() Reference {
	if o == nil || IsNil(o.Prescription) {
		var ret Reference
		return ret
	}
	return *o.Prescription
}

// GetPrescriptionOk returns a tuple with the Prescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetPrescriptionOk() (*Reference, bool) {
	if o == nil || IsNil(o.Prescription) {
		return nil, false
	}
	return o.Prescription, true
}

// HasPrescription returns a boolean if a field has been set.
func (o *Claim) HasPrescription() bool {
	if o != nil && !IsNil(o.Prescription) {
		return true
	}

	return false
}

// SetPrescription gets a reference to the given Reference and assigns it to the Prescription field.
func (o *Claim) SetPrescription(v Reference) {
	o.Prescription = &v
}

// GetOriginalPrescription returns the OriginalPrescription field value if set, zero value otherwise.
func (o *Claim) GetOriginalPrescription() Reference {
	if o == nil || IsNil(o.OriginalPrescription) {
		var ret Reference
		return ret
	}
	return *o.OriginalPrescription
}

// GetOriginalPrescriptionOk returns a tuple with the OriginalPrescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetOriginalPrescriptionOk() (*Reference, bool) {
	if o == nil || IsNil(o.OriginalPrescription) {
		return nil, false
	}
	return o.OriginalPrescription, true
}

// HasOriginalPrescription returns a boolean if a field has been set.
func (o *Claim) HasOriginalPrescription() bool {
	if o != nil && !IsNil(o.OriginalPrescription) {
		return true
	}

	return false
}

// SetOriginalPrescription gets a reference to the given Reference and assigns it to the OriginalPrescription field.
func (o *Claim) SetOriginalPrescription(v Reference) {
	o.OriginalPrescription = &v
}

// GetPayee returns the Payee field value if set, zero value otherwise.
func (o *Claim) GetPayee() ClaimPayee {
	if o == nil || IsNil(o.Payee) {
		var ret ClaimPayee
		return ret
	}
	return *o.Payee
}

// GetPayeeOk returns a tuple with the Payee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetPayeeOk() (*ClaimPayee, bool) {
	if o == nil || IsNil(o.Payee) {
		return nil, false
	}
	return o.Payee, true
}

// HasPayee returns a boolean if a field has been set.
func (o *Claim) HasPayee() bool {
	if o != nil && !IsNil(o.Payee) {
		return true
	}

	return false
}

// SetPayee gets a reference to the given ClaimPayee and assigns it to the Payee field.
func (o *Claim) SetPayee(v ClaimPayee) {
	o.Payee = &v
}

// GetReferral returns the Referral field value if set, zero value otherwise.
func (o *Claim) GetReferral() Reference {
	if o == nil || IsNil(o.Referral) {
		var ret Reference
		return ret
	}
	return *o.Referral
}

// GetReferralOk returns a tuple with the Referral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetReferralOk() (*Reference, bool) {
	if o == nil || IsNil(o.Referral) {
		return nil, false
	}
	return o.Referral, true
}

// HasReferral returns a boolean if a field has been set.
func (o *Claim) HasReferral() bool {
	if o != nil && !IsNil(o.Referral) {
		return true
	}

	return false
}

// SetReferral gets a reference to the given Reference and assigns it to the Referral field.
func (o *Claim) SetReferral(v Reference) {
	o.Referral = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *Claim) GetFacility() Reference {
	if o == nil || IsNil(o.Facility) {
		var ret Reference
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetFacilityOk() (*Reference, bool) {
	if o == nil || IsNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *Claim) HasFacility() bool {
	if o != nil && !IsNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given Reference and assigns it to the Facility field.
func (o *Claim) SetFacility(v Reference) {
	o.Facility = &v
}

// GetCareTeam returns the CareTeam field value if set, zero value otherwise.
func (o *Claim) GetCareTeam() []ClaimCareTeam {
	if o == nil || IsNil(o.CareTeam) {
		var ret []ClaimCareTeam
		return ret
	}
	return o.CareTeam
}

// GetCareTeamOk returns a tuple with the CareTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetCareTeamOk() ([]ClaimCareTeam, bool) {
	if o == nil || IsNil(o.CareTeam) {
		return nil, false
	}
	return o.CareTeam, true
}

// HasCareTeam returns a boolean if a field has been set.
func (o *Claim) HasCareTeam() bool {
	if o != nil && !IsNil(o.CareTeam) {
		return true
	}

	return false
}

// SetCareTeam gets a reference to the given []ClaimCareTeam and assigns it to the CareTeam field.
func (o *Claim) SetCareTeam(v []ClaimCareTeam) {
	o.CareTeam = v
}

// GetSupportingInfo returns the SupportingInfo field value if set, zero value otherwise.
func (o *Claim) GetSupportingInfo() []ClaimSupportingInfo {
	if o == nil || IsNil(o.SupportingInfo) {
		var ret []ClaimSupportingInfo
		return ret
	}
	return o.SupportingInfo
}

// GetSupportingInfoOk returns a tuple with the SupportingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetSupportingInfoOk() ([]ClaimSupportingInfo, bool) {
	if o == nil || IsNil(o.SupportingInfo) {
		return nil, false
	}
	return o.SupportingInfo, true
}

// HasSupportingInfo returns a boolean if a field has been set.
func (o *Claim) HasSupportingInfo() bool {
	if o != nil && !IsNil(o.SupportingInfo) {
		return true
	}

	return false
}

// SetSupportingInfo gets a reference to the given []ClaimSupportingInfo and assigns it to the SupportingInfo field.
func (o *Claim) SetSupportingInfo(v []ClaimSupportingInfo) {
	o.SupportingInfo = v
}

// GetDiagnosis returns the Diagnosis field value if set, zero value otherwise.
func (o *Claim) GetDiagnosis() []ClaimDiagnosis {
	if o == nil || IsNil(o.Diagnosis) {
		var ret []ClaimDiagnosis
		return ret
	}
	return o.Diagnosis
}

// GetDiagnosisOk returns a tuple with the Diagnosis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetDiagnosisOk() ([]ClaimDiagnosis, bool) {
	if o == nil || IsNil(o.Diagnosis) {
		return nil, false
	}
	return o.Diagnosis, true
}

// HasDiagnosis returns a boolean if a field has been set.
func (o *Claim) HasDiagnosis() bool {
	if o != nil && !IsNil(o.Diagnosis) {
		return true
	}

	return false
}

// SetDiagnosis gets a reference to the given []ClaimDiagnosis and assigns it to the Diagnosis field.
func (o *Claim) SetDiagnosis(v []ClaimDiagnosis) {
	o.Diagnosis = v
}

// GetProcedure returns the Procedure field value if set, zero value otherwise.
func (o *Claim) GetProcedure() []ClaimProcedure {
	if o == nil || IsNil(o.Procedure) {
		var ret []ClaimProcedure
		return ret
	}
	return o.Procedure
}

// GetProcedureOk returns a tuple with the Procedure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetProcedureOk() ([]ClaimProcedure, bool) {
	if o == nil || IsNil(o.Procedure) {
		return nil, false
	}
	return o.Procedure, true
}

// HasProcedure returns a boolean if a field has been set.
func (o *Claim) HasProcedure() bool {
	if o != nil && !IsNil(o.Procedure) {
		return true
	}

	return false
}

// SetProcedure gets a reference to the given []ClaimProcedure and assigns it to the Procedure field.
func (o *Claim) SetProcedure(v []ClaimProcedure) {
	o.Procedure = v
}

// GetInsurance returns the Insurance field value
func (o *Claim) GetInsurance() []ClaimInsurance {
	if o == nil {
		var ret []ClaimInsurance
		return ret
	}

	return o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value
// and a boolean to check if the value has been set.
func (o *Claim) GetInsuranceOk() ([]ClaimInsurance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Insurance, true
}

// SetInsurance sets field value
func (o *Claim) SetInsurance(v []ClaimInsurance) {
	o.Insurance = v
}

// GetAccident returns the Accident field value if set, zero value otherwise.
func (o *Claim) GetAccident() ClaimAccident {
	if o == nil || IsNil(o.Accident) {
		var ret ClaimAccident
		return ret
	}
	return *o.Accident
}

// GetAccidentOk returns a tuple with the Accident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetAccidentOk() (*ClaimAccident, bool) {
	if o == nil || IsNil(o.Accident) {
		return nil, false
	}
	return o.Accident, true
}

// HasAccident returns a boolean if a field has been set.
func (o *Claim) HasAccident() bool {
	if o != nil && !IsNil(o.Accident) {
		return true
	}

	return false
}

// SetAccident gets a reference to the given ClaimAccident and assigns it to the Accident field.
func (o *Claim) SetAccident(v ClaimAccident) {
	o.Accident = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *Claim) GetItem() []ClaimItem {
	if o == nil || IsNil(o.Item) {
		var ret []ClaimItem
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetItemOk() ([]ClaimItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *Claim) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []ClaimItem and assigns it to the Item field.
func (o *Claim) SetItem(v []ClaimItem) {
	o.Item = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Claim) GetTotal() Money {
	if o == nil || IsNil(o.Total) {
		var ret Money
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Claim) GetTotalOk() (*Money, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Claim) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given Money and assigns it to the Total field.
func (o *Claim) SetTotal(v Money) {
	o.Total = &v
}

func (o Claim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Claim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	toSerialize["patient"] = o.Patient
	if !IsNil(o.BillablePeriod) {
		toSerialize["billablePeriod"] = o.BillablePeriod
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Enterer) {
		toSerialize["enterer"] = o.Enterer
	}
	if !IsNil(o.Insurer) {
		toSerialize["insurer"] = o.Insurer
	}
	toSerialize["provider"] = o.Provider
	toSerialize["priority"] = o.Priority
	if !IsNil(o.FundsReserve) {
		toSerialize["fundsReserve"] = o.FundsReserve
	}
	if !IsNil(o.Related) {
		toSerialize["related"] = o.Related
	}
	if !IsNil(o.Prescription) {
		toSerialize["prescription"] = o.Prescription
	}
	if !IsNil(o.OriginalPrescription) {
		toSerialize["originalPrescription"] = o.OriginalPrescription
	}
	if !IsNil(o.Payee) {
		toSerialize["payee"] = o.Payee
	}
	if !IsNil(o.Referral) {
		toSerialize["referral"] = o.Referral
	}
	if !IsNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !IsNil(o.CareTeam) {
		toSerialize["careTeam"] = o.CareTeam
	}
	if !IsNil(o.SupportingInfo) {
		toSerialize["supportingInfo"] = o.SupportingInfo
	}
	if !IsNil(o.Diagnosis) {
		toSerialize["diagnosis"] = o.Diagnosis
	}
	if !IsNil(o.Procedure) {
		toSerialize["procedure"] = o.Procedure
	}
	toSerialize["insurance"] = o.Insurance
	if !IsNil(o.Accident) {
		toSerialize["accident"] = o.Accident
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

func (o *Claim) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"type",
		"patient",
		"provider",
		"priority",
		"insurance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaim := _Claim{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaim)

	if err != nil {
		return err
	}

	*o = Claim(varClaim)

	return err
}

type NullableClaim struct {
	value *Claim
	isSet bool
}

func (v NullableClaim) Get() *Claim {
	return v.value
}

func (v *NullableClaim) Set(val *Claim) {
	v.value = val
	v.isSet = true
}

func (v NullableClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaim(val *Claim) *NullableClaim {
	return &NullableClaim{value: val, isSet: true}
}

func (v NullableClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


