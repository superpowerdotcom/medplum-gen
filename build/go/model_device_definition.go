/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDefinition{}

// DeviceDefinition The characteristics, operational status and capabilities of a medical-related component of a medical device.
type DeviceDefinition struct {
	// This is a DeviceDefinition resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
	UdiDeviceIdentifier []DeviceDefinitionUdiDeviceIdentifier `json:"udiDeviceIdentifier,omitempty"`
	// A name of the manufacturer.
	ManufacturerString *string `json:"manufacturerString,omitempty"`
	// A name of the manufacturer.
	ManufacturerReference *Reference `json:"manufacturerReference,omitempty"`
	// A name given to the device to identify it.
	DeviceName []DeviceDefinitionDeviceName `json:"deviceName,omitempty"`
	// A sequence of Unicode characters
	ModelNumber *string `json:"modelNumber,omitempty"`
	// What kind of device or device system this is.
	Type *CodeableConcept `json:"type,omitempty"`
	// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
	Specialization []DeviceDefinitionSpecialization `json:"specialization,omitempty"`
	// The available versions of the device, e.g., software versions.
	Version []string `json:"version,omitempty"`
	// Safety characteristics of the device.
	Safety []CodeableConcept `json:"safety,omitempty"`
	// Shelf Life and storage information.
	ShelfLifeStorage []ProductShelfLife `json:"shelfLifeStorage,omitempty"`
	// Dimensions, color etc.
	PhysicalCharacteristics *ProdCharacteristic `json:"physicalCharacteristics,omitempty"`
	// Language code for the human-readable text strings produced by the device (all supported).
	LanguageCode []CodeableConcept `json:"languageCode,omitempty"`
	// Device capabilities.
	Capability []DeviceDefinitionCapability `json:"capability,omitempty"`
	// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
	Property []DeviceDefinitionProperty `json:"property,omitempty"`
	// An organization that is responsible for the provision and ongoing maintenance of the device.
	Owner *Reference `json:"owner,omitempty"`
	// Contact details for an organization or a particular human that is responsible for the device.
	Contact []ContactPoint `json:"contact,omitempty"`
	// String of characters used to identify a name or a resource
	Url *string `json:"url,omitempty"`
	// String of characters used to identify a name or a resource
	OnlineInformation *string `json:"onlineInformation,omitempty"`
	// Descriptive information, usage information or implantation information that is not captured in an existing element.
	Note []Annotation `json:"note,omitempty"`
	// The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
	Quantity *Quantity `json:"quantity,omitempty"`
	// The parent device it can be part of.
	ParentDevice *Reference `json:"parentDevice,omitempty"`
	// A substance used to create the material(s) of which the device is made.
	Material []DeviceDefinitionMaterial `json:"material,omitempty"`
	// What kind of device or device system this is.
	Classification []DeviceDefinitionClassification `json:"classification,omitempty"`
}

type _DeviceDefinition DeviceDefinition

// NewDeviceDefinition instantiates a new DeviceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDefinition(resourceType string) *DeviceDefinition {
	this := DeviceDefinition{}
	this.ResourceType = resourceType
	return &this
}

// NewDeviceDefinitionWithDefaults instantiates a new DeviceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDefinitionWithDefaults() *DeviceDefinition {
	this := DeviceDefinition{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *DeviceDefinition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DeviceDefinition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceDefinition) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DeviceDefinition) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DeviceDefinition) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DeviceDefinition) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *DeviceDefinition) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *DeviceDefinition) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *DeviceDefinition) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DeviceDefinition) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DeviceDefinition) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DeviceDefinition) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DeviceDefinition) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DeviceDefinition) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *DeviceDefinition) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *DeviceDefinition) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *DeviceDefinition) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *DeviceDefinition) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceDefinition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceDefinition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceDefinition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DeviceDefinition) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DeviceDefinition) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *DeviceDefinition) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetUdiDeviceIdentifier returns the UdiDeviceIdentifier field value if set, zero value otherwise.
func (o *DeviceDefinition) GetUdiDeviceIdentifier() []DeviceDefinitionUdiDeviceIdentifier {
	if o == nil || IsNil(o.UdiDeviceIdentifier) {
		var ret []DeviceDefinitionUdiDeviceIdentifier
		return ret
	}
	return o.UdiDeviceIdentifier
}

// GetUdiDeviceIdentifierOk returns a tuple with the UdiDeviceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetUdiDeviceIdentifierOk() ([]DeviceDefinitionUdiDeviceIdentifier, bool) {
	if o == nil || IsNil(o.UdiDeviceIdentifier) {
		return nil, false
	}
	return o.UdiDeviceIdentifier, true
}

// HasUdiDeviceIdentifier returns a boolean if a field has been set.
func (o *DeviceDefinition) HasUdiDeviceIdentifier() bool {
	if o != nil && !IsNil(o.UdiDeviceIdentifier) {
		return true
	}

	return false
}

// SetUdiDeviceIdentifier gets a reference to the given []DeviceDefinitionUdiDeviceIdentifier and assigns it to the UdiDeviceIdentifier field.
func (o *DeviceDefinition) SetUdiDeviceIdentifier(v []DeviceDefinitionUdiDeviceIdentifier) {
	o.UdiDeviceIdentifier = v
}

// GetManufacturerString returns the ManufacturerString field value if set, zero value otherwise.
func (o *DeviceDefinition) GetManufacturerString() string {
	if o == nil || IsNil(o.ManufacturerString) {
		var ret string
		return ret
	}
	return *o.ManufacturerString
}

// GetManufacturerStringOk returns a tuple with the ManufacturerString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetManufacturerStringOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerString) {
		return nil, false
	}
	return o.ManufacturerString, true
}

// HasManufacturerString returns a boolean if a field has been set.
func (o *DeviceDefinition) HasManufacturerString() bool {
	if o != nil && !IsNil(o.ManufacturerString) {
		return true
	}

	return false
}

// SetManufacturerString gets a reference to the given string and assigns it to the ManufacturerString field.
func (o *DeviceDefinition) SetManufacturerString(v string) {
	o.ManufacturerString = &v
}

// GetManufacturerReference returns the ManufacturerReference field value if set, zero value otherwise.
func (o *DeviceDefinition) GetManufacturerReference() Reference {
	if o == nil || IsNil(o.ManufacturerReference) {
		var ret Reference
		return ret
	}
	return *o.ManufacturerReference
}

// GetManufacturerReferenceOk returns a tuple with the ManufacturerReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetManufacturerReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ManufacturerReference) {
		return nil, false
	}
	return o.ManufacturerReference, true
}

// HasManufacturerReference returns a boolean if a field has been set.
func (o *DeviceDefinition) HasManufacturerReference() bool {
	if o != nil && !IsNil(o.ManufacturerReference) {
		return true
	}

	return false
}

// SetManufacturerReference gets a reference to the given Reference and assigns it to the ManufacturerReference field.
func (o *DeviceDefinition) SetManufacturerReference(v Reference) {
	o.ManufacturerReference = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DeviceDefinition) GetDeviceName() []DeviceDefinitionDeviceName {
	if o == nil || IsNil(o.DeviceName) {
		var ret []DeviceDefinitionDeviceName
		return ret
	}
	return o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetDeviceNameOk() ([]DeviceDefinitionDeviceName, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceDefinition) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given []DeviceDefinitionDeviceName and assigns it to the DeviceName field.
func (o *DeviceDefinition) SetDeviceName(v []DeviceDefinitionDeviceName) {
	o.DeviceName = v
}

// GetModelNumber returns the ModelNumber field value if set, zero value otherwise.
func (o *DeviceDefinition) GetModelNumber() string {
	if o == nil || IsNil(o.ModelNumber) {
		var ret string
		return ret
	}
	return *o.ModelNumber
}

// GetModelNumberOk returns a tuple with the ModelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetModelNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ModelNumber) {
		return nil, false
	}
	return o.ModelNumber, true
}

// HasModelNumber returns a boolean if a field has been set.
func (o *DeviceDefinition) HasModelNumber() bool {
	if o != nil && !IsNil(o.ModelNumber) {
		return true
	}

	return false
}

// SetModelNumber gets a reference to the given string and assigns it to the ModelNumber field.
func (o *DeviceDefinition) SetModelNumber(v string) {
	o.ModelNumber = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceDefinition) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *DeviceDefinition) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetSpecialization returns the Specialization field value if set, zero value otherwise.
func (o *DeviceDefinition) GetSpecialization() []DeviceDefinitionSpecialization {
	if o == nil || IsNil(o.Specialization) {
		var ret []DeviceDefinitionSpecialization
		return ret
	}
	return o.Specialization
}

// GetSpecializationOk returns a tuple with the Specialization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetSpecializationOk() ([]DeviceDefinitionSpecialization, bool) {
	if o == nil || IsNil(o.Specialization) {
		return nil, false
	}
	return o.Specialization, true
}

// HasSpecialization returns a boolean if a field has been set.
func (o *DeviceDefinition) HasSpecialization() bool {
	if o != nil && !IsNil(o.Specialization) {
		return true
	}

	return false
}

// SetSpecialization gets a reference to the given []DeviceDefinitionSpecialization and assigns it to the Specialization field.
func (o *DeviceDefinition) SetSpecialization(v []DeviceDefinitionSpecialization) {
	o.Specialization = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeviceDefinition) GetVersion() []string {
	if o == nil || IsNil(o.Version) {
		var ret []string
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeviceDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given []string and assigns it to the Version field.
func (o *DeviceDefinition) SetVersion(v []string) {
	o.Version = v
}

// GetSafety returns the Safety field value if set, zero value otherwise.
func (o *DeviceDefinition) GetSafety() []CodeableConcept {
	if o == nil || IsNil(o.Safety) {
		var ret []CodeableConcept
		return ret
	}
	return o.Safety
}

// GetSafetyOk returns a tuple with the Safety field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetSafetyOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Safety) {
		return nil, false
	}
	return o.Safety, true
}

// HasSafety returns a boolean if a field has been set.
func (o *DeviceDefinition) HasSafety() bool {
	if o != nil && !IsNil(o.Safety) {
		return true
	}

	return false
}

// SetSafety gets a reference to the given []CodeableConcept and assigns it to the Safety field.
func (o *DeviceDefinition) SetSafety(v []CodeableConcept) {
	o.Safety = v
}

// GetShelfLifeStorage returns the ShelfLifeStorage field value if set, zero value otherwise.
func (o *DeviceDefinition) GetShelfLifeStorage() []ProductShelfLife {
	if o == nil || IsNil(o.ShelfLifeStorage) {
		var ret []ProductShelfLife
		return ret
	}
	return o.ShelfLifeStorage
}

// GetShelfLifeStorageOk returns a tuple with the ShelfLifeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetShelfLifeStorageOk() ([]ProductShelfLife, bool) {
	if o == nil || IsNil(o.ShelfLifeStorage) {
		return nil, false
	}
	return o.ShelfLifeStorage, true
}

// HasShelfLifeStorage returns a boolean if a field has been set.
func (o *DeviceDefinition) HasShelfLifeStorage() bool {
	if o != nil && !IsNil(o.ShelfLifeStorage) {
		return true
	}

	return false
}

// SetShelfLifeStorage gets a reference to the given []ProductShelfLife and assigns it to the ShelfLifeStorage field.
func (o *DeviceDefinition) SetShelfLifeStorage(v []ProductShelfLife) {
	o.ShelfLifeStorage = v
}

// GetPhysicalCharacteristics returns the PhysicalCharacteristics field value if set, zero value otherwise.
func (o *DeviceDefinition) GetPhysicalCharacteristics() ProdCharacteristic {
	if o == nil || IsNil(o.PhysicalCharacteristics) {
		var ret ProdCharacteristic
		return ret
	}
	return *o.PhysicalCharacteristics
}

// GetPhysicalCharacteristicsOk returns a tuple with the PhysicalCharacteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetPhysicalCharacteristicsOk() (*ProdCharacteristic, bool) {
	if o == nil || IsNil(o.PhysicalCharacteristics) {
		return nil, false
	}
	return o.PhysicalCharacteristics, true
}

// HasPhysicalCharacteristics returns a boolean if a field has been set.
func (o *DeviceDefinition) HasPhysicalCharacteristics() bool {
	if o != nil && !IsNil(o.PhysicalCharacteristics) {
		return true
	}

	return false
}

// SetPhysicalCharacteristics gets a reference to the given ProdCharacteristic and assigns it to the PhysicalCharacteristics field.
func (o *DeviceDefinition) SetPhysicalCharacteristics(v ProdCharacteristic) {
	o.PhysicalCharacteristics = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *DeviceDefinition) GetLanguageCode() []CodeableConcept {
	if o == nil || IsNil(o.LanguageCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetLanguageCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *DeviceDefinition) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given []CodeableConcept and assigns it to the LanguageCode field.
func (o *DeviceDefinition) SetLanguageCode(v []CodeableConcept) {
	o.LanguageCode = v
}

// GetCapability returns the Capability field value if set, zero value otherwise.
func (o *DeviceDefinition) GetCapability() []DeviceDefinitionCapability {
	if o == nil || IsNil(o.Capability) {
		var ret []DeviceDefinitionCapability
		return ret
	}
	return o.Capability
}

// GetCapabilityOk returns a tuple with the Capability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetCapabilityOk() ([]DeviceDefinitionCapability, bool) {
	if o == nil || IsNil(o.Capability) {
		return nil, false
	}
	return o.Capability, true
}

// HasCapability returns a boolean if a field has been set.
func (o *DeviceDefinition) HasCapability() bool {
	if o != nil && !IsNil(o.Capability) {
		return true
	}

	return false
}

// SetCapability gets a reference to the given []DeviceDefinitionCapability and assigns it to the Capability field.
func (o *DeviceDefinition) SetCapability(v []DeviceDefinitionCapability) {
	o.Capability = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *DeviceDefinition) GetProperty() []DeviceDefinitionProperty {
	if o == nil || IsNil(o.Property) {
		var ret []DeviceDefinitionProperty
		return ret
	}
	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetPropertyOk() ([]DeviceDefinitionProperty, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *DeviceDefinition) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given []DeviceDefinitionProperty and assigns it to the Property field.
func (o *DeviceDefinition) SetProperty(v []DeviceDefinitionProperty) {
	o.Property = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DeviceDefinition) GetOwner() Reference {
	if o == nil || IsNil(o.Owner) {
		var ret Reference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetOwnerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DeviceDefinition) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Reference and assigns it to the Owner field.
func (o *DeviceDefinition) SetOwner(v Reference) {
	o.Owner = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *DeviceDefinition) GetContact() []ContactPoint {
	if o == nil || IsNil(o.Contact) {
		var ret []ContactPoint
		return ret
	}
	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetContactOk() ([]ContactPoint, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *DeviceDefinition) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given []ContactPoint and assigns it to the Contact field.
func (o *DeviceDefinition) SetContact(v []ContactPoint) {
	o.Contact = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DeviceDefinition) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DeviceDefinition) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DeviceDefinition) SetUrl(v string) {
	o.Url = &v
}

// GetOnlineInformation returns the OnlineInformation field value if set, zero value otherwise.
func (o *DeviceDefinition) GetOnlineInformation() string {
	if o == nil || IsNil(o.OnlineInformation) {
		var ret string
		return ret
	}
	return *o.OnlineInformation
}

// GetOnlineInformationOk returns a tuple with the OnlineInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetOnlineInformationOk() (*string, bool) {
	if o == nil || IsNil(o.OnlineInformation) {
		return nil, false
	}
	return o.OnlineInformation, true
}

// HasOnlineInformation returns a boolean if a field has been set.
func (o *DeviceDefinition) HasOnlineInformation() bool {
	if o != nil && !IsNil(o.OnlineInformation) {
		return true
	}

	return false
}

// SetOnlineInformation gets a reference to the given string and assigns it to the OnlineInformation field.
func (o *DeviceDefinition) SetOnlineInformation(v string) {
	o.OnlineInformation = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *DeviceDefinition) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *DeviceDefinition) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *DeviceDefinition) SetNote(v []Annotation) {
	o.Note = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DeviceDefinition) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DeviceDefinition) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *DeviceDefinition) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetParentDevice returns the ParentDevice field value if set, zero value otherwise.
func (o *DeviceDefinition) GetParentDevice() Reference {
	if o == nil || IsNil(o.ParentDevice) {
		var ret Reference
		return ret
	}
	return *o.ParentDevice
}

// GetParentDeviceOk returns a tuple with the ParentDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetParentDeviceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ParentDevice) {
		return nil, false
	}
	return o.ParentDevice, true
}

// HasParentDevice returns a boolean if a field has been set.
func (o *DeviceDefinition) HasParentDevice() bool {
	if o != nil && !IsNil(o.ParentDevice) {
		return true
	}

	return false
}

// SetParentDevice gets a reference to the given Reference and assigns it to the ParentDevice field.
func (o *DeviceDefinition) SetParentDevice(v Reference) {
	o.ParentDevice = &v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *DeviceDefinition) GetMaterial() []DeviceDefinitionMaterial {
	if o == nil || IsNil(o.Material) {
		var ret []DeviceDefinitionMaterial
		return ret
	}
	return o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetMaterialOk() ([]DeviceDefinitionMaterial, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *DeviceDefinition) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given []DeviceDefinitionMaterial and assigns it to the Material field.
func (o *DeviceDefinition) SetMaterial(v []DeviceDefinitionMaterial) {
	o.Material = v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *DeviceDefinition) GetClassification() []DeviceDefinitionClassification {
	if o == nil || IsNil(o.Classification) {
		var ret []DeviceDefinitionClassification
		return ret
	}
	return o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinition) GetClassificationOk() ([]DeviceDefinitionClassification, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *DeviceDefinition) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given []DeviceDefinitionClassification and assigns it to the Classification field.
func (o *DeviceDefinition) SetClassification(v []DeviceDefinitionClassification) {
	o.Classification = v
}

func (o DeviceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.UdiDeviceIdentifier) {
		toSerialize["udiDeviceIdentifier"] = o.UdiDeviceIdentifier
	}
	if !IsNil(o.ManufacturerString) {
		toSerialize["manufacturerString"] = o.ManufacturerString
	}
	if !IsNil(o.ManufacturerReference) {
		toSerialize["manufacturerReference"] = o.ManufacturerReference
	}
	if !IsNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !IsNil(o.ModelNumber) {
		toSerialize["modelNumber"] = o.ModelNumber
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Specialization) {
		toSerialize["specialization"] = o.Specialization
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Safety) {
		toSerialize["safety"] = o.Safety
	}
	if !IsNil(o.ShelfLifeStorage) {
		toSerialize["shelfLifeStorage"] = o.ShelfLifeStorage
	}
	if !IsNil(o.PhysicalCharacteristics) {
		toSerialize["physicalCharacteristics"] = o.PhysicalCharacteristics
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.Capability) {
		toSerialize["capability"] = o.Capability
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.OnlineInformation) {
		toSerialize["onlineInformation"] = o.OnlineInformation
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ParentDevice) {
		toSerialize["parentDevice"] = o.ParentDevice
	}
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	return toSerialize, nil
}

func (o *DeviceDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceDefinition := _DeviceDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceDefinition)

	if err != nil {
		return err
	}

	*o = DeviceDefinition(varDeviceDefinition)

	return err
}

type NullableDeviceDefinition struct {
	value *DeviceDefinition
	isSet bool
}

func (v NullableDeviceDefinition) Get() *DeviceDefinition {
	return v.value
}

func (v *NullableDeviceDefinition) Set(val *DeviceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDefinition(val *DeviceDefinition) *NullableDeviceDefinition {
	return &NullableDeviceDefinition{value: val, isSet: true}
}

func (v NullableDeviceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


