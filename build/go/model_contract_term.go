/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractTerm{}

// ContractTerm Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractTerm struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique identifier for this particular Contract Provision.
	Identifier *Identifier `json:"identifier,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Issued *string `json:"issued,omitempty"`
	// Relevant time or time-period when this Contract Provision is applicable.
	Applies *Period `json:"applies,omitempty"`
	// The entity that the term applies to.
	TopicCodeableConcept *CodeableConcept `json:"topicCodeableConcept,omitempty"`
	// The entity that the term applies to.
	TopicReference *Reference `json:"topicReference,omitempty"`
	// A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
	Type *CodeableConcept `json:"type,omitempty"`
	// A specialized legal clause or condition based on overarching contract type.
	SubType *CodeableConcept `json:"subType,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
	// Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
	SecurityLabel []ContractSecurityLabel `json:"securityLabel,omitempty"`
	// The matter of concern in the context of this provision of the agrement.
	Offer ContractOffer `json:"offer"`
	// Contract Term Asset List.
	Asset []ContractAsset `json:"asset,omitempty"`
	// An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
	Action []ContractAction `json:"action,omitempty"`
	// Nested group of Contract Provisions.
	Group []ContractTerm `json:"group,omitempty"`
}

type _ContractTerm ContractTerm

// NewContractTerm instantiates a new ContractTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractTerm(offer ContractOffer) *ContractTerm {
	this := ContractTerm{}
	this.Offer = offer
	return &this
}

// NewContractTermWithDefaults instantiates a new ContractTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractTermWithDefaults() *ContractTerm {
	this := ContractTerm{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContractTerm) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContractTerm) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContractTerm) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ContractTerm) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ContractTerm) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ContractTerm) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ContractTerm) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ContractTerm) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ContractTerm) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ContractTerm) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ContractTerm) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *ContractTerm) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetIssued returns the Issued field value if set, zero value otherwise.
func (o *ContractTerm) GetIssued() string {
	if o == nil || IsNil(o.Issued) {
		var ret string
		return ret
	}
	return *o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetIssuedOk() (*string, bool) {
	if o == nil || IsNil(o.Issued) {
		return nil, false
	}
	return o.Issued, true
}

// HasIssued returns a boolean if a field has been set.
func (o *ContractTerm) HasIssued() bool {
	if o != nil && !IsNil(o.Issued) {
		return true
	}

	return false
}

// SetIssued gets a reference to the given string and assigns it to the Issued field.
func (o *ContractTerm) SetIssued(v string) {
	o.Issued = &v
}

// GetApplies returns the Applies field value if set, zero value otherwise.
func (o *ContractTerm) GetApplies() Period {
	if o == nil || IsNil(o.Applies) {
		var ret Period
		return ret
	}
	return *o.Applies
}

// GetAppliesOk returns a tuple with the Applies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetAppliesOk() (*Period, bool) {
	if o == nil || IsNil(o.Applies) {
		return nil, false
	}
	return o.Applies, true
}

// HasApplies returns a boolean if a field has been set.
func (o *ContractTerm) HasApplies() bool {
	if o != nil && !IsNil(o.Applies) {
		return true
	}

	return false
}

// SetApplies gets a reference to the given Period and assigns it to the Applies field.
func (o *ContractTerm) SetApplies(v Period) {
	o.Applies = &v
}

// GetTopicCodeableConcept returns the TopicCodeableConcept field value if set, zero value otherwise.
func (o *ContractTerm) GetTopicCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.TopicCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.TopicCodeableConcept
}

// GetTopicCodeableConceptOk returns a tuple with the TopicCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetTopicCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.TopicCodeableConcept) {
		return nil, false
	}
	return o.TopicCodeableConcept, true
}

// HasTopicCodeableConcept returns a boolean if a field has been set.
func (o *ContractTerm) HasTopicCodeableConcept() bool {
	if o != nil && !IsNil(o.TopicCodeableConcept) {
		return true
	}

	return false
}

// SetTopicCodeableConcept gets a reference to the given CodeableConcept and assigns it to the TopicCodeableConcept field.
func (o *ContractTerm) SetTopicCodeableConcept(v CodeableConcept) {
	o.TopicCodeableConcept = &v
}

// GetTopicReference returns the TopicReference field value if set, zero value otherwise.
func (o *ContractTerm) GetTopicReference() Reference {
	if o == nil || IsNil(o.TopicReference) {
		var ret Reference
		return ret
	}
	return *o.TopicReference
}

// GetTopicReferenceOk returns a tuple with the TopicReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetTopicReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.TopicReference) {
		return nil, false
	}
	return o.TopicReference, true
}

// HasTopicReference returns a boolean if a field has been set.
func (o *ContractTerm) HasTopicReference() bool {
	if o != nil && !IsNil(o.TopicReference) {
		return true
	}

	return false
}

// SetTopicReference gets a reference to the given Reference and assigns it to the TopicReference field.
func (o *ContractTerm) SetTopicReference(v Reference) {
	o.TopicReference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContractTerm) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContractTerm) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *ContractTerm) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ContractTerm) GetSubType() CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetSubTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ContractTerm) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given CodeableConcept and assigns it to the SubType field.
func (o *ContractTerm) SetSubType(v CodeableConcept) {
	o.SubType = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ContractTerm) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ContractTerm) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ContractTerm) SetText(v string) {
	o.Text = &v
}

// GetSecurityLabel returns the SecurityLabel field value if set, zero value otherwise.
func (o *ContractTerm) GetSecurityLabel() []ContractSecurityLabel {
	if o == nil || IsNil(o.SecurityLabel) {
		var ret []ContractSecurityLabel
		return ret
	}
	return o.SecurityLabel
}

// GetSecurityLabelOk returns a tuple with the SecurityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetSecurityLabelOk() ([]ContractSecurityLabel, bool) {
	if o == nil || IsNil(o.SecurityLabel) {
		return nil, false
	}
	return o.SecurityLabel, true
}

// HasSecurityLabel returns a boolean if a field has been set.
func (o *ContractTerm) HasSecurityLabel() bool {
	if o != nil && !IsNil(o.SecurityLabel) {
		return true
	}

	return false
}

// SetSecurityLabel gets a reference to the given []ContractSecurityLabel and assigns it to the SecurityLabel field.
func (o *ContractTerm) SetSecurityLabel(v []ContractSecurityLabel) {
	o.SecurityLabel = v
}

// GetOffer returns the Offer field value
func (o *ContractTerm) GetOffer() ContractOffer {
	if o == nil {
		var ret ContractOffer
		return ret
	}

	return o.Offer
}

// GetOfferOk returns a tuple with the Offer field value
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetOfferOk() (*ContractOffer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offer, true
}

// SetOffer sets field value
func (o *ContractTerm) SetOffer(v ContractOffer) {
	o.Offer = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *ContractTerm) GetAsset() []ContractAsset {
	if o == nil || IsNil(o.Asset) {
		var ret []ContractAsset
		return ret
	}
	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetAssetOk() ([]ContractAsset, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *ContractTerm) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given []ContractAsset and assigns it to the Asset field.
func (o *ContractTerm) SetAsset(v []ContractAsset) {
	o.Asset = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ContractTerm) GetAction() []ContractAction {
	if o == nil || IsNil(o.Action) {
		var ret []ContractAction
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetActionOk() ([]ContractAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ContractTerm) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []ContractAction and assigns it to the Action field.
func (o *ContractTerm) SetAction(v []ContractAction) {
	o.Action = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ContractTerm) GetGroup() []ContractTerm {
	if o == nil || IsNil(o.Group) {
		var ret []ContractTerm
		return ret
	}
	return o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractTerm) GetGroupOk() ([]ContractTerm, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ContractTerm) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given []ContractTerm and assigns it to the Group field.
func (o *ContractTerm) SetGroup(v []ContractTerm) {
	o.Group = v
}

func (o ContractTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Issued) {
		toSerialize["issued"] = o.Issued
	}
	if !IsNil(o.Applies) {
		toSerialize["applies"] = o.Applies
	}
	if !IsNil(o.TopicCodeableConcept) {
		toSerialize["topicCodeableConcept"] = o.TopicCodeableConcept
	}
	if !IsNil(o.TopicReference) {
		toSerialize["topicReference"] = o.TopicReference
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.SecurityLabel) {
		toSerialize["securityLabel"] = o.SecurityLabel
	}
	toSerialize["offer"] = o.Offer
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

func (o *ContractTerm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractTerm := _ContractTerm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractTerm)

	if err != nil {
		return err
	}

	*o = ContractTerm(varContractTerm)

	return err
}

type NullableContractTerm struct {
	value *ContractTerm
	isSet bool
}

func (v NullableContractTerm) Get() *ContractTerm {
	return v.value
}

func (v *NullableContractTerm) Set(val *ContractTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableContractTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableContractTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractTerm(val *ContractTerm) *NullableContractTerm {
	return &NullableContractTerm{value: val, isSet: true}
}

func (v NullableContractTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


