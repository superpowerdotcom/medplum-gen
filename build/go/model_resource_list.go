/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// ResourceList - struct for ResourceList
type ResourceList struct {
	AccessPolicy *AccessPolicy
	Account *Account
	ActivityDefinition *ActivityDefinition
	AdverseEvent *AdverseEvent
	Agent *Agent
	AllergyIntolerance *AllergyIntolerance
	Appointment *Appointment
	AppointmentResponse *AppointmentResponse
	AsyncJob *AsyncJob
	AuditEvent *AuditEvent
	Basic *Basic
	Binary *Binary
	BiologicallyDerivedProduct *BiologicallyDerivedProduct
	BodyStructure *BodyStructure
	Bot *Bot
	BulkDataExport *BulkDataExport
	Bundle *Bundle
	CapabilityStatement *CapabilityStatement
	CarePlan *CarePlan
	CareTeam *CareTeam
	CatalogEntry *CatalogEntry
	ChargeItem *ChargeItem
	ChargeItemDefinition *ChargeItemDefinition
	Claim *Claim
	ClaimResponse *ClaimResponse
	ClientApplication *ClientApplication
	ClinicalImpression *ClinicalImpression
	CodeSystem *CodeSystem
	Communication *Communication
	CommunicationRequest *CommunicationRequest
	CompartmentDefinition *CompartmentDefinition
	Composition *Composition
	ConceptMap *ConceptMap
	Condition *Condition
	Consent *Consent
	Contract *Contract
	Coverage *Coverage
	CoverageEligibilityRequest *CoverageEligibilityRequest
	CoverageEligibilityResponse *CoverageEligibilityResponse
	DetectedIssue *DetectedIssue
	Device *Device
	DeviceDefinition *DeviceDefinition
	DeviceMetric *DeviceMetric
	DeviceRequest *DeviceRequest
	DeviceUseStatement *DeviceUseStatement
	DiagnosticReport *DiagnosticReport
	DocumentManifest *DocumentManifest
	DocumentReference *DocumentReference
	DomainConfiguration *DomainConfiguration
	EffectEvidenceSynthesis *EffectEvidenceSynthesis
	Encounter *Encounter
	Endpoint *Endpoint
	EnrollmentRequest *EnrollmentRequest
	EnrollmentResponse *EnrollmentResponse
	EpisodeOfCare *EpisodeOfCare
	EventDefinition *EventDefinition
	Evidence *Evidence
	EvidenceVariable *EvidenceVariable
	ExampleScenario *ExampleScenario
	ExplanationOfBenefit *ExplanationOfBenefit
	FamilyMemberHistory *FamilyMemberHistory
	Flag *Flag
	Goal *Goal
	GraphDefinition *GraphDefinition
	Group *Group
	GuidanceResponse *GuidanceResponse
	HealthcareService *HealthcareService
	IdentityProvider *IdentityProvider
	ImagingStudy *ImagingStudy
	Immunization *Immunization
	ImmunizationEvaluation *ImmunizationEvaluation
	ImmunizationRecommendation *ImmunizationRecommendation
	ImplementationGuide *ImplementationGuide
	InsurancePlan *InsurancePlan
	Invoice *Invoice
	JsonWebKey *JsonWebKey
	Library *Library
	Linkage *Linkage
	List *List
	Location *Location
	Login *Login
	Measure *Measure
	MeasureReport *MeasureReport
	Media *Media
	Medication *Medication
	MedicationAdministration *MedicationAdministration
	MedicationDispense *MedicationDispense
	MedicationKnowledge *MedicationKnowledge
	MedicationRequest *MedicationRequest
	MedicationStatement *MedicationStatement
	MedicinalProduct *MedicinalProduct
	MedicinalProductAuthorization *MedicinalProductAuthorization
	MedicinalProductContraindication *MedicinalProductContraindication
	MedicinalProductIndication *MedicinalProductIndication
	MedicinalProductIngredient *MedicinalProductIngredient
	MedicinalProductInteraction *MedicinalProductInteraction
	MedicinalProductManufactured *MedicinalProductManufactured
	MedicinalProductPackaged *MedicinalProductPackaged
	MedicinalProductPharmaceutical *MedicinalProductPharmaceutical
	MedicinalProductUndesirableEffect *MedicinalProductUndesirableEffect
	MessageDefinition *MessageDefinition
	MessageHeader *MessageHeader
	MolecularSequence *MolecularSequence
	NamingSystem *NamingSystem
	NutritionOrder *NutritionOrder
	Observation *Observation
	ObservationDefinition *ObservationDefinition
	OperationDefinition *OperationDefinition
	OperationOutcome *OperationOutcome
	Organization *Organization
	OrganizationAffiliation *OrganizationAffiliation
	Parameters *Parameters
	PasswordChangeRequest *PasswordChangeRequest
	Patient *Patient
	PaymentNotice *PaymentNotice
	PaymentReconciliation *PaymentReconciliation
	Person *Person
	PlanDefinition *PlanDefinition
	Practitioner *Practitioner
	PractitionerRole *PractitionerRole
	Procedure *Procedure
	Project *Project
	ProjectMembership *ProjectMembership
	Provenance *Provenance
	Questionnaire *Questionnaire
	QuestionnaireResponse *QuestionnaireResponse
	RelatedPerson *RelatedPerson
	RequestGroup *RequestGroup
	ResearchDefinition *ResearchDefinition
	ResearchElementDefinition *ResearchElementDefinition
	ResearchStudy *ResearchStudy
	ResearchSubject *ResearchSubject
	RiskAssessment *RiskAssessment
	RiskEvidenceSynthesis *RiskEvidenceSynthesis
	Schedule *Schedule
	SearchParameter *SearchParameter
	ServiceRequest *ServiceRequest
	Slot *Slot
	SmartAppLaunch *SmartAppLaunch
	Specimen *Specimen
	SpecimenDefinition *SpecimenDefinition
	StructureDefinition *StructureDefinition
	StructureMap *StructureMap
	Subscription *Subscription
	Substance *Substance
	SubstanceNucleicAcid *SubstanceNucleicAcid
	SubstancePolymer *SubstancePolymer
	SubstanceProtein *SubstanceProtein
	SubstanceReferenceInformation *SubstanceReferenceInformation
	SubstanceSourceMaterial *SubstanceSourceMaterial
	SubstanceSpecification *SubstanceSpecification
	SupplyDelivery *SupplyDelivery
	SupplyRequest *SupplyRequest
	Task *Task
	TerminologyCapabilities *TerminologyCapabilities
	TestReport *TestReport
	TestScript *TestScript
	User *User
	UserConfiguration *UserConfiguration
	UserSecurityRequest *UserSecurityRequest
	ValueSet *ValueSet
	VerificationResult *VerificationResult
	VisionPrescription *VisionPrescription
}

// AccessPolicyAsResourceList is a convenience function that returns AccessPolicy wrapped in ResourceList
func AccessPolicyAsResourceList(v *AccessPolicy) ResourceList {
	return ResourceList{
		AccessPolicy: v,
	}
}

// AccountAsResourceList is a convenience function that returns Account wrapped in ResourceList
func AccountAsResourceList(v *Account) ResourceList {
	return ResourceList{
		Account: v,
	}
}

// ActivityDefinitionAsResourceList is a convenience function that returns ActivityDefinition wrapped in ResourceList
func ActivityDefinitionAsResourceList(v *ActivityDefinition) ResourceList {
	return ResourceList{
		ActivityDefinition: v,
	}
}

// AdverseEventAsResourceList is a convenience function that returns AdverseEvent wrapped in ResourceList
func AdverseEventAsResourceList(v *AdverseEvent) ResourceList {
	return ResourceList{
		AdverseEvent: v,
	}
}

// AgentAsResourceList is a convenience function that returns Agent wrapped in ResourceList
func AgentAsResourceList(v *Agent) ResourceList {
	return ResourceList{
		Agent: v,
	}
}

// AllergyIntoleranceAsResourceList is a convenience function that returns AllergyIntolerance wrapped in ResourceList
func AllergyIntoleranceAsResourceList(v *AllergyIntolerance) ResourceList {
	return ResourceList{
		AllergyIntolerance: v,
	}
}

// AppointmentAsResourceList is a convenience function that returns Appointment wrapped in ResourceList
func AppointmentAsResourceList(v *Appointment) ResourceList {
	return ResourceList{
		Appointment: v,
	}
}

// AppointmentResponseAsResourceList is a convenience function that returns AppointmentResponse wrapped in ResourceList
func AppointmentResponseAsResourceList(v *AppointmentResponse) ResourceList {
	return ResourceList{
		AppointmentResponse: v,
	}
}

// AsyncJobAsResourceList is a convenience function that returns AsyncJob wrapped in ResourceList
func AsyncJobAsResourceList(v *AsyncJob) ResourceList {
	return ResourceList{
		AsyncJob: v,
	}
}

// AuditEventAsResourceList is a convenience function that returns AuditEvent wrapped in ResourceList
func AuditEventAsResourceList(v *AuditEvent) ResourceList {
	return ResourceList{
		AuditEvent: v,
	}
}

// BasicAsResourceList is a convenience function that returns Basic wrapped in ResourceList
func BasicAsResourceList(v *Basic) ResourceList {
	return ResourceList{
		Basic: v,
	}
}

// BinaryAsResourceList is a convenience function that returns Binary wrapped in ResourceList
func BinaryAsResourceList(v *Binary) ResourceList {
	return ResourceList{
		Binary: v,
	}
}

// BiologicallyDerivedProductAsResourceList is a convenience function that returns BiologicallyDerivedProduct wrapped in ResourceList
func BiologicallyDerivedProductAsResourceList(v *BiologicallyDerivedProduct) ResourceList {
	return ResourceList{
		BiologicallyDerivedProduct: v,
	}
}

// BodyStructureAsResourceList is a convenience function that returns BodyStructure wrapped in ResourceList
func BodyStructureAsResourceList(v *BodyStructure) ResourceList {
	return ResourceList{
		BodyStructure: v,
	}
}

// BotAsResourceList is a convenience function that returns Bot wrapped in ResourceList
func BotAsResourceList(v *Bot) ResourceList {
	return ResourceList{
		Bot: v,
	}
}

// BulkDataExportAsResourceList is a convenience function that returns BulkDataExport wrapped in ResourceList
func BulkDataExportAsResourceList(v *BulkDataExport) ResourceList {
	return ResourceList{
		BulkDataExport: v,
	}
}

// BundleAsResourceList is a convenience function that returns Bundle wrapped in ResourceList
func BundleAsResourceList(v *Bundle) ResourceList {
	return ResourceList{
		Bundle: v,
	}
}

// CapabilityStatementAsResourceList is a convenience function that returns CapabilityStatement wrapped in ResourceList
func CapabilityStatementAsResourceList(v *CapabilityStatement) ResourceList {
	return ResourceList{
		CapabilityStatement: v,
	}
}

// CarePlanAsResourceList is a convenience function that returns CarePlan wrapped in ResourceList
func CarePlanAsResourceList(v *CarePlan) ResourceList {
	return ResourceList{
		CarePlan: v,
	}
}

// CareTeamAsResourceList is a convenience function that returns CareTeam wrapped in ResourceList
func CareTeamAsResourceList(v *CareTeam) ResourceList {
	return ResourceList{
		CareTeam: v,
	}
}

// CatalogEntryAsResourceList is a convenience function that returns CatalogEntry wrapped in ResourceList
func CatalogEntryAsResourceList(v *CatalogEntry) ResourceList {
	return ResourceList{
		CatalogEntry: v,
	}
}

// ChargeItemAsResourceList is a convenience function that returns ChargeItem wrapped in ResourceList
func ChargeItemAsResourceList(v *ChargeItem) ResourceList {
	return ResourceList{
		ChargeItem: v,
	}
}

// ChargeItemDefinitionAsResourceList is a convenience function that returns ChargeItemDefinition wrapped in ResourceList
func ChargeItemDefinitionAsResourceList(v *ChargeItemDefinition) ResourceList {
	return ResourceList{
		ChargeItemDefinition: v,
	}
}

// ClaimAsResourceList is a convenience function that returns Claim wrapped in ResourceList
func ClaimAsResourceList(v *Claim) ResourceList {
	return ResourceList{
		Claim: v,
	}
}

// ClaimResponseAsResourceList is a convenience function that returns ClaimResponse wrapped in ResourceList
func ClaimResponseAsResourceList(v *ClaimResponse) ResourceList {
	return ResourceList{
		ClaimResponse: v,
	}
}

// ClientApplicationAsResourceList is a convenience function that returns ClientApplication wrapped in ResourceList
func ClientApplicationAsResourceList(v *ClientApplication) ResourceList {
	return ResourceList{
		ClientApplication: v,
	}
}

// ClinicalImpressionAsResourceList is a convenience function that returns ClinicalImpression wrapped in ResourceList
func ClinicalImpressionAsResourceList(v *ClinicalImpression) ResourceList {
	return ResourceList{
		ClinicalImpression: v,
	}
}

// CodeSystemAsResourceList is a convenience function that returns CodeSystem wrapped in ResourceList
func CodeSystemAsResourceList(v *CodeSystem) ResourceList {
	return ResourceList{
		CodeSystem: v,
	}
}

// CommunicationAsResourceList is a convenience function that returns Communication wrapped in ResourceList
func CommunicationAsResourceList(v *Communication) ResourceList {
	return ResourceList{
		Communication: v,
	}
}

// CommunicationRequestAsResourceList is a convenience function that returns CommunicationRequest wrapped in ResourceList
func CommunicationRequestAsResourceList(v *CommunicationRequest) ResourceList {
	return ResourceList{
		CommunicationRequest: v,
	}
}

// CompartmentDefinitionAsResourceList is a convenience function that returns CompartmentDefinition wrapped in ResourceList
func CompartmentDefinitionAsResourceList(v *CompartmentDefinition) ResourceList {
	return ResourceList{
		CompartmentDefinition: v,
	}
}

// CompositionAsResourceList is a convenience function that returns Composition wrapped in ResourceList
func CompositionAsResourceList(v *Composition) ResourceList {
	return ResourceList{
		Composition: v,
	}
}

// ConceptMapAsResourceList is a convenience function that returns ConceptMap wrapped in ResourceList
func ConceptMapAsResourceList(v *ConceptMap) ResourceList {
	return ResourceList{
		ConceptMap: v,
	}
}

// ConditionAsResourceList is a convenience function that returns Condition wrapped in ResourceList
func ConditionAsResourceList(v *Condition) ResourceList {
	return ResourceList{
		Condition: v,
	}
}

// ConsentAsResourceList is a convenience function that returns Consent wrapped in ResourceList
func ConsentAsResourceList(v *Consent) ResourceList {
	return ResourceList{
		Consent: v,
	}
}

// ContractAsResourceList is a convenience function that returns Contract wrapped in ResourceList
func ContractAsResourceList(v *Contract) ResourceList {
	return ResourceList{
		Contract: v,
	}
}

// CoverageAsResourceList is a convenience function that returns Coverage wrapped in ResourceList
func CoverageAsResourceList(v *Coverage) ResourceList {
	return ResourceList{
		Coverage: v,
	}
}

// CoverageEligibilityRequestAsResourceList is a convenience function that returns CoverageEligibilityRequest wrapped in ResourceList
func CoverageEligibilityRequestAsResourceList(v *CoverageEligibilityRequest) ResourceList {
	return ResourceList{
		CoverageEligibilityRequest: v,
	}
}

// CoverageEligibilityResponseAsResourceList is a convenience function that returns CoverageEligibilityResponse wrapped in ResourceList
func CoverageEligibilityResponseAsResourceList(v *CoverageEligibilityResponse) ResourceList {
	return ResourceList{
		CoverageEligibilityResponse: v,
	}
}

// DetectedIssueAsResourceList is a convenience function that returns DetectedIssue wrapped in ResourceList
func DetectedIssueAsResourceList(v *DetectedIssue) ResourceList {
	return ResourceList{
		DetectedIssue: v,
	}
}

// DeviceAsResourceList is a convenience function that returns Device wrapped in ResourceList
func DeviceAsResourceList(v *Device) ResourceList {
	return ResourceList{
		Device: v,
	}
}

// DeviceDefinitionAsResourceList is a convenience function that returns DeviceDefinition wrapped in ResourceList
func DeviceDefinitionAsResourceList(v *DeviceDefinition) ResourceList {
	return ResourceList{
		DeviceDefinition: v,
	}
}

// DeviceMetricAsResourceList is a convenience function that returns DeviceMetric wrapped in ResourceList
func DeviceMetricAsResourceList(v *DeviceMetric) ResourceList {
	return ResourceList{
		DeviceMetric: v,
	}
}

// DeviceRequestAsResourceList is a convenience function that returns DeviceRequest wrapped in ResourceList
func DeviceRequestAsResourceList(v *DeviceRequest) ResourceList {
	return ResourceList{
		DeviceRequest: v,
	}
}

// DeviceUseStatementAsResourceList is a convenience function that returns DeviceUseStatement wrapped in ResourceList
func DeviceUseStatementAsResourceList(v *DeviceUseStatement) ResourceList {
	return ResourceList{
		DeviceUseStatement: v,
	}
}

// DiagnosticReportAsResourceList is a convenience function that returns DiagnosticReport wrapped in ResourceList
func DiagnosticReportAsResourceList(v *DiagnosticReport) ResourceList {
	return ResourceList{
		DiagnosticReport: v,
	}
}

// DocumentManifestAsResourceList is a convenience function that returns DocumentManifest wrapped in ResourceList
func DocumentManifestAsResourceList(v *DocumentManifest) ResourceList {
	return ResourceList{
		DocumentManifest: v,
	}
}

// DocumentReferenceAsResourceList is a convenience function that returns DocumentReference wrapped in ResourceList
func DocumentReferenceAsResourceList(v *DocumentReference) ResourceList {
	return ResourceList{
		DocumentReference: v,
	}
}

// DomainConfigurationAsResourceList is a convenience function that returns DomainConfiguration wrapped in ResourceList
func DomainConfigurationAsResourceList(v *DomainConfiguration) ResourceList {
	return ResourceList{
		DomainConfiguration: v,
	}
}

// EffectEvidenceSynthesisAsResourceList is a convenience function that returns EffectEvidenceSynthesis wrapped in ResourceList
func EffectEvidenceSynthesisAsResourceList(v *EffectEvidenceSynthesis) ResourceList {
	return ResourceList{
		EffectEvidenceSynthesis: v,
	}
}

// EncounterAsResourceList is a convenience function that returns Encounter wrapped in ResourceList
func EncounterAsResourceList(v *Encounter) ResourceList {
	return ResourceList{
		Encounter: v,
	}
}

// EndpointAsResourceList is a convenience function that returns Endpoint wrapped in ResourceList
func EndpointAsResourceList(v *Endpoint) ResourceList {
	return ResourceList{
		Endpoint: v,
	}
}

// EnrollmentRequestAsResourceList is a convenience function that returns EnrollmentRequest wrapped in ResourceList
func EnrollmentRequestAsResourceList(v *EnrollmentRequest) ResourceList {
	return ResourceList{
		EnrollmentRequest: v,
	}
}

// EnrollmentResponseAsResourceList is a convenience function that returns EnrollmentResponse wrapped in ResourceList
func EnrollmentResponseAsResourceList(v *EnrollmentResponse) ResourceList {
	return ResourceList{
		EnrollmentResponse: v,
	}
}

// EpisodeOfCareAsResourceList is a convenience function that returns EpisodeOfCare wrapped in ResourceList
func EpisodeOfCareAsResourceList(v *EpisodeOfCare) ResourceList {
	return ResourceList{
		EpisodeOfCare: v,
	}
}

// EventDefinitionAsResourceList is a convenience function that returns EventDefinition wrapped in ResourceList
func EventDefinitionAsResourceList(v *EventDefinition) ResourceList {
	return ResourceList{
		EventDefinition: v,
	}
}

// EvidenceAsResourceList is a convenience function that returns Evidence wrapped in ResourceList
func EvidenceAsResourceList(v *Evidence) ResourceList {
	return ResourceList{
		Evidence: v,
	}
}

// EvidenceVariableAsResourceList is a convenience function that returns EvidenceVariable wrapped in ResourceList
func EvidenceVariableAsResourceList(v *EvidenceVariable) ResourceList {
	return ResourceList{
		EvidenceVariable: v,
	}
}

// ExampleScenarioAsResourceList is a convenience function that returns ExampleScenario wrapped in ResourceList
func ExampleScenarioAsResourceList(v *ExampleScenario) ResourceList {
	return ResourceList{
		ExampleScenario: v,
	}
}

// ExplanationOfBenefitAsResourceList is a convenience function that returns ExplanationOfBenefit wrapped in ResourceList
func ExplanationOfBenefitAsResourceList(v *ExplanationOfBenefit) ResourceList {
	return ResourceList{
		ExplanationOfBenefit: v,
	}
}

// FamilyMemberHistoryAsResourceList is a convenience function that returns FamilyMemberHistory wrapped in ResourceList
func FamilyMemberHistoryAsResourceList(v *FamilyMemberHistory) ResourceList {
	return ResourceList{
		FamilyMemberHistory: v,
	}
}

// FlagAsResourceList is a convenience function that returns Flag wrapped in ResourceList
func FlagAsResourceList(v *Flag) ResourceList {
	return ResourceList{
		Flag: v,
	}
}

// GoalAsResourceList is a convenience function that returns Goal wrapped in ResourceList
func GoalAsResourceList(v *Goal) ResourceList {
	return ResourceList{
		Goal: v,
	}
}

// GraphDefinitionAsResourceList is a convenience function that returns GraphDefinition wrapped in ResourceList
func GraphDefinitionAsResourceList(v *GraphDefinition) ResourceList {
	return ResourceList{
		GraphDefinition: v,
	}
}

// GroupAsResourceList is a convenience function that returns Group wrapped in ResourceList
func GroupAsResourceList(v *Group) ResourceList {
	return ResourceList{
		Group: v,
	}
}

// GuidanceResponseAsResourceList is a convenience function that returns GuidanceResponse wrapped in ResourceList
func GuidanceResponseAsResourceList(v *GuidanceResponse) ResourceList {
	return ResourceList{
		GuidanceResponse: v,
	}
}

// HealthcareServiceAsResourceList is a convenience function that returns HealthcareService wrapped in ResourceList
func HealthcareServiceAsResourceList(v *HealthcareService) ResourceList {
	return ResourceList{
		HealthcareService: v,
	}
}

// IdentityProviderAsResourceList is a convenience function that returns IdentityProvider wrapped in ResourceList
func IdentityProviderAsResourceList(v *IdentityProvider) ResourceList {
	return ResourceList{
		IdentityProvider: v,
	}
}

// ImagingStudyAsResourceList is a convenience function that returns ImagingStudy wrapped in ResourceList
func ImagingStudyAsResourceList(v *ImagingStudy) ResourceList {
	return ResourceList{
		ImagingStudy: v,
	}
}

// ImmunizationAsResourceList is a convenience function that returns Immunization wrapped in ResourceList
func ImmunizationAsResourceList(v *Immunization) ResourceList {
	return ResourceList{
		Immunization: v,
	}
}

// ImmunizationEvaluationAsResourceList is a convenience function that returns ImmunizationEvaluation wrapped in ResourceList
func ImmunizationEvaluationAsResourceList(v *ImmunizationEvaluation) ResourceList {
	return ResourceList{
		ImmunizationEvaluation: v,
	}
}

// ImmunizationRecommendationAsResourceList is a convenience function that returns ImmunizationRecommendation wrapped in ResourceList
func ImmunizationRecommendationAsResourceList(v *ImmunizationRecommendation) ResourceList {
	return ResourceList{
		ImmunizationRecommendation: v,
	}
}

// ImplementationGuideAsResourceList is a convenience function that returns ImplementationGuide wrapped in ResourceList
func ImplementationGuideAsResourceList(v *ImplementationGuide) ResourceList {
	return ResourceList{
		ImplementationGuide: v,
	}
}

// InsurancePlanAsResourceList is a convenience function that returns InsurancePlan wrapped in ResourceList
func InsurancePlanAsResourceList(v *InsurancePlan) ResourceList {
	return ResourceList{
		InsurancePlan: v,
	}
}

// InvoiceAsResourceList is a convenience function that returns Invoice wrapped in ResourceList
func InvoiceAsResourceList(v *Invoice) ResourceList {
	return ResourceList{
		Invoice: v,
	}
}

// JsonWebKeyAsResourceList is a convenience function that returns JsonWebKey wrapped in ResourceList
func JsonWebKeyAsResourceList(v *JsonWebKey) ResourceList {
	return ResourceList{
		JsonWebKey: v,
	}
}

// LibraryAsResourceList is a convenience function that returns Library wrapped in ResourceList
func LibraryAsResourceList(v *Library) ResourceList {
	return ResourceList{
		Library: v,
	}
}

// LinkageAsResourceList is a convenience function that returns Linkage wrapped in ResourceList
func LinkageAsResourceList(v *Linkage) ResourceList {
	return ResourceList{
		Linkage: v,
	}
}

// ListAsResourceList is a convenience function that returns List wrapped in ResourceList
func ListAsResourceList(v *List) ResourceList {
	return ResourceList{
		List: v,
	}
}

// LocationAsResourceList is a convenience function that returns Location wrapped in ResourceList
func LocationAsResourceList(v *Location) ResourceList {
	return ResourceList{
		Location: v,
	}
}

// LoginAsResourceList is a convenience function that returns Login wrapped in ResourceList
func LoginAsResourceList(v *Login) ResourceList {
	return ResourceList{
		Login: v,
	}
}

// MeasureAsResourceList is a convenience function that returns Measure wrapped in ResourceList
func MeasureAsResourceList(v *Measure) ResourceList {
	return ResourceList{
		Measure: v,
	}
}

// MeasureReportAsResourceList is a convenience function that returns MeasureReport wrapped in ResourceList
func MeasureReportAsResourceList(v *MeasureReport) ResourceList {
	return ResourceList{
		MeasureReport: v,
	}
}

// MediaAsResourceList is a convenience function that returns Media wrapped in ResourceList
func MediaAsResourceList(v *Media) ResourceList {
	return ResourceList{
		Media: v,
	}
}

// MedicationAsResourceList is a convenience function that returns Medication wrapped in ResourceList
func MedicationAsResourceList(v *Medication) ResourceList {
	return ResourceList{
		Medication: v,
	}
}

// MedicationAdministrationAsResourceList is a convenience function that returns MedicationAdministration wrapped in ResourceList
func MedicationAdministrationAsResourceList(v *MedicationAdministration) ResourceList {
	return ResourceList{
		MedicationAdministration: v,
	}
}

// MedicationDispenseAsResourceList is a convenience function that returns MedicationDispense wrapped in ResourceList
func MedicationDispenseAsResourceList(v *MedicationDispense) ResourceList {
	return ResourceList{
		MedicationDispense: v,
	}
}

// MedicationKnowledgeAsResourceList is a convenience function that returns MedicationKnowledge wrapped in ResourceList
func MedicationKnowledgeAsResourceList(v *MedicationKnowledge) ResourceList {
	return ResourceList{
		MedicationKnowledge: v,
	}
}

// MedicationRequestAsResourceList is a convenience function that returns MedicationRequest wrapped in ResourceList
func MedicationRequestAsResourceList(v *MedicationRequest) ResourceList {
	return ResourceList{
		MedicationRequest: v,
	}
}

// MedicationStatementAsResourceList is a convenience function that returns MedicationStatement wrapped in ResourceList
func MedicationStatementAsResourceList(v *MedicationStatement) ResourceList {
	return ResourceList{
		MedicationStatement: v,
	}
}

// MedicinalProductAsResourceList is a convenience function that returns MedicinalProduct wrapped in ResourceList
func MedicinalProductAsResourceList(v *MedicinalProduct) ResourceList {
	return ResourceList{
		MedicinalProduct: v,
	}
}

// MedicinalProductAuthorizationAsResourceList is a convenience function that returns MedicinalProductAuthorization wrapped in ResourceList
func MedicinalProductAuthorizationAsResourceList(v *MedicinalProductAuthorization) ResourceList {
	return ResourceList{
		MedicinalProductAuthorization: v,
	}
}

// MedicinalProductContraindicationAsResourceList is a convenience function that returns MedicinalProductContraindication wrapped in ResourceList
func MedicinalProductContraindicationAsResourceList(v *MedicinalProductContraindication) ResourceList {
	return ResourceList{
		MedicinalProductContraindication: v,
	}
}

// MedicinalProductIndicationAsResourceList is a convenience function that returns MedicinalProductIndication wrapped in ResourceList
func MedicinalProductIndicationAsResourceList(v *MedicinalProductIndication) ResourceList {
	return ResourceList{
		MedicinalProductIndication: v,
	}
}

// MedicinalProductIngredientAsResourceList is a convenience function that returns MedicinalProductIngredient wrapped in ResourceList
func MedicinalProductIngredientAsResourceList(v *MedicinalProductIngredient) ResourceList {
	return ResourceList{
		MedicinalProductIngredient: v,
	}
}

// MedicinalProductInteractionAsResourceList is a convenience function that returns MedicinalProductInteraction wrapped in ResourceList
func MedicinalProductInteractionAsResourceList(v *MedicinalProductInteraction) ResourceList {
	return ResourceList{
		MedicinalProductInteraction: v,
	}
}

// MedicinalProductManufacturedAsResourceList is a convenience function that returns MedicinalProductManufactured wrapped in ResourceList
func MedicinalProductManufacturedAsResourceList(v *MedicinalProductManufactured) ResourceList {
	return ResourceList{
		MedicinalProductManufactured: v,
	}
}

// MedicinalProductPackagedAsResourceList is a convenience function that returns MedicinalProductPackaged wrapped in ResourceList
func MedicinalProductPackagedAsResourceList(v *MedicinalProductPackaged) ResourceList {
	return ResourceList{
		MedicinalProductPackaged: v,
	}
}

// MedicinalProductPharmaceuticalAsResourceList is a convenience function that returns MedicinalProductPharmaceutical wrapped in ResourceList
func MedicinalProductPharmaceuticalAsResourceList(v *MedicinalProductPharmaceutical) ResourceList {
	return ResourceList{
		MedicinalProductPharmaceutical: v,
	}
}

// MedicinalProductUndesirableEffectAsResourceList is a convenience function that returns MedicinalProductUndesirableEffect wrapped in ResourceList
func MedicinalProductUndesirableEffectAsResourceList(v *MedicinalProductUndesirableEffect) ResourceList {
	return ResourceList{
		MedicinalProductUndesirableEffect: v,
	}
}

// MessageDefinitionAsResourceList is a convenience function that returns MessageDefinition wrapped in ResourceList
func MessageDefinitionAsResourceList(v *MessageDefinition) ResourceList {
	return ResourceList{
		MessageDefinition: v,
	}
}

// MessageHeaderAsResourceList is a convenience function that returns MessageHeader wrapped in ResourceList
func MessageHeaderAsResourceList(v *MessageHeader) ResourceList {
	return ResourceList{
		MessageHeader: v,
	}
}

// MolecularSequenceAsResourceList is a convenience function that returns MolecularSequence wrapped in ResourceList
func MolecularSequenceAsResourceList(v *MolecularSequence) ResourceList {
	return ResourceList{
		MolecularSequence: v,
	}
}

// NamingSystemAsResourceList is a convenience function that returns NamingSystem wrapped in ResourceList
func NamingSystemAsResourceList(v *NamingSystem) ResourceList {
	return ResourceList{
		NamingSystem: v,
	}
}

// NutritionOrderAsResourceList is a convenience function that returns NutritionOrder wrapped in ResourceList
func NutritionOrderAsResourceList(v *NutritionOrder) ResourceList {
	return ResourceList{
		NutritionOrder: v,
	}
}

// ObservationAsResourceList is a convenience function that returns Observation wrapped in ResourceList
func ObservationAsResourceList(v *Observation) ResourceList {
	return ResourceList{
		Observation: v,
	}
}

// ObservationDefinitionAsResourceList is a convenience function that returns ObservationDefinition wrapped in ResourceList
func ObservationDefinitionAsResourceList(v *ObservationDefinition) ResourceList {
	return ResourceList{
		ObservationDefinition: v,
	}
}

// OperationDefinitionAsResourceList is a convenience function that returns OperationDefinition wrapped in ResourceList
func OperationDefinitionAsResourceList(v *OperationDefinition) ResourceList {
	return ResourceList{
		OperationDefinition: v,
	}
}

// OperationOutcomeAsResourceList is a convenience function that returns OperationOutcome wrapped in ResourceList
func OperationOutcomeAsResourceList(v *OperationOutcome) ResourceList {
	return ResourceList{
		OperationOutcome: v,
	}
}

// OrganizationAsResourceList is a convenience function that returns Organization wrapped in ResourceList
func OrganizationAsResourceList(v *Organization) ResourceList {
	return ResourceList{
		Organization: v,
	}
}

// OrganizationAffiliationAsResourceList is a convenience function that returns OrganizationAffiliation wrapped in ResourceList
func OrganizationAffiliationAsResourceList(v *OrganizationAffiliation) ResourceList {
	return ResourceList{
		OrganizationAffiliation: v,
	}
}

// ParametersAsResourceList is a convenience function that returns Parameters wrapped in ResourceList
func ParametersAsResourceList(v *Parameters) ResourceList {
	return ResourceList{
		Parameters: v,
	}
}

// PasswordChangeRequestAsResourceList is a convenience function that returns PasswordChangeRequest wrapped in ResourceList
func PasswordChangeRequestAsResourceList(v *PasswordChangeRequest) ResourceList {
	return ResourceList{
		PasswordChangeRequest: v,
	}
}

// PatientAsResourceList is a convenience function that returns Patient wrapped in ResourceList
func PatientAsResourceList(v *Patient) ResourceList {
	return ResourceList{
		Patient: v,
	}
}

// PaymentNoticeAsResourceList is a convenience function that returns PaymentNotice wrapped in ResourceList
func PaymentNoticeAsResourceList(v *PaymentNotice) ResourceList {
	return ResourceList{
		PaymentNotice: v,
	}
}

// PaymentReconciliationAsResourceList is a convenience function that returns PaymentReconciliation wrapped in ResourceList
func PaymentReconciliationAsResourceList(v *PaymentReconciliation) ResourceList {
	return ResourceList{
		PaymentReconciliation: v,
	}
}

// PersonAsResourceList is a convenience function that returns Person wrapped in ResourceList
func PersonAsResourceList(v *Person) ResourceList {
	return ResourceList{
		Person: v,
	}
}

// PlanDefinitionAsResourceList is a convenience function that returns PlanDefinition wrapped in ResourceList
func PlanDefinitionAsResourceList(v *PlanDefinition) ResourceList {
	return ResourceList{
		PlanDefinition: v,
	}
}

// PractitionerAsResourceList is a convenience function that returns Practitioner wrapped in ResourceList
func PractitionerAsResourceList(v *Practitioner) ResourceList {
	return ResourceList{
		Practitioner: v,
	}
}

// PractitionerRoleAsResourceList is a convenience function that returns PractitionerRole wrapped in ResourceList
func PractitionerRoleAsResourceList(v *PractitionerRole) ResourceList {
	return ResourceList{
		PractitionerRole: v,
	}
}

// ProcedureAsResourceList is a convenience function that returns Procedure wrapped in ResourceList
func ProcedureAsResourceList(v *Procedure) ResourceList {
	return ResourceList{
		Procedure: v,
	}
}

// ProjectAsResourceList is a convenience function that returns Project wrapped in ResourceList
func ProjectAsResourceList(v *Project) ResourceList {
	return ResourceList{
		Project: v,
	}
}

// ProjectMembershipAsResourceList is a convenience function that returns ProjectMembership wrapped in ResourceList
func ProjectMembershipAsResourceList(v *ProjectMembership) ResourceList {
	return ResourceList{
		ProjectMembership: v,
	}
}

// ProvenanceAsResourceList is a convenience function that returns Provenance wrapped in ResourceList
func ProvenanceAsResourceList(v *Provenance) ResourceList {
	return ResourceList{
		Provenance: v,
	}
}

// QuestionnaireAsResourceList is a convenience function that returns Questionnaire wrapped in ResourceList
func QuestionnaireAsResourceList(v *Questionnaire) ResourceList {
	return ResourceList{
		Questionnaire: v,
	}
}

// QuestionnaireResponseAsResourceList is a convenience function that returns QuestionnaireResponse wrapped in ResourceList
func QuestionnaireResponseAsResourceList(v *QuestionnaireResponse) ResourceList {
	return ResourceList{
		QuestionnaireResponse: v,
	}
}

// RelatedPersonAsResourceList is a convenience function that returns RelatedPerson wrapped in ResourceList
func RelatedPersonAsResourceList(v *RelatedPerson) ResourceList {
	return ResourceList{
		RelatedPerson: v,
	}
}

// RequestGroupAsResourceList is a convenience function that returns RequestGroup wrapped in ResourceList
func RequestGroupAsResourceList(v *RequestGroup) ResourceList {
	return ResourceList{
		RequestGroup: v,
	}
}

// ResearchDefinitionAsResourceList is a convenience function that returns ResearchDefinition wrapped in ResourceList
func ResearchDefinitionAsResourceList(v *ResearchDefinition) ResourceList {
	return ResourceList{
		ResearchDefinition: v,
	}
}

// ResearchElementDefinitionAsResourceList is a convenience function that returns ResearchElementDefinition wrapped in ResourceList
func ResearchElementDefinitionAsResourceList(v *ResearchElementDefinition) ResourceList {
	return ResourceList{
		ResearchElementDefinition: v,
	}
}

// ResearchStudyAsResourceList is a convenience function that returns ResearchStudy wrapped in ResourceList
func ResearchStudyAsResourceList(v *ResearchStudy) ResourceList {
	return ResourceList{
		ResearchStudy: v,
	}
}

// ResearchSubjectAsResourceList is a convenience function that returns ResearchSubject wrapped in ResourceList
func ResearchSubjectAsResourceList(v *ResearchSubject) ResourceList {
	return ResourceList{
		ResearchSubject: v,
	}
}

// RiskAssessmentAsResourceList is a convenience function that returns RiskAssessment wrapped in ResourceList
func RiskAssessmentAsResourceList(v *RiskAssessment) ResourceList {
	return ResourceList{
		RiskAssessment: v,
	}
}

// RiskEvidenceSynthesisAsResourceList is a convenience function that returns RiskEvidenceSynthesis wrapped in ResourceList
func RiskEvidenceSynthesisAsResourceList(v *RiskEvidenceSynthesis) ResourceList {
	return ResourceList{
		RiskEvidenceSynthesis: v,
	}
}

// ScheduleAsResourceList is a convenience function that returns Schedule wrapped in ResourceList
func ScheduleAsResourceList(v *Schedule) ResourceList {
	return ResourceList{
		Schedule: v,
	}
}

// SearchParameterAsResourceList is a convenience function that returns SearchParameter wrapped in ResourceList
func SearchParameterAsResourceList(v *SearchParameter) ResourceList {
	return ResourceList{
		SearchParameter: v,
	}
}

// ServiceRequestAsResourceList is a convenience function that returns ServiceRequest wrapped in ResourceList
func ServiceRequestAsResourceList(v *ServiceRequest) ResourceList {
	return ResourceList{
		ServiceRequest: v,
	}
}

// SlotAsResourceList is a convenience function that returns Slot wrapped in ResourceList
func SlotAsResourceList(v *Slot) ResourceList {
	return ResourceList{
		Slot: v,
	}
}

// SmartAppLaunchAsResourceList is a convenience function that returns SmartAppLaunch wrapped in ResourceList
func SmartAppLaunchAsResourceList(v *SmartAppLaunch) ResourceList {
	return ResourceList{
		SmartAppLaunch: v,
	}
}

// SpecimenAsResourceList is a convenience function that returns Specimen wrapped in ResourceList
func SpecimenAsResourceList(v *Specimen) ResourceList {
	return ResourceList{
		Specimen: v,
	}
}

// SpecimenDefinitionAsResourceList is a convenience function that returns SpecimenDefinition wrapped in ResourceList
func SpecimenDefinitionAsResourceList(v *SpecimenDefinition) ResourceList {
	return ResourceList{
		SpecimenDefinition: v,
	}
}

// StructureDefinitionAsResourceList is a convenience function that returns StructureDefinition wrapped in ResourceList
func StructureDefinitionAsResourceList(v *StructureDefinition) ResourceList {
	return ResourceList{
		StructureDefinition: v,
	}
}

// StructureMapAsResourceList is a convenience function that returns StructureMap wrapped in ResourceList
func StructureMapAsResourceList(v *StructureMap) ResourceList {
	return ResourceList{
		StructureMap: v,
	}
}

// SubscriptionAsResourceList is a convenience function that returns Subscription wrapped in ResourceList
func SubscriptionAsResourceList(v *Subscription) ResourceList {
	return ResourceList{
		Subscription: v,
	}
}

// SubstanceAsResourceList is a convenience function that returns Substance wrapped in ResourceList
func SubstanceAsResourceList(v *Substance) ResourceList {
	return ResourceList{
		Substance: v,
	}
}

// SubstanceNucleicAcidAsResourceList is a convenience function that returns SubstanceNucleicAcid wrapped in ResourceList
func SubstanceNucleicAcidAsResourceList(v *SubstanceNucleicAcid) ResourceList {
	return ResourceList{
		SubstanceNucleicAcid: v,
	}
}

// SubstancePolymerAsResourceList is a convenience function that returns SubstancePolymer wrapped in ResourceList
func SubstancePolymerAsResourceList(v *SubstancePolymer) ResourceList {
	return ResourceList{
		SubstancePolymer: v,
	}
}

// SubstanceProteinAsResourceList is a convenience function that returns SubstanceProtein wrapped in ResourceList
func SubstanceProteinAsResourceList(v *SubstanceProtein) ResourceList {
	return ResourceList{
		SubstanceProtein: v,
	}
}

// SubstanceReferenceInformationAsResourceList is a convenience function that returns SubstanceReferenceInformation wrapped in ResourceList
func SubstanceReferenceInformationAsResourceList(v *SubstanceReferenceInformation) ResourceList {
	return ResourceList{
		SubstanceReferenceInformation: v,
	}
}

// SubstanceSourceMaterialAsResourceList is a convenience function that returns SubstanceSourceMaterial wrapped in ResourceList
func SubstanceSourceMaterialAsResourceList(v *SubstanceSourceMaterial) ResourceList {
	return ResourceList{
		SubstanceSourceMaterial: v,
	}
}

// SubstanceSpecificationAsResourceList is a convenience function that returns SubstanceSpecification wrapped in ResourceList
func SubstanceSpecificationAsResourceList(v *SubstanceSpecification) ResourceList {
	return ResourceList{
		SubstanceSpecification: v,
	}
}

// SupplyDeliveryAsResourceList is a convenience function that returns SupplyDelivery wrapped in ResourceList
func SupplyDeliveryAsResourceList(v *SupplyDelivery) ResourceList {
	return ResourceList{
		SupplyDelivery: v,
	}
}

// SupplyRequestAsResourceList is a convenience function that returns SupplyRequest wrapped in ResourceList
func SupplyRequestAsResourceList(v *SupplyRequest) ResourceList {
	return ResourceList{
		SupplyRequest: v,
	}
}

// TaskAsResourceList is a convenience function that returns Task wrapped in ResourceList
func TaskAsResourceList(v *Task) ResourceList {
	return ResourceList{
		Task: v,
	}
}

// TerminologyCapabilitiesAsResourceList is a convenience function that returns TerminologyCapabilities wrapped in ResourceList
func TerminologyCapabilitiesAsResourceList(v *TerminologyCapabilities) ResourceList {
	return ResourceList{
		TerminologyCapabilities: v,
	}
}

// TestReportAsResourceList is a convenience function that returns TestReport wrapped in ResourceList
func TestReportAsResourceList(v *TestReport) ResourceList {
	return ResourceList{
		TestReport: v,
	}
}

// TestScriptAsResourceList is a convenience function that returns TestScript wrapped in ResourceList
func TestScriptAsResourceList(v *TestScript) ResourceList {
	return ResourceList{
		TestScript: v,
	}
}

// UserAsResourceList is a convenience function that returns User wrapped in ResourceList
func UserAsResourceList(v *User) ResourceList {
	return ResourceList{
		User: v,
	}
}

// UserConfigurationAsResourceList is a convenience function that returns UserConfiguration wrapped in ResourceList
func UserConfigurationAsResourceList(v *UserConfiguration) ResourceList {
	return ResourceList{
		UserConfiguration: v,
	}
}

// UserSecurityRequestAsResourceList is a convenience function that returns UserSecurityRequest wrapped in ResourceList
func UserSecurityRequestAsResourceList(v *UserSecurityRequest) ResourceList {
	return ResourceList{
		UserSecurityRequest: v,
	}
}

// ValueSetAsResourceList is a convenience function that returns ValueSet wrapped in ResourceList
func ValueSetAsResourceList(v *ValueSet) ResourceList {
	return ResourceList{
		ValueSet: v,
	}
}

// VerificationResultAsResourceList is a convenience function that returns VerificationResult wrapped in ResourceList
func VerificationResultAsResourceList(v *VerificationResult) ResourceList {
	return ResourceList{
		VerificationResult: v,
	}
}

// VisionPrescriptionAsResourceList is a convenience function that returns VisionPrescription wrapped in ResourceList
func VisionPrescriptionAsResourceList(v *VisionPrescription) ResourceList {
	return ResourceList{
		VisionPrescription: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResourceList) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessPolicy
	err = newStrictDecoder(data).Decode(&dst.AccessPolicy)
	if err == nil {
		jsonAccessPolicy, _ := json.Marshal(dst.AccessPolicy)
		if string(jsonAccessPolicy) == "{}" { // empty struct
			dst.AccessPolicy = nil
		} else {
			match++
		}
	} else {
		dst.AccessPolicy = nil
	}

	// try to unmarshal data into Account
	err = newStrictDecoder(data).Decode(&dst.Account)
	if err == nil {
		jsonAccount, _ := json.Marshal(dst.Account)
		if string(jsonAccount) == "{}" { // empty struct
			dst.Account = nil
		} else {
			match++
		}
	} else {
		dst.Account = nil
	}

	// try to unmarshal data into ActivityDefinition
	err = newStrictDecoder(data).Decode(&dst.ActivityDefinition)
	if err == nil {
		jsonActivityDefinition, _ := json.Marshal(dst.ActivityDefinition)
		if string(jsonActivityDefinition) == "{}" { // empty struct
			dst.ActivityDefinition = nil
		} else {
			match++
		}
	} else {
		dst.ActivityDefinition = nil
	}

	// try to unmarshal data into AdverseEvent
	err = newStrictDecoder(data).Decode(&dst.AdverseEvent)
	if err == nil {
		jsonAdverseEvent, _ := json.Marshal(dst.AdverseEvent)
		if string(jsonAdverseEvent) == "{}" { // empty struct
			dst.AdverseEvent = nil
		} else {
			match++
		}
	} else {
		dst.AdverseEvent = nil
	}

	// try to unmarshal data into Agent
	err = newStrictDecoder(data).Decode(&dst.Agent)
	if err == nil {
		jsonAgent, _ := json.Marshal(dst.Agent)
		if string(jsonAgent) == "{}" { // empty struct
			dst.Agent = nil
		} else {
			match++
		}
	} else {
		dst.Agent = nil
	}

	// try to unmarshal data into AllergyIntolerance
	err = newStrictDecoder(data).Decode(&dst.AllergyIntolerance)
	if err == nil {
		jsonAllergyIntolerance, _ := json.Marshal(dst.AllergyIntolerance)
		if string(jsonAllergyIntolerance) == "{}" { // empty struct
			dst.AllergyIntolerance = nil
		} else {
			match++
		}
	} else {
		dst.AllergyIntolerance = nil
	}

	// try to unmarshal data into Appointment
	err = newStrictDecoder(data).Decode(&dst.Appointment)
	if err == nil {
		jsonAppointment, _ := json.Marshal(dst.Appointment)
		if string(jsonAppointment) == "{}" { // empty struct
			dst.Appointment = nil
		} else {
			match++
		}
	} else {
		dst.Appointment = nil
	}

	// try to unmarshal data into AppointmentResponse
	err = newStrictDecoder(data).Decode(&dst.AppointmentResponse)
	if err == nil {
		jsonAppointmentResponse, _ := json.Marshal(dst.AppointmentResponse)
		if string(jsonAppointmentResponse) == "{}" { // empty struct
			dst.AppointmentResponse = nil
		} else {
			match++
		}
	} else {
		dst.AppointmentResponse = nil
	}

	// try to unmarshal data into AsyncJob
	err = newStrictDecoder(data).Decode(&dst.AsyncJob)
	if err == nil {
		jsonAsyncJob, _ := json.Marshal(dst.AsyncJob)
		if string(jsonAsyncJob) == "{}" { // empty struct
			dst.AsyncJob = nil
		} else {
			match++
		}
	} else {
		dst.AsyncJob = nil
	}

	// try to unmarshal data into AuditEvent
	err = newStrictDecoder(data).Decode(&dst.AuditEvent)
	if err == nil {
		jsonAuditEvent, _ := json.Marshal(dst.AuditEvent)
		if string(jsonAuditEvent) == "{}" { // empty struct
			dst.AuditEvent = nil
		} else {
			match++
		}
	} else {
		dst.AuditEvent = nil
	}

	// try to unmarshal data into Basic
	err = newStrictDecoder(data).Decode(&dst.Basic)
	if err == nil {
		jsonBasic, _ := json.Marshal(dst.Basic)
		if string(jsonBasic) == "{}" { // empty struct
			dst.Basic = nil
		} else {
			match++
		}
	} else {
		dst.Basic = nil
	}

	// try to unmarshal data into Binary
	err = newStrictDecoder(data).Decode(&dst.Binary)
	if err == nil {
		jsonBinary, _ := json.Marshal(dst.Binary)
		if string(jsonBinary) == "{}" { // empty struct
			dst.Binary = nil
		} else {
			match++
		}
	} else {
		dst.Binary = nil
	}

	// try to unmarshal data into BiologicallyDerivedProduct
	err = newStrictDecoder(data).Decode(&dst.BiologicallyDerivedProduct)
	if err == nil {
		jsonBiologicallyDerivedProduct, _ := json.Marshal(dst.BiologicallyDerivedProduct)
		if string(jsonBiologicallyDerivedProduct) == "{}" { // empty struct
			dst.BiologicallyDerivedProduct = nil
		} else {
			match++
		}
	} else {
		dst.BiologicallyDerivedProduct = nil
	}

	// try to unmarshal data into BodyStructure
	err = newStrictDecoder(data).Decode(&dst.BodyStructure)
	if err == nil {
		jsonBodyStructure, _ := json.Marshal(dst.BodyStructure)
		if string(jsonBodyStructure) == "{}" { // empty struct
			dst.BodyStructure = nil
		} else {
			match++
		}
	} else {
		dst.BodyStructure = nil
	}

	// try to unmarshal data into Bot
	err = newStrictDecoder(data).Decode(&dst.Bot)
	if err == nil {
		jsonBot, _ := json.Marshal(dst.Bot)
		if string(jsonBot) == "{}" { // empty struct
			dst.Bot = nil
		} else {
			match++
		}
	} else {
		dst.Bot = nil
	}

	// try to unmarshal data into BulkDataExport
	err = newStrictDecoder(data).Decode(&dst.BulkDataExport)
	if err == nil {
		jsonBulkDataExport, _ := json.Marshal(dst.BulkDataExport)
		if string(jsonBulkDataExport) == "{}" { // empty struct
			dst.BulkDataExport = nil
		} else {
			match++
		}
	} else {
		dst.BulkDataExport = nil
	}

	// try to unmarshal data into Bundle
	err = newStrictDecoder(data).Decode(&dst.Bundle)
	if err == nil {
		jsonBundle, _ := json.Marshal(dst.Bundle)
		if string(jsonBundle) == "{}" { // empty struct
			dst.Bundle = nil
		} else {
			match++
		}
	} else {
		dst.Bundle = nil
	}

	// try to unmarshal data into CapabilityStatement
	err = newStrictDecoder(data).Decode(&dst.CapabilityStatement)
	if err == nil {
		jsonCapabilityStatement, _ := json.Marshal(dst.CapabilityStatement)
		if string(jsonCapabilityStatement) == "{}" { // empty struct
			dst.CapabilityStatement = nil
		} else {
			match++
		}
	} else {
		dst.CapabilityStatement = nil
	}

	// try to unmarshal data into CarePlan
	err = newStrictDecoder(data).Decode(&dst.CarePlan)
	if err == nil {
		jsonCarePlan, _ := json.Marshal(dst.CarePlan)
		if string(jsonCarePlan) == "{}" { // empty struct
			dst.CarePlan = nil
		} else {
			match++
		}
	} else {
		dst.CarePlan = nil
	}

	// try to unmarshal data into CareTeam
	err = newStrictDecoder(data).Decode(&dst.CareTeam)
	if err == nil {
		jsonCareTeam, _ := json.Marshal(dst.CareTeam)
		if string(jsonCareTeam) == "{}" { // empty struct
			dst.CareTeam = nil
		} else {
			match++
		}
	} else {
		dst.CareTeam = nil
	}

	// try to unmarshal data into CatalogEntry
	err = newStrictDecoder(data).Decode(&dst.CatalogEntry)
	if err == nil {
		jsonCatalogEntry, _ := json.Marshal(dst.CatalogEntry)
		if string(jsonCatalogEntry) == "{}" { // empty struct
			dst.CatalogEntry = nil
		} else {
			match++
		}
	} else {
		dst.CatalogEntry = nil
	}

	// try to unmarshal data into ChargeItem
	err = newStrictDecoder(data).Decode(&dst.ChargeItem)
	if err == nil {
		jsonChargeItem, _ := json.Marshal(dst.ChargeItem)
		if string(jsonChargeItem) == "{}" { // empty struct
			dst.ChargeItem = nil
		} else {
			match++
		}
	} else {
		dst.ChargeItem = nil
	}

	// try to unmarshal data into ChargeItemDefinition
	err = newStrictDecoder(data).Decode(&dst.ChargeItemDefinition)
	if err == nil {
		jsonChargeItemDefinition, _ := json.Marshal(dst.ChargeItemDefinition)
		if string(jsonChargeItemDefinition) == "{}" { // empty struct
			dst.ChargeItemDefinition = nil
		} else {
			match++
		}
	} else {
		dst.ChargeItemDefinition = nil
	}

	// try to unmarshal data into Claim
	err = newStrictDecoder(data).Decode(&dst.Claim)
	if err == nil {
		jsonClaim, _ := json.Marshal(dst.Claim)
		if string(jsonClaim) == "{}" { // empty struct
			dst.Claim = nil
		} else {
			match++
		}
	} else {
		dst.Claim = nil
	}

	// try to unmarshal data into ClaimResponse
	err = newStrictDecoder(data).Decode(&dst.ClaimResponse)
	if err == nil {
		jsonClaimResponse, _ := json.Marshal(dst.ClaimResponse)
		if string(jsonClaimResponse) == "{}" { // empty struct
			dst.ClaimResponse = nil
		} else {
			match++
		}
	} else {
		dst.ClaimResponse = nil
	}

	// try to unmarshal data into ClientApplication
	err = newStrictDecoder(data).Decode(&dst.ClientApplication)
	if err == nil {
		jsonClientApplication, _ := json.Marshal(dst.ClientApplication)
		if string(jsonClientApplication) == "{}" { // empty struct
			dst.ClientApplication = nil
		} else {
			match++
		}
	} else {
		dst.ClientApplication = nil
	}

	// try to unmarshal data into ClinicalImpression
	err = newStrictDecoder(data).Decode(&dst.ClinicalImpression)
	if err == nil {
		jsonClinicalImpression, _ := json.Marshal(dst.ClinicalImpression)
		if string(jsonClinicalImpression) == "{}" { // empty struct
			dst.ClinicalImpression = nil
		} else {
			match++
		}
	} else {
		dst.ClinicalImpression = nil
	}

	// try to unmarshal data into CodeSystem
	err = newStrictDecoder(data).Decode(&dst.CodeSystem)
	if err == nil {
		jsonCodeSystem, _ := json.Marshal(dst.CodeSystem)
		if string(jsonCodeSystem) == "{}" { // empty struct
			dst.CodeSystem = nil
		} else {
			match++
		}
	} else {
		dst.CodeSystem = nil
	}

	// try to unmarshal data into Communication
	err = newStrictDecoder(data).Decode(&dst.Communication)
	if err == nil {
		jsonCommunication, _ := json.Marshal(dst.Communication)
		if string(jsonCommunication) == "{}" { // empty struct
			dst.Communication = nil
		} else {
			match++
		}
	} else {
		dst.Communication = nil
	}

	// try to unmarshal data into CommunicationRequest
	err = newStrictDecoder(data).Decode(&dst.CommunicationRequest)
	if err == nil {
		jsonCommunicationRequest, _ := json.Marshal(dst.CommunicationRequest)
		if string(jsonCommunicationRequest) == "{}" { // empty struct
			dst.CommunicationRequest = nil
		} else {
			match++
		}
	} else {
		dst.CommunicationRequest = nil
	}

	// try to unmarshal data into CompartmentDefinition
	err = newStrictDecoder(data).Decode(&dst.CompartmentDefinition)
	if err == nil {
		jsonCompartmentDefinition, _ := json.Marshal(dst.CompartmentDefinition)
		if string(jsonCompartmentDefinition) == "{}" { // empty struct
			dst.CompartmentDefinition = nil
		} else {
			match++
		}
	} else {
		dst.CompartmentDefinition = nil
	}

	// try to unmarshal data into Composition
	err = newStrictDecoder(data).Decode(&dst.Composition)
	if err == nil {
		jsonComposition, _ := json.Marshal(dst.Composition)
		if string(jsonComposition) == "{}" { // empty struct
			dst.Composition = nil
		} else {
			match++
		}
	} else {
		dst.Composition = nil
	}

	// try to unmarshal data into ConceptMap
	err = newStrictDecoder(data).Decode(&dst.ConceptMap)
	if err == nil {
		jsonConceptMap, _ := json.Marshal(dst.ConceptMap)
		if string(jsonConceptMap) == "{}" { // empty struct
			dst.ConceptMap = nil
		} else {
			match++
		}
	} else {
		dst.ConceptMap = nil
	}

	// try to unmarshal data into Condition
	err = newStrictDecoder(data).Decode(&dst.Condition)
	if err == nil {
		jsonCondition, _ := json.Marshal(dst.Condition)
		if string(jsonCondition) == "{}" { // empty struct
			dst.Condition = nil
		} else {
			match++
		}
	} else {
		dst.Condition = nil
	}

	// try to unmarshal data into Consent
	err = newStrictDecoder(data).Decode(&dst.Consent)
	if err == nil {
		jsonConsent, _ := json.Marshal(dst.Consent)
		if string(jsonConsent) == "{}" { // empty struct
			dst.Consent = nil
		} else {
			match++
		}
	} else {
		dst.Consent = nil
	}

	// try to unmarshal data into Contract
	err = newStrictDecoder(data).Decode(&dst.Contract)
	if err == nil {
		jsonContract, _ := json.Marshal(dst.Contract)
		if string(jsonContract) == "{}" { // empty struct
			dst.Contract = nil
		} else {
			match++
		}
	} else {
		dst.Contract = nil
	}

	// try to unmarshal data into Coverage
	err = newStrictDecoder(data).Decode(&dst.Coverage)
	if err == nil {
		jsonCoverage, _ := json.Marshal(dst.Coverage)
		if string(jsonCoverage) == "{}" { // empty struct
			dst.Coverage = nil
		} else {
			match++
		}
	} else {
		dst.Coverage = nil
	}

	// try to unmarshal data into CoverageEligibilityRequest
	err = newStrictDecoder(data).Decode(&dst.CoverageEligibilityRequest)
	if err == nil {
		jsonCoverageEligibilityRequest, _ := json.Marshal(dst.CoverageEligibilityRequest)
		if string(jsonCoverageEligibilityRequest) == "{}" { // empty struct
			dst.CoverageEligibilityRequest = nil
		} else {
			match++
		}
	} else {
		dst.CoverageEligibilityRequest = nil
	}

	// try to unmarshal data into CoverageEligibilityResponse
	err = newStrictDecoder(data).Decode(&dst.CoverageEligibilityResponse)
	if err == nil {
		jsonCoverageEligibilityResponse, _ := json.Marshal(dst.CoverageEligibilityResponse)
		if string(jsonCoverageEligibilityResponse) == "{}" { // empty struct
			dst.CoverageEligibilityResponse = nil
		} else {
			match++
		}
	} else {
		dst.CoverageEligibilityResponse = nil
	}

	// try to unmarshal data into DetectedIssue
	err = newStrictDecoder(data).Decode(&dst.DetectedIssue)
	if err == nil {
		jsonDetectedIssue, _ := json.Marshal(dst.DetectedIssue)
		if string(jsonDetectedIssue) == "{}" { // empty struct
			dst.DetectedIssue = nil
		} else {
			match++
		}
	} else {
		dst.DetectedIssue = nil
	}

	// try to unmarshal data into Device
	err = newStrictDecoder(data).Decode(&dst.Device)
	if err == nil {
		jsonDevice, _ := json.Marshal(dst.Device)
		if string(jsonDevice) == "{}" { // empty struct
			dst.Device = nil
		} else {
			match++
		}
	} else {
		dst.Device = nil
	}

	// try to unmarshal data into DeviceDefinition
	err = newStrictDecoder(data).Decode(&dst.DeviceDefinition)
	if err == nil {
		jsonDeviceDefinition, _ := json.Marshal(dst.DeviceDefinition)
		if string(jsonDeviceDefinition) == "{}" { // empty struct
			dst.DeviceDefinition = nil
		} else {
			match++
		}
	} else {
		dst.DeviceDefinition = nil
	}

	// try to unmarshal data into DeviceMetric
	err = newStrictDecoder(data).Decode(&dst.DeviceMetric)
	if err == nil {
		jsonDeviceMetric, _ := json.Marshal(dst.DeviceMetric)
		if string(jsonDeviceMetric) == "{}" { // empty struct
			dst.DeviceMetric = nil
		} else {
			match++
		}
	} else {
		dst.DeviceMetric = nil
	}

	// try to unmarshal data into DeviceRequest
	err = newStrictDecoder(data).Decode(&dst.DeviceRequest)
	if err == nil {
		jsonDeviceRequest, _ := json.Marshal(dst.DeviceRequest)
		if string(jsonDeviceRequest) == "{}" { // empty struct
			dst.DeviceRequest = nil
		} else {
			match++
		}
	} else {
		dst.DeviceRequest = nil
	}

	// try to unmarshal data into DeviceUseStatement
	err = newStrictDecoder(data).Decode(&dst.DeviceUseStatement)
	if err == nil {
		jsonDeviceUseStatement, _ := json.Marshal(dst.DeviceUseStatement)
		if string(jsonDeviceUseStatement) == "{}" { // empty struct
			dst.DeviceUseStatement = nil
		} else {
			match++
		}
	} else {
		dst.DeviceUseStatement = nil
	}

	// try to unmarshal data into DiagnosticReport
	err = newStrictDecoder(data).Decode(&dst.DiagnosticReport)
	if err == nil {
		jsonDiagnosticReport, _ := json.Marshal(dst.DiagnosticReport)
		if string(jsonDiagnosticReport) == "{}" { // empty struct
			dst.DiagnosticReport = nil
		} else {
			match++
		}
	} else {
		dst.DiagnosticReport = nil
	}

	// try to unmarshal data into DocumentManifest
	err = newStrictDecoder(data).Decode(&dst.DocumentManifest)
	if err == nil {
		jsonDocumentManifest, _ := json.Marshal(dst.DocumentManifest)
		if string(jsonDocumentManifest) == "{}" { // empty struct
			dst.DocumentManifest = nil
		} else {
			match++
		}
	} else {
		dst.DocumentManifest = nil
	}

	// try to unmarshal data into DocumentReference
	err = newStrictDecoder(data).Decode(&dst.DocumentReference)
	if err == nil {
		jsonDocumentReference, _ := json.Marshal(dst.DocumentReference)
		if string(jsonDocumentReference) == "{}" { // empty struct
			dst.DocumentReference = nil
		} else {
			match++
		}
	} else {
		dst.DocumentReference = nil
	}

	// try to unmarshal data into DomainConfiguration
	err = newStrictDecoder(data).Decode(&dst.DomainConfiguration)
	if err == nil {
		jsonDomainConfiguration, _ := json.Marshal(dst.DomainConfiguration)
		if string(jsonDomainConfiguration) == "{}" { // empty struct
			dst.DomainConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.DomainConfiguration = nil
	}

	// try to unmarshal data into EffectEvidenceSynthesis
	err = newStrictDecoder(data).Decode(&dst.EffectEvidenceSynthesis)
	if err == nil {
		jsonEffectEvidenceSynthesis, _ := json.Marshal(dst.EffectEvidenceSynthesis)
		if string(jsonEffectEvidenceSynthesis) == "{}" { // empty struct
			dst.EffectEvidenceSynthesis = nil
		} else {
			match++
		}
	} else {
		dst.EffectEvidenceSynthesis = nil
	}

	// try to unmarshal data into Encounter
	err = newStrictDecoder(data).Decode(&dst.Encounter)
	if err == nil {
		jsonEncounter, _ := json.Marshal(dst.Encounter)
		if string(jsonEncounter) == "{}" { // empty struct
			dst.Encounter = nil
		} else {
			match++
		}
	} else {
		dst.Encounter = nil
	}

	// try to unmarshal data into Endpoint
	err = newStrictDecoder(data).Decode(&dst.Endpoint)
	if err == nil {
		jsonEndpoint, _ := json.Marshal(dst.Endpoint)
		if string(jsonEndpoint) == "{}" { // empty struct
			dst.Endpoint = nil
		} else {
			match++
		}
	} else {
		dst.Endpoint = nil
	}

	// try to unmarshal data into EnrollmentRequest
	err = newStrictDecoder(data).Decode(&dst.EnrollmentRequest)
	if err == nil {
		jsonEnrollmentRequest, _ := json.Marshal(dst.EnrollmentRequest)
		if string(jsonEnrollmentRequest) == "{}" { // empty struct
			dst.EnrollmentRequest = nil
		} else {
			match++
		}
	} else {
		dst.EnrollmentRequest = nil
	}

	// try to unmarshal data into EnrollmentResponse
	err = newStrictDecoder(data).Decode(&dst.EnrollmentResponse)
	if err == nil {
		jsonEnrollmentResponse, _ := json.Marshal(dst.EnrollmentResponse)
		if string(jsonEnrollmentResponse) == "{}" { // empty struct
			dst.EnrollmentResponse = nil
		} else {
			match++
		}
	} else {
		dst.EnrollmentResponse = nil
	}

	// try to unmarshal data into EpisodeOfCare
	err = newStrictDecoder(data).Decode(&dst.EpisodeOfCare)
	if err == nil {
		jsonEpisodeOfCare, _ := json.Marshal(dst.EpisodeOfCare)
		if string(jsonEpisodeOfCare) == "{}" { // empty struct
			dst.EpisodeOfCare = nil
		} else {
			match++
		}
	} else {
		dst.EpisodeOfCare = nil
	}

	// try to unmarshal data into EventDefinition
	err = newStrictDecoder(data).Decode(&dst.EventDefinition)
	if err == nil {
		jsonEventDefinition, _ := json.Marshal(dst.EventDefinition)
		if string(jsonEventDefinition) == "{}" { // empty struct
			dst.EventDefinition = nil
		} else {
			match++
		}
	} else {
		dst.EventDefinition = nil
	}

	// try to unmarshal data into Evidence
	err = newStrictDecoder(data).Decode(&dst.Evidence)
	if err == nil {
		jsonEvidence, _ := json.Marshal(dst.Evidence)
		if string(jsonEvidence) == "{}" { // empty struct
			dst.Evidence = nil
		} else {
			match++
		}
	} else {
		dst.Evidence = nil
	}

	// try to unmarshal data into EvidenceVariable
	err = newStrictDecoder(data).Decode(&dst.EvidenceVariable)
	if err == nil {
		jsonEvidenceVariable, _ := json.Marshal(dst.EvidenceVariable)
		if string(jsonEvidenceVariable) == "{}" { // empty struct
			dst.EvidenceVariable = nil
		} else {
			match++
		}
	} else {
		dst.EvidenceVariable = nil
	}

	// try to unmarshal data into ExampleScenario
	err = newStrictDecoder(data).Decode(&dst.ExampleScenario)
	if err == nil {
		jsonExampleScenario, _ := json.Marshal(dst.ExampleScenario)
		if string(jsonExampleScenario) == "{}" { // empty struct
			dst.ExampleScenario = nil
		} else {
			match++
		}
	} else {
		dst.ExampleScenario = nil
	}

	// try to unmarshal data into ExplanationOfBenefit
	err = newStrictDecoder(data).Decode(&dst.ExplanationOfBenefit)
	if err == nil {
		jsonExplanationOfBenefit, _ := json.Marshal(dst.ExplanationOfBenefit)
		if string(jsonExplanationOfBenefit) == "{}" { // empty struct
			dst.ExplanationOfBenefit = nil
		} else {
			match++
		}
	} else {
		dst.ExplanationOfBenefit = nil
	}

	// try to unmarshal data into FamilyMemberHistory
	err = newStrictDecoder(data).Decode(&dst.FamilyMemberHistory)
	if err == nil {
		jsonFamilyMemberHistory, _ := json.Marshal(dst.FamilyMemberHistory)
		if string(jsonFamilyMemberHistory) == "{}" { // empty struct
			dst.FamilyMemberHistory = nil
		} else {
			match++
		}
	} else {
		dst.FamilyMemberHistory = nil
	}

	// try to unmarshal data into Flag
	err = newStrictDecoder(data).Decode(&dst.Flag)
	if err == nil {
		jsonFlag, _ := json.Marshal(dst.Flag)
		if string(jsonFlag) == "{}" { // empty struct
			dst.Flag = nil
		} else {
			match++
		}
	} else {
		dst.Flag = nil
	}

	// try to unmarshal data into Goal
	err = newStrictDecoder(data).Decode(&dst.Goal)
	if err == nil {
		jsonGoal, _ := json.Marshal(dst.Goal)
		if string(jsonGoal) == "{}" { // empty struct
			dst.Goal = nil
		} else {
			match++
		}
	} else {
		dst.Goal = nil
	}

	// try to unmarshal data into GraphDefinition
	err = newStrictDecoder(data).Decode(&dst.GraphDefinition)
	if err == nil {
		jsonGraphDefinition, _ := json.Marshal(dst.GraphDefinition)
		if string(jsonGraphDefinition) == "{}" { // empty struct
			dst.GraphDefinition = nil
		} else {
			match++
		}
	} else {
		dst.GraphDefinition = nil
	}

	// try to unmarshal data into Group
	err = newStrictDecoder(data).Decode(&dst.Group)
	if err == nil {
		jsonGroup, _ := json.Marshal(dst.Group)
		if string(jsonGroup) == "{}" { // empty struct
			dst.Group = nil
		} else {
			match++
		}
	} else {
		dst.Group = nil
	}

	// try to unmarshal data into GuidanceResponse
	err = newStrictDecoder(data).Decode(&dst.GuidanceResponse)
	if err == nil {
		jsonGuidanceResponse, _ := json.Marshal(dst.GuidanceResponse)
		if string(jsonGuidanceResponse) == "{}" { // empty struct
			dst.GuidanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.GuidanceResponse = nil
	}

	// try to unmarshal data into HealthcareService
	err = newStrictDecoder(data).Decode(&dst.HealthcareService)
	if err == nil {
		jsonHealthcareService, _ := json.Marshal(dst.HealthcareService)
		if string(jsonHealthcareService) == "{}" { // empty struct
			dst.HealthcareService = nil
		} else {
			match++
		}
	} else {
		dst.HealthcareService = nil
	}

	// try to unmarshal data into IdentityProvider
	err = newStrictDecoder(data).Decode(&dst.IdentityProvider)
	if err == nil {
		jsonIdentityProvider, _ := json.Marshal(dst.IdentityProvider)
		if string(jsonIdentityProvider) == "{}" { // empty struct
			dst.IdentityProvider = nil
		} else {
			match++
		}
	} else {
		dst.IdentityProvider = nil
	}

	// try to unmarshal data into ImagingStudy
	err = newStrictDecoder(data).Decode(&dst.ImagingStudy)
	if err == nil {
		jsonImagingStudy, _ := json.Marshal(dst.ImagingStudy)
		if string(jsonImagingStudy) == "{}" { // empty struct
			dst.ImagingStudy = nil
		} else {
			match++
		}
	} else {
		dst.ImagingStudy = nil
	}

	// try to unmarshal data into Immunization
	err = newStrictDecoder(data).Decode(&dst.Immunization)
	if err == nil {
		jsonImmunization, _ := json.Marshal(dst.Immunization)
		if string(jsonImmunization) == "{}" { // empty struct
			dst.Immunization = nil
		} else {
			match++
		}
	} else {
		dst.Immunization = nil
	}

	// try to unmarshal data into ImmunizationEvaluation
	err = newStrictDecoder(data).Decode(&dst.ImmunizationEvaluation)
	if err == nil {
		jsonImmunizationEvaluation, _ := json.Marshal(dst.ImmunizationEvaluation)
		if string(jsonImmunizationEvaluation) == "{}" { // empty struct
			dst.ImmunizationEvaluation = nil
		} else {
			match++
		}
	} else {
		dst.ImmunizationEvaluation = nil
	}

	// try to unmarshal data into ImmunizationRecommendation
	err = newStrictDecoder(data).Decode(&dst.ImmunizationRecommendation)
	if err == nil {
		jsonImmunizationRecommendation, _ := json.Marshal(dst.ImmunizationRecommendation)
		if string(jsonImmunizationRecommendation) == "{}" { // empty struct
			dst.ImmunizationRecommendation = nil
		} else {
			match++
		}
	} else {
		dst.ImmunizationRecommendation = nil
	}

	// try to unmarshal data into ImplementationGuide
	err = newStrictDecoder(data).Decode(&dst.ImplementationGuide)
	if err == nil {
		jsonImplementationGuide, _ := json.Marshal(dst.ImplementationGuide)
		if string(jsonImplementationGuide) == "{}" { // empty struct
			dst.ImplementationGuide = nil
		} else {
			match++
		}
	} else {
		dst.ImplementationGuide = nil
	}

	// try to unmarshal data into InsurancePlan
	err = newStrictDecoder(data).Decode(&dst.InsurancePlan)
	if err == nil {
		jsonInsurancePlan, _ := json.Marshal(dst.InsurancePlan)
		if string(jsonInsurancePlan) == "{}" { // empty struct
			dst.InsurancePlan = nil
		} else {
			match++
		}
	} else {
		dst.InsurancePlan = nil
	}

	// try to unmarshal data into Invoice
	err = newStrictDecoder(data).Decode(&dst.Invoice)
	if err == nil {
		jsonInvoice, _ := json.Marshal(dst.Invoice)
		if string(jsonInvoice) == "{}" { // empty struct
			dst.Invoice = nil
		} else {
			match++
		}
	} else {
		dst.Invoice = nil
	}

	// try to unmarshal data into JsonWebKey
	err = newStrictDecoder(data).Decode(&dst.JsonWebKey)
	if err == nil {
		jsonJsonWebKey, _ := json.Marshal(dst.JsonWebKey)
		if string(jsonJsonWebKey) == "{}" { // empty struct
			dst.JsonWebKey = nil
		} else {
			match++
		}
	} else {
		dst.JsonWebKey = nil
	}

	// try to unmarshal data into Library
	err = newStrictDecoder(data).Decode(&dst.Library)
	if err == nil {
		jsonLibrary, _ := json.Marshal(dst.Library)
		if string(jsonLibrary) == "{}" { // empty struct
			dst.Library = nil
		} else {
			match++
		}
	} else {
		dst.Library = nil
	}

	// try to unmarshal data into Linkage
	err = newStrictDecoder(data).Decode(&dst.Linkage)
	if err == nil {
		jsonLinkage, _ := json.Marshal(dst.Linkage)
		if string(jsonLinkage) == "{}" { // empty struct
			dst.Linkage = nil
		} else {
			match++
		}
	} else {
		dst.Linkage = nil
	}

	// try to unmarshal data into List
	err = newStrictDecoder(data).Decode(&dst.List)
	if err == nil {
		jsonList, _ := json.Marshal(dst.List)
		if string(jsonList) == "{}" { // empty struct
			dst.List = nil
		} else {
			match++
		}
	} else {
		dst.List = nil
	}

	// try to unmarshal data into Location
	err = newStrictDecoder(data).Decode(&dst.Location)
	if err == nil {
		jsonLocation, _ := json.Marshal(dst.Location)
		if string(jsonLocation) == "{}" { // empty struct
			dst.Location = nil
		} else {
			match++
		}
	} else {
		dst.Location = nil
	}

	// try to unmarshal data into Login
	err = newStrictDecoder(data).Decode(&dst.Login)
	if err == nil {
		jsonLogin, _ := json.Marshal(dst.Login)
		if string(jsonLogin) == "{}" { // empty struct
			dst.Login = nil
		} else {
			match++
		}
	} else {
		dst.Login = nil
	}

	// try to unmarshal data into Measure
	err = newStrictDecoder(data).Decode(&dst.Measure)
	if err == nil {
		jsonMeasure, _ := json.Marshal(dst.Measure)
		if string(jsonMeasure) == "{}" { // empty struct
			dst.Measure = nil
		} else {
			match++
		}
	} else {
		dst.Measure = nil
	}

	// try to unmarshal data into MeasureReport
	err = newStrictDecoder(data).Decode(&dst.MeasureReport)
	if err == nil {
		jsonMeasureReport, _ := json.Marshal(dst.MeasureReport)
		if string(jsonMeasureReport) == "{}" { // empty struct
			dst.MeasureReport = nil
		} else {
			match++
		}
	} else {
		dst.MeasureReport = nil
	}

	// try to unmarshal data into Media
	err = newStrictDecoder(data).Decode(&dst.Media)
	if err == nil {
		jsonMedia, _ := json.Marshal(dst.Media)
		if string(jsonMedia) == "{}" { // empty struct
			dst.Media = nil
		} else {
			match++
		}
	} else {
		dst.Media = nil
	}

	// try to unmarshal data into Medication
	err = newStrictDecoder(data).Decode(&dst.Medication)
	if err == nil {
		jsonMedication, _ := json.Marshal(dst.Medication)
		if string(jsonMedication) == "{}" { // empty struct
			dst.Medication = nil
		} else {
			match++
		}
	} else {
		dst.Medication = nil
	}

	// try to unmarshal data into MedicationAdministration
	err = newStrictDecoder(data).Decode(&dst.MedicationAdministration)
	if err == nil {
		jsonMedicationAdministration, _ := json.Marshal(dst.MedicationAdministration)
		if string(jsonMedicationAdministration) == "{}" { // empty struct
			dst.MedicationAdministration = nil
		} else {
			match++
		}
	} else {
		dst.MedicationAdministration = nil
	}

	// try to unmarshal data into MedicationDispense
	err = newStrictDecoder(data).Decode(&dst.MedicationDispense)
	if err == nil {
		jsonMedicationDispense, _ := json.Marshal(dst.MedicationDispense)
		if string(jsonMedicationDispense) == "{}" { // empty struct
			dst.MedicationDispense = nil
		} else {
			match++
		}
	} else {
		dst.MedicationDispense = nil
	}

	// try to unmarshal data into MedicationKnowledge
	err = newStrictDecoder(data).Decode(&dst.MedicationKnowledge)
	if err == nil {
		jsonMedicationKnowledge, _ := json.Marshal(dst.MedicationKnowledge)
		if string(jsonMedicationKnowledge) == "{}" { // empty struct
			dst.MedicationKnowledge = nil
		} else {
			match++
		}
	} else {
		dst.MedicationKnowledge = nil
	}

	// try to unmarshal data into MedicationRequest
	err = newStrictDecoder(data).Decode(&dst.MedicationRequest)
	if err == nil {
		jsonMedicationRequest, _ := json.Marshal(dst.MedicationRequest)
		if string(jsonMedicationRequest) == "{}" { // empty struct
			dst.MedicationRequest = nil
		} else {
			match++
		}
	} else {
		dst.MedicationRequest = nil
	}

	// try to unmarshal data into MedicationStatement
	err = newStrictDecoder(data).Decode(&dst.MedicationStatement)
	if err == nil {
		jsonMedicationStatement, _ := json.Marshal(dst.MedicationStatement)
		if string(jsonMedicationStatement) == "{}" { // empty struct
			dst.MedicationStatement = nil
		} else {
			match++
		}
	} else {
		dst.MedicationStatement = nil
	}

	// try to unmarshal data into MedicinalProduct
	err = newStrictDecoder(data).Decode(&dst.MedicinalProduct)
	if err == nil {
		jsonMedicinalProduct, _ := json.Marshal(dst.MedicinalProduct)
		if string(jsonMedicinalProduct) == "{}" { // empty struct
			dst.MedicinalProduct = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProduct = nil
	}

	// try to unmarshal data into MedicinalProductAuthorization
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductAuthorization)
	if err == nil {
		jsonMedicinalProductAuthorization, _ := json.Marshal(dst.MedicinalProductAuthorization)
		if string(jsonMedicinalProductAuthorization) == "{}" { // empty struct
			dst.MedicinalProductAuthorization = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductAuthorization = nil
	}

	// try to unmarshal data into MedicinalProductContraindication
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductContraindication)
	if err == nil {
		jsonMedicinalProductContraindication, _ := json.Marshal(dst.MedicinalProductContraindication)
		if string(jsonMedicinalProductContraindication) == "{}" { // empty struct
			dst.MedicinalProductContraindication = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductContraindication = nil
	}

	// try to unmarshal data into MedicinalProductIndication
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductIndication)
	if err == nil {
		jsonMedicinalProductIndication, _ := json.Marshal(dst.MedicinalProductIndication)
		if string(jsonMedicinalProductIndication) == "{}" { // empty struct
			dst.MedicinalProductIndication = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductIndication = nil
	}

	// try to unmarshal data into MedicinalProductIngredient
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductIngredient)
	if err == nil {
		jsonMedicinalProductIngredient, _ := json.Marshal(dst.MedicinalProductIngredient)
		if string(jsonMedicinalProductIngredient) == "{}" { // empty struct
			dst.MedicinalProductIngredient = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductIngredient = nil
	}

	// try to unmarshal data into MedicinalProductInteraction
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductInteraction)
	if err == nil {
		jsonMedicinalProductInteraction, _ := json.Marshal(dst.MedicinalProductInteraction)
		if string(jsonMedicinalProductInteraction) == "{}" { // empty struct
			dst.MedicinalProductInteraction = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductInteraction = nil
	}

	// try to unmarshal data into MedicinalProductManufactured
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductManufactured)
	if err == nil {
		jsonMedicinalProductManufactured, _ := json.Marshal(dst.MedicinalProductManufactured)
		if string(jsonMedicinalProductManufactured) == "{}" { // empty struct
			dst.MedicinalProductManufactured = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductManufactured = nil
	}

	// try to unmarshal data into MedicinalProductPackaged
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductPackaged)
	if err == nil {
		jsonMedicinalProductPackaged, _ := json.Marshal(dst.MedicinalProductPackaged)
		if string(jsonMedicinalProductPackaged) == "{}" { // empty struct
			dst.MedicinalProductPackaged = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductPackaged = nil
	}

	// try to unmarshal data into MedicinalProductPharmaceutical
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductPharmaceutical)
	if err == nil {
		jsonMedicinalProductPharmaceutical, _ := json.Marshal(dst.MedicinalProductPharmaceutical)
		if string(jsonMedicinalProductPharmaceutical) == "{}" { // empty struct
			dst.MedicinalProductPharmaceutical = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductPharmaceutical = nil
	}

	// try to unmarshal data into MedicinalProductUndesirableEffect
	err = newStrictDecoder(data).Decode(&dst.MedicinalProductUndesirableEffect)
	if err == nil {
		jsonMedicinalProductUndesirableEffect, _ := json.Marshal(dst.MedicinalProductUndesirableEffect)
		if string(jsonMedicinalProductUndesirableEffect) == "{}" { // empty struct
			dst.MedicinalProductUndesirableEffect = nil
		} else {
			match++
		}
	} else {
		dst.MedicinalProductUndesirableEffect = nil
	}

	// try to unmarshal data into MessageDefinition
	err = newStrictDecoder(data).Decode(&dst.MessageDefinition)
	if err == nil {
		jsonMessageDefinition, _ := json.Marshal(dst.MessageDefinition)
		if string(jsonMessageDefinition) == "{}" { // empty struct
			dst.MessageDefinition = nil
		} else {
			match++
		}
	} else {
		dst.MessageDefinition = nil
	}

	// try to unmarshal data into MessageHeader
	err = newStrictDecoder(data).Decode(&dst.MessageHeader)
	if err == nil {
		jsonMessageHeader, _ := json.Marshal(dst.MessageHeader)
		if string(jsonMessageHeader) == "{}" { // empty struct
			dst.MessageHeader = nil
		} else {
			match++
		}
	} else {
		dst.MessageHeader = nil
	}

	// try to unmarshal data into MolecularSequence
	err = newStrictDecoder(data).Decode(&dst.MolecularSequence)
	if err == nil {
		jsonMolecularSequence, _ := json.Marshal(dst.MolecularSequence)
		if string(jsonMolecularSequence) == "{}" { // empty struct
			dst.MolecularSequence = nil
		} else {
			match++
		}
	} else {
		dst.MolecularSequence = nil
	}

	// try to unmarshal data into NamingSystem
	err = newStrictDecoder(data).Decode(&dst.NamingSystem)
	if err == nil {
		jsonNamingSystem, _ := json.Marshal(dst.NamingSystem)
		if string(jsonNamingSystem) == "{}" { // empty struct
			dst.NamingSystem = nil
		} else {
			match++
		}
	} else {
		dst.NamingSystem = nil
	}

	// try to unmarshal data into NutritionOrder
	err = newStrictDecoder(data).Decode(&dst.NutritionOrder)
	if err == nil {
		jsonNutritionOrder, _ := json.Marshal(dst.NutritionOrder)
		if string(jsonNutritionOrder) == "{}" { // empty struct
			dst.NutritionOrder = nil
		} else {
			match++
		}
	} else {
		dst.NutritionOrder = nil
	}

	// try to unmarshal data into Observation
	err = newStrictDecoder(data).Decode(&dst.Observation)
	if err == nil {
		jsonObservation, _ := json.Marshal(dst.Observation)
		if string(jsonObservation) == "{}" { // empty struct
			dst.Observation = nil
		} else {
			match++
		}
	} else {
		dst.Observation = nil
	}

	// try to unmarshal data into ObservationDefinition
	err = newStrictDecoder(data).Decode(&dst.ObservationDefinition)
	if err == nil {
		jsonObservationDefinition, _ := json.Marshal(dst.ObservationDefinition)
		if string(jsonObservationDefinition) == "{}" { // empty struct
			dst.ObservationDefinition = nil
		} else {
			match++
		}
	} else {
		dst.ObservationDefinition = nil
	}

	// try to unmarshal data into OperationDefinition
	err = newStrictDecoder(data).Decode(&dst.OperationDefinition)
	if err == nil {
		jsonOperationDefinition, _ := json.Marshal(dst.OperationDefinition)
		if string(jsonOperationDefinition) == "{}" { // empty struct
			dst.OperationDefinition = nil
		} else {
			match++
		}
	} else {
		dst.OperationDefinition = nil
	}

	// try to unmarshal data into OperationOutcome
	err = newStrictDecoder(data).Decode(&dst.OperationOutcome)
	if err == nil {
		jsonOperationOutcome, _ := json.Marshal(dst.OperationOutcome)
		if string(jsonOperationOutcome) == "{}" { // empty struct
			dst.OperationOutcome = nil
		} else {
			match++
		}
	} else {
		dst.OperationOutcome = nil
	}

	// try to unmarshal data into Organization
	err = newStrictDecoder(data).Decode(&dst.Organization)
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			match++
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal data into OrganizationAffiliation
	err = newStrictDecoder(data).Decode(&dst.OrganizationAffiliation)
	if err == nil {
		jsonOrganizationAffiliation, _ := json.Marshal(dst.OrganizationAffiliation)
		if string(jsonOrganizationAffiliation) == "{}" { // empty struct
			dst.OrganizationAffiliation = nil
		} else {
			match++
		}
	} else {
		dst.OrganizationAffiliation = nil
	}

	// try to unmarshal data into Parameters
	err = newStrictDecoder(data).Decode(&dst.Parameters)
	if err == nil {
		jsonParameters, _ := json.Marshal(dst.Parameters)
		if string(jsonParameters) == "{}" { // empty struct
			dst.Parameters = nil
		} else {
			match++
		}
	} else {
		dst.Parameters = nil
	}

	// try to unmarshal data into PasswordChangeRequest
	err = newStrictDecoder(data).Decode(&dst.PasswordChangeRequest)
	if err == nil {
		jsonPasswordChangeRequest, _ := json.Marshal(dst.PasswordChangeRequest)
		if string(jsonPasswordChangeRequest) == "{}" { // empty struct
			dst.PasswordChangeRequest = nil
		} else {
			match++
		}
	} else {
		dst.PasswordChangeRequest = nil
	}

	// try to unmarshal data into Patient
	err = newStrictDecoder(data).Decode(&dst.Patient)
	if err == nil {
		jsonPatient, _ := json.Marshal(dst.Patient)
		if string(jsonPatient) == "{}" { // empty struct
			dst.Patient = nil
		} else {
			match++
		}
	} else {
		dst.Patient = nil
	}

	// try to unmarshal data into PaymentNotice
	err = newStrictDecoder(data).Decode(&dst.PaymentNotice)
	if err == nil {
		jsonPaymentNotice, _ := json.Marshal(dst.PaymentNotice)
		if string(jsonPaymentNotice) == "{}" { // empty struct
			dst.PaymentNotice = nil
		} else {
			match++
		}
	} else {
		dst.PaymentNotice = nil
	}

	// try to unmarshal data into PaymentReconciliation
	err = newStrictDecoder(data).Decode(&dst.PaymentReconciliation)
	if err == nil {
		jsonPaymentReconciliation, _ := json.Marshal(dst.PaymentReconciliation)
		if string(jsonPaymentReconciliation) == "{}" { // empty struct
			dst.PaymentReconciliation = nil
		} else {
			match++
		}
	} else {
		dst.PaymentReconciliation = nil
	}

	// try to unmarshal data into Person
	err = newStrictDecoder(data).Decode(&dst.Person)
	if err == nil {
		jsonPerson, _ := json.Marshal(dst.Person)
		if string(jsonPerson) == "{}" { // empty struct
			dst.Person = nil
		} else {
			match++
		}
	} else {
		dst.Person = nil
	}

	// try to unmarshal data into PlanDefinition
	err = newStrictDecoder(data).Decode(&dst.PlanDefinition)
	if err == nil {
		jsonPlanDefinition, _ := json.Marshal(dst.PlanDefinition)
		if string(jsonPlanDefinition) == "{}" { // empty struct
			dst.PlanDefinition = nil
		} else {
			match++
		}
	} else {
		dst.PlanDefinition = nil
	}

	// try to unmarshal data into Practitioner
	err = newStrictDecoder(data).Decode(&dst.Practitioner)
	if err == nil {
		jsonPractitioner, _ := json.Marshal(dst.Practitioner)
		if string(jsonPractitioner) == "{}" { // empty struct
			dst.Practitioner = nil
		} else {
			match++
		}
	} else {
		dst.Practitioner = nil
	}

	// try to unmarshal data into PractitionerRole
	err = newStrictDecoder(data).Decode(&dst.PractitionerRole)
	if err == nil {
		jsonPractitionerRole, _ := json.Marshal(dst.PractitionerRole)
		if string(jsonPractitionerRole) == "{}" { // empty struct
			dst.PractitionerRole = nil
		} else {
			match++
		}
	} else {
		dst.PractitionerRole = nil
	}

	// try to unmarshal data into Procedure
	err = newStrictDecoder(data).Decode(&dst.Procedure)
	if err == nil {
		jsonProcedure, _ := json.Marshal(dst.Procedure)
		if string(jsonProcedure) == "{}" { // empty struct
			dst.Procedure = nil
		} else {
			match++
		}
	} else {
		dst.Procedure = nil
	}

	// try to unmarshal data into Project
	err = newStrictDecoder(data).Decode(&dst.Project)
	if err == nil {
		jsonProject, _ := json.Marshal(dst.Project)
		if string(jsonProject) == "{}" { // empty struct
			dst.Project = nil
		} else {
			match++
		}
	} else {
		dst.Project = nil
	}

	// try to unmarshal data into ProjectMembership
	err = newStrictDecoder(data).Decode(&dst.ProjectMembership)
	if err == nil {
		jsonProjectMembership, _ := json.Marshal(dst.ProjectMembership)
		if string(jsonProjectMembership) == "{}" { // empty struct
			dst.ProjectMembership = nil
		} else {
			match++
		}
	} else {
		dst.ProjectMembership = nil
	}

	// try to unmarshal data into Provenance
	err = newStrictDecoder(data).Decode(&dst.Provenance)
	if err == nil {
		jsonProvenance, _ := json.Marshal(dst.Provenance)
		if string(jsonProvenance) == "{}" { // empty struct
			dst.Provenance = nil
		} else {
			match++
		}
	} else {
		dst.Provenance = nil
	}

	// try to unmarshal data into Questionnaire
	err = newStrictDecoder(data).Decode(&dst.Questionnaire)
	if err == nil {
		jsonQuestionnaire, _ := json.Marshal(dst.Questionnaire)
		if string(jsonQuestionnaire) == "{}" { // empty struct
			dst.Questionnaire = nil
		} else {
			match++
		}
	} else {
		dst.Questionnaire = nil
	}

	// try to unmarshal data into QuestionnaireResponse
	err = newStrictDecoder(data).Decode(&dst.QuestionnaireResponse)
	if err == nil {
		jsonQuestionnaireResponse, _ := json.Marshal(dst.QuestionnaireResponse)
		if string(jsonQuestionnaireResponse) == "{}" { // empty struct
			dst.QuestionnaireResponse = nil
		} else {
			match++
		}
	} else {
		dst.QuestionnaireResponse = nil
	}

	// try to unmarshal data into RelatedPerson
	err = newStrictDecoder(data).Decode(&dst.RelatedPerson)
	if err == nil {
		jsonRelatedPerson, _ := json.Marshal(dst.RelatedPerson)
		if string(jsonRelatedPerson) == "{}" { // empty struct
			dst.RelatedPerson = nil
		} else {
			match++
		}
	} else {
		dst.RelatedPerson = nil
	}

	// try to unmarshal data into RequestGroup
	err = newStrictDecoder(data).Decode(&dst.RequestGroup)
	if err == nil {
		jsonRequestGroup, _ := json.Marshal(dst.RequestGroup)
		if string(jsonRequestGroup) == "{}" { // empty struct
			dst.RequestGroup = nil
		} else {
			match++
		}
	} else {
		dst.RequestGroup = nil
	}

	// try to unmarshal data into ResearchDefinition
	err = newStrictDecoder(data).Decode(&dst.ResearchDefinition)
	if err == nil {
		jsonResearchDefinition, _ := json.Marshal(dst.ResearchDefinition)
		if string(jsonResearchDefinition) == "{}" { // empty struct
			dst.ResearchDefinition = nil
		} else {
			match++
		}
	} else {
		dst.ResearchDefinition = nil
	}

	// try to unmarshal data into ResearchElementDefinition
	err = newStrictDecoder(data).Decode(&dst.ResearchElementDefinition)
	if err == nil {
		jsonResearchElementDefinition, _ := json.Marshal(dst.ResearchElementDefinition)
		if string(jsonResearchElementDefinition) == "{}" { // empty struct
			dst.ResearchElementDefinition = nil
		} else {
			match++
		}
	} else {
		dst.ResearchElementDefinition = nil
	}

	// try to unmarshal data into ResearchStudy
	err = newStrictDecoder(data).Decode(&dst.ResearchStudy)
	if err == nil {
		jsonResearchStudy, _ := json.Marshal(dst.ResearchStudy)
		if string(jsonResearchStudy) == "{}" { // empty struct
			dst.ResearchStudy = nil
		} else {
			match++
		}
	} else {
		dst.ResearchStudy = nil
	}

	// try to unmarshal data into ResearchSubject
	err = newStrictDecoder(data).Decode(&dst.ResearchSubject)
	if err == nil {
		jsonResearchSubject, _ := json.Marshal(dst.ResearchSubject)
		if string(jsonResearchSubject) == "{}" { // empty struct
			dst.ResearchSubject = nil
		} else {
			match++
		}
	} else {
		dst.ResearchSubject = nil
	}

	// try to unmarshal data into RiskAssessment
	err = newStrictDecoder(data).Decode(&dst.RiskAssessment)
	if err == nil {
		jsonRiskAssessment, _ := json.Marshal(dst.RiskAssessment)
		if string(jsonRiskAssessment) == "{}" { // empty struct
			dst.RiskAssessment = nil
		} else {
			match++
		}
	} else {
		dst.RiskAssessment = nil
	}

	// try to unmarshal data into RiskEvidenceSynthesis
	err = newStrictDecoder(data).Decode(&dst.RiskEvidenceSynthesis)
	if err == nil {
		jsonRiskEvidenceSynthesis, _ := json.Marshal(dst.RiskEvidenceSynthesis)
		if string(jsonRiskEvidenceSynthesis) == "{}" { // empty struct
			dst.RiskEvidenceSynthesis = nil
		} else {
			match++
		}
	} else {
		dst.RiskEvidenceSynthesis = nil
	}

	// try to unmarshal data into Schedule
	err = newStrictDecoder(data).Decode(&dst.Schedule)
	if err == nil {
		jsonSchedule, _ := json.Marshal(dst.Schedule)
		if string(jsonSchedule) == "{}" { // empty struct
			dst.Schedule = nil
		} else {
			match++
		}
	} else {
		dst.Schedule = nil
	}

	// try to unmarshal data into SearchParameter
	err = newStrictDecoder(data).Decode(&dst.SearchParameter)
	if err == nil {
		jsonSearchParameter, _ := json.Marshal(dst.SearchParameter)
		if string(jsonSearchParameter) == "{}" { // empty struct
			dst.SearchParameter = nil
		} else {
			match++
		}
	} else {
		dst.SearchParameter = nil
	}

	// try to unmarshal data into ServiceRequest
	err = newStrictDecoder(data).Decode(&dst.ServiceRequest)
	if err == nil {
		jsonServiceRequest, _ := json.Marshal(dst.ServiceRequest)
		if string(jsonServiceRequest) == "{}" { // empty struct
			dst.ServiceRequest = nil
		} else {
			match++
		}
	} else {
		dst.ServiceRequest = nil
	}

	// try to unmarshal data into Slot
	err = newStrictDecoder(data).Decode(&dst.Slot)
	if err == nil {
		jsonSlot, _ := json.Marshal(dst.Slot)
		if string(jsonSlot) == "{}" { // empty struct
			dst.Slot = nil
		} else {
			match++
		}
	} else {
		dst.Slot = nil
	}

	// try to unmarshal data into SmartAppLaunch
	err = newStrictDecoder(data).Decode(&dst.SmartAppLaunch)
	if err == nil {
		jsonSmartAppLaunch, _ := json.Marshal(dst.SmartAppLaunch)
		if string(jsonSmartAppLaunch) == "{}" { // empty struct
			dst.SmartAppLaunch = nil
		} else {
			match++
		}
	} else {
		dst.SmartAppLaunch = nil
	}

	// try to unmarshal data into Specimen
	err = newStrictDecoder(data).Decode(&dst.Specimen)
	if err == nil {
		jsonSpecimen, _ := json.Marshal(dst.Specimen)
		if string(jsonSpecimen) == "{}" { // empty struct
			dst.Specimen = nil
		} else {
			match++
		}
	} else {
		dst.Specimen = nil
	}

	// try to unmarshal data into SpecimenDefinition
	err = newStrictDecoder(data).Decode(&dst.SpecimenDefinition)
	if err == nil {
		jsonSpecimenDefinition, _ := json.Marshal(dst.SpecimenDefinition)
		if string(jsonSpecimenDefinition) == "{}" { // empty struct
			dst.SpecimenDefinition = nil
		} else {
			match++
		}
	} else {
		dst.SpecimenDefinition = nil
	}

	// try to unmarshal data into StructureDefinition
	err = newStrictDecoder(data).Decode(&dst.StructureDefinition)
	if err == nil {
		jsonStructureDefinition, _ := json.Marshal(dst.StructureDefinition)
		if string(jsonStructureDefinition) == "{}" { // empty struct
			dst.StructureDefinition = nil
		} else {
			match++
		}
	} else {
		dst.StructureDefinition = nil
	}

	// try to unmarshal data into StructureMap
	err = newStrictDecoder(data).Decode(&dst.StructureMap)
	if err == nil {
		jsonStructureMap, _ := json.Marshal(dst.StructureMap)
		if string(jsonStructureMap) == "{}" { // empty struct
			dst.StructureMap = nil
		} else {
			match++
		}
	} else {
		dst.StructureMap = nil
	}

	// try to unmarshal data into Subscription
	err = newStrictDecoder(data).Decode(&dst.Subscription)
	if err == nil {
		jsonSubscription, _ := json.Marshal(dst.Subscription)
		if string(jsonSubscription) == "{}" { // empty struct
			dst.Subscription = nil
		} else {
			match++
		}
	} else {
		dst.Subscription = nil
	}

	// try to unmarshal data into Substance
	err = newStrictDecoder(data).Decode(&dst.Substance)
	if err == nil {
		jsonSubstance, _ := json.Marshal(dst.Substance)
		if string(jsonSubstance) == "{}" { // empty struct
			dst.Substance = nil
		} else {
			match++
		}
	} else {
		dst.Substance = nil
	}

	// try to unmarshal data into SubstanceNucleicAcid
	err = newStrictDecoder(data).Decode(&dst.SubstanceNucleicAcid)
	if err == nil {
		jsonSubstanceNucleicAcid, _ := json.Marshal(dst.SubstanceNucleicAcid)
		if string(jsonSubstanceNucleicAcid) == "{}" { // empty struct
			dst.SubstanceNucleicAcid = nil
		} else {
			match++
		}
	} else {
		dst.SubstanceNucleicAcid = nil
	}

	// try to unmarshal data into SubstancePolymer
	err = newStrictDecoder(data).Decode(&dst.SubstancePolymer)
	if err == nil {
		jsonSubstancePolymer, _ := json.Marshal(dst.SubstancePolymer)
		if string(jsonSubstancePolymer) == "{}" { // empty struct
			dst.SubstancePolymer = nil
		} else {
			match++
		}
	} else {
		dst.SubstancePolymer = nil
	}

	// try to unmarshal data into SubstanceProtein
	err = newStrictDecoder(data).Decode(&dst.SubstanceProtein)
	if err == nil {
		jsonSubstanceProtein, _ := json.Marshal(dst.SubstanceProtein)
		if string(jsonSubstanceProtein) == "{}" { // empty struct
			dst.SubstanceProtein = nil
		} else {
			match++
		}
	} else {
		dst.SubstanceProtein = nil
	}

	// try to unmarshal data into SubstanceReferenceInformation
	err = newStrictDecoder(data).Decode(&dst.SubstanceReferenceInformation)
	if err == nil {
		jsonSubstanceReferenceInformation, _ := json.Marshal(dst.SubstanceReferenceInformation)
		if string(jsonSubstanceReferenceInformation) == "{}" { // empty struct
			dst.SubstanceReferenceInformation = nil
		} else {
			match++
		}
	} else {
		dst.SubstanceReferenceInformation = nil
	}

	// try to unmarshal data into SubstanceSourceMaterial
	err = newStrictDecoder(data).Decode(&dst.SubstanceSourceMaterial)
	if err == nil {
		jsonSubstanceSourceMaterial, _ := json.Marshal(dst.SubstanceSourceMaterial)
		if string(jsonSubstanceSourceMaterial) == "{}" { // empty struct
			dst.SubstanceSourceMaterial = nil
		} else {
			match++
		}
	} else {
		dst.SubstanceSourceMaterial = nil
	}

	// try to unmarshal data into SubstanceSpecification
	err = newStrictDecoder(data).Decode(&dst.SubstanceSpecification)
	if err == nil {
		jsonSubstanceSpecification, _ := json.Marshal(dst.SubstanceSpecification)
		if string(jsonSubstanceSpecification) == "{}" { // empty struct
			dst.SubstanceSpecification = nil
		} else {
			match++
		}
	} else {
		dst.SubstanceSpecification = nil
	}

	// try to unmarshal data into SupplyDelivery
	err = newStrictDecoder(data).Decode(&dst.SupplyDelivery)
	if err == nil {
		jsonSupplyDelivery, _ := json.Marshal(dst.SupplyDelivery)
		if string(jsonSupplyDelivery) == "{}" { // empty struct
			dst.SupplyDelivery = nil
		} else {
			match++
		}
	} else {
		dst.SupplyDelivery = nil
	}

	// try to unmarshal data into SupplyRequest
	err = newStrictDecoder(data).Decode(&dst.SupplyRequest)
	if err == nil {
		jsonSupplyRequest, _ := json.Marshal(dst.SupplyRequest)
		if string(jsonSupplyRequest) == "{}" { // empty struct
			dst.SupplyRequest = nil
		} else {
			match++
		}
	} else {
		dst.SupplyRequest = nil
	}

	// try to unmarshal data into Task
	err = newStrictDecoder(data).Decode(&dst.Task)
	if err == nil {
		jsonTask, _ := json.Marshal(dst.Task)
		if string(jsonTask) == "{}" { // empty struct
			dst.Task = nil
		} else {
			match++
		}
	} else {
		dst.Task = nil
	}

	// try to unmarshal data into TerminologyCapabilities
	err = newStrictDecoder(data).Decode(&dst.TerminologyCapabilities)
	if err == nil {
		jsonTerminologyCapabilities, _ := json.Marshal(dst.TerminologyCapabilities)
		if string(jsonTerminologyCapabilities) == "{}" { // empty struct
			dst.TerminologyCapabilities = nil
		} else {
			match++
		}
	} else {
		dst.TerminologyCapabilities = nil
	}

	// try to unmarshal data into TestReport
	err = newStrictDecoder(data).Decode(&dst.TestReport)
	if err == nil {
		jsonTestReport, _ := json.Marshal(dst.TestReport)
		if string(jsonTestReport) == "{}" { // empty struct
			dst.TestReport = nil
		} else {
			match++
		}
	} else {
		dst.TestReport = nil
	}

	// try to unmarshal data into TestScript
	err = newStrictDecoder(data).Decode(&dst.TestScript)
	if err == nil {
		jsonTestScript, _ := json.Marshal(dst.TestScript)
		if string(jsonTestScript) == "{}" { // empty struct
			dst.TestScript = nil
		} else {
			match++
		}
	} else {
		dst.TestScript = nil
	}

	// try to unmarshal data into User
	err = newStrictDecoder(data).Decode(&dst.User)
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			match++
		}
	} else {
		dst.User = nil
	}

	// try to unmarshal data into UserConfiguration
	err = newStrictDecoder(data).Decode(&dst.UserConfiguration)
	if err == nil {
		jsonUserConfiguration, _ := json.Marshal(dst.UserConfiguration)
		if string(jsonUserConfiguration) == "{}" { // empty struct
			dst.UserConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.UserConfiguration = nil
	}

	// try to unmarshal data into UserSecurityRequest
	err = newStrictDecoder(data).Decode(&dst.UserSecurityRequest)
	if err == nil {
		jsonUserSecurityRequest, _ := json.Marshal(dst.UserSecurityRequest)
		if string(jsonUserSecurityRequest) == "{}" { // empty struct
			dst.UserSecurityRequest = nil
		} else {
			match++
		}
	} else {
		dst.UserSecurityRequest = nil
	}

	// try to unmarshal data into ValueSet
	err = newStrictDecoder(data).Decode(&dst.ValueSet)
	if err == nil {
		jsonValueSet, _ := json.Marshal(dst.ValueSet)
		if string(jsonValueSet) == "{}" { // empty struct
			dst.ValueSet = nil
		} else {
			match++
		}
	} else {
		dst.ValueSet = nil
	}

	// try to unmarshal data into VerificationResult
	err = newStrictDecoder(data).Decode(&dst.VerificationResult)
	if err == nil {
		jsonVerificationResult, _ := json.Marshal(dst.VerificationResult)
		if string(jsonVerificationResult) == "{}" { // empty struct
			dst.VerificationResult = nil
		} else {
			match++
		}
	} else {
		dst.VerificationResult = nil
	}

	// try to unmarshal data into VisionPrescription
	err = newStrictDecoder(data).Decode(&dst.VisionPrescription)
	if err == nil {
		jsonVisionPrescription, _ := json.Marshal(dst.VisionPrescription)
		if string(jsonVisionPrescription) == "{}" { // empty struct
			dst.VisionPrescription = nil
		} else {
			match++
		}
	} else {
		dst.VisionPrescription = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessPolicy = nil
		dst.Account = nil
		dst.ActivityDefinition = nil
		dst.AdverseEvent = nil
		dst.Agent = nil
		dst.AllergyIntolerance = nil
		dst.Appointment = nil
		dst.AppointmentResponse = nil
		dst.AsyncJob = nil
		dst.AuditEvent = nil
		dst.Basic = nil
		dst.Binary = nil
		dst.BiologicallyDerivedProduct = nil
		dst.BodyStructure = nil
		dst.Bot = nil
		dst.BulkDataExport = nil
		dst.Bundle = nil
		dst.CapabilityStatement = nil
		dst.CarePlan = nil
		dst.CareTeam = nil
		dst.CatalogEntry = nil
		dst.ChargeItem = nil
		dst.ChargeItemDefinition = nil
		dst.Claim = nil
		dst.ClaimResponse = nil
		dst.ClientApplication = nil
		dst.ClinicalImpression = nil
		dst.CodeSystem = nil
		dst.Communication = nil
		dst.CommunicationRequest = nil
		dst.CompartmentDefinition = nil
		dst.Composition = nil
		dst.ConceptMap = nil
		dst.Condition = nil
		dst.Consent = nil
		dst.Contract = nil
		dst.Coverage = nil
		dst.CoverageEligibilityRequest = nil
		dst.CoverageEligibilityResponse = nil
		dst.DetectedIssue = nil
		dst.Device = nil
		dst.DeviceDefinition = nil
		dst.DeviceMetric = nil
		dst.DeviceRequest = nil
		dst.DeviceUseStatement = nil
		dst.DiagnosticReport = nil
		dst.DocumentManifest = nil
		dst.DocumentReference = nil
		dst.DomainConfiguration = nil
		dst.EffectEvidenceSynthesis = nil
		dst.Encounter = nil
		dst.Endpoint = nil
		dst.EnrollmentRequest = nil
		dst.EnrollmentResponse = nil
		dst.EpisodeOfCare = nil
		dst.EventDefinition = nil
		dst.Evidence = nil
		dst.EvidenceVariable = nil
		dst.ExampleScenario = nil
		dst.ExplanationOfBenefit = nil
		dst.FamilyMemberHistory = nil
		dst.Flag = nil
		dst.Goal = nil
		dst.GraphDefinition = nil
		dst.Group = nil
		dst.GuidanceResponse = nil
		dst.HealthcareService = nil
		dst.IdentityProvider = nil
		dst.ImagingStudy = nil
		dst.Immunization = nil
		dst.ImmunizationEvaluation = nil
		dst.ImmunizationRecommendation = nil
		dst.ImplementationGuide = nil
		dst.InsurancePlan = nil
		dst.Invoice = nil
		dst.JsonWebKey = nil
		dst.Library = nil
		dst.Linkage = nil
		dst.List = nil
		dst.Location = nil
		dst.Login = nil
		dst.Measure = nil
		dst.MeasureReport = nil
		dst.Media = nil
		dst.Medication = nil
		dst.MedicationAdministration = nil
		dst.MedicationDispense = nil
		dst.MedicationKnowledge = nil
		dst.MedicationRequest = nil
		dst.MedicationStatement = nil
		dst.MedicinalProduct = nil
		dst.MedicinalProductAuthorization = nil
		dst.MedicinalProductContraindication = nil
		dst.MedicinalProductIndication = nil
		dst.MedicinalProductIngredient = nil
		dst.MedicinalProductInteraction = nil
		dst.MedicinalProductManufactured = nil
		dst.MedicinalProductPackaged = nil
		dst.MedicinalProductPharmaceutical = nil
		dst.MedicinalProductUndesirableEffect = nil
		dst.MessageDefinition = nil
		dst.MessageHeader = nil
		dst.MolecularSequence = nil
		dst.NamingSystem = nil
		dst.NutritionOrder = nil
		dst.Observation = nil
		dst.ObservationDefinition = nil
		dst.OperationDefinition = nil
		dst.OperationOutcome = nil
		dst.Organization = nil
		dst.OrganizationAffiliation = nil
		dst.Parameters = nil
		dst.PasswordChangeRequest = nil
		dst.Patient = nil
		dst.PaymentNotice = nil
		dst.PaymentReconciliation = nil
		dst.Person = nil
		dst.PlanDefinition = nil
		dst.Practitioner = nil
		dst.PractitionerRole = nil
		dst.Procedure = nil
		dst.Project = nil
		dst.ProjectMembership = nil
		dst.Provenance = nil
		dst.Questionnaire = nil
		dst.QuestionnaireResponse = nil
		dst.RelatedPerson = nil
		dst.RequestGroup = nil
		dst.ResearchDefinition = nil
		dst.ResearchElementDefinition = nil
		dst.ResearchStudy = nil
		dst.ResearchSubject = nil
		dst.RiskAssessment = nil
		dst.RiskEvidenceSynthesis = nil
		dst.Schedule = nil
		dst.SearchParameter = nil
		dst.ServiceRequest = nil
		dst.Slot = nil
		dst.SmartAppLaunch = nil
		dst.Specimen = nil
		dst.SpecimenDefinition = nil
		dst.StructureDefinition = nil
		dst.StructureMap = nil
		dst.Subscription = nil
		dst.Substance = nil
		dst.SubstanceNucleicAcid = nil
		dst.SubstancePolymer = nil
		dst.SubstanceProtein = nil
		dst.SubstanceReferenceInformation = nil
		dst.SubstanceSourceMaterial = nil
		dst.SubstanceSpecification = nil
		dst.SupplyDelivery = nil
		dst.SupplyRequest = nil
		dst.Task = nil
		dst.TerminologyCapabilities = nil
		dst.TestReport = nil
		dst.TestScript = nil
		dst.User = nil
		dst.UserConfiguration = nil
		dst.UserSecurityRequest = nil
		dst.ValueSet = nil
		dst.VerificationResult = nil
		dst.VisionPrescription = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResourceList)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResourceList)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResourceList) MarshalJSON() ([]byte, error) {
	if src.AccessPolicy != nil {
		return json.Marshal(&src.AccessPolicy)
	}

	if src.Account != nil {
		return json.Marshal(&src.Account)
	}

	if src.ActivityDefinition != nil {
		return json.Marshal(&src.ActivityDefinition)
	}

	if src.AdverseEvent != nil {
		return json.Marshal(&src.AdverseEvent)
	}

	if src.Agent != nil {
		return json.Marshal(&src.Agent)
	}

	if src.AllergyIntolerance != nil {
		return json.Marshal(&src.AllergyIntolerance)
	}

	if src.Appointment != nil {
		return json.Marshal(&src.Appointment)
	}

	if src.AppointmentResponse != nil {
		return json.Marshal(&src.AppointmentResponse)
	}

	if src.AsyncJob != nil {
		return json.Marshal(&src.AsyncJob)
	}

	if src.AuditEvent != nil {
		return json.Marshal(&src.AuditEvent)
	}

	if src.Basic != nil {
		return json.Marshal(&src.Basic)
	}

	if src.Binary != nil {
		return json.Marshal(&src.Binary)
	}

	if src.BiologicallyDerivedProduct != nil {
		return json.Marshal(&src.BiologicallyDerivedProduct)
	}

	if src.BodyStructure != nil {
		return json.Marshal(&src.BodyStructure)
	}

	if src.Bot != nil {
		return json.Marshal(&src.Bot)
	}

	if src.BulkDataExport != nil {
		return json.Marshal(&src.BulkDataExport)
	}

	if src.Bundle != nil {
		return json.Marshal(&src.Bundle)
	}

	if src.CapabilityStatement != nil {
		return json.Marshal(&src.CapabilityStatement)
	}

	if src.CarePlan != nil {
		return json.Marshal(&src.CarePlan)
	}

	if src.CareTeam != nil {
		return json.Marshal(&src.CareTeam)
	}

	if src.CatalogEntry != nil {
		return json.Marshal(&src.CatalogEntry)
	}

	if src.ChargeItem != nil {
		return json.Marshal(&src.ChargeItem)
	}

	if src.ChargeItemDefinition != nil {
		return json.Marshal(&src.ChargeItemDefinition)
	}

	if src.Claim != nil {
		return json.Marshal(&src.Claim)
	}

	if src.ClaimResponse != nil {
		return json.Marshal(&src.ClaimResponse)
	}

	if src.ClientApplication != nil {
		return json.Marshal(&src.ClientApplication)
	}

	if src.ClinicalImpression != nil {
		return json.Marshal(&src.ClinicalImpression)
	}

	if src.CodeSystem != nil {
		return json.Marshal(&src.CodeSystem)
	}

	if src.Communication != nil {
		return json.Marshal(&src.Communication)
	}

	if src.CommunicationRequest != nil {
		return json.Marshal(&src.CommunicationRequest)
	}

	if src.CompartmentDefinition != nil {
		return json.Marshal(&src.CompartmentDefinition)
	}

	if src.Composition != nil {
		return json.Marshal(&src.Composition)
	}

	if src.ConceptMap != nil {
		return json.Marshal(&src.ConceptMap)
	}

	if src.Condition != nil {
		return json.Marshal(&src.Condition)
	}

	if src.Consent != nil {
		return json.Marshal(&src.Consent)
	}

	if src.Contract != nil {
		return json.Marshal(&src.Contract)
	}

	if src.Coverage != nil {
		return json.Marshal(&src.Coverage)
	}

	if src.CoverageEligibilityRequest != nil {
		return json.Marshal(&src.CoverageEligibilityRequest)
	}

	if src.CoverageEligibilityResponse != nil {
		return json.Marshal(&src.CoverageEligibilityResponse)
	}

	if src.DetectedIssue != nil {
		return json.Marshal(&src.DetectedIssue)
	}

	if src.Device != nil {
		return json.Marshal(&src.Device)
	}

	if src.DeviceDefinition != nil {
		return json.Marshal(&src.DeviceDefinition)
	}

	if src.DeviceMetric != nil {
		return json.Marshal(&src.DeviceMetric)
	}

	if src.DeviceRequest != nil {
		return json.Marshal(&src.DeviceRequest)
	}

	if src.DeviceUseStatement != nil {
		return json.Marshal(&src.DeviceUseStatement)
	}

	if src.DiagnosticReport != nil {
		return json.Marshal(&src.DiagnosticReport)
	}

	if src.DocumentManifest != nil {
		return json.Marshal(&src.DocumentManifest)
	}

	if src.DocumentReference != nil {
		return json.Marshal(&src.DocumentReference)
	}

	if src.DomainConfiguration != nil {
		return json.Marshal(&src.DomainConfiguration)
	}

	if src.EffectEvidenceSynthesis != nil {
		return json.Marshal(&src.EffectEvidenceSynthesis)
	}

	if src.Encounter != nil {
		return json.Marshal(&src.Encounter)
	}

	if src.Endpoint != nil {
		return json.Marshal(&src.Endpoint)
	}

	if src.EnrollmentRequest != nil {
		return json.Marshal(&src.EnrollmentRequest)
	}

	if src.EnrollmentResponse != nil {
		return json.Marshal(&src.EnrollmentResponse)
	}

	if src.EpisodeOfCare != nil {
		return json.Marshal(&src.EpisodeOfCare)
	}

	if src.EventDefinition != nil {
		return json.Marshal(&src.EventDefinition)
	}

	if src.Evidence != nil {
		return json.Marshal(&src.Evidence)
	}

	if src.EvidenceVariable != nil {
		return json.Marshal(&src.EvidenceVariable)
	}

	if src.ExampleScenario != nil {
		return json.Marshal(&src.ExampleScenario)
	}

	if src.ExplanationOfBenefit != nil {
		return json.Marshal(&src.ExplanationOfBenefit)
	}

	if src.FamilyMemberHistory != nil {
		return json.Marshal(&src.FamilyMemberHistory)
	}

	if src.Flag != nil {
		return json.Marshal(&src.Flag)
	}

	if src.Goal != nil {
		return json.Marshal(&src.Goal)
	}

	if src.GraphDefinition != nil {
		return json.Marshal(&src.GraphDefinition)
	}

	if src.Group != nil {
		return json.Marshal(&src.Group)
	}

	if src.GuidanceResponse != nil {
		return json.Marshal(&src.GuidanceResponse)
	}

	if src.HealthcareService != nil {
		return json.Marshal(&src.HealthcareService)
	}

	if src.IdentityProvider != nil {
		return json.Marshal(&src.IdentityProvider)
	}

	if src.ImagingStudy != nil {
		return json.Marshal(&src.ImagingStudy)
	}

	if src.Immunization != nil {
		return json.Marshal(&src.Immunization)
	}

	if src.ImmunizationEvaluation != nil {
		return json.Marshal(&src.ImmunizationEvaluation)
	}

	if src.ImmunizationRecommendation != nil {
		return json.Marshal(&src.ImmunizationRecommendation)
	}

	if src.ImplementationGuide != nil {
		return json.Marshal(&src.ImplementationGuide)
	}

	if src.InsurancePlan != nil {
		return json.Marshal(&src.InsurancePlan)
	}

	if src.Invoice != nil {
		return json.Marshal(&src.Invoice)
	}

	if src.JsonWebKey != nil {
		return json.Marshal(&src.JsonWebKey)
	}

	if src.Library != nil {
		return json.Marshal(&src.Library)
	}

	if src.Linkage != nil {
		return json.Marshal(&src.Linkage)
	}

	if src.List != nil {
		return json.Marshal(&src.List)
	}

	if src.Location != nil {
		return json.Marshal(&src.Location)
	}

	if src.Login != nil {
		return json.Marshal(&src.Login)
	}

	if src.Measure != nil {
		return json.Marshal(&src.Measure)
	}

	if src.MeasureReport != nil {
		return json.Marshal(&src.MeasureReport)
	}

	if src.Media != nil {
		return json.Marshal(&src.Media)
	}

	if src.Medication != nil {
		return json.Marshal(&src.Medication)
	}

	if src.MedicationAdministration != nil {
		return json.Marshal(&src.MedicationAdministration)
	}

	if src.MedicationDispense != nil {
		return json.Marshal(&src.MedicationDispense)
	}

	if src.MedicationKnowledge != nil {
		return json.Marshal(&src.MedicationKnowledge)
	}

	if src.MedicationRequest != nil {
		return json.Marshal(&src.MedicationRequest)
	}

	if src.MedicationStatement != nil {
		return json.Marshal(&src.MedicationStatement)
	}

	if src.MedicinalProduct != nil {
		return json.Marshal(&src.MedicinalProduct)
	}

	if src.MedicinalProductAuthorization != nil {
		return json.Marshal(&src.MedicinalProductAuthorization)
	}

	if src.MedicinalProductContraindication != nil {
		return json.Marshal(&src.MedicinalProductContraindication)
	}

	if src.MedicinalProductIndication != nil {
		return json.Marshal(&src.MedicinalProductIndication)
	}

	if src.MedicinalProductIngredient != nil {
		return json.Marshal(&src.MedicinalProductIngredient)
	}

	if src.MedicinalProductInteraction != nil {
		return json.Marshal(&src.MedicinalProductInteraction)
	}

	if src.MedicinalProductManufactured != nil {
		return json.Marshal(&src.MedicinalProductManufactured)
	}

	if src.MedicinalProductPackaged != nil {
		return json.Marshal(&src.MedicinalProductPackaged)
	}

	if src.MedicinalProductPharmaceutical != nil {
		return json.Marshal(&src.MedicinalProductPharmaceutical)
	}

	if src.MedicinalProductUndesirableEffect != nil {
		return json.Marshal(&src.MedicinalProductUndesirableEffect)
	}

	if src.MessageDefinition != nil {
		return json.Marshal(&src.MessageDefinition)
	}

	if src.MessageHeader != nil {
		return json.Marshal(&src.MessageHeader)
	}

	if src.MolecularSequence != nil {
		return json.Marshal(&src.MolecularSequence)
	}

	if src.NamingSystem != nil {
		return json.Marshal(&src.NamingSystem)
	}

	if src.NutritionOrder != nil {
		return json.Marshal(&src.NutritionOrder)
	}

	if src.Observation != nil {
		return json.Marshal(&src.Observation)
	}

	if src.ObservationDefinition != nil {
		return json.Marshal(&src.ObservationDefinition)
	}

	if src.OperationDefinition != nil {
		return json.Marshal(&src.OperationDefinition)
	}

	if src.OperationOutcome != nil {
		return json.Marshal(&src.OperationOutcome)
	}

	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.OrganizationAffiliation != nil {
		return json.Marshal(&src.OrganizationAffiliation)
	}

	if src.Parameters != nil {
		return json.Marshal(&src.Parameters)
	}

	if src.PasswordChangeRequest != nil {
		return json.Marshal(&src.PasswordChangeRequest)
	}

	if src.Patient != nil {
		return json.Marshal(&src.Patient)
	}

	if src.PaymentNotice != nil {
		return json.Marshal(&src.PaymentNotice)
	}

	if src.PaymentReconciliation != nil {
		return json.Marshal(&src.PaymentReconciliation)
	}

	if src.Person != nil {
		return json.Marshal(&src.Person)
	}

	if src.PlanDefinition != nil {
		return json.Marshal(&src.PlanDefinition)
	}

	if src.Practitioner != nil {
		return json.Marshal(&src.Practitioner)
	}

	if src.PractitionerRole != nil {
		return json.Marshal(&src.PractitionerRole)
	}

	if src.Procedure != nil {
		return json.Marshal(&src.Procedure)
	}

	if src.Project != nil {
		return json.Marshal(&src.Project)
	}

	if src.ProjectMembership != nil {
		return json.Marshal(&src.ProjectMembership)
	}

	if src.Provenance != nil {
		return json.Marshal(&src.Provenance)
	}

	if src.Questionnaire != nil {
		return json.Marshal(&src.Questionnaire)
	}

	if src.QuestionnaireResponse != nil {
		return json.Marshal(&src.QuestionnaireResponse)
	}

	if src.RelatedPerson != nil {
		return json.Marshal(&src.RelatedPerson)
	}

	if src.RequestGroup != nil {
		return json.Marshal(&src.RequestGroup)
	}

	if src.ResearchDefinition != nil {
		return json.Marshal(&src.ResearchDefinition)
	}

	if src.ResearchElementDefinition != nil {
		return json.Marshal(&src.ResearchElementDefinition)
	}

	if src.ResearchStudy != nil {
		return json.Marshal(&src.ResearchStudy)
	}

	if src.ResearchSubject != nil {
		return json.Marshal(&src.ResearchSubject)
	}

	if src.RiskAssessment != nil {
		return json.Marshal(&src.RiskAssessment)
	}

	if src.RiskEvidenceSynthesis != nil {
		return json.Marshal(&src.RiskEvidenceSynthesis)
	}

	if src.Schedule != nil {
		return json.Marshal(&src.Schedule)
	}

	if src.SearchParameter != nil {
		return json.Marshal(&src.SearchParameter)
	}

	if src.ServiceRequest != nil {
		return json.Marshal(&src.ServiceRequest)
	}

	if src.Slot != nil {
		return json.Marshal(&src.Slot)
	}

	if src.SmartAppLaunch != nil {
		return json.Marshal(&src.SmartAppLaunch)
	}

	if src.Specimen != nil {
		return json.Marshal(&src.Specimen)
	}

	if src.SpecimenDefinition != nil {
		return json.Marshal(&src.SpecimenDefinition)
	}

	if src.StructureDefinition != nil {
		return json.Marshal(&src.StructureDefinition)
	}

	if src.StructureMap != nil {
		return json.Marshal(&src.StructureMap)
	}

	if src.Subscription != nil {
		return json.Marshal(&src.Subscription)
	}

	if src.Substance != nil {
		return json.Marshal(&src.Substance)
	}

	if src.SubstanceNucleicAcid != nil {
		return json.Marshal(&src.SubstanceNucleicAcid)
	}

	if src.SubstancePolymer != nil {
		return json.Marshal(&src.SubstancePolymer)
	}

	if src.SubstanceProtein != nil {
		return json.Marshal(&src.SubstanceProtein)
	}

	if src.SubstanceReferenceInformation != nil {
		return json.Marshal(&src.SubstanceReferenceInformation)
	}

	if src.SubstanceSourceMaterial != nil {
		return json.Marshal(&src.SubstanceSourceMaterial)
	}

	if src.SubstanceSpecification != nil {
		return json.Marshal(&src.SubstanceSpecification)
	}

	if src.SupplyDelivery != nil {
		return json.Marshal(&src.SupplyDelivery)
	}

	if src.SupplyRequest != nil {
		return json.Marshal(&src.SupplyRequest)
	}

	if src.Task != nil {
		return json.Marshal(&src.Task)
	}

	if src.TerminologyCapabilities != nil {
		return json.Marshal(&src.TerminologyCapabilities)
	}

	if src.TestReport != nil {
		return json.Marshal(&src.TestReport)
	}

	if src.TestScript != nil {
		return json.Marshal(&src.TestScript)
	}

	if src.User != nil {
		return json.Marshal(&src.User)
	}

	if src.UserConfiguration != nil {
		return json.Marshal(&src.UserConfiguration)
	}

	if src.UserSecurityRequest != nil {
		return json.Marshal(&src.UserSecurityRequest)
	}

	if src.ValueSet != nil {
		return json.Marshal(&src.ValueSet)
	}

	if src.VerificationResult != nil {
		return json.Marshal(&src.VerificationResult)
	}

	if src.VisionPrescription != nil {
		return json.Marshal(&src.VisionPrescription)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResourceList) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessPolicy != nil {
		return obj.AccessPolicy
	}

	if obj.Account != nil {
		return obj.Account
	}

	if obj.ActivityDefinition != nil {
		return obj.ActivityDefinition
	}

	if obj.AdverseEvent != nil {
		return obj.AdverseEvent
	}

	if obj.Agent != nil {
		return obj.Agent
	}

	if obj.AllergyIntolerance != nil {
		return obj.AllergyIntolerance
	}

	if obj.Appointment != nil {
		return obj.Appointment
	}

	if obj.AppointmentResponse != nil {
		return obj.AppointmentResponse
	}

	if obj.AsyncJob != nil {
		return obj.AsyncJob
	}

	if obj.AuditEvent != nil {
		return obj.AuditEvent
	}

	if obj.Basic != nil {
		return obj.Basic
	}

	if obj.Binary != nil {
		return obj.Binary
	}

	if obj.BiologicallyDerivedProduct != nil {
		return obj.BiologicallyDerivedProduct
	}

	if obj.BodyStructure != nil {
		return obj.BodyStructure
	}

	if obj.Bot != nil {
		return obj.Bot
	}

	if obj.BulkDataExport != nil {
		return obj.BulkDataExport
	}

	if obj.Bundle != nil {
		return obj.Bundle
	}

	if obj.CapabilityStatement != nil {
		return obj.CapabilityStatement
	}

	if obj.CarePlan != nil {
		return obj.CarePlan
	}

	if obj.CareTeam != nil {
		return obj.CareTeam
	}

	if obj.CatalogEntry != nil {
		return obj.CatalogEntry
	}

	if obj.ChargeItem != nil {
		return obj.ChargeItem
	}

	if obj.ChargeItemDefinition != nil {
		return obj.ChargeItemDefinition
	}

	if obj.Claim != nil {
		return obj.Claim
	}

	if obj.ClaimResponse != nil {
		return obj.ClaimResponse
	}

	if obj.ClientApplication != nil {
		return obj.ClientApplication
	}

	if obj.ClinicalImpression != nil {
		return obj.ClinicalImpression
	}

	if obj.CodeSystem != nil {
		return obj.CodeSystem
	}

	if obj.Communication != nil {
		return obj.Communication
	}

	if obj.CommunicationRequest != nil {
		return obj.CommunicationRequest
	}

	if obj.CompartmentDefinition != nil {
		return obj.CompartmentDefinition
	}

	if obj.Composition != nil {
		return obj.Composition
	}

	if obj.ConceptMap != nil {
		return obj.ConceptMap
	}

	if obj.Condition != nil {
		return obj.Condition
	}

	if obj.Consent != nil {
		return obj.Consent
	}

	if obj.Contract != nil {
		return obj.Contract
	}

	if obj.Coverage != nil {
		return obj.Coverage
	}

	if obj.CoverageEligibilityRequest != nil {
		return obj.CoverageEligibilityRequest
	}

	if obj.CoverageEligibilityResponse != nil {
		return obj.CoverageEligibilityResponse
	}

	if obj.DetectedIssue != nil {
		return obj.DetectedIssue
	}

	if obj.Device != nil {
		return obj.Device
	}

	if obj.DeviceDefinition != nil {
		return obj.DeviceDefinition
	}

	if obj.DeviceMetric != nil {
		return obj.DeviceMetric
	}

	if obj.DeviceRequest != nil {
		return obj.DeviceRequest
	}

	if obj.DeviceUseStatement != nil {
		return obj.DeviceUseStatement
	}

	if obj.DiagnosticReport != nil {
		return obj.DiagnosticReport
	}

	if obj.DocumentManifest != nil {
		return obj.DocumentManifest
	}

	if obj.DocumentReference != nil {
		return obj.DocumentReference
	}

	if obj.DomainConfiguration != nil {
		return obj.DomainConfiguration
	}

	if obj.EffectEvidenceSynthesis != nil {
		return obj.EffectEvidenceSynthesis
	}

	if obj.Encounter != nil {
		return obj.Encounter
	}

	if obj.Endpoint != nil {
		return obj.Endpoint
	}

	if obj.EnrollmentRequest != nil {
		return obj.EnrollmentRequest
	}

	if obj.EnrollmentResponse != nil {
		return obj.EnrollmentResponse
	}

	if obj.EpisodeOfCare != nil {
		return obj.EpisodeOfCare
	}

	if obj.EventDefinition != nil {
		return obj.EventDefinition
	}

	if obj.Evidence != nil {
		return obj.Evidence
	}

	if obj.EvidenceVariable != nil {
		return obj.EvidenceVariable
	}

	if obj.ExampleScenario != nil {
		return obj.ExampleScenario
	}

	if obj.ExplanationOfBenefit != nil {
		return obj.ExplanationOfBenefit
	}

	if obj.FamilyMemberHistory != nil {
		return obj.FamilyMemberHistory
	}

	if obj.Flag != nil {
		return obj.Flag
	}

	if obj.Goal != nil {
		return obj.Goal
	}

	if obj.GraphDefinition != nil {
		return obj.GraphDefinition
	}

	if obj.Group != nil {
		return obj.Group
	}

	if obj.GuidanceResponse != nil {
		return obj.GuidanceResponse
	}

	if obj.HealthcareService != nil {
		return obj.HealthcareService
	}

	if obj.IdentityProvider != nil {
		return obj.IdentityProvider
	}

	if obj.ImagingStudy != nil {
		return obj.ImagingStudy
	}

	if obj.Immunization != nil {
		return obj.Immunization
	}

	if obj.ImmunizationEvaluation != nil {
		return obj.ImmunizationEvaluation
	}

	if obj.ImmunizationRecommendation != nil {
		return obj.ImmunizationRecommendation
	}

	if obj.ImplementationGuide != nil {
		return obj.ImplementationGuide
	}

	if obj.InsurancePlan != nil {
		return obj.InsurancePlan
	}

	if obj.Invoice != nil {
		return obj.Invoice
	}

	if obj.JsonWebKey != nil {
		return obj.JsonWebKey
	}

	if obj.Library != nil {
		return obj.Library
	}

	if obj.Linkage != nil {
		return obj.Linkage
	}

	if obj.List != nil {
		return obj.List
	}

	if obj.Location != nil {
		return obj.Location
	}

	if obj.Login != nil {
		return obj.Login
	}

	if obj.Measure != nil {
		return obj.Measure
	}

	if obj.MeasureReport != nil {
		return obj.MeasureReport
	}

	if obj.Media != nil {
		return obj.Media
	}

	if obj.Medication != nil {
		return obj.Medication
	}

	if obj.MedicationAdministration != nil {
		return obj.MedicationAdministration
	}

	if obj.MedicationDispense != nil {
		return obj.MedicationDispense
	}

	if obj.MedicationKnowledge != nil {
		return obj.MedicationKnowledge
	}

	if obj.MedicationRequest != nil {
		return obj.MedicationRequest
	}

	if obj.MedicationStatement != nil {
		return obj.MedicationStatement
	}

	if obj.MedicinalProduct != nil {
		return obj.MedicinalProduct
	}

	if obj.MedicinalProductAuthorization != nil {
		return obj.MedicinalProductAuthorization
	}

	if obj.MedicinalProductContraindication != nil {
		return obj.MedicinalProductContraindication
	}

	if obj.MedicinalProductIndication != nil {
		return obj.MedicinalProductIndication
	}

	if obj.MedicinalProductIngredient != nil {
		return obj.MedicinalProductIngredient
	}

	if obj.MedicinalProductInteraction != nil {
		return obj.MedicinalProductInteraction
	}

	if obj.MedicinalProductManufactured != nil {
		return obj.MedicinalProductManufactured
	}

	if obj.MedicinalProductPackaged != nil {
		return obj.MedicinalProductPackaged
	}

	if obj.MedicinalProductPharmaceutical != nil {
		return obj.MedicinalProductPharmaceutical
	}

	if obj.MedicinalProductUndesirableEffect != nil {
		return obj.MedicinalProductUndesirableEffect
	}

	if obj.MessageDefinition != nil {
		return obj.MessageDefinition
	}

	if obj.MessageHeader != nil {
		return obj.MessageHeader
	}

	if obj.MolecularSequence != nil {
		return obj.MolecularSequence
	}

	if obj.NamingSystem != nil {
		return obj.NamingSystem
	}

	if obj.NutritionOrder != nil {
		return obj.NutritionOrder
	}

	if obj.Observation != nil {
		return obj.Observation
	}

	if obj.ObservationDefinition != nil {
		return obj.ObservationDefinition
	}

	if obj.OperationDefinition != nil {
		return obj.OperationDefinition
	}

	if obj.OperationOutcome != nil {
		return obj.OperationOutcome
	}

	if obj.Organization != nil {
		return obj.Organization
	}

	if obj.OrganizationAffiliation != nil {
		return obj.OrganizationAffiliation
	}

	if obj.Parameters != nil {
		return obj.Parameters
	}

	if obj.PasswordChangeRequest != nil {
		return obj.PasswordChangeRequest
	}

	if obj.Patient != nil {
		return obj.Patient
	}

	if obj.PaymentNotice != nil {
		return obj.PaymentNotice
	}

	if obj.PaymentReconciliation != nil {
		return obj.PaymentReconciliation
	}

	if obj.Person != nil {
		return obj.Person
	}

	if obj.PlanDefinition != nil {
		return obj.PlanDefinition
	}

	if obj.Practitioner != nil {
		return obj.Practitioner
	}

	if obj.PractitionerRole != nil {
		return obj.PractitionerRole
	}

	if obj.Procedure != nil {
		return obj.Procedure
	}

	if obj.Project != nil {
		return obj.Project
	}

	if obj.ProjectMembership != nil {
		return obj.ProjectMembership
	}

	if obj.Provenance != nil {
		return obj.Provenance
	}

	if obj.Questionnaire != nil {
		return obj.Questionnaire
	}

	if obj.QuestionnaireResponse != nil {
		return obj.QuestionnaireResponse
	}

	if obj.RelatedPerson != nil {
		return obj.RelatedPerson
	}

	if obj.RequestGroup != nil {
		return obj.RequestGroup
	}

	if obj.ResearchDefinition != nil {
		return obj.ResearchDefinition
	}

	if obj.ResearchElementDefinition != nil {
		return obj.ResearchElementDefinition
	}

	if obj.ResearchStudy != nil {
		return obj.ResearchStudy
	}

	if obj.ResearchSubject != nil {
		return obj.ResearchSubject
	}

	if obj.RiskAssessment != nil {
		return obj.RiskAssessment
	}

	if obj.RiskEvidenceSynthesis != nil {
		return obj.RiskEvidenceSynthesis
	}

	if obj.Schedule != nil {
		return obj.Schedule
	}

	if obj.SearchParameter != nil {
		return obj.SearchParameter
	}

	if obj.ServiceRequest != nil {
		return obj.ServiceRequest
	}

	if obj.Slot != nil {
		return obj.Slot
	}

	if obj.SmartAppLaunch != nil {
		return obj.SmartAppLaunch
	}

	if obj.Specimen != nil {
		return obj.Specimen
	}

	if obj.SpecimenDefinition != nil {
		return obj.SpecimenDefinition
	}

	if obj.StructureDefinition != nil {
		return obj.StructureDefinition
	}

	if obj.StructureMap != nil {
		return obj.StructureMap
	}

	if obj.Subscription != nil {
		return obj.Subscription
	}

	if obj.Substance != nil {
		return obj.Substance
	}

	if obj.SubstanceNucleicAcid != nil {
		return obj.SubstanceNucleicAcid
	}

	if obj.SubstancePolymer != nil {
		return obj.SubstancePolymer
	}

	if obj.SubstanceProtein != nil {
		return obj.SubstanceProtein
	}

	if obj.SubstanceReferenceInformation != nil {
		return obj.SubstanceReferenceInformation
	}

	if obj.SubstanceSourceMaterial != nil {
		return obj.SubstanceSourceMaterial
	}

	if obj.SubstanceSpecification != nil {
		return obj.SubstanceSpecification
	}

	if obj.SupplyDelivery != nil {
		return obj.SupplyDelivery
	}

	if obj.SupplyRequest != nil {
		return obj.SupplyRequest
	}

	if obj.Task != nil {
		return obj.Task
	}

	if obj.TerminologyCapabilities != nil {
		return obj.TerminologyCapabilities
	}

	if obj.TestReport != nil {
		return obj.TestReport
	}

	if obj.TestScript != nil {
		return obj.TestScript
	}

	if obj.User != nil {
		return obj.User
	}

	if obj.UserConfiguration != nil {
		return obj.UserConfiguration
	}

	if obj.UserSecurityRequest != nil {
		return obj.UserSecurityRequest
	}

	if obj.ValueSet != nil {
		return obj.ValueSet
	}

	if obj.VerificationResult != nil {
		return obj.VerificationResult
	}

	if obj.VisionPrescription != nil {
		return obj.VisionPrescription
	}

	// all schemas are nil
	return nil
}

type NullableResourceList struct {
	value *ResourceList
	isSet bool
}

func (v NullableResourceList) Get() *ResourceList {
	return v.value
}

func (v *NullableResourceList) Set(val *ResourceList) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceList) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceList(val *ResourceList) *NullableResourceList {
	return &NullableResourceList{value: val, isSet: true}
}

func (v NullableResourceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


