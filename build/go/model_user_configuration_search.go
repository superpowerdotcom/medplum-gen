/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the UserConfigurationSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConfigurationSearch{}

// UserConfigurationSearch Shortcut links to URLs.
type UserConfigurationSearch struct {
	// A sequence of Unicode characters
	Name string `json:"name"`
	// A sequence of Unicode characters
	Criteria string `json:"criteria"`
	AdditionalProperties map[string]interface{}
}

type _UserConfigurationSearch UserConfigurationSearch

// NewUserConfigurationSearch instantiates a new UserConfigurationSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfigurationSearch(name string, criteria string) *UserConfigurationSearch {
	this := UserConfigurationSearch{}
	this.Name = name
	this.Criteria = criteria
	return &this
}

// NewUserConfigurationSearchWithDefaults instantiates a new UserConfigurationSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigurationSearchWithDefaults() *UserConfigurationSearch {
	this := UserConfigurationSearch{}
	return &this
}

// GetName returns the Name field value
func (o *UserConfigurationSearch) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserConfigurationSearch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserConfigurationSearch) SetName(v string) {
	o.Name = v
}

// GetCriteria returns the Criteria field value
func (o *UserConfigurationSearch) GetCriteria() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value
// and a boolean to check if the value has been set.
func (o *UserConfigurationSearch) GetCriteriaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Criteria, true
}

// SetCriteria sets field value
func (o *UserConfigurationSearch) SetCriteria(v string) {
	o.Criteria = v
}

func (o UserConfigurationSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConfigurationSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["criteria"] = o.Criteria

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserConfigurationSearch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"criteria",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserConfigurationSearch := _UserConfigurationSearch{}

	err = json.Unmarshal(data, &varUserConfigurationSearch)

	if err != nil {
		return err
	}

	*o = UserConfigurationSearch(varUserConfigurationSearch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "criteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserConfigurationSearch struct {
	value *UserConfigurationSearch
	isSet bool
}

func (v NullableUserConfigurationSearch) Get() *UserConfigurationSearch {
	return v.value
}

func (v *NullableUserConfigurationSearch) Set(val *UserConfigurationSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfigurationSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfigurationSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfigurationSearch(val *UserConfigurationSearch) *NullableUserConfigurationSearch {
	return &NullableUserConfigurationSearch{value: val, isSet: true}
}

func (v NullableUserConfigurationSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfigurationSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


