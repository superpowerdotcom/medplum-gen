/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Contract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contract{}

// Contract Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type Contract struct {
	// This is a Contract resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique identifier for this Contract or a derivative that references a Source Contract.
	Identifier []Identifier `json:"identifier,omitempty"`
	// String of characters used to identify a name or a resource
	Url *string `json:"url,omitempty"`
	// A sequence of Unicode characters
	Version *string `json:"version,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
	LegalState *CodeableConcept `json:"legalState,omitempty"`
	// The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
	InstantiatesCanonical *Reference `json:"instantiatesCanonical,omitempty"`
	// String of characters used to identify a name or a resource
	InstantiatesUri *string `json:"instantiatesUri,omitempty"`
	// The minimal content derived from the basal information source at a specific stage in its lifecycle.
	ContentDerivative *CodeableConcept `json:"contentDerivative,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	Issued *string `json:"issued,omitempty"`
	// Relevant time or time-period when this Contract is applicable.
	Applies *Period `json:"applies,omitempty"`
	// Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
	ExpirationType *CodeableConcept `json:"expirationType,omitempty"`
	// The target entity impacted by or of interest to parties to the agreement.
	Subject []Reference `json:"subject,omitempty"`
	// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
	Authority []Reference `json:"authority,omitempty"`
	// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
	Domain []Reference `json:"domain,omitempty"`
	// Sites in which the contract is complied with,  exercised, or in force.
	Site []Reference `json:"site,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A sequence of Unicode characters
	Subtitle *string `json:"subtitle,omitempty"`
	// Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
	Alias []string `json:"alias,omitempty"`
	// The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
	Author *Reference `json:"author,omitempty"`
	// A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
	Scope *CodeableConcept `json:"scope,omitempty"`
	// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
	TopicCodeableConcept *CodeableConcept `json:"topicCodeableConcept,omitempty"`
	// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
	TopicReference *Reference `json:"topicReference,omitempty"`
	// A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
	Type *CodeableConcept `json:"type,omitempty"`
	// Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
	SubType []CodeableConcept `json:"subType,omitempty"`
	// Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
	ContentDefinition *ContractContentDefinition `json:"contentDefinition,omitempty"`
	// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
	Term []ContractTerm `json:"term,omitempty"`
	// Information that may be needed by/relevant to the performer in their execution of this term action.
	SupportingInfo []Reference `json:"supportingInfo,omitempty"`
	// Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
	RelevantHistory []Reference `json:"relevantHistory,omitempty"`
	// Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
	Signer []ContractSigner `json:"signer,omitempty"`
	// The \"patient friendly language\" versionof the Contract in whole or in parts. \"Patient friendly language\" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
	Friendly []ContractFriendly `json:"friendly,omitempty"`
	// List of Legal expressions or representations of this Contract.
	Legal []ContractLegal `json:"legal,omitempty"`
	// List of Computable Policy Rule Language Representations of this Contract.
	Rule []ContractRule `json:"rule,omitempty"`
	// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the \"source of truth\" and which would be the basis for legal action related to enforcement of this Contract.
	LegallyBindingAttachment *Attachment `json:"legallyBindingAttachment,omitempty"`
	// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the \"source of truth\" and which would be the basis for legal action related to enforcement of this Contract.
	LegallyBindingReference *Reference `json:"legallyBindingReference,omitempty"`
}

type _Contract Contract

// NewContract instantiates a new Contract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContract(resourceType string) *Contract {
	this := Contract{}
	this.ResourceType = resourceType
	return &this
}

// NewContractWithDefaults instantiates a new Contract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractWithDefaults() *Contract {
	this := Contract{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Contract) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Contract) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Contract) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Contract) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Contract) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Contract) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Contract) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Contract) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Contract) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Contract) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Contract) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Contract) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Contract) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Contract) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Contract) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Contract) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Contract) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Contract) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Contract) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Contract) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Contract) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Contract) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Contract) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Contract) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Contract) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Contract) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Contract) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Contract) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Contract) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Contract) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Contract) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Contract) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Contract) SetUrl(v string) {
	o.Url = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Contract) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Contract) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Contract) SetVersion(v string) {
	o.Version = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Contract) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Contract) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Contract) SetStatus(v string) {
	o.Status = &v
}

// GetLegalState returns the LegalState field value if set, zero value otherwise.
func (o *Contract) GetLegalState() CodeableConcept {
	if o == nil || IsNil(o.LegalState) {
		var ret CodeableConcept
		return ret
	}
	return *o.LegalState
}

// GetLegalStateOk returns a tuple with the LegalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetLegalStateOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.LegalState) {
		return nil, false
	}
	return o.LegalState, true
}

// HasLegalState returns a boolean if a field has been set.
func (o *Contract) HasLegalState() bool {
	if o != nil && !IsNil(o.LegalState) {
		return true
	}

	return false
}

// SetLegalState gets a reference to the given CodeableConcept and assigns it to the LegalState field.
func (o *Contract) SetLegalState(v CodeableConcept) {
	o.LegalState = &v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *Contract) GetInstantiatesCanonical() Reference {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret Reference
		return ret
	}
	return *o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetInstantiatesCanonicalOk() (*Reference, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *Contract) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given Reference and assigns it to the InstantiatesCanonical field.
func (o *Contract) SetInstantiatesCanonical(v Reference) {
	o.InstantiatesCanonical = &v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *Contract) GetInstantiatesUri() string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret string
		return ret
	}
	return *o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetInstantiatesUriOk() (*string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *Contract) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given string and assigns it to the InstantiatesUri field.
func (o *Contract) SetInstantiatesUri(v string) {
	o.InstantiatesUri = &v
}

// GetContentDerivative returns the ContentDerivative field value if set, zero value otherwise.
func (o *Contract) GetContentDerivative() CodeableConcept {
	if o == nil || IsNil(o.ContentDerivative) {
		var ret CodeableConcept
		return ret
	}
	return *o.ContentDerivative
}

// GetContentDerivativeOk returns a tuple with the ContentDerivative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetContentDerivativeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ContentDerivative) {
		return nil, false
	}
	return o.ContentDerivative, true
}

// HasContentDerivative returns a boolean if a field has been set.
func (o *Contract) HasContentDerivative() bool {
	if o != nil && !IsNil(o.ContentDerivative) {
		return true
	}

	return false
}

// SetContentDerivative gets a reference to the given CodeableConcept and assigns it to the ContentDerivative field.
func (o *Contract) SetContentDerivative(v CodeableConcept) {
	o.ContentDerivative = &v
}

// GetIssued returns the Issued field value if set, zero value otherwise.
func (o *Contract) GetIssued() string {
	if o == nil || IsNil(o.Issued) {
		var ret string
		return ret
	}
	return *o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetIssuedOk() (*string, bool) {
	if o == nil || IsNil(o.Issued) {
		return nil, false
	}
	return o.Issued, true
}

// HasIssued returns a boolean if a field has been set.
func (o *Contract) HasIssued() bool {
	if o != nil && !IsNil(o.Issued) {
		return true
	}

	return false
}

// SetIssued gets a reference to the given string and assigns it to the Issued field.
func (o *Contract) SetIssued(v string) {
	o.Issued = &v
}

// GetApplies returns the Applies field value if set, zero value otherwise.
func (o *Contract) GetApplies() Period {
	if o == nil || IsNil(o.Applies) {
		var ret Period
		return ret
	}
	return *o.Applies
}

// GetAppliesOk returns a tuple with the Applies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetAppliesOk() (*Period, bool) {
	if o == nil || IsNil(o.Applies) {
		return nil, false
	}
	return o.Applies, true
}

// HasApplies returns a boolean if a field has been set.
func (o *Contract) HasApplies() bool {
	if o != nil && !IsNil(o.Applies) {
		return true
	}

	return false
}

// SetApplies gets a reference to the given Period and assigns it to the Applies field.
func (o *Contract) SetApplies(v Period) {
	o.Applies = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *Contract) GetExpirationType() CodeableConcept {
	if o == nil || IsNil(o.ExpirationType) {
		var ret CodeableConcept
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetExpirationTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *Contract) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given CodeableConcept and assigns it to the ExpirationType field.
func (o *Contract) SetExpirationType(v CodeableConcept) {
	o.ExpirationType = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Contract) GetSubject() []Reference {
	if o == nil || IsNil(o.Subject) {
		var ret []Reference
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSubjectOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Contract) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given []Reference and assigns it to the Subject field.
func (o *Contract) SetSubject(v []Reference) {
	o.Subject = v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Contract) GetAuthority() []Reference {
	if o == nil || IsNil(o.Authority) {
		var ret []Reference
		return ret
	}
	return o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetAuthorityOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *Contract) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given []Reference and assigns it to the Authority field.
func (o *Contract) SetAuthority(v []Reference) {
	o.Authority = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Contract) GetDomain() []Reference {
	if o == nil || IsNil(o.Domain) {
		var ret []Reference
		return ret
	}
	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetDomainOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Contract) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given []Reference and assigns it to the Domain field.
func (o *Contract) SetDomain(v []Reference) {
	o.Domain = v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Contract) GetSite() []Reference {
	if o == nil || IsNil(o.Site) {
		var ret []Reference
		return ret
	}
	return o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSiteOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Contract) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given []Reference and assigns it to the Site field.
func (o *Contract) SetSite(v []Reference) {
	o.Site = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Contract) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Contract) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Contract) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Contract) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Contract) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Contract) SetTitle(v string) {
	o.Title = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *Contract) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *Contract) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *Contract) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *Contract) GetAlias() []string {
	if o == nil || IsNil(o.Alias) {
		var ret []string
		return ret
	}
	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetAliasOk() ([]string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *Contract) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given []string and assigns it to the Alias field.
func (o *Contract) SetAlias(v []string) {
	o.Alias = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Contract) GetAuthor() Reference {
	if o == nil || IsNil(o.Author) {
		var ret Reference
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetAuthorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Contract) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Reference and assigns it to the Author field.
func (o *Contract) SetAuthor(v Reference) {
	o.Author = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Contract) GetScope() CodeableConcept {
	if o == nil || IsNil(o.Scope) {
		var ret CodeableConcept
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetScopeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Contract) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given CodeableConcept and assigns it to the Scope field.
func (o *Contract) SetScope(v CodeableConcept) {
	o.Scope = &v
}

// GetTopicCodeableConcept returns the TopicCodeableConcept field value if set, zero value otherwise.
func (o *Contract) GetTopicCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.TopicCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.TopicCodeableConcept
}

// GetTopicCodeableConceptOk returns a tuple with the TopicCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTopicCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.TopicCodeableConcept) {
		return nil, false
	}
	return o.TopicCodeableConcept, true
}

// HasTopicCodeableConcept returns a boolean if a field has been set.
func (o *Contract) HasTopicCodeableConcept() bool {
	if o != nil && !IsNil(o.TopicCodeableConcept) {
		return true
	}

	return false
}

// SetTopicCodeableConcept gets a reference to the given CodeableConcept and assigns it to the TopicCodeableConcept field.
func (o *Contract) SetTopicCodeableConcept(v CodeableConcept) {
	o.TopicCodeableConcept = &v
}

// GetTopicReference returns the TopicReference field value if set, zero value otherwise.
func (o *Contract) GetTopicReference() Reference {
	if o == nil || IsNil(o.TopicReference) {
		var ret Reference
		return ret
	}
	return *o.TopicReference
}

// GetTopicReferenceOk returns a tuple with the TopicReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTopicReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.TopicReference) {
		return nil, false
	}
	return o.TopicReference, true
}

// HasTopicReference returns a boolean if a field has been set.
func (o *Contract) HasTopicReference() bool {
	if o != nil && !IsNil(o.TopicReference) {
		return true
	}

	return false
}

// SetTopicReference gets a reference to the given Reference and assigns it to the TopicReference field.
func (o *Contract) SetTopicReference(v Reference) {
	o.TopicReference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Contract) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Contract) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *Contract) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *Contract) GetSubType() []CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret []CodeableConcept
		return ret
	}
	return o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSubTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *Contract) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given []CodeableConcept and assigns it to the SubType field.
func (o *Contract) SetSubType(v []CodeableConcept) {
	o.SubType = v
}

// GetContentDefinition returns the ContentDefinition field value if set, zero value otherwise.
func (o *Contract) GetContentDefinition() ContractContentDefinition {
	if o == nil || IsNil(o.ContentDefinition) {
		var ret ContractContentDefinition
		return ret
	}
	return *o.ContentDefinition
}

// GetContentDefinitionOk returns a tuple with the ContentDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetContentDefinitionOk() (*ContractContentDefinition, bool) {
	if o == nil || IsNil(o.ContentDefinition) {
		return nil, false
	}
	return o.ContentDefinition, true
}

// HasContentDefinition returns a boolean if a field has been set.
func (o *Contract) HasContentDefinition() bool {
	if o != nil && !IsNil(o.ContentDefinition) {
		return true
	}

	return false
}

// SetContentDefinition gets a reference to the given ContractContentDefinition and assigns it to the ContentDefinition field.
func (o *Contract) SetContentDefinition(v ContractContentDefinition) {
	o.ContentDefinition = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *Contract) GetTerm() []ContractTerm {
	if o == nil || IsNil(o.Term) {
		var ret []ContractTerm
		return ret
	}
	return o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTermOk() ([]ContractTerm, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *Contract) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given []ContractTerm and assigns it to the Term field.
func (o *Contract) SetTerm(v []ContractTerm) {
	o.Term = v
}

// GetSupportingInfo returns the SupportingInfo field value if set, zero value otherwise.
func (o *Contract) GetSupportingInfo() []Reference {
	if o == nil || IsNil(o.SupportingInfo) {
		var ret []Reference
		return ret
	}
	return o.SupportingInfo
}

// GetSupportingInfoOk returns a tuple with the SupportingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSupportingInfoOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInfo) {
		return nil, false
	}
	return o.SupportingInfo, true
}

// HasSupportingInfo returns a boolean if a field has been set.
func (o *Contract) HasSupportingInfo() bool {
	if o != nil && !IsNil(o.SupportingInfo) {
		return true
	}

	return false
}

// SetSupportingInfo gets a reference to the given []Reference and assigns it to the SupportingInfo field.
func (o *Contract) SetSupportingInfo(v []Reference) {
	o.SupportingInfo = v
}

// GetRelevantHistory returns the RelevantHistory field value if set, zero value otherwise.
func (o *Contract) GetRelevantHistory() []Reference {
	if o == nil || IsNil(o.RelevantHistory) {
		var ret []Reference
		return ret
	}
	return o.RelevantHistory
}

// GetRelevantHistoryOk returns a tuple with the RelevantHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetRelevantHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.RelevantHistory) {
		return nil, false
	}
	return o.RelevantHistory, true
}

// HasRelevantHistory returns a boolean if a field has been set.
func (o *Contract) HasRelevantHistory() bool {
	if o != nil && !IsNil(o.RelevantHistory) {
		return true
	}

	return false
}

// SetRelevantHistory gets a reference to the given []Reference and assigns it to the RelevantHistory field.
func (o *Contract) SetRelevantHistory(v []Reference) {
	o.RelevantHistory = v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *Contract) GetSigner() []ContractSigner {
	if o == nil || IsNil(o.Signer) {
		var ret []ContractSigner
		return ret
	}
	return o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetSignerOk() ([]ContractSigner, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *Contract) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given []ContractSigner and assigns it to the Signer field.
func (o *Contract) SetSigner(v []ContractSigner) {
	o.Signer = v
}

// GetFriendly returns the Friendly field value if set, zero value otherwise.
func (o *Contract) GetFriendly() []ContractFriendly {
	if o == nil || IsNil(o.Friendly) {
		var ret []ContractFriendly
		return ret
	}
	return o.Friendly
}

// GetFriendlyOk returns a tuple with the Friendly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetFriendlyOk() ([]ContractFriendly, bool) {
	if o == nil || IsNil(o.Friendly) {
		return nil, false
	}
	return o.Friendly, true
}

// HasFriendly returns a boolean if a field has been set.
func (o *Contract) HasFriendly() bool {
	if o != nil && !IsNil(o.Friendly) {
		return true
	}

	return false
}

// SetFriendly gets a reference to the given []ContractFriendly and assigns it to the Friendly field.
func (o *Contract) SetFriendly(v []ContractFriendly) {
	o.Friendly = v
}

// GetLegal returns the Legal field value if set, zero value otherwise.
func (o *Contract) GetLegal() []ContractLegal {
	if o == nil || IsNil(o.Legal) {
		var ret []ContractLegal
		return ret
	}
	return o.Legal
}

// GetLegalOk returns a tuple with the Legal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetLegalOk() ([]ContractLegal, bool) {
	if o == nil || IsNil(o.Legal) {
		return nil, false
	}
	return o.Legal, true
}

// HasLegal returns a boolean if a field has been set.
func (o *Contract) HasLegal() bool {
	if o != nil && !IsNil(o.Legal) {
		return true
	}

	return false
}

// SetLegal gets a reference to the given []ContractLegal and assigns it to the Legal field.
func (o *Contract) SetLegal(v []ContractLegal) {
	o.Legal = v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *Contract) GetRule() []ContractRule {
	if o == nil || IsNil(o.Rule) {
		var ret []ContractRule
		return ret
	}
	return o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetRuleOk() ([]ContractRule, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *Contract) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given []ContractRule and assigns it to the Rule field.
func (o *Contract) SetRule(v []ContractRule) {
	o.Rule = v
}

// GetLegallyBindingAttachment returns the LegallyBindingAttachment field value if set, zero value otherwise.
func (o *Contract) GetLegallyBindingAttachment() Attachment {
	if o == nil || IsNil(o.LegallyBindingAttachment) {
		var ret Attachment
		return ret
	}
	return *o.LegallyBindingAttachment
}

// GetLegallyBindingAttachmentOk returns a tuple with the LegallyBindingAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetLegallyBindingAttachmentOk() (*Attachment, bool) {
	if o == nil || IsNil(o.LegallyBindingAttachment) {
		return nil, false
	}
	return o.LegallyBindingAttachment, true
}

// HasLegallyBindingAttachment returns a boolean if a field has been set.
func (o *Contract) HasLegallyBindingAttachment() bool {
	if o != nil && !IsNil(o.LegallyBindingAttachment) {
		return true
	}

	return false
}

// SetLegallyBindingAttachment gets a reference to the given Attachment and assigns it to the LegallyBindingAttachment field.
func (o *Contract) SetLegallyBindingAttachment(v Attachment) {
	o.LegallyBindingAttachment = &v
}

// GetLegallyBindingReference returns the LegallyBindingReference field value if set, zero value otherwise.
func (o *Contract) GetLegallyBindingReference() Reference {
	if o == nil || IsNil(o.LegallyBindingReference) {
		var ret Reference
		return ret
	}
	return *o.LegallyBindingReference
}

// GetLegallyBindingReferenceOk returns a tuple with the LegallyBindingReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetLegallyBindingReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.LegallyBindingReference) {
		return nil, false
	}
	return o.LegallyBindingReference, true
}

// HasLegallyBindingReference returns a boolean if a field has been set.
func (o *Contract) HasLegallyBindingReference() bool {
	if o != nil && !IsNil(o.LegallyBindingReference) {
		return true
	}

	return false
}

// SetLegallyBindingReference gets a reference to the given Reference and assigns it to the LegallyBindingReference field.
func (o *Contract) SetLegallyBindingReference(v Reference) {
	o.LegallyBindingReference = &v
}

func (o Contract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.LegalState) {
		toSerialize["legalState"] = o.LegalState
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.ContentDerivative) {
		toSerialize["contentDerivative"] = o.ContentDerivative
	}
	if !IsNil(o.Issued) {
		toSerialize["issued"] = o.Issued
	}
	if !IsNil(o.Applies) {
		toSerialize["applies"] = o.Applies
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expirationType"] = o.ExpirationType
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.TopicCodeableConcept) {
		toSerialize["topicCodeableConcept"] = o.TopicCodeableConcept
	}
	if !IsNil(o.TopicReference) {
		toSerialize["topicReference"] = o.TopicReference
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.ContentDefinition) {
		toSerialize["contentDefinition"] = o.ContentDefinition
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.SupportingInfo) {
		toSerialize["supportingInfo"] = o.SupportingInfo
	}
	if !IsNil(o.RelevantHistory) {
		toSerialize["relevantHistory"] = o.RelevantHistory
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Friendly) {
		toSerialize["friendly"] = o.Friendly
	}
	if !IsNil(o.Legal) {
		toSerialize["legal"] = o.Legal
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.LegallyBindingAttachment) {
		toSerialize["legallyBindingAttachment"] = o.LegallyBindingAttachment
	}
	if !IsNil(o.LegallyBindingReference) {
		toSerialize["legallyBindingReference"] = o.LegallyBindingReference
	}
	return toSerialize, nil
}

func (o *Contract) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContract := _Contract{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContract)

	if err != nil {
		return err
	}

	*o = Contract(varContract)

	return err
}

type NullableContract struct {
	value *Contract
	isSet bool
}

func (v NullableContract) Get() *Contract {
	return v.value
}

func (v *NullableContract) Set(val *Contract) {
	v.value = val
	v.isSet = true
}

func (v NullableContract) IsSet() bool {
	return v.isSet
}

func (v *NullableContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContract(val *Contract) *NullableContract {
	return &NullableContract{value: val, isSet: true}
}

func (v NullableContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


