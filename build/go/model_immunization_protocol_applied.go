/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ImmunizationProtocolApplied type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImmunizationProtocolApplied{}

// ImmunizationProtocolApplied Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
type ImmunizationProtocolApplied struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Series *string `json:"series,omitempty"`
	// Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
	Authority *Reference `json:"authority,omitempty"`
	// The vaccine preventable disease the dose is being administered against.
	TargetDisease []CodeableConcept `json:"targetDisease,omitempty"`
	// Nominal position in a series.
	DoseNumberPositiveInt *float32 `json:"doseNumberPositiveInt,omitempty"`
	// Nominal position in a series.
	DoseNumberString *string `json:"doseNumberString,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesPositiveInt *float32 `json:"seriesDosesPositiveInt,omitempty"`
	// The recommended number of doses to achieve immunity.
	SeriesDosesString *string `json:"seriesDosesString,omitempty"`
}

// NewImmunizationProtocolApplied instantiates a new ImmunizationProtocolApplied object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImmunizationProtocolApplied() *ImmunizationProtocolApplied {
	this := ImmunizationProtocolApplied{}
	return &this
}

// NewImmunizationProtocolAppliedWithDefaults instantiates a new ImmunizationProtocolApplied object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImmunizationProtocolAppliedWithDefaults() *ImmunizationProtocolApplied {
	this := ImmunizationProtocolApplied{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImmunizationProtocolApplied) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImmunizationProtocolApplied) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImmunizationProtocolApplied) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetSeries() string {
	if o == nil || IsNil(o.Series) {
		var ret string
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetSeriesOk() (*string, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given string and assigns it to the Series field.
func (o *ImmunizationProtocolApplied) SetSeries(v string) {
	o.Series = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetAuthority() Reference {
	if o == nil || IsNil(o.Authority) {
		var ret Reference
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetAuthorityOk() (*Reference, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given Reference and assigns it to the Authority field.
func (o *ImmunizationProtocolApplied) SetAuthority(v Reference) {
	o.Authority = &v
}

// GetTargetDisease returns the TargetDisease field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetTargetDisease() []CodeableConcept {
	if o == nil || IsNil(o.TargetDisease) {
		var ret []CodeableConcept
		return ret
	}
	return o.TargetDisease
}

// GetTargetDiseaseOk returns a tuple with the TargetDisease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetTargetDiseaseOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.TargetDisease) {
		return nil, false
	}
	return o.TargetDisease, true
}

// HasTargetDisease returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasTargetDisease() bool {
	if o != nil && !IsNil(o.TargetDisease) {
		return true
	}

	return false
}

// SetTargetDisease gets a reference to the given []CodeableConcept and assigns it to the TargetDisease field.
func (o *ImmunizationProtocolApplied) SetTargetDisease(v []CodeableConcept) {
	o.TargetDisease = v
}

// GetDoseNumberPositiveInt returns the DoseNumberPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetDoseNumberPositiveInt() float32 {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		var ret float32
		return ret
	}
	return *o.DoseNumberPositiveInt
}

// GetDoseNumberPositiveIntOk returns a tuple with the DoseNumberPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetDoseNumberPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.DoseNumberPositiveInt) {
		return nil, false
	}
	return o.DoseNumberPositiveInt, true
}

// HasDoseNumberPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasDoseNumberPositiveInt() bool {
	if o != nil && !IsNil(o.DoseNumberPositiveInt) {
		return true
	}

	return false
}

// SetDoseNumberPositiveInt gets a reference to the given float32 and assigns it to the DoseNumberPositiveInt field.
func (o *ImmunizationProtocolApplied) SetDoseNumberPositiveInt(v float32) {
	o.DoseNumberPositiveInt = &v
}

// GetDoseNumberString returns the DoseNumberString field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetDoseNumberString() string {
	if o == nil || IsNil(o.DoseNumberString) {
		var ret string
		return ret
	}
	return *o.DoseNumberString
}

// GetDoseNumberStringOk returns a tuple with the DoseNumberString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetDoseNumberStringOk() (*string, bool) {
	if o == nil || IsNil(o.DoseNumberString) {
		return nil, false
	}
	return o.DoseNumberString, true
}

// HasDoseNumberString returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasDoseNumberString() bool {
	if o != nil && !IsNil(o.DoseNumberString) {
		return true
	}

	return false
}

// SetDoseNumberString gets a reference to the given string and assigns it to the DoseNumberString field.
func (o *ImmunizationProtocolApplied) SetDoseNumberString(v string) {
	o.DoseNumberString = &v
}

// GetSeriesDosesPositiveInt returns the SeriesDosesPositiveInt field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetSeriesDosesPositiveInt() float32 {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		var ret float32
		return ret
	}
	return *o.SeriesDosesPositiveInt
}

// GetSeriesDosesPositiveIntOk returns a tuple with the SeriesDosesPositiveInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetSeriesDosesPositiveIntOk() (*float32, bool) {
	if o == nil || IsNil(o.SeriesDosesPositiveInt) {
		return nil, false
	}
	return o.SeriesDosesPositiveInt, true
}

// HasSeriesDosesPositiveInt returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasSeriesDosesPositiveInt() bool {
	if o != nil && !IsNil(o.SeriesDosesPositiveInt) {
		return true
	}

	return false
}

// SetSeriesDosesPositiveInt gets a reference to the given float32 and assigns it to the SeriesDosesPositiveInt field.
func (o *ImmunizationProtocolApplied) SetSeriesDosesPositiveInt(v float32) {
	o.SeriesDosesPositiveInt = &v
}

// GetSeriesDosesString returns the SeriesDosesString field value if set, zero value otherwise.
func (o *ImmunizationProtocolApplied) GetSeriesDosesString() string {
	if o == nil || IsNil(o.SeriesDosesString) {
		var ret string
		return ret
	}
	return *o.SeriesDosesString
}

// GetSeriesDosesStringOk returns a tuple with the SeriesDosesString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImmunizationProtocolApplied) GetSeriesDosesStringOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesDosesString) {
		return nil, false
	}
	return o.SeriesDosesString, true
}

// HasSeriesDosesString returns a boolean if a field has been set.
func (o *ImmunizationProtocolApplied) HasSeriesDosesString() bool {
	if o != nil && !IsNil(o.SeriesDosesString) {
		return true
	}

	return false
}

// SetSeriesDosesString gets a reference to the given string and assigns it to the SeriesDosesString field.
func (o *ImmunizationProtocolApplied) SetSeriesDosesString(v string) {
	o.SeriesDosesString = &v
}

func (o ImmunizationProtocolApplied) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImmunizationProtocolApplied) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.TargetDisease) {
		toSerialize["targetDisease"] = o.TargetDisease
	}
	if !IsNil(o.DoseNumberPositiveInt) {
		toSerialize["doseNumberPositiveInt"] = o.DoseNumberPositiveInt
	}
	if !IsNil(o.DoseNumberString) {
		toSerialize["doseNumberString"] = o.DoseNumberString
	}
	if !IsNil(o.SeriesDosesPositiveInt) {
		toSerialize["seriesDosesPositiveInt"] = o.SeriesDosesPositiveInt
	}
	if !IsNil(o.SeriesDosesString) {
		toSerialize["seriesDosesString"] = o.SeriesDosesString
	}
	return toSerialize, nil
}

type NullableImmunizationProtocolApplied struct {
	value *ImmunizationProtocolApplied
	isSet bool
}

func (v NullableImmunizationProtocolApplied) Get() *ImmunizationProtocolApplied {
	return v.value
}

func (v *NullableImmunizationProtocolApplied) Set(val *ImmunizationProtocolApplied) {
	v.value = val
	v.isSet = true
}

func (v NullableImmunizationProtocolApplied) IsSet() bool {
	return v.isSet
}

func (v *NullableImmunizationProtocolApplied) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImmunizationProtocolApplied(val *ImmunizationProtocolApplied) *NullableImmunizationProtocolApplied {
	return &NullableImmunizationProtocolApplied{value: val, isSet: true}
}

func (v NullableImmunizationProtocolApplied) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImmunizationProtocolApplied) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


