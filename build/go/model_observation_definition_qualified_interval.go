/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ObservationDefinitionQualifiedInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationDefinitionQualifiedInterval{}

// ObservationDefinitionQualifiedInterval Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
type ObservationDefinitionQualifiedInterval struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
	Category *string `json:"category,omitempty"`
	// The low and high values determining the interval. There may be only one of the two.
	Range *Range `json:"range,omitempty"`
	// Codes to indicate the health context the range applies to. For example, the normal or therapeutic range.
	Context *CodeableConcept `json:"context,omitempty"`
	// Codes to indicate the target population this reference range applies to.
	AppliesTo []CodeableConcept `json:"appliesTo,omitempty"`
	// Sex of the population the range applies to.
	Gender *string `json:"gender,omitempty"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
	Age *Range `json:"age,omitempty"`
	// The gestational age to which this reference range is applicable, in the context of pregnancy.
	GestationalAge *Range `json:"gestationalAge,omitempty"`
	// A sequence of Unicode characters
	Condition *string `json:"condition,omitempty"`
}

// NewObservationDefinitionQualifiedInterval instantiates a new ObservationDefinitionQualifiedInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationDefinitionQualifiedInterval() *ObservationDefinitionQualifiedInterval {
	this := ObservationDefinitionQualifiedInterval{}
	return &this
}

// NewObservationDefinitionQualifiedIntervalWithDefaults instantiates a new ObservationDefinitionQualifiedInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationDefinitionQualifiedIntervalWithDefaults() *ObservationDefinitionQualifiedInterval {
	this := ObservationDefinitionQualifiedInterval{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationDefinitionQualifiedInterval) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ObservationDefinitionQualifiedInterval) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ObservationDefinitionQualifiedInterval) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ObservationDefinitionQualifiedInterval) SetCategory(v string) {
	o.Category = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetRange() Range {
	if o == nil || IsNil(o.Range) {
		var ret Range
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given Range and assigns it to the Range field.
func (o *ObservationDefinitionQualifiedInterval) SetRange(v Range) {
	o.Range = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetContext() CodeableConcept {
	if o == nil || IsNil(o.Context) {
		var ret CodeableConcept
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetContextOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given CodeableConcept and assigns it to the Context field.
func (o *ObservationDefinitionQualifiedInterval) SetContext(v CodeableConcept) {
	o.Context = &v
}

// GetAppliesTo returns the AppliesTo field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetAppliesTo() []CodeableConcept {
	if o == nil || IsNil(o.AppliesTo) {
		var ret []CodeableConcept
		return ret
	}
	return o.AppliesTo
}

// GetAppliesToOk returns a tuple with the AppliesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetAppliesToOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.AppliesTo) {
		return nil, false
	}
	return o.AppliesTo, true
}

// HasAppliesTo returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasAppliesTo() bool {
	if o != nil && !IsNil(o.AppliesTo) {
		return true
	}

	return false
}

// SetAppliesTo gets a reference to the given []CodeableConcept and assigns it to the AppliesTo field.
func (o *ObservationDefinitionQualifiedInterval) SetAppliesTo(v []CodeableConcept) {
	o.AppliesTo = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *ObservationDefinitionQualifiedInterval) SetGender(v string) {
	o.Gender = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetAge() Range {
	if o == nil || IsNil(o.Age) {
		var ret Range
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetAgeOk() (*Range, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given Range and assigns it to the Age field.
func (o *ObservationDefinitionQualifiedInterval) SetAge(v Range) {
	o.Age = &v
}

// GetGestationalAge returns the GestationalAge field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetGestationalAge() Range {
	if o == nil || IsNil(o.GestationalAge) {
		var ret Range
		return ret
	}
	return *o.GestationalAge
}

// GetGestationalAgeOk returns a tuple with the GestationalAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetGestationalAgeOk() (*Range, bool) {
	if o == nil || IsNil(o.GestationalAge) {
		return nil, false
	}
	return o.GestationalAge, true
}

// HasGestationalAge returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasGestationalAge() bool {
	if o != nil && !IsNil(o.GestationalAge) {
		return true
	}

	return false
}

// SetGestationalAge gets a reference to the given Range and assigns it to the GestationalAge field.
func (o *ObservationDefinitionQualifiedInterval) SetGestationalAge(v Range) {
	o.GestationalAge = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ObservationDefinitionQualifiedInterval) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQualifiedInterval) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ObservationDefinitionQualifiedInterval) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *ObservationDefinitionQualifiedInterval) SetCondition(v string) {
	o.Condition = &v
}

func (o ObservationDefinitionQualifiedInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationDefinitionQualifiedInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.AppliesTo) {
		toSerialize["appliesTo"] = o.AppliesTo
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.GestationalAge) {
		toSerialize["gestationalAge"] = o.GestationalAge
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

type NullableObservationDefinitionQualifiedInterval struct {
	value *ObservationDefinitionQualifiedInterval
	isSet bool
}

func (v NullableObservationDefinitionQualifiedInterval) Get() *ObservationDefinitionQualifiedInterval {
	return v.value
}

func (v *NullableObservationDefinitionQualifiedInterval) Set(val *ObservationDefinitionQualifiedInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationDefinitionQualifiedInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationDefinitionQualifiedInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationDefinitionQualifiedInterval(val *ObservationDefinitionQualifiedInterval) *NullableObservationDefinitionQualifiedInterval {
	return &NullableObservationDefinitionQualifiedInterval{value: val, isSet: true}
}

func (v NullableObservationDefinitionQualifiedInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationDefinitionQualifiedInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


