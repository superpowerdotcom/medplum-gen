/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSourceMaterialHybrid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSourceMaterialHybrid{}

// SubstanceSourceMaterialHybrid Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterialHybrid struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	MaternalOrganismId *string `json:"maternalOrganismId,omitempty"`
	// A sequence of Unicode characters
	MaternalOrganismName *string `json:"maternalOrganismName,omitempty"`
	// A sequence of Unicode characters
	PaternalOrganismId *string `json:"paternalOrganismId,omitempty"`
	// A sequence of Unicode characters
	PaternalOrganismName *string `json:"paternalOrganismName,omitempty"`
	// The hybrid type of an organism shall be specified.
	HybridType *CodeableConcept `json:"hybridType,omitempty"`
}

// NewSubstanceSourceMaterialHybrid instantiates a new SubstanceSourceMaterialHybrid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSourceMaterialHybrid() *SubstanceSourceMaterialHybrid {
	this := SubstanceSourceMaterialHybrid{}
	return &this
}

// NewSubstanceSourceMaterialHybridWithDefaults instantiates a new SubstanceSourceMaterialHybrid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSourceMaterialHybridWithDefaults() *SubstanceSourceMaterialHybrid {
	this := SubstanceSourceMaterialHybrid{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSourceMaterialHybrid) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSourceMaterialHybrid) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSourceMaterialHybrid) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetMaternalOrganismId returns the MaternalOrganismId field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetMaternalOrganismId() string {
	if o == nil || IsNil(o.MaternalOrganismId) {
		var ret string
		return ret
	}
	return *o.MaternalOrganismId
}

// GetMaternalOrganismIdOk returns a tuple with the MaternalOrganismId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetMaternalOrganismIdOk() (*string, bool) {
	if o == nil || IsNil(o.MaternalOrganismId) {
		return nil, false
	}
	return o.MaternalOrganismId, true
}

// HasMaternalOrganismId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasMaternalOrganismId() bool {
	if o != nil && !IsNil(o.MaternalOrganismId) {
		return true
	}

	return false
}

// SetMaternalOrganismId gets a reference to the given string and assigns it to the MaternalOrganismId field.
func (o *SubstanceSourceMaterialHybrid) SetMaternalOrganismId(v string) {
	o.MaternalOrganismId = &v
}

// GetMaternalOrganismName returns the MaternalOrganismName field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetMaternalOrganismName() string {
	if o == nil || IsNil(o.MaternalOrganismName) {
		var ret string
		return ret
	}
	return *o.MaternalOrganismName
}

// GetMaternalOrganismNameOk returns a tuple with the MaternalOrganismName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetMaternalOrganismNameOk() (*string, bool) {
	if o == nil || IsNil(o.MaternalOrganismName) {
		return nil, false
	}
	return o.MaternalOrganismName, true
}

// HasMaternalOrganismName returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasMaternalOrganismName() bool {
	if o != nil && !IsNil(o.MaternalOrganismName) {
		return true
	}

	return false
}

// SetMaternalOrganismName gets a reference to the given string and assigns it to the MaternalOrganismName field.
func (o *SubstanceSourceMaterialHybrid) SetMaternalOrganismName(v string) {
	o.MaternalOrganismName = &v
}

// GetPaternalOrganismId returns the PaternalOrganismId field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetPaternalOrganismId() string {
	if o == nil || IsNil(o.PaternalOrganismId) {
		var ret string
		return ret
	}
	return *o.PaternalOrganismId
}

// GetPaternalOrganismIdOk returns a tuple with the PaternalOrganismId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetPaternalOrganismIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaternalOrganismId) {
		return nil, false
	}
	return o.PaternalOrganismId, true
}

// HasPaternalOrganismId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasPaternalOrganismId() bool {
	if o != nil && !IsNil(o.PaternalOrganismId) {
		return true
	}

	return false
}

// SetPaternalOrganismId gets a reference to the given string and assigns it to the PaternalOrganismId field.
func (o *SubstanceSourceMaterialHybrid) SetPaternalOrganismId(v string) {
	o.PaternalOrganismId = &v
}

// GetPaternalOrganismName returns the PaternalOrganismName field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetPaternalOrganismName() string {
	if o == nil || IsNil(o.PaternalOrganismName) {
		var ret string
		return ret
	}
	return *o.PaternalOrganismName
}

// GetPaternalOrganismNameOk returns a tuple with the PaternalOrganismName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetPaternalOrganismNameOk() (*string, bool) {
	if o == nil || IsNil(o.PaternalOrganismName) {
		return nil, false
	}
	return o.PaternalOrganismName, true
}

// HasPaternalOrganismName returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasPaternalOrganismName() bool {
	if o != nil && !IsNil(o.PaternalOrganismName) {
		return true
	}

	return false
}

// SetPaternalOrganismName gets a reference to the given string and assigns it to the PaternalOrganismName field.
func (o *SubstanceSourceMaterialHybrid) SetPaternalOrganismName(v string) {
	o.PaternalOrganismName = &v
}

// GetHybridType returns the HybridType field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialHybrid) GetHybridType() CodeableConcept {
	if o == nil || IsNil(o.HybridType) {
		var ret CodeableConcept
		return ret
	}
	return *o.HybridType
}

// GetHybridTypeOk returns a tuple with the HybridType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialHybrid) GetHybridTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.HybridType) {
		return nil, false
	}
	return o.HybridType, true
}

// HasHybridType returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialHybrid) HasHybridType() bool {
	if o != nil && !IsNil(o.HybridType) {
		return true
	}

	return false
}

// SetHybridType gets a reference to the given CodeableConcept and assigns it to the HybridType field.
func (o *SubstanceSourceMaterialHybrid) SetHybridType(v CodeableConcept) {
	o.HybridType = &v
}

func (o SubstanceSourceMaterialHybrid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSourceMaterialHybrid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.MaternalOrganismId) {
		toSerialize["maternalOrganismId"] = o.MaternalOrganismId
	}
	if !IsNil(o.MaternalOrganismName) {
		toSerialize["maternalOrganismName"] = o.MaternalOrganismName
	}
	if !IsNil(o.PaternalOrganismId) {
		toSerialize["paternalOrganismId"] = o.PaternalOrganismId
	}
	if !IsNil(o.PaternalOrganismName) {
		toSerialize["paternalOrganismName"] = o.PaternalOrganismName
	}
	if !IsNil(o.HybridType) {
		toSerialize["hybridType"] = o.HybridType
	}
	return toSerialize, nil
}

type NullableSubstanceSourceMaterialHybrid struct {
	value *SubstanceSourceMaterialHybrid
	isSet bool
}

func (v NullableSubstanceSourceMaterialHybrid) Get() *SubstanceSourceMaterialHybrid {
	return v.value
}

func (v *NullableSubstanceSourceMaterialHybrid) Set(val *SubstanceSourceMaterialHybrid) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSourceMaterialHybrid) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSourceMaterialHybrid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSourceMaterialHybrid(val *SubstanceSourceMaterialHybrid) *NullableSubstanceSourceMaterialHybrid {
	return &NullableSubstanceSourceMaterialHybrid{value: val, isSet: true}
}

func (v NullableSubstanceSourceMaterialHybrid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSourceMaterialHybrid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


