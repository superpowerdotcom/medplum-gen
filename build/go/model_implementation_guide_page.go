/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ImplementationGuidePage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationGuidePage{}

// ImplementationGuidePage A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
type ImplementationGuidePage struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The source address for the page.
	NameUrl *string `json:"nameUrl,omitempty"`
	// The source address for the page.
	NameReference *Reference `json:"nameReference,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A code that indicates how the page is generated.
	Generation *string `json:"generation,omitempty"`
	// Nested Pages/Sections under this page.
	Page []ImplementationGuidePage `json:"page,omitempty"`
}

// NewImplementationGuidePage instantiates a new ImplementationGuidePage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationGuidePage() *ImplementationGuidePage {
	this := ImplementationGuidePage{}
	return &this
}

// NewImplementationGuidePageWithDefaults instantiates a new ImplementationGuidePage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationGuidePageWithDefaults() *ImplementationGuidePage {
	this := ImplementationGuidePage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImplementationGuidePage) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ImplementationGuidePage) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ImplementationGuidePage) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetNameUrl returns the NameUrl field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetNameUrl() string {
	if o == nil || IsNil(o.NameUrl) {
		var ret string
		return ret
	}
	return *o.NameUrl
}

// GetNameUrlOk returns a tuple with the NameUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetNameUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NameUrl) {
		return nil, false
	}
	return o.NameUrl, true
}

// HasNameUrl returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasNameUrl() bool {
	if o != nil && !IsNil(o.NameUrl) {
		return true
	}

	return false
}

// SetNameUrl gets a reference to the given string and assigns it to the NameUrl field.
func (o *ImplementationGuidePage) SetNameUrl(v string) {
	o.NameUrl = &v
}

// GetNameReference returns the NameReference field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetNameReference() Reference {
	if o == nil || IsNil(o.NameReference) {
		var ret Reference
		return ret
	}
	return *o.NameReference
}

// GetNameReferenceOk returns a tuple with the NameReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetNameReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.NameReference) {
		return nil, false
	}
	return o.NameReference, true
}

// HasNameReference returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasNameReference() bool {
	if o != nil && !IsNil(o.NameReference) {
		return true
	}

	return false
}

// SetNameReference gets a reference to the given Reference and assigns it to the NameReference field.
func (o *ImplementationGuidePage) SetNameReference(v Reference) {
	o.NameReference = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ImplementationGuidePage) SetTitle(v string) {
	o.Title = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetGeneration() string {
	if o == nil || IsNil(o.Generation) {
		var ret string
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetGenerationOk() (*string, bool) {
	if o == nil || IsNil(o.Generation) {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasGeneration() bool {
	if o != nil && !IsNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given string and assigns it to the Generation field.
func (o *ImplementationGuidePage) SetGeneration(v string) {
	o.Generation = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ImplementationGuidePage) GetPage() []ImplementationGuidePage {
	if o == nil || IsNil(o.Page) {
		var ret []ImplementationGuidePage
		return ret
	}
	return o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationGuidePage) GetPageOk() ([]ImplementationGuidePage, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ImplementationGuidePage) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given []ImplementationGuidePage and assigns it to the Page field.
func (o *ImplementationGuidePage) SetPage(v []ImplementationGuidePage) {
	o.Page = v
}

func (o ImplementationGuidePage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationGuidePage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.NameUrl) {
		toSerialize["nameUrl"] = o.NameUrl
	}
	if !IsNil(o.NameReference) {
		toSerialize["nameReference"] = o.NameReference
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullableImplementationGuidePage struct {
	value *ImplementationGuidePage
	isSet bool
}

func (v NullableImplementationGuidePage) Get() *ImplementationGuidePage {
	return v.value
}

func (v *NullableImplementationGuidePage) Set(val *ImplementationGuidePage) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationGuidePage) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationGuidePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationGuidePage(val *ImplementationGuidePage) *NullableImplementationGuidePage {
	return &NullableImplementationGuidePage{value: val, isSet: true}
}

func (v NullableImplementationGuidePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationGuidePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


