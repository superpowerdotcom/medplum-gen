/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceReferenceInformationTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceReferenceInformationTarget{}

// SubstanceReferenceInformationTarget Todo.
type SubstanceReferenceInformationTarget struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Todo.
	Target *Identifier `json:"target,omitempty"`
	// Todo.
	Type *CodeableConcept `json:"type,omitempty"`
	// Todo.
	Interaction *CodeableConcept `json:"interaction,omitempty"`
	// Todo.
	Organism *CodeableConcept `json:"organism,omitempty"`
	// Todo.
	OrganismType *CodeableConcept `json:"organismType,omitempty"`
	// Todo.
	AmountQuantity *Quantity `json:"amountQuantity,omitempty"`
	// Todo.
	AmountRange *Range `json:"amountRange,omitempty"`
	// Todo.
	AmountString *string `json:"amountString,omitempty"`
	// Todo.
	AmountType *CodeableConcept `json:"amountType,omitempty"`
	// Todo.
	Source []Reference `json:"source,omitempty"`
}

// NewSubstanceReferenceInformationTarget instantiates a new SubstanceReferenceInformationTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceReferenceInformationTarget() *SubstanceReferenceInformationTarget {
	this := SubstanceReferenceInformationTarget{}
	return &this
}

// NewSubstanceReferenceInformationTargetWithDefaults instantiates a new SubstanceReferenceInformationTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceReferenceInformationTargetWithDefaults() *SubstanceReferenceInformationTarget {
	this := SubstanceReferenceInformationTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceReferenceInformationTarget) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceReferenceInformationTarget) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceReferenceInformationTarget) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetTarget() Identifier {
	if o == nil || IsNil(o.Target) {
		var ret Identifier
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetTargetOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given Identifier and assigns it to the Target field.
func (o *SubstanceReferenceInformationTarget) SetTarget(v Identifier) {
	o.Target = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *SubstanceReferenceInformationTarget) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetInteraction returns the Interaction field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetInteraction() CodeableConcept {
	if o == nil || IsNil(o.Interaction) {
		var ret CodeableConcept
		return ret
	}
	return *o.Interaction
}

// GetInteractionOk returns a tuple with the Interaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetInteractionOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Interaction) {
		return nil, false
	}
	return o.Interaction, true
}

// HasInteraction returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasInteraction() bool {
	if o != nil && !IsNil(o.Interaction) {
		return true
	}

	return false
}

// SetInteraction gets a reference to the given CodeableConcept and assigns it to the Interaction field.
func (o *SubstanceReferenceInformationTarget) SetInteraction(v CodeableConcept) {
	o.Interaction = &v
}

// GetOrganism returns the Organism field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetOrganism() CodeableConcept {
	if o == nil || IsNil(o.Organism) {
		var ret CodeableConcept
		return ret
	}
	return *o.Organism
}

// GetOrganismOk returns a tuple with the Organism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetOrganismOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Organism) {
		return nil, false
	}
	return o.Organism, true
}

// HasOrganism returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasOrganism() bool {
	if o != nil && !IsNil(o.Organism) {
		return true
	}

	return false
}

// SetOrganism gets a reference to the given CodeableConcept and assigns it to the Organism field.
func (o *SubstanceReferenceInformationTarget) SetOrganism(v CodeableConcept) {
	o.Organism = &v
}

// GetOrganismType returns the OrganismType field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetOrganismType() CodeableConcept {
	if o == nil || IsNil(o.OrganismType) {
		var ret CodeableConcept
		return ret
	}
	return *o.OrganismType
}

// GetOrganismTypeOk returns a tuple with the OrganismType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetOrganismTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.OrganismType) {
		return nil, false
	}
	return o.OrganismType, true
}

// HasOrganismType returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasOrganismType() bool {
	if o != nil && !IsNil(o.OrganismType) {
		return true
	}

	return false
}

// SetOrganismType gets a reference to the given CodeableConcept and assigns it to the OrganismType field.
func (o *SubstanceReferenceInformationTarget) SetOrganismType(v CodeableConcept) {
	o.OrganismType = &v
}

// GetAmountQuantity returns the AmountQuantity field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetAmountQuantity() Quantity {
	if o == nil || IsNil(o.AmountQuantity) {
		var ret Quantity
		return ret
	}
	return *o.AmountQuantity
}

// GetAmountQuantityOk returns a tuple with the AmountQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetAmountQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.AmountQuantity) {
		return nil, false
	}
	return o.AmountQuantity, true
}

// HasAmountQuantity returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasAmountQuantity() bool {
	if o != nil && !IsNil(o.AmountQuantity) {
		return true
	}

	return false
}

// SetAmountQuantity gets a reference to the given Quantity and assigns it to the AmountQuantity field.
func (o *SubstanceReferenceInformationTarget) SetAmountQuantity(v Quantity) {
	o.AmountQuantity = &v
}

// GetAmountRange returns the AmountRange field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetAmountRange() Range {
	if o == nil || IsNil(o.AmountRange) {
		var ret Range
		return ret
	}
	return *o.AmountRange
}

// GetAmountRangeOk returns a tuple with the AmountRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetAmountRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.AmountRange) {
		return nil, false
	}
	return o.AmountRange, true
}

// HasAmountRange returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasAmountRange() bool {
	if o != nil && !IsNil(o.AmountRange) {
		return true
	}

	return false
}

// SetAmountRange gets a reference to the given Range and assigns it to the AmountRange field.
func (o *SubstanceReferenceInformationTarget) SetAmountRange(v Range) {
	o.AmountRange = &v
}

// GetAmountString returns the AmountString field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetAmountString() string {
	if o == nil || IsNil(o.AmountString) {
		var ret string
		return ret
	}
	return *o.AmountString
}

// GetAmountStringOk returns a tuple with the AmountString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetAmountStringOk() (*string, bool) {
	if o == nil || IsNil(o.AmountString) {
		return nil, false
	}
	return o.AmountString, true
}

// HasAmountString returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasAmountString() bool {
	if o != nil && !IsNil(o.AmountString) {
		return true
	}

	return false
}

// SetAmountString gets a reference to the given string and assigns it to the AmountString field.
func (o *SubstanceReferenceInformationTarget) SetAmountString(v string) {
	o.AmountString = &v
}

// GetAmountType returns the AmountType field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetAmountType() CodeableConcept {
	if o == nil || IsNil(o.AmountType) {
		var ret CodeableConcept
		return ret
	}
	return *o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetAmountTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.AmountType) {
		return nil, false
	}
	return o.AmountType, true
}

// HasAmountType returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasAmountType() bool {
	if o != nil && !IsNil(o.AmountType) {
		return true
	}

	return false
}

// SetAmountType gets a reference to the given CodeableConcept and assigns it to the AmountType field.
func (o *SubstanceReferenceInformationTarget) SetAmountType(v CodeableConcept) {
	o.AmountType = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SubstanceReferenceInformationTarget) GetSource() []Reference {
	if o == nil || IsNil(o.Source) {
		var ret []Reference
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceReferenceInformationTarget) GetSourceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SubstanceReferenceInformationTarget) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []Reference and assigns it to the Source field.
func (o *SubstanceReferenceInformationTarget) SetSource(v []Reference) {
	o.Source = v
}

func (o SubstanceReferenceInformationTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceReferenceInformationTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Interaction) {
		toSerialize["interaction"] = o.Interaction
	}
	if !IsNil(o.Organism) {
		toSerialize["organism"] = o.Organism
	}
	if !IsNil(o.OrganismType) {
		toSerialize["organismType"] = o.OrganismType
	}
	if !IsNil(o.AmountQuantity) {
		toSerialize["amountQuantity"] = o.AmountQuantity
	}
	if !IsNil(o.AmountRange) {
		toSerialize["amountRange"] = o.AmountRange
	}
	if !IsNil(o.AmountString) {
		toSerialize["amountString"] = o.AmountString
	}
	if !IsNil(o.AmountType) {
		toSerialize["amountType"] = o.AmountType
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableSubstanceReferenceInformationTarget struct {
	value *SubstanceReferenceInformationTarget
	isSet bool
}

func (v NullableSubstanceReferenceInformationTarget) Get() *SubstanceReferenceInformationTarget {
	return v.value
}

func (v *NullableSubstanceReferenceInformationTarget) Set(val *SubstanceReferenceInformationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceReferenceInformationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceReferenceInformationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceReferenceInformationTarget(val *SubstanceReferenceInformationTarget) *NullableSubstanceReferenceInformationTarget {
	return &NullableSubstanceReferenceInformationTarget{value: val, isSet: true}
}

func (v NullableSubstanceReferenceInformationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceReferenceInformationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


