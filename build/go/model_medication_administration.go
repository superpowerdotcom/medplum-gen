/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicationAdministration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationAdministration{}

// MedicationAdministration Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
type MedicationAdministration struct {
	// This is a MedicationAdministration resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A protocol, guideline, orderset, or other definition that was adhered to in whole or in part by this event.
	Instantiates []string `json:"instantiates,omitempty"`
	// A larger event of which this particular event is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A code indicating why the administration was not performed.
	StatusReason []CodeableConcept `json:"statusReason,omitempty"`
	// Indicates where the medication is expected to be consumed or administered.
	Category *CodeableConcept `json:"category,omitempty"`
	// Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	MedicationCodeableConcept *CodeableConcept `json:"medicationCodeableConcept,omitempty"`
	// Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
	MedicationReference *Reference `json:"medicationReference,omitempty"`
	// The person or animal or group receiving the medication.
	Subject Reference `json:"subject"`
	// The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
	Context *Reference `json:"context,omitempty"`
	// Additional information (for example, patient height and weight) that supports the administration of the medication.
	SupportingInformation []Reference `json:"supportingInformation,omitempty"`
	// A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
	EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`
	// A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
	EffectivePeriod *Period `json:"effectivePeriod,omitempty"`
	// Indicates who or what performed the medication administration and how they were involved.
	Performer []MedicationAdministrationPerformer `json:"performer,omitempty"`
	// A code indicating why the medication was given.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Condition or observation that supports why the medication was administered.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// The original request, instruction or authority to perform the administration.
	Request *Reference `json:"request,omitempty"`
	// The device used in administering the medication to the patient.  For example, a particular infusion pump.
	Device []Reference `json:"device,omitempty"`
	// Extra information about the medication administration that is not conveyed by the other attributes.
	Note []Annotation `json:"note,omitempty"`
	// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
	Dosage *MedicationAdministrationDosage `json:"dosage,omitempty"`
	// A summary of the events of interest that have occurred, such as when the administration was verified.
	EventHistory []Reference `json:"eventHistory,omitempty"`
}

type _MedicationAdministration MedicationAdministration

// NewMedicationAdministration instantiates a new MedicationAdministration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationAdministration(resourceType string, subject Reference) *MedicationAdministration {
	this := MedicationAdministration{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewMedicationAdministrationWithDefaults instantiates a new MedicationAdministration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationAdministrationWithDefaults() *MedicationAdministration {
	this := MedicationAdministration{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *MedicationAdministration) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *MedicationAdministration) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationAdministration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationAdministration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationAdministration) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MedicationAdministration) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MedicationAdministration) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *MedicationAdministration) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *MedicationAdministration) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *MedicationAdministration) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *MedicationAdministration) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MedicationAdministration) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MedicationAdministration) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MedicationAdministration) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MedicationAdministration) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MedicationAdministration) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *MedicationAdministration) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *MedicationAdministration) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *MedicationAdministration) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *MedicationAdministration) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationAdministration) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationAdministration) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationAdministration) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationAdministration) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationAdministration) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationAdministration) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MedicationAdministration) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MedicationAdministration) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *MedicationAdministration) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiates returns the Instantiates field value if set, zero value otherwise.
func (o *MedicationAdministration) GetInstantiates() []string {
	if o == nil || IsNil(o.Instantiates) {
		var ret []string
		return ret
	}
	return o.Instantiates
}

// GetInstantiatesOk returns a tuple with the Instantiates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetInstantiatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Instantiates) {
		return nil, false
	}
	return o.Instantiates, true
}

// HasInstantiates returns a boolean if a field has been set.
func (o *MedicationAdministration) HasInstantiates() bool {
	if o != nil && !IsNil(o.Instantiates) {
		return true
	}

	return false
}

// SetInstantiates gets a reference to the given []string and assigns it to the Instantiates field.
func (o *MedicationAdministration) SetInstantiates(v []string) {
	o.Instantiates = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *MedicationAdministration) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *MedicationAdministration) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *MedicationAdministration) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MedicationAdministration) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MedicationAdministration) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MedicationAdministration) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *MedicationAdministration) GetStatusReason() []CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret []CodeableConcept
		return ret
	}
	return o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetStatusReasonOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *MedicationAdministration) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given []CodeableConcept and assigns it to the StatusReason field.
func (o *MedicationAdministration) SetStatusReason(v []CodeableConcept) {
	o.StatusReason = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MedicationAdministration) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *MedicationAdministration) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *MedicationAdministration) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetMedicationCodeableConcept returns the MedicationCodeableConcept field value if set, zero value otherwise.
func (o *MedicationAdministration) GetMedicationCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.MedicationCodeableConcept
}

// GetMedicationCodeableConceptOk returns a tuple with the MedicationCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetMedicationCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.MedicationCodeableConcept) {
		return nil, false
	}
	return o.MedicationCodeableConcept, true
}

// HasMedicationCodeableConcept returns a boolean if a field has been set.
func (o *MedicationAdministration) HasMedicationCodeableConcept() bool {
	if o != nil && !IsNil(o.MedicationCodeableConcept) {
		return true
	}

	return false
}

// SetMedicationCodeableConcept gets a reference to the given CodeableConcept and assigns it to the MedicationCodeableConcept field.
func (o *MedicationAdministration) SetMedicationCodeableConcept(v CodeableConcept) {
	o.MedicationCodeableConcept = &v
}

// GetMedicationReference returns the MedicationReference field value if set, zero value otherwise.
func (o *MedicationAdministration) GetMedicationReference() Reference {
	if o == nil || IsNil(o.MedicationReference) {
		var ret Reference
		return ret
	}
	return *o.MedicationReference
}

// GetMedicationReferenceOk returns a tuple with the MedicationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetMedicationReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.MedicationReference) {
		return nil, false
	}
	return o.MedicationReference, true
}

// HasMedicationReference returns a boolean if a field has been set.
func (o *MedicationAdministration) HasMedicationReference() bool {
	if o != nil && !IsNil(o.MedicationReference) {
		return true
	}

	return false
}

// SetMedicationReference gets a reference to the given Reference and assigns it to the MedicationReference field.
func (o *MedicationAdministration) SetMedicationReference(v Reference) {
	o.MedicationReference = &v
}

// GetSubject returns the Subject field value
func (o *MedicationAdministration) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *MedicationAdministration) SetSubject(v Reference) {
	o.Subject = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *MedicationAdministration) GetContext() Reference {
	if o == nil || IsNil(o.Context) {
		var ret Reference
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetContextOk() (*Reference, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *MedicationAdministration) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Reference and assigns it to the Context field.
func (o *MedicationAdministration) SetContext(v Reference) {
	o.Context = &v
}

// GetSupportingInformation returns the SupportingInformation field value if set, zero value otherwise.
func (o *MedicationAdministration) GetSupportingInformation() []Reference {
	if o == nil || IsNil(o.SupportingInformation) {
		var ret []Reference
		return ret
	}
	return o.SupportingInformation
}

// GetSupportingInformationOk returns a tuple with the SupportingInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetSupportingInformationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.SupportingInformation) {
		return nil, false
	}
	return o.SupportingInformation, true
}

// HasSupportingInformation returns a boolean if a field has been set.
func (o *MedicationAdministration) HasSupportingInformation() bool {
	if o != nil && !IsNil(o.SupportingInformation) {
		return true
	}

	return false
}

// SetSupportingInformation gets a reference to the given []Reference and assigns it to the SupportingInformation field.
func (o *MedicationAdministration) SetSupportingInformation(v []Reference) {
	o.SupportingInformation = v
}

// GetEffectiveDateTime returns the EffectiveDateTime field value if set, zero value otherwise.
func (o *MedicationAdministration) GetEffectiveDateTime() string {
	if o == nil || IsNil(o.EffectiveDateTime) {
		var ret string
		return ret
	}
	return *o.EffectiveDateTime
}

// GetEffectiveDateTimeOk returns a tuple with the EffectiveDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetEffectiveDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDateTime) {
		return nil, false
	}
	return o.EffectiveDateTime, true
}

// HasEffectiveDateTime returns a boolean if a field has been set.
func (o *MedicationAdministration) HasEffectiveDateTime() bool {
	if o != nil && !IsNil(o.EffectiveDateTime) {
		return true
	}

	return false
}

// SetEffectiveDateTime gets a reference to the given string and assigns it to the EffectiveDateTime field.
func (o *MedicationAdministration) SetEffectiveDateTime(v string) {
	o.EffectiveDateTime = &v
}

// GetEffectivePeriod returns the EffectivePeriod field value if set, zero value otherwise.
func (o *MedicationAdministration) GetEffectivePeriod() Period {
	if o == nil || IsNil(o.EffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.EffectivePeriod
}

// GetEffectivePeriodOk returns a tuple with the EffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.EffectivePeriod) {
		return nil, false
	}
	return o.EffectivePeriod, true
}

// HasEffectivePeriod returns a boolean if a field has been set.
func (o *MedicationAdministration) HasEffectivePeriod() bool {
	if o != nil && !IsNil(o.EffectivePeriod) {
		return true
	}

	return false
}

// SetEffectivePeriod gets a reference to the given Period and assigns it to the EffectivePeriod field.
func (o *MedicationAdministration) SetEffectivePeriod(v Period) {
	o.EffectivePeriod = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *MedicationAdministration) GetPerformer() []MedicationAdministrationPerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []MedicationAdministrationPerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetPerformerOk() ([]MedicationAdministrationPerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *MedicationAdministration) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []MedicationAdministrationPerformer and assigns it to the Performer field.
func (o *MedicationAdministration) SetPerformer(v []MedicationAdministrationPerformer) {
	o.Performer = v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *MedicationAdministration) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *MedicationAdministration) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *MedicationAdministration) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *MedicationAdministration) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *MedicationAdministration) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *MedicationAdministration) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *MedicationAdministration) GetRequest() Reference {
	if o == nil || IsNil(o.Request) {
		var ret Reference
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetRequestOk() (*Reference, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *MedicationAdministration) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Reference and assigns it to the Request field.
func (o *MedicationAdministration) SetRequest(v Reference) {
	o.Request = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *MedicationAdministration) GetDevice() []Reference {
	if o == nil || IsNil(o.Device) {
		var ret []Reference
		return ret
	}
	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetDeviceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *MedicationAdministration) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given []Reference and assigns it to the Device field.
func (o *MedicationAdministration) SetDevice(v []Reference) {
	o.Device = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *MedicationAdministration) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *MedicationAdministration) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *MedicationAdministration) SetNote(v []Annotation) {
	o.Note = v
}

// GetDosage returns the Dosage field value if set, zero value otherwise.
func (o *MedicationAdministration) GetDosage() MedicationAdministrationDosage {
	if o == nil || IsNil(o.Dosage) {
		var ret MedicationAdministrationDosage
		return ret
	}
	return *o.Dosage
}

// GetDosageOk returns a tuple with the Dosage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetDosageOk() (*MedicationAdministrationDosage, bool) {
	if o == nil || IsNil(o.Dosage) {
		return nil, false
	}
	return o.Dosage, true
}

// HasDosage returns a boolean if a field has been set.
func (o *MedicationAdministration) HasDosage() bool {
	if o != nil && !IsNil(o.Dosage) {
		return true
	}

	return false
}

// SetDosage gets a reference to the given MedicationAdministrationDosage and assigns it to the Dosage field.
func (o *MedicationAdministration) SetDosage(v MedicationAdministrationDosage) {
	o.Dosage = &v
}

// GetEventHistory returns the EventHistory field value if set, zero value otherwise.
func (o *MedicationAdministration) GetEventHistory() []Reference {
	if o == nil || IsNil(o.EventHistory) {
		var ret []Reference
		return ret
	}
	return o.EventHistory
}

// GetEventHistoryOk returns a tuple with the EventHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationAdministration) GetEventHistoryOk() ([]Reference, bool) {
	if o == nil || IsNil(o.EventHistory) {
		return nil, false
	}
	return o.EventHistory, true
}

// HasEventHistory returns a boolean if a field has been set.
func (o *MedicationAdministration) HasEventHistory() bool {
	if o != nil && !IsNil(o.EventHistory) {
		return true
	}

	return false
}

// SetEventHistory gets a reference to the given []Reference and assigns it to the EventHistory field.
func (o *MedicationAdministration) SetEventHistory(v []Reference) {
	o.EventHistory = v
}

func (o MedicationAdministration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationAdministration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Instantiates) {
		toSerialize["instantiates"] = o.Instantiates
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.MedicationCodeableConcept) {
		toSerialize["medicationCodeableConcept"] = o.MedicationCodeableConcept
	}
	if !IsNil(o.MedicationReference) {
		toSerialize["medicationReference"] = o.MedicationReference
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.SupportingInformation) {
		toSerialize["supportingInformation"] = o.SupportingInformation
	}
	if !IsNil(o.EffectiveDateTime) {
		toSerialize["effectiveDateTime"] = o.EffectiveDateTime
	}
	if !IsNil(o.EffectivePeriod) {
		toSerialize["effectivePeriod"] = o.EffectivePeriod
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Dosage) {
		toSerialize["dosage"] = o.Dosage
	}
	if !IsNil(o.EventHistory) {
		toSerialize["eventHistory"] = o.EventHistory
	}
	return toSerialize, nil
}

func (o *MedicationAdministration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicationAdministration := _MedicationAdministration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicationAdministration)

	if err != nil {
		return err
	}

	*o = MedicationAdministration(varMedicationAdministration)

	return err
}

type NullableMedicationAdministration struct {
	value *MedicationAdministration
	isSet bool
}

func (v NullableMedicationAdministration) Get() *MedicationAdministration {
	return v.value
}

func (v *NullableMedicationAdministration) Set(val *MedicationAdministration) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationAdministration) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationAdministration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationAdministration(val *MedicationAdministration) *NullableMedicationAdministration {
	return &NullableMedicationAdministration{value: val, isSet: true}
}

func (v NullableMedicationAdministration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationAdministration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


