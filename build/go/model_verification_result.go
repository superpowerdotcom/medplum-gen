/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerificationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationResult{}

// VerificationResult Describes validation requirements, source(s), status and dates for one or more elements.
type VerificationResult struct {
	// This is a VerificationResult resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A resource that was validated.
	Target []Reference `json:"target,omitempty"`
	// The fhirpath location(s) within the resource that was validated.
	TargetLocation []string `json:"targetLocation,omitempty"`
	// The frequency with which the target must be validated (none; initial; periodic).
	Need *CodeableConcept `json:"need,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	StatusDate *string `json:"statusDate,omitempty"`
	// What the target is validated against (nothing; primary source; multiple sources).
	ValidationType *CodeableConcept `json:"validationType,omitempty"`
	// The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
	ValidationProcess []CodeableConcept `json:"validationProcess,omitempty"`
	// Frequency of revalidation.
	Frequency *Timing `json:"frequency,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	LastPerformed *string `json:"lastPerformed,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	NextScheduled *string `json:"nextScheduled,omitempty"`
	// The result if validation fails (fatal; warning; record only; none).
	FailureAction *CodeableConcept `json:"failureAction,omitempty"`
	// Information about the primary source(s) involved in validation.
	PrimarySource []VerificationResultPrimarySource `json:"primarySource,omitempty"`
	// Information about the entity attesting to information.
	Attestation *VerificationResultAttestation `json:"attestation,omitempty"`
	// Information about the entity validating information.
	Validator []VerificationResultValidator `json:"validator,omitempty"`
}

type _VerificationResult VerificationResult

// NewVerificationResult instantiates a new VerificationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationResult(resourceType string) *VerificationResult {
	this := VerificationResult{}
	this.ResourceType = resourceType
	return &this
}

// NewVerificationResultWithDefaults instantiates a new VerificationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationResultWithDefaults() *VerificationResult {
	this := VerificationResult{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *VerificationResult) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *VerificationResult) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VerificationResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VerificationResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VerificationResult) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *VerificationResult) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *VerificationResult) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *VerificationResult) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *VerificationResult) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *VerificationResult) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *VerificationResult) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *VerificationResult) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *VerificationResult) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *VerificationResult) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *VerificationResult) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *VerificationResult) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *VerificationResult) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *VerificationResult) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *VerificationResult) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *VerificationResult) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *VerificationResult) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *VerificationResult) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *VerificationResult) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *VerificationResult) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *VerificationResult) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *VerificationResult) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *VerificationResult) GetTarget() []Reference {
	if o == nil || IsNil(o.Target) {
		var ret []Reference
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetTargetOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *VerificationResult) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given []Reference and assigns it to the Target field.
func (o *VerificationResult) SetTarget(v []Reference) {
	o.Target = v
}

// GetTargetLocation returns the TargetLocation field value if set, zero value otherwise.
func (o *VerificationResult) GetTargetLocation() []string {
	if o == nil || IsNil(o.TargetLocation) {
		var ret []string
		return ret
	}
	return o.TargetLocation
}

// GetTargetLocationOk returns a tuple with the TargetLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetTargetLocationOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetLocation) {
		return nil, false
	}
	return o.TargetLocation, true
}

// HasTargetLocation returns a boolean if a field has been set.
func (o *VerificationResult) HasTargetLocation() bool {
	if o != nil && !IsNil(o.TargetLocation) {
		return true
	}

	return false
}

// SetTargetLocation gets a reference to the given []string and assigns it to the TargetLocation field.
func (o *VerificationResult) SetTargetLocation(v []string) {
	o.TargetLocation = v
}

// GetNeed returns the Need field value if set, zero value otherwise.
func (o *VerificationResult) GetNeed() CodeableConcept {
	if o == nil || IsNil(o.Need) {
		var ret CodeableConcept
		return ret
	}
	return *o.Need
}

// GetNeedOk returns a tuple with the Need field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetNeedOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Need) {
		return nil, false
	}
	return o.Need, true
}

// HasNeed returns a boolean if a field has been set.
func (o *VerificationResult) HasNeed() bool {
	if o != nil && !IsNil(o.Need) {
		return true
	}

	return false
}

// SetNeed gets a reference to the given CodeableConcept and assigns it to the Need field.
func (o *VerificationResult) SetNeed(v CodeableConcept) {
	o.Need = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VerificationResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VerificationResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VerificationResult) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDate returns the StatusDate field value if set, zero value otherwise.
func (o *VerificationResult) GetStatusDate() string {
	if o == nil || IsNil(o.StatusDate) {
		var ret string
		return ret
	}
	return *o.StatusDate
}

// GetStatusDateOk returns a tuple with the StatusDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetStatusDateOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDate) {
		return nil, false
	}
	return o.StatusDate, true
}

// HasStatusDate returns a boolean if a field has been set.
func (o *VerificationResult) HasStatusDate() bool {
	if o != nil && !IsNil(o.StatusDate) {
		return true
	}

	return false
}

// SetStatusDate gets a reference to the given string and assigns it to the StatusDate field.
func (o *VerificationResult) SetStatusDate(v string) {
	o.StatusDate = &v
}

// GetValidationType returns the ValidationType field value if set, zero value otherwise.
func (o *VerificationResult) GetValidationType() CodeableConcept {
	if o == nil || IsNil(o.ValidationType) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValidationType
}

// GetValidationTypeOk returns a tuple with the ValidationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetValidationTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValidationType) {
		return nil, false
	}
	return o.ValidationType, true
}

// HasValidationType returns a boolean if a field has been set.
func (o *VerificationResult) HasValidationType() bool {
	if o != nil && !IsNil(o.ValidationType) {
		return true
	}

	return false
}

// SetValidationType gets a reference to the given CodeableConcept and assigns it to the ValidationType field.
func (o *VerificationResult) SetValidationType(v CodeableConcept) {
	o.ValidationType = &v
}

// GetValidationProcess returns the ValidationProcess field value if set, zero value otherwise.
func (o *VerificationResult) GetValidationProcess() []CodeableConcept {
	if o == nil || IsNil(o.ValidationProcess) {
		var ret []CodeableConcept
		return ret
	}
	return o.ValidationProcess
}

// GetValidationProcessOk returns a tuple with the ValidationProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetValidationProcessOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ValidationProcess) {
		return nil, false
	}
	return o.ValidationProcess, true
}

// HasValidationProcess returns a boolean if a field has been set.
func (o *VerificationResult) HasValidationProcess() bool {
	if o != nil && !IsNil(o.ValidationProcess) {
		return true
	}

	return false
}

// SetValidationProcess gets a reference to the given []CodeableConcept and assigns it to the ValidationProcess field.
func (o *VerificationResult) SetValidationProcess(v []CodeableConcept) {
	o.ValidationProcess = v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *VerificationResult) GetFrequency() Timing {
	if o == nil || IsNil(o.Frequency) {
		var ret Timing
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetFrequencyOk() (*Timing, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *VerificationResult) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given Timing and assigns it to the Frequency field.
func (o *VerificationResult) SetFrequency(v Timing) {
	o.Frequency = &v
}

// GetLastPerformed returns the LastPerformed field value if set, zero value otherwise.
func (o *VerificationResult) GetLastPerformed() string {
	if o == nil || IsNil(o.LastPerformed) {
		var ret string
		return ret
	}
	return *o.LastPerformed
}

// GetLastPerformedOk returns a tuple with the LastPerformed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetLastPerformedOk() (*string, bool) {
	if o == nil || IsNil(o.LastPerformed) {
		return nil, false
	}
	return o.LastPerformed, true
}

// HasLastPerformed returns a boolean if a field has been set.
func (o *VerificationResult) HasLastPerformed() bool {
	if o != nil && !IsNil(o.LastPerformed) {
		return true
	}

	return false
}

// SetLastPerformed gets a reference to the given string and assigns it to the LastPerformed field.
func (o *VerificationResult) SetLastPerformed(v string) {
	o.LastPerformed = &v
}

// GetNextScheduled returns the NextScheduled field value if set, zero value otherwise.
func (o *VerificationResult) GetNextScheduled() string {
	if o == nil || IsNil(o.NextScheduled) {
		var ret string
		return ret
	}
	return *o.NextScheduled
}

// GetNextScheduledOk returns a tuple with the NextScheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetNextScheduledOk() (*string, bool) {
	if o == nil || IsNil(o.NextScheduled) {
		return nil, false
	}
	return o.NextScheduled, true
}

// HasNextScheduled returns a boolean if a field has been set.
func (o *VerificationResult) HasNextScheduled() bool {
	if o != nil && !IsNil(o.NextScheduled) {
		return true
	}

	return false
}

// SetNextScheduled gets a reference to the given string and assigns it to the NextScheduled field.
func (o *VerificationResult) SetNextScheduled(v string) {
	o.NextScheduled = &v
}

// GetFailureAction returns the FailureAction field value if set, zero value otherwise.
func (o *VerificationResult) GetFailureAction() CodeableConcept {
	if o == nil || IsNil(o.FailureAction) {
		var ret CodeableConcept
		return ret
	}
	return *o.FailureAction
}

// GetFailureActionOk returns a tuple with the FailureAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetFailureActionOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.FailureAction) {
		return nil, false
	}
	return o.FailureAction, true
}

// HasFailureAction returns a boolean if a field has been set.
func (o *VerificationResult) HasFailureAction() bool {
	if o != nil && !IsNil(o.FailureAction) {
		return true
	}

	return false
}

// SetFailureAction gets a reference to the given CodeableConcept and assigns it to the FailureAction field.
func (o *VerificationResult) SetFailureAction(v CodeableConcept) {
	o.FailureAction = &v
}

// GetPrimarySource returns the PrimarySource field value if set, zero value otherwise.
func (o *VerificationResult) GetPrimarySource() []VerificationResultPrimarySource {
	if o == nil || IsNil(o.PrimarySource) {
		var ret []VerificationResultPrimarySource
		return ret
	}
	return o.PrimarySource
}

// GetPrimarySourceOk returns a tuple with the PrimarySource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetPrimarySourceOk() ([]VerificationResultPrimarySource, bool) {
	if o == nil || IsNil(o.PrimarySource) {
		return nil, false
	}
	return o.PrimarySource, true
}

// HasPrimarySource returns a boolean if a field has been set.
func (o *VerificationResult) HasPrimarySource() bool {
	if o != nil && !IsNil(o.PrimarySource) {
		return true
	}

	return false
}

// SetPrimarySource gets a reference to the given []VerificationResultPrimarySource and assigns it to the PrimarySource field.
func (o *VerificationResult) SetPrimarySource(v []VerificationResultPrimarySource) {
	o.PrimarySource = v
}

// GetAttestation returns the Attestation field value if set, zero value otherwise.
func (o *VerificationResult) GetAttestation() VerificationResultAttestation {
	if o == nil || IsNil(o.Attestation) {
		var ret VerificationResultAttestation
		return ret
	}
	return *o.Attestation
}

// GetAttestationOk returns a tuple with the Attestation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetAttestationOk() (*VerificationResultAttestation, bool) {
	if o == nil || IsNil(o.Attestation) {
		return nil, false
	}
	return o.Attestation, true
}

// HasAttestation returns a boolean if a field has been set.
func (o *VerificationResult) HasAttestation() bool {
	if o != nil && !IsNil(o.Attestation) {
		return true
	}

	return false
}

// SetAttestation gets a reference to the given VerificationResultAttestation and assigns it to the Attestation field.
func (o *VerificationResult) SetAttestation(v VerificationResultAttestation) {
	o.Attestation = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *VerificationResult) GetValidator() []VerificationResultValidator {
	if o == nil || IsNil(o.Validator) {
		var ret []VerificationResultValidator
		return ret
	}
	return o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetValidatorOk() ([]VerificationResultValidator, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *VerificationResult) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given []VerificationResultValidator and assigns it to the Validator field.
func (o *VerificationResult) SetValidator(v []VerificationResultValidator) {
	o.Validator = v
}

func (o VerificationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TargetLocation) {
		toSerialize["targetLocation"] = o.TargetLocation
	}
	if !IsNil(o.Need) {
		toSerialize["need"] = o.Need
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDate) {
		toSerialize["statusDate"] = o.StatusDate
	}
	if !IsNil(o.ValidationType) {
		toSerialize["validationType"] = o.ValidationType
	}
	if !IsNil(o.ValidationProcess) {
		toSerialize["validationProcess"] = o.ValidationProcess
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.LastPerformed) {
		toSerialize["lastPerformed"] = o.LastPerformed
	}
	if !IsNil(o.NextScheduled) {
		toSerialize["nextScheduled"] = o.NextScheduled
	}
	if !IsNil(o.FailureAction) {
		toSerialize["failureAction"] = o.FailureAction
	}
	if !IsNil(o.PrimarySource) {
		toSerialize["primarySource"] = o.PrimarySource
	}
	if !IsNil(o.Attestation) {
		toSerialize["attestation"] = o.Attestation
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	return toSerialize, nil
}

func (o *VerificationResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerificationResult := _VerificationResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerificationResult)

	if err != nil {
		return err
	}

	*o = VerificationResult(varVerificationResult)

	return err
}

type NullableVerificationResult struct {
	value *VerificationResult
	isSet bool
}

func (v NullableVerificationResult) Get() *VerificationResult {
	return v.value
}

func (v *NullableVerificationResult) Set(val *VerificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationResult(val *VerificationResult) *NullableVerificationResult {
	return &NullableVerificationResult{value: val, isSet: true}
}

func (v NullableVerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


