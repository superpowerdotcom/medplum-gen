/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SampledData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SampledData{}

// SampledData A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
type SampledData struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
	Origin Quantity `json:"origin"`
	// A rational number with implicit precision
	Period *float32 `json:"period,omitempty"`
	// A rational number with implicit precision
	Factor *float32 `json:"factor,omitempty"`
	// A rational number with implicit precision
	LowerLimit *float32 `json:"lowerLimit,omitempty"`
	// A rational number with implicit precision
	UpperLimit *float32 `json:"upperLimit,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Dimensions *float32 `json:"dimensions,omitempty"`
	// A sequence of Unicode characters
	Data *string `json:"data,omitempty"`
}

type _SampledData SampledData

// NewSampledData instantiates a new SampledData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampledData(origin Quantity) *SampledData {
	this := SampledData{}
	this.Origin = origin
	return &this
}

// NewSampledDataWithDefaults instantiates a new SampledData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampledDataWithDefaults() *SampledData {
	this := SampledData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SampledData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SampledData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SampledData) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SampledData) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SampledData) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SampledData) SetExtension(v []Extension) {
	o.Extension = v
}

// GetOrigin returns the Origin field value
func (o *SampledData) GetOrigin() Quantity {
	if o == nil {
		var ret Quantity
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *SampledData) GetOriginOk() (*Quantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *SampledData) SetOrigin(v Quantity) {
	o.Origin = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *SampledData) GetPeriod() float32 {
	if o == nil || IsNil(o.Period) {
		var ret float32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetPeriodOk() (*float32, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *SampledData) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given float32 and assigns it to the Period field.
func (o *SampledData) SetPeriod(v float32) {
	o.Period = &v
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *SampledData) GetFactor() float32 {
	if o == nil || IsNil(o.Factor) {
		var ret float32
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *SampledData) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float32 and assigns it to the Factor field.
func (o *SampledData) SetFactor(v float32) {
	o.Factor = &v
}

// GetLowerLimit returns the LowerLimit field value if set, zero value otherwise.
func (o *SampledData) GetLowerLimit() float32 {
	if o == nil || IsNil(o.LowerLimit) {
		var ret float32
		return ret
	}
	return *o.LowerLimit
}

// GetLowerLimitOk returns a tuple with the LowerLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetLowerLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.LowerLimit) {
		return nil, false
	}
	return o.LowerLimit, true
}

// HasLowerLimit returns a boolean if a field has been set.
func (o *SampledData) HasLowerLimit() bool {
	if o != nil && !IsNil(o.LowerLimit) {
		return true
	}

	return false
}

// SetLowerLimit gets a reference to the given float32 and assigns it to the LowerLimit field.
func (o *SampledData) SetLowerLimit(v float32) {
	o.LowerLimit = &v
}

// GetUpperLimit returns the UpperLimit field value if set, zero value otherwise.
func (o *SampledData) GetUpperLimit() float32 {
	if o == nil || IsNil(o.UpperLimit) {
		var ret float32
		return ret
	}
	return *o.UpperLimit
}

// GetUpperLimitOk returns a tuple with the UpperLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetUpperLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.UpperLimit) {
		return nil, false
	}
	return o.UpperLimit, true
}

// HasUpperLimit returns a boolean if a field has been set.
func (o *SampledData) HasUpperLimit() bool {
	if o != nil && !IsNil(o.UpperLimit) {
		return true
	}

	return false
}

// SetUpperLimit gets a reference to the given float32 and assigns it to the UpperLimit field.
func (o *SampledData) SetUpperLimit(v float32) {
	o.UpperLimit = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *SampledData) GetDimensions() float32 {
	if o == nil || IsNil(o.Dimensions) {
		var ret float32
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetDimensionsOk() (*float32, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *SampledData) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given float32 and assigns it to the Dimensions field.
func (o *SampledData) SetDimensions(v float32) {
	o.Dimensions = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SampledData) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampledData) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SampledData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *SampledData) SetData(v string) {
	o.Data = &v
}

func (o SampledData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SampledData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	toSerialize["origin"] = o.Origin
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.LowerLimit) {
		toSerialize["lowerLimit"] = o.LowerLimit
	}
	if !IsNil(o.UpperLimit) {
		toSerialize["upperLimit"] = o.UpperLimit
	}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *SampledData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"origin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSampledData := _SampledData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSampledData)

	if err != nil {
		return err
	}

	*o = SampledData(varSampledData)

	return err
}

type NullableSampledData struct {
	value *SampledData
	isSet bool
}

func (v NullableSampledData) Get() *SampledData {
	return v.value
}

func (v *NullableSampledData) Set(val *SampledData) {
	v.value = val
	v.isSet = true
}

func (v NullableSampledData) IsSet() bool {
	return v.isSet
}

func (v *NullableSampledData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampledData(val *SampledData) *NullableSampledData {
	return &NullableSampledData{value: val, isSet: true}
}

func (v NullableSampledData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampledData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


