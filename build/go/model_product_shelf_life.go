/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductShelfLife type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductShelfLife{}

// ProductShelfLife The shelf-life and storage information for a medicinal product item or container can be described using this class.
type ProductShelfLife struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique identifier for the packaged Medicinal Product.
	Identifier *Identifier `json:"identifier,omitempty"`
	// This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
	Type CodeableConcept `json:"type"`
	// The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
	Period Quantity `json:"period"`
	// Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
	SpecialPrecautionsForStorage []CodeableConcept `json:"specialPrecautionsForStorage,omitempty"`
}

type _ProductShelfLife ProductShelfLife

// NewProductShelfLife instantiates a new ProductShelfLife object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductShelfLife(type_ CodeableConcept, period Quantity) *ProductShelfLife {
	this := ProductShelfLife{}
	this.Type = type_
	this.Period = period
	return &this
}

// NewProductShelfLifeWithDefaults instantiates a new ProductShelfLife object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductShelfLifeWithDefaults() *ProductShelfLife {
	this := ProductShelfLife{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductShelfLife) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductShelfLife) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductShelfLife) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ProductShelfLife) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ProductShelfLife) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ProductShelfLife) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ProductShelfLife) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ProductShelfLife) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ProductShelfLife) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ProductShelfLife) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ProductShelfLife) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *ProductShelfLife) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetType returns the Type field value
func (o *ProductShelfLife) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProductShelfLife) SetType(v CodeableConcept) {
	o.Type = v
}

// GetPeriod returns the Period field value
func (o *ProductShelfLife) GetPeriod() Quantity {
	if o == nil {
		var ret Quantity
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetPeriodOk() (*Quantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *ProductShelfLife) SetPeriod(v Quantity) {
	o.Period = v
}

// GetSpecialPrecautionsForStorage returns the SpecialPrecautionsForStorage field value if set, zero value otherwise.
func (o *ProductShelfLife) GetSpecialPrecautionsForStorage() []CodeableConcept {
	if o == nil || IsNil(o.SpecialPrecautionsForStorage) {
		var ret []CodeableConcept
		return ret
	}
	return o.SpecialPrecautionsForStorage
}

// GetSpecialPrecautionsForStorageOk returns a tuple with the SpecialPrecautionsForStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductShelfLife) GetSpecialPrecautionsForStorageOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.SpecialPrecautionsForStorage) {
		return nil, false
	}
	return o.SpecialPrecautionsForStorage, true
}

// HasSpecialPrecautionsForStorage returns a boolean if a field has been set.
func (o *ProductShelfLife) HasSpecialPrecautionsForStorage() bool {
	if o != nil && !IsNil(o.SpecialPrecautionsForStorage) {
		return true
	}

	return false
}

// SetSpecialPrecautionsForStorage gets a reference to the given []CodeableConcept and assigns it to the SpecialPrecautionsForStorage field.
func (o *ProductShelfLife) SetSpecialPrecautionsForStorage(v []CodeableConcept) {
	o.SpecialPrecautionsForStorage = v
}

func (o ProductShelfLife) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductShelfLife) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["type"] = o.Type
	toSerialize["period"] = o.Period
	if !IsNil(o.SpecialPrecautionsForStorage) {
		toSerialize["specialPrecautionsForStorage"] = o.SpecialPrecautionsForStorage
	}
	return toSerialize, nil
}

func (o *ProductShelfLife) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"period",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductShelfLife := _ProductShelfLife{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductShelfLife)

	if err != nil {
		return err
	}

	*o = ProductShelfLife(varProductShelfLife)

	return err
}

type NullableProductShelfLife struct {
	value *ProductShelfLife
	isSet bool
}

func (v NullableProductShelfLife) Get() *ProductShelfLife {
	return v.value
}

func (v *NullableProductShelfLife) Set(val *ProductShelfLife) {
	v.value = val
	v.isSet = true
}

func (v NullableProductShelfLife) IsSet() bool {
	return v.isSet
}

func (v *NullableProductShelfLife) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductShelfLife(val *ProductShelfLife) *NullableProductShelfLife {
	return &NullableProductShelfLife{value: val, isSet: true}
}

func (v NullableProductShelfLife) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductShelfLife) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


