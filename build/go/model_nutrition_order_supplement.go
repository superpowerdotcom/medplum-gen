/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the NutritionOrderSupplement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NutritionOrderSupplement{}

// NutritionOrderSupplement A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
type NutritionOrderSupplement struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
	Type *CodeableConcept `json:"type,omitempty"`
	// A sequence of Unicode characters
	ProductName *string `json:"productName,omitempty"`
	// The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
	Schedule []Timing `json:"schedule,omitempty"`
	// The amount of the nutritional supplement to be given.
	Quantity *Quantity `json:"quantity,omitempty"`
	// A sequence of Unicode characters
	Instruction *string `json:"instruction,omitempty"`
}

// NewNutritionOrderSupplement instantiates a new NutritionOrderSupplement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNutritionOrderSupplement() *NutritionOrderSupplement {
	this := NutritionOrderSupplement{}
	return &this
}

// NewNutritionOrderSupplementWithDefaults instantiates a new NutritionOrderSupplement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNutritionOrderSupplementWithDefaults() *NutritionOrderSupplement {
	this := NutritionOrderSupplement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NutritionOrderSupplement) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *NutritionOrderSupplement) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *NutritionOrderSupplement) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *NutritionOrderSupplement) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *NutritionOrderSupplement) SetProductName(v string) {
	o.ProductName = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetSchedule() []Timing {
	if o == nil || IsNil(o.Schedule) {
		var ret []Timing
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetScheduleOk() ([]Timing, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given []Timing and assigns it to the Schedule field.
func (o *NutritionOrderSupplement) SetSchedule(v []Timing) {
	o.Schedule = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *NutritionOrderSupplement) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *NutritionOrderSupplement) GetInstruction() string {
	if o == nil || IsNil(o.Instruction) {
		var ret string
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NutritionOrderSupplement) GetInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *NutritionOrderSupplement) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given string and assigns it to the Instruction field.
func (o *NutritionOrderSupplement) SetInstruction(v string) {
	o.Instruction = &v
}

func (o NutritionOrderSupplement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NutritionOrderSupplement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Instruction) {
		toSerialize["instruction"] = o.Instruction
	}
	return toSerialize, nil
}

type NullableNutritionOrderSupplement struct {
	value *NutritionOrderSupplement
	isSet bool
}

func (v NullableNutritionOrderSupplement) Get() *NutritionOrderSupplement {
	return v.value
}

func (v *NullableNutritionOrderSupplement) Set(val *NutritionOrderSupplement) {
	v.value = val
	v.isSet = true
}

func (v NullableNutritionOrderSupplement) IsSet() bool {
	return v.isSet
}

func (v *NullableNutritionOrderSupplement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNutritionOrderSupplement(val *NutritionOrderSupplement) *NullableNutritionOrderSupplement {
	return &NullableNutritionOrderSupplement{value: val, isSet: true}
}

func (v NullableNutritionOrderSupplement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNutritionOrderSupplement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


