/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the VerificationResultAttestation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationResultAttestation{}

// VerificationResultAttestation Describes validation requirements, source(s), status and dates for one or more elements.
type VerificationResultAttestation struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The individual or organization attesting to information.
	Who *Reference `json:"who,omitempty"`
	// When the who is asserting on behalf of another (organization or individual).
	OnBehalfOf *Reference `json:"onBehalfOf,omitempty"`
	// The method by which attested information was submitted/retrieved (manual; API; Push).
	CommunicationMethod *CodeableConcept `json:"communicationMethod,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// A sequence of Unicode characters
	SourceIdentityCertificate *string `json:"sourceIdentityCertificate,omitempty"`
	// A sequence of Unicode characters
	ProxyIdentityCertificate *string `json:"proxyIdentityCertificate,omitempty"`
	// Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
	ProxySignature *Signature `json:"proxySignature,omitempty"`
	// Signed assertion by the attestation source that they have attested to the information.
	SourceSignature *Signature `json:"sourceSignature,omitempty"`
}

// NewVerificationResultAttestation instantiates a new VerificationResultAttestation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationResultAttestation() *VerificationResultAttestation {
	this := VerificationResultAttestation{}
	return &this
}

// NewVerificationResultAttestationWithDefaults instantiates a new VerificationResultAttestation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationResultAttestationWithDefaults() *VerificationResultAttestation {
	this := VerificationResultAttestation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VerificationResultAttestation) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *VerificationResultAttestation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *VerificationResultAttestation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetWho returns the Who field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetWho() Reference {
	if o == nil || IsNil(o.Who) {
		var ret Reference
		return ret
	}
	return *o.Who
}

// GetWhoOk returns a tuple with the Who field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetWhoOk() (*Reference, bool) {
	if o == nil || IsNil(o.Who) {
		return nil, false
	}
	return o.Who, true
}

// HasWho returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasWho() bool {
	if o != nil && !IsNil(o.Who) {
		return true
	}

	return false
}

// SetWho gets a reference to the given Reference and assigns it to the Who field.
func (o *VerificationResultAttestation) SetWho(v Reference) {
	o.Who = &v
}

// GetOnBehalfOf returns the OnBehalfOf field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetOnBehalfOf() Reference {
	if o == nil || IsNil(o.OnBehalfOf) {
		var ret Reference
		return ret
	}
	return *o.OnBehalfOf
}

// GetOnBehalfOfOk returns a tuple with the OnBehalfOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetOnBehalfOfOk() (*Reference, bool) {
	if o == nil || IsNil(o.OnBehalfOf) {
		return nil, false
	}
	return o.OnBehalfOf, true
}

// HasOnBehalfOf returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasOnBehalfOf() bool {
	if o != nil && !IsNil(o.OnBehalfOf) {
		return true
	}

	return false
}

// SetOnBehalfOf gets a reference to the given Reference and assigns it to the OnBehalfOf field.
func (o *VerificationResultAttestation) SetOnBehalfOf(v Reference) {
	o.OnBehalfOf = &v
}

// GetCommunicationMethod returns the CommunicationMethod field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetCommunicationMethod() CodeableConcept {
	if o == nil || IsNil(o.CommunicationMethod) {
		var ret CodeableConcept
		return ret
	}
	return *o.CommunicationMethod
}

// GetCommunicationMethodOk returns a tuple with the CommunicationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetCommunicationMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CommunicationMethod) {
		return nil, false
	}
	return o.CommunicationMethod, true
}

// HasCommunicationMethod returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasCommunicationMethod() bool {
	if o != nil && !IsNil(o.CommunicationMethod) {
		return true
	}

	return false
}

// SetCommunicationMethod gets a reference to the given CodeableConcept and assigns it to the CommunicationMethod field.
func (o *VerificationResultAttestation) SetCommunicationMethod(v CodeableConcept) {
	o.CommunicationMethod = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *VerificationResultAttestation) SetDate(v string) {
	o.Date = &v
}

// GetSourceIdentityCertificate returns the SourceIdentityCertificate field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetSourceIdentityCertificate() string {
	if o == nil || IsNil(o.SourceIdentityCertificate) {
		var ret string
		return ret
	}
	return *o.SourceIdentityCertificate
}

// GetSourceIdentityCertificateOk returns a tuple with the SourceIdentityCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetSourceIdentityCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.SourceIdentityCertificate) {
		return nil, false
	}
	return o.SourceIdentityCertificate, true
}

// HasSourceIdentityCertificate returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasSourceIdentityCertificate() bool {
	if o != nil && !IsNil(o.SourceIdentityCertificate) {
		return true
	}

	return false
}

// SetSourceIdentityCertificate gets a reference to the given string and assigns it to the SourceIdentityCertificate field.
func (o *VerificationResultAttestation) SetSourceIdentityCertificate(v string) {
	o.SourceIdentityCertificate = &v
}

// GetProxyIdentityCertificate returns the ProxyIdentityCertificate field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetProxyIdentityCertificate() string {
	if o == nil || IsNil(o.ProxyIdentityCertificate) {
		var ret string
		return ret
	}
	return *o.ProxyIdentityCertificate
}

// GetProxyIdentityCertificateOk returns a tuple with the ProxyIdentityCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetProxyIdentityCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyIdentityCertificate) {
		return nil, false
	}
	return o.ProxyIdentityCertificate, true
}

// HasProxyIdentityCertificate returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasProxyIdentityCertificate() bool {
	if o != nil && !IsNil(o.ProxyIdentityCertificate) {
		return true
	}

	return false
}

// SetProxyIdentityCertificate gets a reference to the given string and assigns it to the ProxyIdentityCertificate field.
func (o *VerificationResultAttestation) SetProxyIdentityCertificate(v string) {
	o.ProxyIdentityCertificate = &v
}

// GetProxySignature returns the ProxySignature field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetProxySignature() Signature {
	if o == nil || IsNil(o.ProxySignature) {
		var ret Signature
		return ret
	}
	return *o.ProxySignature
}

// GetProxySignatureOk returns a tuple with the ProxySignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetProxySignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.ProxySignature) {
		return nil, false
	}
	return o.ProxySignature, true
}

// HasProxySignature returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasProxySignature() bool {
	if o != nil && !IsNil(o.ProxySignature) {
		return true
	}

	return false
}

// SetProxySignature gets a reference to the given Signature and assigns it to the ProxySignature field.
func (o *VerificationResultAttestation) SetProxySignature(v Signature) {
	o.ProxySignature = &v
}

// GetSourceSignature returns the SourceSignature field value if set, zero value otherwise.
func (o *VerificationResultAttestation) GetSourceSignature() Signature {
	if o == nil || IsNil(o.SourceSignature) {
		var ret Signature
		return ret
	}
	return *o.SourceSignature
}

// GetSourceSignatureOk returns a tuple with the SourceSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationResultAttestation) GetSourceSignatureOk() (*Signature, bool) {
	if o == nil || IsNil(o.SourceSignature) {
		return nil, false
	}
	return o.SourceSignature, true
}

// HasSourceSignature returns a boolean if a field has been set.
func (o *VerificationResultAttestation) HasSourceSignature() bool {
	if o != nil && !IsNil(o.SourceSignature) {
		return true
	}

	return false
}

// SetSourceSignature gets a reference to the given Signature and assigns it to the SourceSignature field.
func (o *VerificationResultAttestation) SetSourceSignature(v Signature) {
	o.SourceSignature = &v
}

func (o VerificationResultAttestation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationResultAttestation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Who) {
		toSerialize["who"] = o.Who
	}
	if !IsNil(o.OnBehalfOf) {
		toSerialize["onBehalfOf"] = o.OnBehalfOf
	}
	if !IsNil(o.CommunicationMethod) {
		toSerialize["communicationMethod"] = o.CommunicationMethod
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.SourceIdentityCertificate) {
		toSerialize["sourceIdentityCertificate"] = o.SourceIdentityCertificate
	}
	if !IsNil(o.ProxyIdentityCertificate) {
		toSerialize["proxyIdentityCertificate"] = o.ProxyIdentityCertificate
	}
	if !IsNil(o.ProxySignature) {
		toSerialize["proxySignature"] = o.ProxySignature
	}
	if !IsNil(o.SourceSignature) {
		toSerialize["sourceSignature"] = o.SourceSignature
	}
	return toSerialize, nil
}

type NullableVerificationResultAttestation struct {
	value *VerificationResultAttestation
	isSet bool
}

func (v NullableVerificationResultAttestation) Get() *VerificationResultAttestation {
	return v.value
}

func (v *NullableVerificationResultAttestation) Set(val *VerificationResultAttestation) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationResultAttestation) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationResultAttestation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationResultAttestation(val *VerificationResultAttestation) *NullableVerificationResultAttestation {
	return &NullableVerificationResultAttestation{value: val, isSet: true}
}

func (v NullableVerificationResultAttestation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationResultAttestation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


