/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentReconciliationDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentReconciliationDetail{}

// PaymentReconciliationDetail This resource provides the details including amount of a payment and allocates the payment items being paid.
type PaymentReconciliationDetail struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Unique identifier for the current payment item for the referenced payable.
	Identifier *Identifier `json:"identifier,omitempty"`
	// Unique identifier for the prior payment item for the referenced payable.
	Predecessor *Identifier `json:"predecessor,omitempty"`
	// Code to indicate the nature of the payment.
	Type CodeableConcept `json:"type"`
	// A resource, such as a Claim, the evaluation of which could lead to payment.
	Request *Reference `json:"request,omitempty"`
	// The party which submitted the claim or financial transaction.
	Submitter *Reference `json:"submitter,omitempty"`
	// A resource, such as a ClaimResponse, which contains a commitment to payment.
	Response *Reference `json:"response,omitempty"`
	// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	Date *string `json:"date,omitempty"`
	// A reference to the individual who is responsible for inquiries regarding the response and its payment.
	Responsible *Reference `json:"responsible,omitempty"`
	// The party which is receiving the payment.
	Payee *Reference `json:"payee,omitempty"`
	// The monetary amount allocated from the total payment to the payable.
	Amount *Money `json:"amount,omitempty"`
}

type _PaymentReconciliationDetail PaymentReconciliationDetail

// NewPaymentReconciliationDetail instantiates a new PaymentReconciliationDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentReconciliationDetail(type_ CodeableConcept) *PaymentReconciliationDetail {
	this := PaymentReconciliationDetail{}
	this.Type = type_
	return &this
}

// NewPaymentReconciliationDetailWithDefaults instantiates a new PaymentReconciliationDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentReconciliationDetailWithDefaults() *PaymentReconciliationDetail {
	this := PaymentReconciliationDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PaymentReconciliationDetail) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *PaymentReconciliationDetail) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *PaymentReconciliationDetail) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetIdentifier() Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret Identifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given Identifier and assigns it to the Identifier field.
func (o *PaymentReconciliationDetail) SetIdentifier(v Identifier) {
	o.Identifier = &v
}

// GetPredecessor returns the Predecessor field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetPredecessor() Identifier {
	if o == nil || IsNil(o.Predecessor) {
		var ret Identifier
		return ret
	}
	return *o.Predecessor
}

// GetPredecessorOk returns a tuple with the Predecessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetPredecessorOk() (*Identifier, bool) {
	if o == nil || IsNil(o.Predecessor) {
		return nil, false
	}
	return o.Predecessor, true
}

// HasPredecessor returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasPredecessor() bool {
	if o != nil && !IsNil(o.Predecessor) {
		return true
	}

	return false
}

// SetPredecessor gets a reference to the given Identifier and assigns it to the Predecessor field.
func (o *PaymentReconciliationDetail) SetPredecessor(v Identifier) {
	o.Predecessor = &v
}

// GetType returns the Type field value
func (o *PaymentReconciliationDetail) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentReconciliationDetail) SetType(v CodeableConcept) {
	o.Type = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetRequest() Reference {
	if o == nil || IsNil(o.Request) {
		var ret Reference
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetRequestOk() (*Reference, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Reference and assigns it to the Request field.
func (o *PaymentReconciliationDetail) SetRequest(v Reference) {
	o.Request = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetSubmitter() Reference {
	if o == nil || IsNil(o.Submitter) {
		var ret Reference
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetSubmitterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Submitter) {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasSubmitter() bool {
	if o != nil && !IsNil(o.Submitter) {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given Reference and assigns it to the Submitter field.
func (o *PaymentReconciliationDetail) SetSubmitter(v Reference) {
	o.Submitter = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetResponse() Reference {
	if o == nil || IsNil(o.Response) {
		var ret Reference
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetResponseOk() (*Reference, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given Reference and assigns it to the Response field.
func (o *PaymentReconciliationDetail) SetResponse(v Reference) {
	o.Response = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PaymentReconciliationDetail) SetDate(v string) {
	o.Date = &v
}

// GetResponsible returns the Responsible field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetResponsible() Reference {
	if o == nil || IsNil(o.Responsible) {
		var ret Reference
		return ret
	}
	return *o.Responsible
}

// GetResponsibleOk returns a tuple with the Responsible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetResponsibleOk() (*Reference, bool) {
	if o == nil || IsNil(o.Responsible) {
		return nil, false
	}
	return o.Responsible, true
}

// HasResponsible returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasResponsible() bool {
	if o != nil && !IsNil(o.Responsible) {
		return true
	}

	return false
}

// SetResponsible gets a reference to the given Reference and assigns it to the Responsible field.
func (o *PaymentReconciliationDetail) SetResponsible(v Reference) {
	o.Responsible = &v
}

// GetPayee returns the Payee field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetPayee() Reference {
	if o == nil || IsNil(o.Payee) {
		var ret Reference
		return ret
	}
	return *o.Payee
}

// GetPayeeOk returns a tuple with the Payee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetPayeeOk() (*Reference, bool) {
	if o == nil || IsNil(o.Payee) {
		return nil, false
	}
	return o.Payee, true
}

// HasPayee returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasPayee() bool {
	if o != nil && !IsNil(o.Payee) {
		return true
	}

	return false
}

// SetPayee gets a reference to the given Reference and assigns it to the Payee field.
func (o *PaymentReconciliationDetail) SetPayee(v Reference) {
	o.Payee = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentReconciliationDetail) GetAmount() Money {
	if o == nil || IsNil(o.Amount) {
		var ret Money
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReconciliationDetail) GetAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentReconciliationDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Money and assigns it to the Amount field.
func (o *PaymentReconciliationDetail) SetAmount(v Money) {
	o.Amount = &v
}

func (o PaymentReconciliationDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentReconciliationDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Predecessor) {
		toSerialize["predecessor"] = o.Predecessor
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Submitter) {
		toSerialize["submitter"] = o.Submitter
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Responsible) {
		toSerialize["responsible"] = o.Responsible
	}
	if !IsNil(o.Payee) {
		toSerialize["payee"] = o.Payee
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

func (o *PaymentReconciliationDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentReconciliationDetail := _PaymentReconciliationDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentReconciliationDetail)

	if err != nil {
		return err
	}

	*o = PaymentReconciliationDetail(varPaymentReconciliationDetail)

	return err
}

type NullablePaymentReconciliationDetail struct {
	value *PaymentReconciliationDetail
	isSet bool
}

func (v NullablePaymentReconciliationDetail) Get() *PaymentReconciliationDetail {
	return v.value
}

func (v *NullablePaymentReconciliationDetail) Set(val *PaymentReconciliationDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentReconciliationDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentReconciliationDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentReconciliationDetail(val *PaymentReconciliationDetail) *NullablePaymentReconciliationDetail {
	return &NullablePaymentReconciliationDetail{value: val, isSet: true}
}

func (v NullablePaymentReconciliationDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentReconciliationDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


