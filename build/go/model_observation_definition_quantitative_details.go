/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ObservationDefinitionQuantitativeDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationDefinitionQuantitativeDetails{}

// ObservationDefinitionQuantitativeDetails Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
type ObservationDefinitionQuantitativeDetails struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Customary unit used to report quantitative results of observations conforming to this ObservationDefinition.
	CustomaryUnit *CodeableConcept `json:"customaryUnit,omitempty"`
	// SI unit used to report quantitative results of observations conforming to this ObservationDefinition.
	Unit *CodeableConcept `json:"unit,omitempty"`
	// A rational number with implicit precision
	ConversionFactor *float32 `json:"conversionFactor,omitempty"`
	// A whole number
	DecimalPrecision *float32 `json:"decimalPrecision,omitempty"`
}

// NewObservationDefinitionQuantitativeDetails instantiates a new ObservationDefinitionQuantitativeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationDefinitionQuantitativeDetails() *ObservationDefinitionQuantitativeDetails {
	this := ObservationDefinitionQuantitativeDetails{}
	return &this
}

// NewObservationDefinitionQuantitativeDetailsWithDefaults instantiates a new ObservationDefinitionQuantitativeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationDefinitionQuantitativeDetailsWithDefaults() *ObservationDefinitionQuantitativeDetails {
	this := ObservationDefinitionQuantitativeDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationDefinitionQuantitativeDetails) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ObservationDefinitionQuantitativeDetails) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ObservationDefinitionQuantitativeDetails) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCustomaryUnit returns the CustomaryUnit field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetCustomaryUnit() CodeableConcept {
	if o == nil || IsNil(o.CustomaryUnit) {
		var ret CodeableConcept
		return ret
	}
	return *o.CustomaryUnit
}

// GetCustomaryUnitOk returns a tuple with the CustomaryUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetCustomaryUnitOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.CustomaryUnit) {
		return nil, false
	}
	return o.CustomaryUnit, true
}

// HasCustomaryUnit returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasCustomaryUnit() bool {
	if o != nil && !IsNil(o.CustomaryUnit) {
		return true
	}

	return false
}

// SetCustomaryUnit gets a reference to the given CodeableConcept and assigns it to the CustomaryUnit field.
func (o *ObservationDefinitionQuantitativeDetails) SetCustomaryUnit(v CodeableConcept) {
	o.CustomaryUnit = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetUnit() CodeableConcept {
	if o == nil || IsNil(o.Unit) {
		var ret CodeableConcept
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetUnitOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given CodeableConcept and assigns it to the Unit field.
func (o *ObservationDefinitionQuantitativeDetails) SetUnit(v CodeableConcept) {
	o.Unit = &v
}

// GetConversionFactor returns the ConversionFactor field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetConversionFactor() float32 {
	if o == nil || IsNil(o.ConversionFactor) {
		var ret float32
		return ret
	}
	return *o.ConversionFactor
}

// GetConversionFactorOk returns a tuple with the ConversionFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetConversionFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionFactor) {
		return nil, false
	}
	return o.ConversionFactor, true
}

// HasConversionFactor returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasConversionFactor() bool {
	if o != nil && !IsNil(o.ConversionFactor) {
		return true
	}

	return false
}

// SetConversionFactor gets a reference to the given float32 and assigns it to the ConversionFactor field.
func (o *ObservationDefinitionQuantitativeDetails) SetConversionFactor(v float32) {
	o.ConversionFactor = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise.
func (o *ObservationDefinitionQuantitativeDetails) GetDecimalPrecision() float32 {
	if o == nil || IsNil(o.DecimalPrecision) {
		var ret float32
		return ret
	}
	return *o.DecimalPrecision
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinitionQuantitativeDetails) GetDecimalPrecisionOk() (*float32, bool) {
	if o == nil || IsNil(o.DecimalPrecision) {
		return nil, false
	}
	return o.DecimalPrecision, true
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *ObservationDefinitionQuantitativeDetails) HasDecimalPrecision() bool {
	if o != nil && !IsNil(o.DecimalPrecision) {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given float32 and assigns it to the DecimalPrecision field.
func (o *ObservationDefinitionQuantitativeDetails) SetDecimalPrecision(v float32) {
	o.DecimalPrecision = &v
}

func (o ObservationDefinitionQuantitativeDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationDefinitionQuantitativeDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.CustomaryUnit) {
		toSerialize["customaryUnit"] = o.CustomaryUnit
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.ConversionFactor) {
		toSerialize["conversionFactor"] = o.ConversionFactor
	}
	if !IsNil(o.DecimalPrecision) {
		toSerialize["decimalPrecision"] = o.DecimalPrecision
	}
	return toSerialize, nil
}

type NullableObservationDefinitionQuantitativeDetails struct {
	value *ObservationDefinitionQuantitativeDetails
	isSet bool
}

func (v NullableObservationDefinitionQuantitativeDetails) Get() *ObservationDefinitionQuantitativeDetails {
	return v.value
}

func (v *NullableObservationDefinitionQuantitativeDetails) Set(val *ObservationDefinitionQuantitativeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationDefinitionQuantitativeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationDefinitionQuantitativeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationDefinitionQuantitativeDetails(val *ObservationDefinitionQuantitativeDetails) *NullableObservationDefinitionQuantitativeDetails {
	return &NullableObservationDefinitionQuantitativeDetails{value: val, isSet: true}
}

func (v NullableObservationDefinitionQuantitativeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationDefinitionQuantitativeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


