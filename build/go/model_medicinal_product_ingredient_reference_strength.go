/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductIngredientReferenceStrength type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductIngredientReferenceStrength{}

// MedicinalProductIngredientReferenceStrength An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredientReferenceStrength struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Relevant reference substance.
	Substance *CodeableConcept `json:"substance,omitempty"`
	// Strength expressed in terms of a reference substance.
	Strength Ratio `json:"strength"`
	// Strength expressed in terms of a reference substance.
	StrengthLowLimit *Ratio `json:"strengthLowLimit,omitempty"`
	// A sequence of Unicode characters
	MeasurementPoint *string `json:"measurementPoint,omitempty"`
	// The country or countries for which the strength range applies.
	Country []CodeableConcept `json:"country,omitempty"`
}

type _MedicinalProductIngredientReferenceStrength MedicinalProductIngredientReferenceStrength

// NewMedicinalProductIngredientReferenceStrength instantiates a new MedicinalProductIngredientReferenceStrength object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductIngredientReferenceStrength(strength Ratio) *MedicinalProductIngredientReferenceStrength {
	this := MedicinalProductIngredientReferenceStrength{}
	this.Strength = strength
	return &this
}

// NewMedicinalProductIngredientReferenceStrengthWithDefaults instantiates a new MedicinalProductIngredientReferenceStrength object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductIngredientReferenceStrengthWithDefaults() *MedicinalProductIngredientReferenceStrength {
	this := MedicinalProductIngredientReferenceStrength{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductIngredientReferenceStrength) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductIngredientReferenceStrength) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductIngredientReferenceStrength) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubstance returns the Substance field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetSubstance() CodeableConcept {
	if o == nil || IsNil(o.Substance) {
		var ret CodeableConcept
		return ret
	}
	return *o.Substance
}

// GetSubstanceOk returns a tuple with the Substance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetSubstanceOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Substance) {
		return nil, false
	}
	return o.Substance, true
}

// HasSubstance returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasSubstance() bool {
	if o != nil && !IsNil(o.Substance) {
		return true
	}

	return false
}

// SetSubstance gets a reference to the given CodeableConcept and assigns it to the Substance field.
func (o *MedicinalProductIngredientReferenceStrength) SetSubstance(v CodeableConcept) {
	o.Substance = &v
}

// GetStrength returns the Strength field value
func (o *MedicinalProductIngredientReferenceStrength) GetStrength() Ratio {
	if o == nil {
		var ret Ratio
		return ret
	}

	return o.Strength
}

// GetStrengthOk returns a tuple with the Strength field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetStrengthOk() (*Ratio, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strength, true
}

// SetStrength sets field value
func (o *MedicinalProductIngredientReferenceStrength) SetStrength(v Ratio) {
	o.Strength = v
}

// GetStrengthLowLimit returns the StrengthLowLimit field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetStrengthLowLimit() Ratio {
	if o == nil || IsNil(o.StrengthLowLimit) {
		var ret Ratio
		return ret
	}
	return *o.StrengthLowLimit
}

// GetStrengthLowLimitOk returns a tuple with the StrengthLowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetStrengthLowLimitOk() (*Ratio, bool) {
	if o == nil || IsNil(o.StrengthLowLimit) {
		return nil, false
	}
	return o.StrengthLowLimit, true
}

// HasStrengthLowLimit returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasStrengthLowLimit() bool {
	if o != nil && !IsNil(o.StrengthLowLimit) {
		return true
	}

	return false
}

// SetStrengthLowLimit gets a reference to the given Ratio and assigns it to the StrengthLowLimit field.
func (o *MedicinalProductIngredientReferenceStrength) SetStrengthLowLimit(v Ratio) {
	o.StrengthLowLimit = &v
}

// GetMeasurementPoint returns the MeasurementPoint field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetMeasurementPoint() string {
	if o == nil || IsNil(o.MeasurementPoint) {
		var ret string
		return ret
	}
	return *o.MeasurementPoint
}

// GetMeasurementPointOk returns a tuple with the MeasurementPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetMeasurementPointOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementPoint) {
		return nil, false
	}
	return o.MeasurementPoint, true
}

// HasMeasurementPoint returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasMeasurementPoint() bool {
	if o != nil && !IsNil(o.MeasurementPoint) {
		return true
	}

	return false
}

// SetMeasurementPoint gets a reference to the given string and assigns it to the MeasurementPoint field.
func (o *MedicinalProductIngredientReferenceStrength) SetMeasurementPoint(v string) {
	o.MeasurementPoint = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *MedicinalProductIngredientReferenceStrength) GetCountry() []CodeableConcept {
	if o == nil || IsNil(o.Country) {
		var ret []CodeableConcept
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientReferenceStrength) GetCountryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *MedicinalProductIngredientReferenceStrength) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []CodeableConcept and assigns it to the Country field.
func (o *MedicinalProductIngredientReferenceStrength) SetCountry(v []CodeableConcept) {
	o.Country = v
}

func (o MedicinalProductIngredientReferenceStrength) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductIngredientReferenceStrength) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Substance) {
		toSerialize["substance"] = o.Substance
	}
	toSerialize["strength"] = o.Strength
	if !IsNil(o.StrengthLowLimit) {
		toSerialize["strengthLowLimit"] = o.StrengthLowLimit
	}
	if !IsNil(o.MeasurementPoint) {
		toSerialize["measurementPoint"] = o.MeasurementPoint
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

func (o *MedicinalProductIngredientReferenceStrength) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"strength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductIngredientReferenceStrength := _MedicinalProductIngredientReferenceStrength{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductIngredientReferenceStrength)

	if err != nil {
		return err
	}

	*o = MedicinalProductIngredientReferenceStrength(varMedicinalProductIngredientReferenceStrength)

	return err
}

type NullableMedicinalProductIngredientReferenceStrength struct {
	value *MedicinalProductIngredientReferenceStrength
	isSet bool
}

func (v NullableMedicinalProductIngredientReferenceStrength) Get() *MedicinalProductIngredientReferenceStrength {
	return v.value
}

func (v *NullableMedicinalProductIngredientReferenceStrength) Set(val *MedicinalProductIngredientReferenceStrength) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductIngredientReferenceStrength) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductIngredientReferenceStrength) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductIngredientReferenceStrength(val *MedicinalProductIngredientReferenceStrength) *NullableMedicinalProductIngredientReferenceStrength {
	return &NullableMedicinalProductIngredientReferenceStrength{value: val, isSet: true}
}

func (v NullableMedicinalProductIngredientReferenceStrength) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductIngredientReferenceStrength) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


