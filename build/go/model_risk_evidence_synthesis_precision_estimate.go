/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the RiskEvidenceSynthesisPrecisionEstimate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskEvidenceSynthesisPrecisionEstimate{}

// RiskEvidenceSynthesisPrecisionEstimate The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.
type RiskEvidenceSynthesisPrecisionEstimate struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Examples include confidence interval and interquartile range.
	Type *CodeableConcept `json:"type,omitempty"`
	// A rational number with implicit precision
	Level *float32 `json:"level,omitempty"`
	// A rational number with implicit precision
	From *float32 `json:"from,omitempty"`
	// A rational number with implicit precision
	To *float32 `json:"to,omitempty"`
}

// NewRiskEvidenceSynthesisPrecisionEstimate instantiates a new RiskEvidenceSynthesisPrecisionEstimate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskEvidenceSynthesisPrecisionEstimate() *RiskEvidenceSynthesisPrecisionEstimate {
	this := RiskEvidenceSynthesisPrecisionEstimate{}
	return &this
}

// NewRiskEvidenceSynthesisPrecisionEstimateWithDefaults instantiates a new RiskEvidenceSynthesisPrecisionEstimate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskEvidenceSynthesisPrecisionEstimateWithDefaults() *RiskEvidenceSynthesisPrecisionEstimate {
	this := RiskEvidenceSynthesisPrecisionEstimate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetLevel() float32 {
	if o == nil || IsNil(o.Level) {
		var ret float32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetLevelOk() (*float32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given float32 and assigns it to the Level field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetLevel(v float32) {
	o.Level = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetFrom() float32 {
	if o == nil || IsNil(o.From) {
		var ret float32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetFromOk() (*float32, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given float32 and assigns it to the From field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetFrom(v float32) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetTo() float32 {
	if o == nil || IsNil(o.To) {
		var ret float32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) GetToOk() (*float32, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *RiskEvidenceSynthesisPrecisionEstimate) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given float32 and assigns it to the To field.
func (o *RiskEvidenceSynthesisPrecisionEstimate) SetTo(v float32) {
	o.To = &v
}

func (o RiskEvidenceSynthesisPrecisionEstimate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskEvidenceSynthesisPrecisionEstimate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableRiskEvidenceSynthesisPrecisionEstimate struct {
	value *RiskEvidenceSynthesisPrecisionEstimate
	isSet bool
}

func (v NullableRiskEvidenceSynthesisPrecisionEstimate) Get() *RiskEvidenceSynthesisPrecisionEstimate {
	return v.value
}

func (v *NullableRiskEvidenceSynthesisPrecisionEstimate) Set(val *RiskEvidenceSynthesisPrecisionEstimate) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskEvidenceSynthesisPrecisionEstimate) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskEvidenceSynthesisPrecisionEstimate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskEvidenceSynthesisPrecisionEstimate(val *RiskEvidenceSynthesisPrecisionEstimate) *NullableRiskEvidenceSynthesisPrecisionEstimate {
	return &NullableRiskEvidenceSynthesisPrecisionEstimate{value: val, isSet: true}
}

func (v NullableRiskEvidenceSynthesisPrecisionEstimate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskEvidenceSynthesisPrecisionEstimate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


