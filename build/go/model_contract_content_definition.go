/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractContentDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractContentDefinition{}

// ContractContentDefinition Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractContentDefinition struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
	Type CodeableConcept `json:"type"`
	// Detailed Precusory content type.
	SubType *CodeableConcept `json:"subType,omitempty"`
	// The  individual or organization that published the Contract precursor content.
	Publisher *Reference `json:"publisher,omitempty"`
	// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	PublicationDate *string `json:"publicationDate,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	PublicationStatus *string `json:"publicationStatus,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Copyright *string `json:"copyright,omitempty"`
}

type _ContractContentDefinition ContractContentDefinition

// NewContractContentDefinition instantiates a new ContractContentDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractContentDefinition(type_ CodeableConcept) *ContractContentDefinition {
	this := ContractContentDefinition{}
	this.Type = type_
	return &this
}

// NewContractContentDefinitionWithDefaults instantiates a new ContractContentDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractContentDefinitionWithDefaults() *ContractContentDefinition {
	this := ContractContentDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContractContentDefinition) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ContractContentDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ContractContentDefinition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value
func (o *ContractContentDefinition) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContractContentDefinition) SetType(v CodeableConcept) {
	o.Type = v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetSubType() CodeableConcept {
	if o == nil || IsNil(o.SubType) {
		var ret CodeableConcept
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetSubTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given CodeableConcept and assigns it to the SubType field.
func (o *ContractContentDefinition) SetSubType(v CodeableConcept) {
	o.SubType = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetPublisher() Reference {
	if o == nil || IsNil(o.Publisher) {
		var ret Reference
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetPublisherOk() (*Reference, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given Reference and assigns it to the Publisher field.
func (o *ContractContentDefinition) SetPublisher(v Reference) {
	o.Publisher = &v
}

// GetPublicationDate returns the PublicationDate field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetPublicationDate() string {
	if o == nil || IsNil(o.PublicationDate) {
		var ret string
		return ret
	}
	return *o.PublicationDate
}

// GetPublicationDateOk returns a tuple with the PublicationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetPublicationDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationDate) {
		return nil, false
	}
	return o.PublicationDate, true
}

// HasPublicationDate returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasPublicationDate() bool {
	if o != nil && !IsNil(o.PublicationDate) {
		return true
	}

	return false
}

// SetPublicationDate gets a reference to the given string and assigns it to the PublicationDate field.
func (o *ContractContentDefinition) SetPublicationDate(v string) {
	o.PublicationDate = &v
}

// GetPublicationStatus returns the PublicationStatus field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetPublicationStatus() string {
	if o == nil || IsNil(o.PublicationStatus) {
		var ret string
		return ret
	}
	return *o.PublicationStatus
}

// GetPublicationStatusOk returns a tuple with the PublicationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetPublicationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationStatus) {
		return nil, false
	}
	return o.PublicationStatus, true
}

// HasPublicationStatus returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasPublicationStatus() bool {
	if o != nil && !IsNil(o.PublicationStatus) {
		return true
	}

	return false
}

// SetPublicationStatus gets a reference to the given string and assigns it to the PublicationStatus field.
func (o *ContractContentDefinition) SetPublicationStatus(v string) {
	o.PublicationStatus = &v
}

// GetCopyright returns the Copyright field value if set, zero value otherwise.
func (o *ContractContentDefinition) GetCopyright() string {
	if o == nil || IsNil(o.Copyright) {
		var ret string
		return ret
	}
	return *o.Copyright
}

// GetCopyrightOk returns a tuple with the Copyright field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractContentDefinition) GetCopyrightOk() (*string, bool) {
	if o == nil || IsNil(o.Copyright) {
		return nil, false
	}
	return o.Copyright, true
}

// HasCopyright returns a boolean if a field has been set.
func (o *ContractContentDefinition) HasCopyright() bool {
	if o != nil && !IsNil(o.Copyright) {
		return true
	}

	return false
}

// SetCopyright gets a reference to the given string and assigns it to the Copyright field.
func (o *ContractContentDefinition) SetCopyright(v string) {
	o.Copyright = &v
}

func (o ContractContentDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractContentDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.PublicationDate) {
		toSerialize["publicationDate"] = o.PublicationDate
	}
	if !IsNil(o.PublicationStatus) {
		toSerialize["publicationStatus"] = o.PublicationStatus
	}
	if !IsNil(o.Copyright) {
		toSerialize["copyright"] = o.Copyright
	}
	return toSerialize, nil
}

func (o *ContractContentDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractContentDefinition := _ContractContentDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractContentDefinition)

	if err != nil {
		return err
	}

	*o = ContractContentDefinition(varContractContentDefinition)

	return err
}

type NullableContractContentDefinition struct {
	value *ContractContentDefinition
	isSet bool
}

func (v NullableContractContentDefinition) Get() *ContractContentDefinition {
	return v.value
}

func (v *NullableContractContentDefinition) Set(val *ContractContentDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableContractContentDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableContractContentDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractContentDefinition(val *ContractContentDefinition) *NullableContractContentDefinition {
	return &NullableContractContentDefinition{value: val, isSet: true}
}

func (v NullableContractContentDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractContentDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


