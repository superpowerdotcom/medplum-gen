/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Procedure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Procedure{}

// Procedure An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
type Procedure struct {
	// This is a Procedure resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
	InstantiatesCanonical []string `json:"instantiatesCanonical,omitempty"`
	// The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
	InstantiatesUri []string `json:"instantiatesUri,omitempty"`
	// A reference to a resource that contains details of the request for this procedure.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// A larger event of which this particular procedure is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// Captures the reason for the current state of the procedure.
	StatusReason *CodeableConcept `json:"statusReason,omitempty"`
	// A code that classifies the procedure for searching, sorting and display purposes (e.g. \"Surgical Procedure\").
	Category *CodeableConcept `json:"category,omitempty"`
	// The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. \"Laparoscopic Appendectomy\").
	Code *CodeableConcept `json:"code,omitempty"`
	// The person, animal or group on which the procedure was performed.
	Subject Reference `json:"subject"`
	// The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
	Encounter *Reference `json:"encounter,omitempty"`
	// Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
	PerformedDateTime *string `json:"performedDateTime,omitempty"`
	// Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
	PerformedPeriod *Period `json:"performedPeriod,omitempty"`
	// Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
	PerformedString *string `json:"performedString,omitempty"`
	// Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
	PerformedAge *Age `json:"performedAge,omitempty"`
	// Estimated or actual date, date-time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
	PerformedRange *Range `json:"performedRange,omitempty"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *Reference `json:"recorder,omitempty"`
	// Individual who is making the procedure statement.
	Asserter *Reference `json:"asserter,omitempty"`
	// Limited to \"real\" people rather than equipment.
	Performer []ProcedurePerformer `json:"performer,omitempty"`
	// The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
	Location *Reference `json:"location,omitempty"`
	// The coded reason why the procedure was performed. This may be a coded entity of some type, or may simply be present as text.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// The justification of why the procedure was performed.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
	BodySite []CodeableConcept `json:"bodySite,omitempty"`
	// The outcome of the procedure - did it resolve the reasons for the procedure being performed?
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	// This could be a histology result, pathology report, surgical report, etc.
	Report []Reference `json:"report,omitempty"`
	// Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
	Complication []CodeableConcept `json:"complication,omitempty"`
	// Any complications that occurred during the procedure, or in the immediate post-performance period.
	ComplicationDetail []Reference `json:"complicationDetail,omitempty"`
	// If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
	FollowUp []CodeableConcept `json:"followUp,omitempty"`
	// Any other notes and comments about the procedure.
	Note []Annotation `json:"note,omitempty"`
	// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
	FocalDevice []ProcedureFocalDevice `json:"focalDevice,omitempty"`
	// Identifies medications, devices and any other substance used as part of the procedure.
	UsedReference []Reference `json:"usedReference,omitempty"`
	// Identifies coded items that were used as part of the procedure.
	UsedCode []CodeableConcept `json:"usedCode,omitempty"`
}

type _Procedure Procedure

// NewProcedure instantiates a new Procedure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcedure(resourceType string, subject Reference) *Procedure {
	this := Procedure{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewProcedureWithDefaults instantiates a new Procedure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcedureWithDefaults() *Procedure {
	this := Procedure{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Procedure) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Procedure) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Procedure) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Procedure) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Procedure) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Procedure) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Procedure) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Procedure) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Procedure) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *Procedure) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *Procedure) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *Procedure) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Procedure) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Procedure) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Procedure) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Procedure) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Procedure) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *Procedure) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *Procedure) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *Procedure) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *Procedure) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Procedure) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Procedure) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Procedure) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *Procedure) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *Procedure) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *Procedure) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Procedure) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Procedure) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *Procedure) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetInstantiatesCanonical returns the InstantiatesCanonical field value if set, zero value otherwise.
func (o *Procedure) GetInstantiatesCanonical() []string {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		var ret []string
		return ret
	}
	return o.InstantiatesCanonical
}

// GetInstantiatesCanonicalOk returns a tuple with the InstantiatesCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetInstantiatesCanonicalOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesCanonical) {
		return nil, false
	}
	return o.InstantiatesCanonical, true
}

// HasInstantiatesCanonical returns a boolean if a field has been set.
func (o *Procedure) HasInstantiatesCanonical() bool {
	if o != nil && !IsNil(o.InstantiatesCanonical) {
		return true
	}

	return false
}

// SetInstantiatesCanonical gets a reference to the given []string and assigns it to the InstantiatesCanonical field.
func (o *Procedure) SetInstantiatesCanonical(v []string) {
	o.InstantiatesCanonical = v
}

// GetInstantiatesUri returns the InstantiatesUri field value if set, zero value otherwise.
func (o *Procedure) GetInstantiatesUri() []string {
	if o == nil || IsNil(o.InstantiatesUri) {
		var ret []string
		return ret
	}
	return o.InstantiatesUri
}

// GetInstantiatesUriOk returns a tuple with the InstantiatesUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetInstantiatesUriOk() ([]string, bool) {
	if o == nil || IsNil(o.InstantiatesUri) {
		return nil, false
	}
	return o.InstantiatesUri, true
}

// HasInstantiatesUri returns a boolean if a field has been set.
func (o *Procedure) HasInstantiatesUri() bool {
	if o != nil && !IsNil(o.InstantiatesUri) {
		return true
	}

	return false
}

// SetInstantiatesUri gets a reference to the given []string and assigns it to the InstantiatesUri field.
func (o *Procedure) SetInstantiatesUri(v []string) {
	o.InstantiatesUri = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *Procedure) GetBasedOn() []Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret []Reference
		return ret
	}
	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetBasedOnOk() ([]Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *Procedure) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given []Reference and assigns it to the BasedOn field.
func (o *Procedure) SetBasedOn(v []Reference) {
	o.BasedOn = v
}

// GetPartOf returns the PartOf field value if set, zero value otherwise.
func (o *Procedure) GetPartOf() []Reference {
	if o == nil || IsNil(o.PartOf) {
		var ret []Reference
		return ret
	}
	return o.PartOf
}

// GetPartOfOk returns a tuple with the PartOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPartOfOk() ([]Reference, bool) {
	if o == nil || IsNil(o.PartOf) {
		return nil, false
	}
	return o.PartOf, true
}

// HasPartOf returns a boolean if a field has been set.
func (o *Procedure) HasPartOf() bool {
	if o != nil && !IsNil(o.PartOf) {
		return true
	}

	return false
}

// SetPartOf gets a reference to the given []Reference and assigns it to the PartOf field.
func (o *Procedure) SetPartOf(v []Reference) {
	o.PartOf = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Procedure) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Procedure) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Procedure) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *Procedure) GetStatusReason() CodeableConcept {
	if o == nil || IsNil(o.StatusReason) {
		var ret CodeableConcept
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetStatusReasonOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *Procedure) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given CodeableConcept and assigns it to the StatusReason field.
func (o *Procedure) SetStatusReason(v CodeableConcept) {
	o.StatusReason = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Procedure) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Procedure) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *Procedure) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Procedure) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Procedure) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *Procedure) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetSubject returns the Subject field value
func (o *Procedure) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Procedure) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *Procedure) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *Procedure) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *Procedure) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *Procedure) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetPerformedDateTime returns the PerformedDateTime field value if set, zero value otherwise.
func (o *Procedure) GetPerformedDateTime() string {
	if o == nil || IsNil(o.PerformedDateTime) {
		var ret string
		return ret
	}
	return *o.PerformedDateTime
}

// GetPerformedDateTimeOk returns a tuple with the PerformedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformedDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PerformedDateTime) {
		return nil, false
	}
	return o.PerformedDateTime, true
}

// HasPerformedDateTime returns a boolean if a field has been set.
func (o *Procedure) HasPerformedDateTime() bool {
	if o != nil && !IsNil(o.PerformedDateTime) {
		return true
	}

	return false
}

// SetPerformedDateTime gets a reference to the given string and assigns it to the PerformedDateTime field.
func (o *Procedure) SetPerformedDateTime(v string) {
	o.PerformedDateTime = &v
}

// GetPerformedPeriod returns the PerformedPeriod field value if set, zero value otherwise.
func (o *Procedure) GetPerformedPeriod() Period {
	if o == nil || IsNil(o.PerformedPeriod) {
		var ret Period
		return ret
	}
	return *o.PerformedPeriod
}

// GetPerformedPeriodOk returns a tuple with the PerformedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformedPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.PerformedPeriod) {
		return nil, false
	}
	return o.PerformedPeriod, true
}

// HasPerformedPeriod returns a boolean if a field has been set.
func (o *Procedure) HasPerformedPeriod() bool {
	if o != nil && !IsNil(o.PerformedPeriod) {
		return true
	}

	return false
}

// SetPerformedPeriod gets a reference to the given Period and assigns it to the PerformedPeriod field.
func (o *Procedure) SetPerformedPeriod(v Period) {
	o.PerformedPeriod = &v
}

// GetPerformedString returns the PerformedString field value if set, zero value otherwise.
func (o *Procedure) GetPerformedString() string {
	if o == nil || IsNil(o.PerformedString) {
		var ret string
		return ret
	}
	return *o.PerformedString
}

// GetPerformedStringOk returns a tuple with the PerformedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformedStringOk() (*string, bool) {
	if o == nil || IsNil(o.PerformedString) {
		return nil, false
	}
	return o.PerformedString, true
}

// HasPerformedString returns a boolean if a field has been set.
func (o *Procedure) HasPerformedString() bool {
	if o != nil && !IsNil(o.PerformedString) {
		return true
	}

	return false
}

// SetPerformedString gets a reference to the given string and assigns it to the PerformedString field.
func (o *Procedure) SetPerformedString(v string) {
	o.PerformedString = &v
}

// GetPerformedAge returns the PerformedAge field value if set, zero value otherwise.
func (o *Procedure) GetPerformedAge() Age {
	if o == nil || IsNil(o.PerformedAge) {
		var ret Age
		return ret
	}
	return *o.PerformedAge
}

// GetPerformedAgeOk returns a tuple with the PerformedAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformedAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.PerformedAge) {
		return nil, false
	}
	return o.PerformedAge, true
}

// HasPerformedAge returns a boolean if a field has been set.
func (o *Procedure) HasPerformedAge() bool {
	if o != nil && !IsNil(o.PerformedAge) {
		return true
	}

	return false
}

// SetPerformedAge gets a reference to the given Age and assigns it to the PerformedAge field.
func (o *Procedure) SetPerformedAge(v Age) {
	o.PerformedAge = &v
}

// GetPerformedRange returns the PerformedRange field value if set, zero value otherwise.
func (o *Procedure) GetPerformedRange() Range {
	if o == nil || IsNil(o.PerformedRange) {
		var ret Range
		return ret
	}
	return *o.PerformedRange
}

// GetPerformedRangeOk returns a tuple with the PerformedRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformedRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.PerformedRange) {
		return nil, false
	}
	return o.PerformedRange, true
}

// HasPerformedRange returns a boolean if a field has been set.
func (o *Procedure) HasPerformedRange() bool {
	if o != nil && !IsNil(o.PerformedRange) {
		return true
	}

	return false
}

// SetPerformedRange gets a reference to the given Range and assigns it to the PerformedRange field.
func (o *Procedure) SetPerformedRange(v Range) {
	o.PerformedRange = &v
}

// GetRecorder returns the Recorder field value if set, zero value otherwise.
func (o *Procedure) GetRecorder() Reference {
	if o == nil || IsNil(o.Recorder) {
		var ret Reference
		return ret
	}
	return *o.Recorder
}

// GetRecorderOk returns a tuple with the Recorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetRecorderOk() (*Reference, bool) {
	if o == nil || IsNil(o.Recorder) {
		return nil, false
	}
	return o.Recorder, true
}

// HasRecorder returns a boolean if a field has been set.
func (o *Procedure) HasRecorder() bool {
	if o != nil && !IsNil(o.Recorder) {
		return true
	}

	return false
}

// SetRecorder gets a reference to the given Reference and assigns it to the Recorder field.
func (o *Procedure) SetRecorder(v Reference) {
	o.Recorder = &v
}

// GetAsserter returns the Asserter field value if set, zero value otherwise.
func (o *Procedure) GetAsserter() Reference {
	if o == nil || IsNil(o.Asserter) {
		var ret Reference
		return ret
	}
	return *o.Asserter
}

// GetAsserterOk returns a tuple with the Asserter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetAsserterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Asserter) {
		return nil, false
	}
	return o.Asserter, true
}

// HasAsserter returns a boolean if a field has been set.
func (o *Procedure) HasAsserter() bool {
	if o != nil && !IsNil(o.Asserter) {
		return true
	}

	return false
}

// SetAsserter gets a reference to the given Reference and assigns it to the Asserter field.
func (o *Procedure) SetAsserter(v Reference) {
	o.Asserter = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *Procedure) GetPerformer() []ProcedurePerformer {
	if o == nil || IsNil(o.Performer) {
		var ret []ProcedurePerformer
		return ret
	}
	return o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetPerformerOk() ([]ProcedurePerformer, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *Procedure) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given []ProcedurePerformer and assigns it to the Performer field.
func (o *Procedure) SetPerformer(v []ProcedurePerformer) {
	o.Performer = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Procedure) GetLocation() Reference {
	if o == nil || IsNil(o.Location) {
		var ret Reference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetLocationOk() (*Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Procedure) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Reference and assigns it to the Location field.
func (o *Procedure) SetLocation(v Reference) {
	o.Location = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *Procedure) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *Procedure) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *Procedure) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *Procedure) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *Procedure) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *Procedure) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetBodySite returns the BodySite field value if set, zero value otherwise.
func (o *Procedure) GetBodySite() []CodeableConcept {
	if o == nil || IsNil(o.BodySite) {
		var ret []CodeableConcept
		return ret
	}
	return o.BodySite
}

// GetBodySiteOk returns a tuple with the BodySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetBodySiteOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.BodySite) {
		return nil, false
	}
	return o.BodySite, true
}

// HasBodySite returns a boolean if a field has been set.
func (o *Procedure) HasBodySite() bool {
	if o != nil && !IsNil(o.BodySite) {
		return true
	}

	return false
}

// SetBodySite gets a reference to the given []CodeableConcept and assigns it to the BodySite field.
func (o *Procedure) SetBodySite(v []CodeableConcept) {
	o.BodySite = v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *Procedure) GetOutcome() CodeableConcept {
	if o == nil || IsNil(o.Outcome) {
		var ret CodeableConcept
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetOutcomeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *Procedure) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given CodeableConcept and assigns it to the Outcome field.
func (o *Procedure) SetOutcome(v CodeableConcept) {
	o.Outcome = &v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *Procedure) GetReport() []Reference {
	if o == nil || IsNil(o.Report) {
		var ret []Reference
		return ret
	}
	return o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetReportOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *Procedure) HasReport() bool {
	if o != nil && !IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given []Reference and assigns it to the Report field.
func (o *Procedure) SetReport(v []Reference) {
	o.Report = v
}

// GetComplication returns the Complication field value if set, zero value otherwise.
func (o *Procedure) GetComplication() []CodeableConcept {
	if o == nil || IsNil(o.Complication) {
		var ret []CodeableConcept
		return ret
	}
	return o.Complication
}

// GetComplicationOk returns a tuple with the Complication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetComplicationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Complication) {
		return nil, false
	}
	return o.Complication, true
}

// HasComplication returns a boolean if a field has been set.
func (o *Procedure) HasComplication() bool {
	if o != nil && !IsNil(o.Complication) {
		return true
	}

	return false
}

// SetComplication gets a reference to the given []CodeableConcept and assigns it to the Complication field.
func (o *Procedure) SetComplication(v []CodeableConcept) {
	o.Complication = v
}

// GetComplicationDetail returns the ComplicationDetail field value if set, zero value otherwise.
func (o *Procedure) GetComplicationDetail() []Reference {
	if o == nil || IsNil(o.ComplicationDetail) {
		var ret []Reference
		return ret
	}
	return o.ComplicationDetail
}

// GetComplicationDetailOk returns a tuple with the ComplicationDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetComplicationDetailOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ComplicationDetail) {
		return nil, false
	}
	return o.ComplicationDetail, true
}

// HasComplicationDetail returns a boolean if a field has been set.
func (o *Procedure) HasComplicationDetail() bool {
	if o != nil && !IsNil(o.ComplicationDetail) {
		return true
	}

	return false
}

// SetComplicationDetail gets a reference to the given []Reference and assigns it to the ComplicationDetail field.
func (o *Procedure) SetComplicationDetail(v []Reference) {
	o.ComplicationDetail = v
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise.
func (o *Procedure) GetFollowUp() []CodeableConcept {
	if o == nil || IsNil(o.FollowUp) {
		var ret []CodeableConcept
		return ret
	}
	return o.FollowUp
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetFollowUpOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.FollowUp) {
		return nil, false
	}
	return o.FollowUp, true
}

// HasFollowUp returns a boolean if a field has been set.
func (o *Procedure) HasFollowUp() bool {
	if o != nil && !IsNil(o.FollowUp) {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given []CodeableConcept and assigns it to the FollowUp field.
func (o *Procedure) SetFollowUp(v []CodeableConcept) {
	o.FollowUp = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Procedure) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Procedure) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *Procedure) SetNote(v []Annotation) {
	o.Note = v
}

// GetFocalDevice returns the FocalDevice field value if set, zero value otherwise.
func (o *Procedure) GetFocalDevice() []ProcedureFocalDevice {
	if o == nil || IsNil(o.FocalDevice) {
		var ret []ProcedureFocalDevice
		return ret
	}
	return o.FocalDevice
}

// GetFocalDeviceOk returns a tuple with the FocalDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetFocalDeviceOk() ([]ProcedureFocalDevice, bool) {
	if o == nil || IsNil(o.FocalDevice) {
		return nil, false
	}
	return o.FocalDevice, true
}

// HasFocalDevice returns a boolean if a field has been set.
func (o *Procedure) HasFocalDevice() bool {
	if o != nil && !IsNil(o.FocalDevice) {
		return true
	}

	return false
}

// SetFocalDevice gets a reference to the given []ProcedureFocalDevice and assigns it to the FocalDevice field.
func (o *Procedure) SetFocalDevice(v []ProcedureFocalDevice) {
	o.FocalDevice = v
}

// GetUsedReference returns the UsedReference field value if set, zero value otherwise.
func (o *Procedure) GetUsedReference() []Reference {
	if o == nil || IsNil(o.UsedReference) {
		var ret []Reference
		return ret
	}
	return o.UsedReference
}

// GetUsedReferenceOk returns a tuple with the UsedReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetUsedReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.UsedReference) {
		return nil, false
	}
	return o.UsedReference, true
}

// HasUsedReference returns a boolean if a field has been set.
func (o *Procedure) HasUsedReference() bool {
	if o != nil && !IsNil(o.UsedReference) {
		return true
	}

	return false
}

// SetUsedReference gets a reference to the given []Reference and assigns it to the UsedReference field.
func (o *Procedure) SetUsedReference(v []Reference) {
	o.UsedReference = v
}

// GetUsedCode returns the UsedCode field value if set, zero value otherwise.
func (o *Procedure) GetUsedCode() []CodeableConcept {
	if o == nil || IsNil(o.UsedCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.UsedCode
}

// GetUsedCodeOk returns a tuple with the UsedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Procedure) GetUsedCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.UsedCode) {
		return nil, false
	}
	return o.UsedCode, true
}

// HasUsedCode returns a boolean if a field has been set.
func (o *Procedure) HasUsedCode() bool {
	if o != nil && !IsNil(o.UsedCode) {
		return true
	}

	return false
}

// SetUsedCode gets a reference to the given []CodeableConcept and assigns it to the UsedCode field.
func (o *Procedure) SetUsedCode(v []CodeableConcept) {
	o.UsedCode = v
}

func (o Procedure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Procedure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstantiatesCanonical) {
		toSerialize["instantiatesCanonical"] = o.InstantiatesCanonical
	}
	if !IsNil(o.InstantiatesUri) {
		toSerialize["instantiatesUri"] = o.InstantiatesUri
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.PartOf) {
		toSerialize["partOf"] = o.PartOf
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.PerformedDateTime) {
		toSerialize["performedDateTime"] = o.PerformedDateTime
	}
	if !IsNil(o.PerformedPeriod) {
		toSerialize["performedPeriod"] = o.PerformedPeriod
	}
	if !IsNil(o.PerformedString) {
		toSerialize["performedString"] = o.PerformedString
	}
	if !IsNil(o.PerformedAge) {
		toSerialize["performedAge"] = o.PerformedAge
	}
	if !IsNil(o.PerformedRange) {
		toSerialize["performedRange"] = o.PerformedRange
	}
	if !IsNil(o.Recorder) {
		toSerialize["recorder"] = o.Recorder
	}
	if !IsNil(o.Asserter) {
		toSerialize["asserter"] = o.Asserter
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.BodySite) {
		toSerialize["bodySite"] = o.BodySite
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	if !IsNil(o.Complication) {
		toSerialize["complication"] = o.Complication
	}
	if !IsNil(o.ComplicationDetail) {
		toSerialize["complicationDetail"] = o.ComplicationDetail
	}
	if !IsNil(o.FollowUp) {
		toSerialize["followUp"] = o.FollowUp
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.FocalDevice) {
		toSerialize["focalDevice"] = o.FocalDevice
	}
	if !IsNil(o.UsedReference) {
		toSerialize["usedReference"] = o.UsedReference
	}
	if !IsNil(o.UsedCode) {
		toSerialize["usedCode"] = o.UsedCode
	}
	return toSerialize, nil
}

func (o *Procedure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcedure := _Procedure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcedure)

	if err != nil {
		return err
	}

	*o = Procedure(varProcedure)

	return err
}

type NullableProcedure struct {
	value *Procedure
	isSet bool
}

func (v NullableProcedure) Get() *Procedure {
	return v.value
}

func (v *NullableProcedure) Set(val *Procedure) {
	v.value = val
	v.isSet = true
}

func (v NullableProcedure) IsSet() bool {
	return v.isSet
}

func (v *NullableProcedure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcedure(val *Procedure) *NullableProcedure {
	return &NullableProcedure{value: val, isSet: true}
}

func (v NullableProcedure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcedure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


