/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSourceMaterialOrganismGeneral type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSourceMaterialOrganismGeneral{}

// SubstanceSourceMaterialOrganismGeneral Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterialOrganismGeneral struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The kingdom of an organism shall be specified.
	Kingdom *CodeableConcept `json:"kingdom,omitempty"`
	// The phylum of an organism shall be specified.
	Phylum *CodeableConcept `json:"phylum,omitempty"`
	// The class of an organism shall be specified.
	Class *CodeableConcept `json:"class,omitempty"`
	// The order of an organism shall be specified,.
	Order *CodeableConcept `json:"order,omitempty"`
}

// NewSubstanceSourceMaterialOrganismGeneral instantiates a new SubstanceSourceMaterialOrganismGeneral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSourceMaterialOrganismGeneral() *SubstanceSourceMaterialOrganismGeneral {
	this := SubstanceSourceMaterialOrganismGeneral{}
	return &this
}

// NewSubstanceSourceMaterialOrganismGeneralWithDefaults instantiates a new SubstanceSourceMaterialOrganismGeneral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSourceMaterialOrganismGeneralWithDefaults() *SubstanceSourceMaterialOrganismGeneral {
	this := SubstanceSourceMaterialOrganismGeneral{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetKingdom returns the Kingdom field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetKingdom() CodeableConcept {
	if o == nil || IsNil(o.Kingdom) {
		var ret CodeableConcept
		return ret
	}
	return *o.Kingdom
}

// GetKingdomOk returns a tuple with the Kingdom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetKingdomOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Kingdom) {
		return nil, false
	}
	return o.Kingdom, true
}

// HasKingdom returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasKingdom() bool {
	if o != nil && !IsNil(o.Kingdom) {
		return true
	}

	return false
}

// SetKingdom gets a reference to the given CodeableConcept and assigns it to the Kingdom field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetKingdom(v CodeableConcept) {
	o.Kingdom = &v
}

// GetPhylum returns the Phylum field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetPhylum() CodeableConcept {
	if o == nil || IsNil(o.Phylum) {
		var ret CodeableConcept
		return ret
	}
	return *o.Phylum
}

// GetPhylumOk returns a tuple with the Phylum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetPhylumOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Phylum) {
		return nil, false
	}
	return o.Phylum, true
}

// HasPhylum returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasPhylum() bool {
	if o != nil && !IsNil(o.Phylum) {
		return true
	}

	return false
}

// SetPhylum gets a reference to the given CodeableConcept and assigns it to the Phylum field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetPhylum(v CodeableConcept) {
	o.Phylum = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetClass() CodeableConcept {
	if o == nil || IsNil(o.Class) {
		var ret CodeableConcept
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetClassOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given CodeableConcept and assigns it to the Class field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetClass(v CodeableConcept) {
	o.Class = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganismGeneral) GetOrder() CodeableConcept {
	if o == nil || IsNil(o.Order) {
		var ret CodeableConcept
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) GetOrderOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganismGeneral) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given CodeableConcept and assigns it to the Order field.
func (o *SubstanceSourceMaterialOrganismGeneral) SetOrder(v CodeableConcept) {
	o.Order = &v
}

func (o SubstanceSourceMaterialOrganismGeneral) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSourceMaterialOrganismGeneral) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Kingdom) {
		toSerialize["kingdom"] = o.Kingdom
	}
	if !IsNil(o.Phylum) {
		toSerialize["phylum"] = o.Phylum
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableSubstanceSourceMaterialOrganismGeneral struct {
	value *SubstanceSourceMaterialOrganismGeneral
	isSet bool
}

func (v NullableSubstanceSourceMaterialOrganismGeneral) Get() *SubstanceSourceMaterialOrganismGeneral {
	return v.value
}

func (v *NullableSubstanceSourceMaterialOrganismGeneral) Set(val *SubstanceSourceMaterialOrganismGeneral) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSourceMaterialOrganismGeneral) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSourceMaterialOrganismGeneral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSourceMaterialOrganismGeneral(val *SubstanceSourceMaterialOrganismGeneral) *NullableSubstanceSourceMaterialOrganismGeneral {
	return &NullableSubstanceSourceMaterialOrganismGeneral{value: val, isSet: true}
}

func (v NullableSubstanceSourceMaterialOrganismGeneral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSourceMaterialOrganismGeneral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


