/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectMembershipAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMembershipAccess{}

// ProjectMembershipAccess Extended access configuration using parameterized access policies.
type ProjectMembershipAccess struct {
	// The base access policy used as a template.  Variables in the template access policy are replaced by the values in the parameter.
	Policy Reference `json:"policy"`
	// User options that control the display of the application.
	Parameter []ProjectMembershipAccessParameter `json:"parameter,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectMembershipAccess ProjectMembershipAccess

// NewProjectMembershipAccess instantiates a new ProjectMembershipAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMembershipAccess(policy Reference) *ProjectMembershipAccess {
	this := ProjectMembershipAccess{}
	this.Policy = policy
	return &this
}

// NewProjectMembershipAccessWithDefaults instantiates a new ProjectMembershipAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMembershipAccessWithDefaults() *ProjectMembershipAccess {
	this := ProjectMembershipAccess{}
	return &this
}

// GetPolicy returns the Policy field value
func (o *ProjectMembershipAccess) GetPolicy() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *ProjectMembershipAccess) GetPolicyOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *ProjectMembershipAccess) SetPolicy(v Reference) {
	o.Policy = v
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *ProjectMembershipAccess) GetParameter() []ProjectMembershipAccessParameter {
	if o == nil || IsNil(o.Parameter) {
		var ret []ProjectMembershipAccessParameter
		return ret
	}
	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMembershipAccess) GetParameterOk() ([]ProjectMembershipAccessParameter, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *ProjectMembershipAccess) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given []ProjectMembershipAccessParameter and assigns it to the Parameter field.
func (o *ProjectMembershipAccess) SetParameter(v []ProjectMembershipAccessParameter) {
	o.Parameter = v
}

func (o ProjectMembershipAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMembershipAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policy"] = o.Policy
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectMembershipAccess) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectMembershipAccess := _ProjectMembershipAccess{}

	err = json.Unmarshal(data, &varProjectMembershipAccess)

	if err != nil {
		return err
	}

	*o = ProjectMembershipAccess(varProjectMembershipAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "policy")
		delete(additionalProperties, "parameter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectMembershipAccess struct {
	value *ProjectMembershipAccess
	isSet bool
}

func (v NullableProjectMembershipAccess) Get() *ProjectMembershipAccess {
	return v.value
}

func (v *NullableProjectMembershipAccess) Set(val *ProjectMembershipAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMembershipAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMembershipAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMembershipAccess(val *ProjectMembershipAccess) *NullableProjectMembershipAccess {
	return &NullableProjectMembershipAccess{value: val, isSet: true}
}

func (v NullableProjectMembershipAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMembershipAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


