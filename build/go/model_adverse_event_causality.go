/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the AdverseEventCausality type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdverseEventCausality{}

// AdverseEventCausality Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
type AdverseEventCausality struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Assessment of if the entity caused the event.
	Assessment *CodeableConcept `json:"assessment,omitempty"`
	// A sequence of Unicode characters
	ProductRelatedness *string `json:"productRelatedness,omitempty"`
	// AdverseEvent.suspectEntity.causalityAuthor.
	Author *Reference `json:"author,omitempty"`
	// ProbabilityScale | Bayesian | Checklist.
	Method *CodeableConcept `json:"method,omitempty"`
}

// NewAdverseEventCausality instantiates a new AdverseEventCausality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdverseEventCausality() *AdverseEventCausality {
	this := AdverseEventCausality{}
	return &this
}

// NewAdverseEventCausalityWithDefaults instantiates a new AdverseEventCausality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdverseEventCausalityWithDefaults() *AdverseEventCausality {
	this := AdverseEventCausality{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdverseEventCausality) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *AdverseEventCausality) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *AdverseEventCausality) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetAssessment returns the Assessment field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetAssessment() CodeableConcept {
	if o == nil || IsNil(o.Assessment) {
		var ret CodeableConcept
		return ret
	}
	return *o.Assessment
}

// GetAssessmentOk returns a tuple with the Assessment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetAssessmentOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Assessment) {
		return nil, false
	}
	return o.Assessment, true
}

// HasAssessment returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasAssessment() bool {
	if o != nil && !IsNil(o.Assessment) {
		return true
	}

	return false
}

// SetAssessment gets a reference to the given CodeableConcept and assigns it to the Assessment field.
func (o *AdverseEventCausality) SetAssessment(v CodeableConcept) {
	o.Assessment = &v
}

// GetProductRelatedness returns the ProductRelatedness field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetProductRelatedness() string {
	if o == nil || IsNil(o.ProductRelatedness) {
		var ret string
		return ret
	}
	return *o.ProductRelatedness
}

// GetProductRelatednessOk returns a tuple with the ProductRelatedness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetProductRelatednessOk() (*string, bool) {
	if o == nil || IsNil(o.ProductRelatedness) {
		return nil, false
	}
	return o.ProductRelatedness, true
}

// HasProductRelatedness returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasProductRelatedness() bool {
	if o != nil && !IsNil(o.ProductRelatedness) {
		return true
	}

	return false
}

// SetProductRelatedness gets a reference to the given string and assigns it to the ProductRelatedness field.
func (o *AdverseEventCausality) SetProductRelatedness(v string) {
	o.ProductRelatedness = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetAuthor() Reference {
	if o == nil || IsNil(o.Author) {
		var ret Reference
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetAuthorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Reference and assigns it to the Author field.
func (o *AdverseEventCausality) SetAuthor(v Reference) {
	o.Author = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *AdverseEventCausality) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdverseEventCausality) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *AdverseEventCausality) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *AdverseEventCausality) SetMethod(v CodeableConcept) {
	o.Method = &v
}

func (o AdverseEventCausality) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdverseEventCausality) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Assessment) {
		toSerialize["assessment"] = o.Assessment
	}
	if !IsNil(o.ProductRelatedness) {
		toSerialize["productRelatedness"] = o.ProductRelatedness
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	return toSerialize, nil
}

type NullableAdverseEventCausality struct {
	value *AdverseEventCausality
	isSet bool
}

func (v NullableAdverseEventCausality) Get() *AdverseEventCausality {
	return v.value
}

func (v *NullableAdverseEventCausality) Set(val *AdverseEventCausality) {
	v.value = val
	v.isSet = true
}

func (v NullableAdverseEventCausality) IsSet() bool {
	return v.isSet
}

func (v *NullableAdverseEventCausality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdverseEventCausality(val *AdverseEventCausality) *NullableAdverseEventCausality {
	return &NullableAdverseEventCausality{value: val, isSet: true}
}

func (v NullableAdverseEventCausality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdverseEventCausality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


