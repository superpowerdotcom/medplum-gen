/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractSecurityLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractSecurityLabel{}

// ContractSecurityLabel Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractSecurityLabel struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Number used to link this term or term element to the applicable Security Label.
	Number []float32 `json:"number,omitempty"`
	// Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
	Classification Coding `json:"classification"`
	// Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
	Category []Coding `json:"category,omitempty"`
	// Security label privacy tag that species the manner in which term and/or term elements are to be protected.
	Control []Coding `json:"control,omitempty"`
}

type _ContractSecurityLabel ContractSecurityLabel

// NewContractSecurityLabel instantiates a new ContractSecurityLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractSecurityLabel(classification Coding) *ContractSecurityLabel {
	this := ContractSecurityLabel{}
	this.Classification = classification
	return &this
}

// NewContractSecurityLabelWithDefaults instantiates a new ContractSecurityLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractSecurityLabelWithDefaults() *ContractSecurityLabel {
	this := ContractSecurityLabel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContractSecurityLabel) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ContractSecurityLabel) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ContractSecurityLabel) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetNumber() []float32 {
	if o == nil || IsNil(o.Number) {
		var ret []float32
		return ret
	}
	return o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetNumberOk() ([]float32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given []float32 and assigns it to the Number field.
func (o *ContractSecurityLabel) SetNumber(v []float32) {
	o.Number = v
}

// GetClassification returns the Classification field value
func (o *ContractSecurityLabel) GetClassification() Coding {
	if o == nil {
		var ret Coding
		return ret
	}

	return o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetClassificationOk() (*Coding, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classification, true
}

// SetClassification sets field value
func (o *ContractSecurityLabel) SetClassification(v Coding) {
	o.Classification = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetCategory() []Coding {
	if o == nil || IsNil(o.Category) {
		var ret []Coding
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetCategoryOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []Coding and assigns it to the Category field.
func (o *ContractSecurityLabel) SetCategory(v []Coding) {
	o.Category = v
}

// GetControl returns the Control field value if set, zero value otherwise.
func (o *ContractSecurityLabel) GetControl() []Coding {
	if o == nil || IsNil(o.Control) {
		var ret []Coding
		return ret
	}
	return o.Control
}

// GetControlOk returns a tuple with the Control field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSecurityLabel) GetControlOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Control) {
		return nil, false
	}
	return o.Control, true
}

// HasControl returns a boolean if a field has been set.
func (o *ContractSecurityLabel) HasControl() bool {
	if o != nil && !IsNil(o.Control) {
		return true
	}

	return false
}

// SetControl gets a reference to the given []Coding and assigns it to the Control field.
func (o *ContractSecurityLabel) SetControl(v []Coding) {
	o.Control = v
}

func (o ContractSecurityLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractSecurityLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	toSerialize["classification"] = o.Classification
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Control) {
		toSerialize["control"] = o.Control
	}
	return toSerialize, nil
}

func (o *ContractSecurityLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"classification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractSecurityLabel := _ContractSecurityLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractSecurityLabel)

	if err != nil {
		return err
	}

	*o = ContractSecurityLabel(varContractSecurityLabel)

	return err
}

type NullableContractSecurityLabel struct {
	value *ContractSecurityLabel
	isSet bool
}

func (v NullableContractSecurityLabel) Get() *ContractSecurityLabel {
	return v.value
}

func (v *NullableContractSecurityLabel) Set(val *ContractSecurityLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableContractSecurityLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableContractSecurityLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractSecurityLabel(val *ContractSecurityLabel) *NullableContractSecurityLabel {
	return &NullableContractSecurityLabel{value: val, isSet: true}
}

func (v NullableContractSecurityLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractSecurityLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


