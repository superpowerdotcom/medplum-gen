/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the PractitionerRoleAvailableTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PractitionerRoleAvailableTime{}

// PractitionerRoleAvailableTime A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
type PractitionerRoleAvailableTime struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Indicates which days of the week are available between the start and end Times.
	DaysOfWeek []string `json:"daysOfWeek,omitempty"`
	// Value of \"true\" or \"false\"
	AllDay *bool `json:"allDay,omitempty"`
	// A time during the day, with no date specified
	AvailableStartTime *string `json:"availableStartTime,omitempty"`
	// A time during the day, with no date specified
	AvailableEndTime *string `json:"availableEndTime,omitempty"`
}

// NewPractitionerRoleAvailableTime instantiates a new PractitionerRoleAvailableTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPractitionerRoleAvailableTime() *PractitionerRoleAvailableTime {
	this := PractitionerRoleAvailableTime{}
	return &this
}

// NewPractitionerRoleAvailableTimeWithDefaults instantiates a new PractitionerRoleAvailableTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPractitionerRoleAvailableTimeWithDefaults() *PractitionerRoleAvailableTime {
	this := PractitionerRoleAvailableTime{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PractitionerRoleAvailableTime) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *PractitionerRoleAvailableTime) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *PractitionerRoleAvailableTime) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetDaysOfWeek() []string {
	if o == nil || IsNil(o.DaysOfWeek) {
		var ret []string
		return ret
	}
	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetDaysOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DaysOfWeek) {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasDaysOfWeek() bool {
	if o != nil && !IsNil(o.DaysOfWeek) {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []string and assigns it to the DaysOfWeek field.
func (o *PractitionerRoleAvailableTime) SetDaysOfWeek(v []string) {
	o.DaysOfWeek = v
}

// GetAllDay returns the AllDay field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetAllDay() bool {
	if o == nil || IsNil(o.AllDay) {
		var ret bool
		return ret
	}
	return *o.AllDay
}

// GetAllDayOk returns a tuple with the AllDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetAllDayOk() (*bool, bool) {
	if o == nil || IsNil(o.AllDay) {
		return nil, false
	}
	return o.AllDay, true
}

// HasAllDay returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasAllDay() bool {
	if o != nil && !IsNil(o.AllDay) {
		return true
	}

	return false
}

// SetAllDay gets a reference to the given bool and assigns it to the AllDay field.
func (o *PractitionerRoleAvailableTime) SetAllDay(v bool) {
	o.AllDay = &v
}

// GetAvailableStartTime returns the AvailableStartTime field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetAvailableStartTime() string {
	if o == nil || IsNil(o.AvailableStartTime) {
		var ret string
		return ret
	}
	return *o.AvailableStartTime
}

// GetAvailableStartTimeOk returns a tuple with the AvailableStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetAvailableStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableStartTime) {
		return nil, false
	}
	return o.AvailableStartTime, true
}

// HasAvailableStartTime returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasAvailableStartTime() bool {
	if o != nil && !IsNil(o.AvailableStartTime) {
		return true
	}

	return false
}

// SetAvailableStartTime gets a reference to the given string and assigns it to the AvailableStartTime field.
func (o *PractitionerRoleAvailableTime) SetAvailableStartTime(v string) {
	o.AvailableStartTime = &v
}

// GetAvailableEndTime returns the AvailableEndTime field value if set, zero value otherwise.
func (o *PractitionerRoleAvailableTime) GetAvailableEndTime() string {
	if o == nil || IsNil(o.AvailableEndTime) {
		var ret string
		return ret
	}
	return *o.AvailableEndTime
}

// GetAvailableEndTimeOk returns a tuple with the AvailableEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PractitionerRoleAvailableTime) GetAvailableEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableEndTime) {
		return nil, false
	}
	return o.AvailableEndTime, true
}

// HasAvailableEndTime returns a boolean if a field has been set.
func (o *PractitionerRoleAvailableTime) HasAvailableEndTime() bool {
	if o != nil && !IsNil(o.AvailableEndTime) {
		return true
	}

	return false
}

// SetAvailableEndTime gets a reference to the given string and assigns it to the AvailableEndTime field.
func (o *PractitionerRoleAvailableTime) SetAvailableEndTime(v string) {
	o.AvailableEndTime = &v
}

func (o PractitionerRoleAvailableTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PractitionerRoleAvailableTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.DaysOfWeek) {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	if !IsNil(o.AllDay) {
		toSerialize["allDay"] = o.AllDay
	}
	if !IsNil(o.AvailableStartTime) {
		toSerialize["availableStartTime"] = o.AvailableStartTime
	}
	if !IsNil(o.AvailableEndTime) {
		toSerialize["availableEndTime"] = o.AvailableEndTime
	}
	return toSerialize, nil
}

type NullablePractitionerRoleAvailableTime struct {
	value *PractitionerRoleAvailableTime
	isSet bool
}

func (v NullablePractitionerRoleAvailableTime) Get() *PractitionerRoleAvailableTime {
	return v.value
}

func (v *NullablePractitionerRoleAvailableTime) Set(val *PractitionerRoleAvailableTime) {
	v.value = val
	v.isSet = true
}

func (v NullablePractitionerRoleAvailableTime) IsSet() bool {
	return v.isSet
}

func (v *NullablePractitionerRoleAvailableTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePractitionerRoleAvailableTime(val *PractitionerRoleAvailableTime) *NullablePractitionerRoleAvailableTime {
	return &NullablePractitionerRoleAvailableTime{value: val, isSet: true}
}

func (v NullablePractitionerRoleAvailableTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePractitionerRoleAvailableTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


