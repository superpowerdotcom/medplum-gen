/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductPharmaceuticalRouteOfAdministration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductPharmaceuticalRouteOfAdministration{}

// MedicinalProductPharmaceuticalRouteOfAdministration A pharmaceutical product described in terms of its composition and dose form.
type MedicinalProductPharmaceuticalRouteOfAdministration struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Coded expression for the route.
	Code CodeableConcept `json:"code"`
	// The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
	FirstDose *Quantity `json:"firstDose,omitempty"`
	// The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
	MaxSingleDose *Quantity `json:"maxSingleDose,omitempty"`
	// The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
	MaxDosePerDay *Quantity `json:"maxDosePerDay,omitempty"`
	// The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
	MaxDosePerTreatmentPeriod *Ratio `json:"maxDosePerTreatmentPeriod,omitempty"`
	// The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
	MaxTreatmentPeriod *Duration `json:"maxTreatmentPeriod,omitempty"`
	// A species for which this route applies.
	TargetSpecies []MedicinalProductPharmaceuticalTargetSpecies `json:"targetSpecies,omitempty"`
}

type _MedicinalProductPharmaceuticalRouteOfAdministration MedicinalProductPharmaceuticalRouteOfAdministration

// NewMedicinalProductPharmaceuticalRouteOfAdministration instantiates a new MedicinalProductPharmaceuticalRouteOfAdministration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductPharmaceuticalRouteOfAdministration(code CodeableConcept) *MedicinalProductPharmaceuticalRouteOfAdministration {
	this := MedicinalProductPharmaceuticalRouteOfAdministration{}
	this.Code = code
	return &this
}

// NewMedicinalProductPharmaceuticalRouteOfAdministrationWithDefaults instantiates a new MedicinalProductPharmaceuticalRouteOfAdministration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductPharmaceuticalRouteOfAdministrationWithDefaults() *MedicinalProductPharmaceuticalRouteOfAdministration {
	this := MedicinalProductPharmaceuticalRouteOfAdministration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetFirstDose returns the FirstDose field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetFirstDose() Quantity {
	if o == nil || IsNil(o.FirstDose) {
		var ret Quantity
		return ret
	}
	return *o.FirstDose
}

// GetFirstDoseOk returns a tuple with the FirstDose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetFirstDoseOk() (*Quantity, bool) {
	if o == nil || IsNil(o.FirstDose) {
		return nil, false
	}
	return o.FirstDose, true
}

// HasFirstDose returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasFirstDose() bool {
	if o != nil && !IsNil(o.FirstDose) {
		return true
	}

	return false
}

// SetFirstDose gets a reference to the given Quantity and assigns it to the FirstDose field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetFirstDose(v Quantity) {
	o.FirstDose = &v
}

// GetMaxSingleDose returns the MaxSingleDose field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxSingleDose() Quantity {
	if o == nil || IsNil(o.MaxSingleDose) {
		var ret Quantity
		return ret
	}
	return *o.MaxSingleDose
}

// GetMaxSingleDoseOk returns a tuple with the MaxSingleDose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxSingleDoseOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxSingleDose) {
		return nil, false
	}
	return o.MaxSingleDose, true
}

// HasMaxSingleDose returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasMaxSingleDose() bool {
	if o != nil && !IsNil(o.MaxSingleDose) {
		return true
	}

	return false
}

// SetMaxSingleDose gets a reference to the given Quantity and assigns it to the MaxSingleDose field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetMaxSingleDose(v Quantity) {
	o.MaxSingleDose = &v
}

// GetMaxDosePerDay returns the MaxDosePerDay field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerDay() Quantity {
	if o == nil || IsNil(o.MaxDosePerDay) {
		var ret Quantity
		return ret
	}
	return *o.MaxDosePerDay
}

// GetMaxDosePerDayOk returns a tuple with the MaxDosePerDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerDayOk() (*Quantity, bool) {
	if o == nil || IsNil(o.MaxDosePerDay) {
		return nil, false
	}
	return o.MaxDosePerDay, true
}

// HasMaxDosePerDay returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasMaxDosePerDay() bool {
	if o != nil && !IsNil(o.MaxDosePerDay) {
		return true
	}

	return false
}

// SetMaxDosePerDay gets a reference to the given Quantity and assigns it to the MaxDosePerDay field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetMaxDosePerDay(v Quantity) {
	o.MaxDosePerDay = &v
}

// GetMaxDosePerTreatmentPeriod returns the MaxDosePerTreatmentPeriod field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerTreatmentPeriod() Ratio {
	if o == nil || IsNil(o.MaxDosePerTreatmentPeriod) {
		var ret Ratio
		return ret
	}
	return *o.MaxDosePerTreatmentPeriod
}

// GetMaxDosePerTreatmentPeriodOk returns a tuple with the MaxDosePerTreatmentPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxDosePerTreatmentPeriodOk() (*Ratio, bool) {
	if o == nil || IsNil(o.MaxDosePerTreatmentPeriod) {
		return nil, false
	}
	return o.MaxDosePerTreatmentPeriod, true
}

// HasMaxDosePerTreatmentPeriod returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasMaxDosePerTreatmentPeriod() bool {
	if o != nil && !IsNil(o.MaxDosePerTreatmentPeriod) {
		return true
	}

	return false
}

// SetMaxDosePerTreatmentPeriod gets a reference to the given Ratio and assigns it to the MaxDosePerTreatmentPeriod field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetMaxDosePerTreatmentPeriod(v Ratio) {
	o.MaxDosePerTreatmentPeriod = &v
}

// GetMaxTreatmentPeriod returns the MaxTreatmentPeriod field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxTreatmentPeriod() Duration {
	if o == nil || IsNil(o.MaxTreatmentPeriod) {
		var ret Duration
		return ret
	}
	return *o.MaxTreatmentPeriod
}

// GetMaxTreatmentPeriodOk returns a tuple with the MaxTreatmentPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetMaxTreatmentPeriodOk() (*Duration, bool) {
	if o == nil || IsNil(o.MaxTreatmentPeriod) {
		return nil, false
	}
	return o.MaxTreatmentPeriod, true
}

// HasMaxTreatmentPeriod returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasMaxTreatmentPeriod() bool {
	if o != nil && !IsNil(o.MaxTreatmentPeriod) {
		return true
	}

	return false
}

// SetMaxTreatmentPeriod gets a reference to the given Duration and assigns it to the MaxTreatmentPeriod field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetMaxTreatmentPeriod(v Duration) {
	o.MaxTreatmentPeriod = &v
}

// GetTargetSpecies returns the TargetSpecies field value if set, zero value otherwise.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetTargetSpecies() []MedicinalProductPharmaceuticalTargetSpecies {
	if o == nil || IsNil(o.TargetSpecies) {
		var ret []MedicinalProductPharmaceuticalTargetSpecies
		return ret
	}
	return o.TargetSpecies
}

// GetTargetSpeciesOk returns a tuple with the TargetSpecies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) GetTargetSpeciesOk() ([]MedicinalProductPharmaceuticalTargetSpecies, bool) {
	if o == nil || IsNil(o.TargetSpecies) {
		return nil, false
	}
	return o.TargetSpecies, true
}

// HasTargetSpecies returns a boolean if a field has been set.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) HasTargetSpecies() bool {
	if o != nil && !IsNil(o.TargetSpecies) {
		return true
	}

	return false
}

// SetTargetSpecies gets a reference to the given []MedicinalProductPharmaceuticalTargetSpecies and assigns it to the TargetSpecies field.
func (o *MedicinalProductPharmaceuticalRouteOfAdministration) SetTargetSpecies(v []MedicinalProductPharmaceuticalTargetSpecies) {
	o.TargetSpecies = v
}

func (o MedicinalProductPharmaceuticalRouteOfAdministration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductPharmaceuticalRouteOfAdministration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.FirstDose) {
		toSerialize["firstDose"] = o.FirstDose
	}
	if !IsNil(o.MaxSingleDose) {
		toSerialize["maxSingleDose"] = o.MaxSingleDose
	}
	if !IsNil(o.MaxDosePerDay) {
		toSerialize["maxDosePerDay"] = o.MaxDosePerDay
	}
	if !IsNil(o.MaxDosePerTreatmentPeriod) {
		toSerialize["maxDosePerTreatmentPeriod"] = o.MaxDosePerTreatmentPeriod
	}
	if !IsNil(o.MaxTreatmentPeriod) {
		toSerialize["maxTreatmentPeriod"] = o.MaxTreatmentPeriod
	}
	if !IsNil(o.TargetSpecies) {
		toSerialize["targetSpecies"] = o.TargetSpecies
	}
	return toSerialize, nil
}

func (o *MedicinalProductPharmaceuticalRouteOfAdministration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductPharmaceuticalRouteOfAdministration := _MedicinalProductPharmaceuticalRouteOfAdministration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductPharmaceuticalRouteOfAdministration)

	if err != nil {
		return err
	}

	*o = MedicinalProductPharmaceuticalRouteOfAdministration(varMedicinalProductPharmaceuticalRouteOfAdministration)

	return err
}

type NullableMedicinalProductPharmaceuticalRouteOfAdministration struct {
	value *MedicinalProductPharmaceuticalRouteOfAdministration
	isSet bool
}

func (v NullableMedicinalProductPharmaceuticalRouteOfAdministration) Get() *MedicinalProductPharmaceuticalRouteOfAdministration {
	return v.value
}

func (v *NullableMedicinalProductPharmaceuticalRouteOfAdministration) Set(val *MedicinalProductPharmaceuticalRouteOfAdministration) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductPharmaceuticalRouteOfAdministration) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductPharmaceuticalRouteOfAdministration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductPharmaceuticalRouteOfAdministration(val *MedicinalProductPharmaceuticalRouteOfAdministration) *NullableMedicinalProductPharmaceuticalRouteOfAdministration {
	return &NullableMedicinalProductPharmaceuticalRouteOfAdministration{value: val, isSet: true}
}

func (v NullableMedicinalProductPharmaceuticalRouteOfAdministration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductPharmaceuticalRouteOfAdministration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


