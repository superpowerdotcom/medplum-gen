/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TestScriptOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestScriptOperation{}

// TestScriptOperation A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScriptOperation struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Server interaction or operation type.
	Type *Coding `json:"type,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Resource *string `json:"resource,omitempty"`
	// A sequence of Unicode characters
	Label *string `json:"label,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Accept *string `json:"accept,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	ContentType *string `json:"contentType,omitempty"`
	// A whole number
	Destination *float32 `json:"destination,omitempty"`
	// Value of \"true\" or \"false\"
	EncodeRequestUrl *bool `json:"encodeRequestUrl,omitempty"`
	// The HTTP method the test engine MUST use for this operation regardless of any other operation details.
	Method *string `json:"method,omitempty"`
	// A whole number
	Origin *float32 `json:"origin,omitempty"`
	// A sequence of Unicode characters
	Params *string `json:"params,omitempty"`
	// Header elements would be used to set HTTP headers.
	RequestHeader []TestScriptRequestHeader `json:"requestHeader,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	RequestId *string `json:"requestId,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	ResponseId *string `json:"responseId,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	SourceId *string `json:"sourceId,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	TargetId *string `json:"targetId,omitempty"`
	// A sequence of Unicode characters
	Url *string `json:"url,omitempty"`
}

// NewTestScriptOperation instantiates a new TestScriptOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestScriptOperation() *TestScriptOperation {
	this := TestScriptOperation{}
	return &this
}

// NewTestScriptOperationWithDefaults instantiates a new TestScriptOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestScriptOperationWithDefaults() *TestScriptOperation {
	this := TestScriptOperation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestScriptOperation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestScriptOperation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestScriptOperation) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TestScriptOperation) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TestScriptOperation) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TestScriptOperation) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TestScriptOperation) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TestScriptOperation) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TestScriptOperation) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TestScriptOperation) GetType() Coding {
	if o == nil || IsNil(o.Type) {
		var ret Coding
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetTypeOk() (*Coding, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TestScriptOperation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Coding and assigns it to the Type field.
func (o *TestScriptOperation) SetType(v Coding) {
	o.Type = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *TestScriptOperation) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *TestScriptOperation) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *TestScriptOperation) SetResource(v string) {
	o.Resource = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *TestScriptOperation) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *TestScriptOperation) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *TestScriptOperation) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TestScriptOperation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TestScriptOperation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TestScriptOperation) SetDescription(v string) {
	o.Description = &v
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *TestScriptOperation) GetAccept() string {
	if o == nil || IsNil(o.Accept) {
		var ret string
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetAcceptOk() (*string, bool) {
	if o == nil || IsNil(o.Accept) {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *TestScriptOperation) HasAccept() bool {
	if o != nil && !IsNil(o.Accept) {
		return true
	}

	return false
}

// SetAccept gets a reference to the given string and assigns it to the Accept field.
func (o *TestScriptOperation) SetAccept(v string) {
	o.Accept = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *TestScriptOperation) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *TestScriptOperation) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *TestScriptOperation) SetContentType(v string) {
	o.ContentType = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *TestScriptOperation) GetDestination() float32 {
	if o == nil || IsNil(o.Destination) {
		var ret float32
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetDestinationOk() (*float32, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *TestScriptOperation) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given float32 and assigns it to the Destination field.
func (o *TestScriptOperation) SetDestination(v float32) {
	o.Destination = &v
}

// GetEncodeRequestUrl returns the EncodeRequestUrl field value if set, zero value otherwise.
func (o *TestScriptOperation) GetEncodeRequestUrl() bool {
	if o == nil || IsNil(o.EncodeRequestUrl) {
		var ret bool
		return ret
	}
	return *o.EncodeRequestUrl
}

// GetEncodeRequestUrlOk returns a tuple with the EncodeRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetEncodeRequestUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.EncodeRequestUrl) {
		return nil, false
	}
	return o.EncodeRequestUrl, true
}

// HasEncodeRequestUrl returns a boolean if a field has been set.
func (o *TestScriptOperation) HasEncodeRequestUrl() bool {
	if o != nil && !IsNil(o.EncodeRequestUrl) {
		return true
	}

	return false
}

// SetEncodeRequestUrl gets a reference to the given bool and assigns it to the EncodeRequestUrl field.
func (o *TestScriptOperation) SetEncodeRequestUrl(v bool) {
	o.EncodeRequestUrl = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TestScriptOperation) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TestScriptOperation) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *TestScriptOperation) SetMethod(v string) {
	o.Method = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *TestScriptOperation) GetOrigin() float32 {
	if o == nil || IsNil(o.Origin) {
		var ret float32
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetOriginOk() (*float32, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *TestScriptOperation) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given float32 and assigns it to the Origin field.
func (o *TestScriptOperation) SetOrigin(v float32) {
	o.Origin = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *TestScriptOperation) GetParams() string {
	if o == nil || IsNil(o.Params) {
		var ret string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetParamsOk() (*string, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *TestScriptOperation) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given string and assigns it to the Params field.
func (o *TestScriptOperation) SetParams(v string) {
	o.Params = &v
}

// GetRequestHeader returns the RequestHeader field value if set, zero value otherwise.
func (o *TestScriptOperation) GetRequestHeader() []TestScriptRequestHeader {
	if o == nil || IsNil(o.RequestHeader) {
		var ret []TestScriptRequestHeader
		return ret
	}
	return o.RequestHeader
}

// GetRequestHeaderOk returns a tuple with the RequestHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetRequestHeaderOk() ([]TestScriptRequestHeader, bool) {
	if o == nil || IsNil(o.RequestHeader) {
		return nil, false
	}
	return o.RequestHeader, true
}

// HasRequestHeader returns a boolean if a field has been set.
func (o *TestScriptOperation) HasRequestHeader() bool {
	if o != nil && !IsNil(o.RequestHeader) {
		return true
	}

	return false
}

// SetRequestHeader gets a reference to the given []TestScriptRequestHeader and assigns it to the RequestHeader field.
func (o *TestScriptOperation) SetRequestHeader(v []TestScriptRequestHeader) {
	o.RequestHeader = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TestScriptOperation) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TestScriptOperation) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TestScriptOperation) SetRequestId(v string) {
	o.RequestId = &v
}

// GetResponseId returns the ResponseId field value if set, zero value otherwise.
func (o *TestScriptOperation) GetResponseId() string {
	if o == nil || IsNil(o.ResponseId) {
		var ret string
		return ret
	}
	return *o.ResponseId
}

// GetResponseIdOk returns a tuple with the ResponseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetResponseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseId) {
		return nil, false
	}
	return o.ResponseId, true
}

// HasResponseId returns a boolean if a field has been set.
func (o *TestScriptOperation) HasResponseId() bool {
	if o != nil && !IsNil(o.ResponseId) {
		return true
	}

	return false
}

// SetResponseId gets a reference to the given string and assigns it to the ResponseId field.
func (o *TestScriptOperation) SetResponseId(v string) {
	o.ResponseId = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *TestScriptOperation) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *TestScriptOperation) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *TestScriptOperation) SetSourceId(v string) {
	o.SourceId = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *TestScriptOperation) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *TestScriptOperation) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *TestScriptOperation) SetTargetId(v string) {
	o.TargetId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TestScriptOperation) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestScriptOperation) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TestScriptOperation) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TestScriptOperation) SetUrl(v string) {
	o.Url = &v
}

func (o TestScriptOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestScriptOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Accept) {
		toSerialize["accept"] = o.Accept
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.EncodeRequestUrl) {
		toSerialize["encodeRequestUrl"] = o.EncodeRequestUrl
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.RequestHeader) {
		toSerialize["requestHeader"] = o.RequestHeader
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.ResponseId) {
		toSerialize["responseId"] = o.ResponseId
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableTestScriptOperation struct {
	value *TestScriptOperation
	isSet bool
}

func (v NullableTestScriptOperation) Get() *TestScriptOperation {
	return v.value
}

func (v *NullableTestScriptOperation) Set(val *TestScriptOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableTestScriptOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableTestScriptOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestScriptOperation(val *TestScriptOperation) *NullableTestScriptOperation {
	return &NullableTestScriptOperation{value: val, isSet: true}
}

func (v NullableTestScriptOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestScriptOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


