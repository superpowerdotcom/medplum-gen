/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FamilyMemberHistoryCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FamilyMemberHistoryCondition{}

// FamilyMemberHistoryCondition Significant health conditions for a person related to the patient relevant in the context of care for the patient.
type FamilyMemberHistoryCondition struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
	Code CodeableConcept `json:"code"`
	// Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	// Value of \"true\" or \"false\"
	ContributedToDeath *bool `json:"contributedToDeath,omitempty"`
	// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
	OnsetAge *Age `json:"onsetAge,omitempty"`
	// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
	OnsetRange *Range `json:"onsetRange,omitempty"`
	// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
	OnsetPeriod *Period `json:"onsetPeriod,omitempty"`
	// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
	OnsetString *string `json:"onsetString,omitempty"`
	// An area where general notes can be placed about this specific condition.
	Note []Annotation `json:"note,omitempty"`
}

type _FamilyMemberHistoryCondition FamilyMemberHistoryCondition

// NewFamilyMemberHistoryCondition instantiates a new FamilyMemberHistoryCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFamilyMemberHistoryCondition(code CodeableConcept) *FamilyMemberHistoryCondition {
	this := FamilyMemberHistoryCondition{}
	this.Code = code
	return &this
}

// NewFamilyMemberHistoryConditionWithDefaults instantiates a new FamilyMemberHistoryCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFamilyMemberHistoryConditionWithDefaults() *FamilyMemberHistoryCondition {
	this := FamilyMemberHistoryCondition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FamilyMemberHistoryCondition) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *FamilyMemberHistoryCondition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *FamilyMemberHistoryCondition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value
func (o *FamilyMemberHistoryCondition) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *FamilyMemberHistoryCondition) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetOutcome() CodeableConcept {
	if o == nil || IsNil(o.Outcome) {
		var ret CodeableConcept
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetOutcomeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given CodeableConcept and assigns it to the Outcome field.
func (o *FamilyMemberHistoryCondition) SetOutcome(v CodeableConcept) {
	o.Outcome = &v
}

// GetContributedToDeath returns the ContributedToDeath field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetContributedToDeath() bool {
	if o == nil || IsNil(o.ContributedToDeath) {
		var ret bool
		return ret
	}
	return *o.ContributedToDeath
}

// GetContributedToDeathOk returns a tuple with the ContributedToDeath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetContributedToDeathOk() (*bool, bool) {
	if o == nil || IsNil(o.ContributedToDeath) {
		return nil, false
	}
	return o.ContributedToDeath, true
}

// HasContributedToDeath returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasContributedToDeath() bool {
	if o != nil && !IsNil(o.ContributedToDeath) {
		return true
	}

	return false
}

// SetContributedToDeath gets a reference to the given bool and assigns it to the ContributedToDeath field.
func (o *FamilyMemberHistoryCondition) SetContributedToDeath(v bool) {
	o.ContributedToDeath = &v
}

// GetOnsetAge returns the OnsetAge field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetOnsetAge() Age {
	if o == nil || IsNil(o.OnsetAge) {
		var ret Age
		return ret
	}
	return *o.OnsetAge
}

// GetOnsetAgeOk returns a tuple with the OnsetAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetOnsetAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.OnsetAge) {
		return nil, false
	}
	return o.OnsetAge, true
}

// HasOnsetAge returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasOnsetAge() bool {
	if o != nil && !IsNil(o.OnsetAge) {
		return true
	}

	return false
}

// SetOnsetAge gets a reference to the given Age and assigns it to the OnsetAge field.
func (o *FamilyMemberHistoryCondition) SetOnsetAge(v Age) {
	o.OnsetAge = &v
}

// GetOnsetRange returns the OnsetRange field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetOnsetRange() Range {
	if o == nil || IsNil(o.OnsetRange) {
		var ret Range
		return ret
	}
	return *o.OnsetRange
}

// GetOnsetRangeOk returns a tuple with the OnsetRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetOnsetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.OnsetRange) {
		return nil, false
	}
	return o.OnsetRange, true
}

// HasOnsetRange returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasOnsetRange() bool {
	if o != nil && !IsNil(o.OnsetRange) {
		return true
	}

	return false
}

// SetOnsetRange gets a reference to the given Range and assigns it to the OnsetRange field.
func (o *FamilyMemberHistoryCondition) SetOnsetRange(v Range) {
	o.OnsetRange = &v
}

// GetOnsetPeriod returns the OnsetPeriod field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetOnsetPeriod() Period {
	if o == nil || IsNil(o.OnsetPeriod) {
		var ret Period
		return ret
	}
	return *o.OnsetPeriod
}

// GetOnsetPeriodOk returns a tuple with the OnsetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetOnsetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OnsetPeriod) {
		return nil, false
	}
	return o.OnsetPeriod, true
}

// HasOnsetPeriod returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasOnsetPeriod() bool {
	if o != nil && !IsNil(o.OnsetPeriod) {
		return true
	}

	return false
}

// SetOnsetPeriod gets a reference to the given Period and assigns it to the OnsetPeriod field.
func (o *FamilyMemberHistoryCondition) SetOnsetPeriod(v Period) {
	o.OnsetPeriod = &v
}

// GetOnsetString returns the OnsetString field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetOnsetString() string {
	if o == nil || IsNil(o.OnsetString) {
		var ret string
		return ret
	}
	return *o.OnsetString
}

// GetOnsetStringOk returns a tuple with the OnsetString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetOnsetStringOk() (*string, bool) {
	if o == nil || IsNil(o.OnsetString) {
		return nil, false
	}
	return o.OnsetString, true
}

// HasOnsetString returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasOnsetString() bool {
	if o != nil && !IsNil(o.OnsetString) {
		return true
	}

	return false
}

// SetOnsetString gets a reference to the given string and assigns it to the OnsetString field.
func (o *FamilyMemberHistoryCondition) SetOnsetString(v string) {
	o.OnsetString = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *FamilyMemberHistoryCondition) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FamilyMemberHistoryCondition) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *FamilyMemberHistoryCondition) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *FamilyMemberHistoryCondition) SetNote(v []Annotation) {
	o.Note = v
}

func (o FamilyMemberHistoryCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FamilyMemberHistoryCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.ContributedToDeath) {
		toSerialize["contributedToDeath"] = o.ContributedToDeath
	}
	if !IsNil(o.OnsetAge) {
		toSerialize["onsetAge"] = o.OnsetAge
	}
	if !IsNil(o.OnsetRange) {
		toSerialize["onsetRange"] = o.OnsetRange
	}
	if !IsNil(o.OnsetPeriod) {
		toSerialize["onsetPeriod"] = o.OnsetPeriod
	}
	if !IsNil(o.OnsetString) {
		toSerialize["onsetString"] = o.OnsetString
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *FamilyMemberHistoryCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFamilyMemberHistoryCondition := _FamilyMemberHistoryCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFamilyMemberHistoryCondition)

	if err != nil {
		return err
	}

	*o = FamilyMemberHistoryCondition(varFamilyMemberHistoryCondition)

	return err
}

type NullableFamilyMemberHistoryCondition struct {
	value *FamilyMemberHistoryCondition
	isSet bool
}

func (v NullableFamilyMemberHistoryCondition) Get() *FamilyMemberHistoryCondition {
	return v.value
}

func (v *NullableFamilyMemberHistoryCondition) Set(val *FamilyMemberHistoryCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableFamilyMemberHistoryCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableFamilyMemberHistoryCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFamilyMemberHistoryCondition(val *FamilyMemberHistoryCondition) *NullableFamilyMemberHistoryCondition {
	return &NullableFamilyMemberHistoryCondition{value: val, isSet: true}
}

func (v NullableFamilyMemberHistoryCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFamilyMemberHistoryCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


