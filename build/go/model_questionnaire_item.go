/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the QuestionnaireItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuestionnaireItem{}

// QuestionnaireItem A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
type QuestionnaireItem struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	LinkId *string `json:"linkId,omitempty"`
	// String of characters used to identify a name or a resource
	Definition *string `json:"definition,omitempty"`
	// A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
	Code []Coding `json:"code,omitempty"`
	// A sequence of Unicode characters
	Prefix *string `json:"prefix,omitempty"`
	// A sequence of Unicode characters
	Text *string `json:"text,omitempty"`
	// The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
	Type *string `json:"type,omitempty"`
	// A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
	EnableWhen []QuestionnaireEnableWhen `json:"enableWhen,omitempty"`
	// Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
	EnableBehavior *string `json:"enableBehavior,omitempty"`
	// Value of \"true\" or \"false\"
	Required *bool `json:"required,omitempty"`
	// Value of \"true\" or \"false\"
	Repeats *bool `json:"repeats,omitempty"`
	// Value of \"true\" or \"false\"
	ReadOnly *bool `json:"readOnly,omitempty"`
	// A whole number
	MaxLength *float32 `json:"maxLength,omitempty"`
	// A URI that is a reference to a canonical URL on a FHIR resource
	AnswerValueSet *string `json:"answerValueSet,omitempty"`
	// One of the permitted answers for a \"choice\" or \"open-choice\" question.
	AnswerOption []QuestionnaireAnswerOption `json:"answerOption,omitempty"`
	// One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
	Initial []QuestionnaireInitial `json:"initial,omitempty"`
	// Text, questions and other groups to be nested beneath a question or group.
	Item []QuestionnaireItem `json:"item,omitempty"`
}

// NewQuestionnaireItem instantiates a new QuestionnaireItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireItem() *QuestionnaireItem {
	this := QuestionnaireItem{}
	return &this
}

// NewQuestionnaireItemWithDefaults instantiates a new QuestionnaireItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireItemWithDefaults() *QuestionnaireItem {
	this := QuestionnaireItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *QuestionnaireItem) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *QuestionnaireItem) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *QuestionnaireItem) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetLinkId() string {
	if o == nil || IsNil(o.LinkId) {
		var ret string
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetLinkIdOk() (*string, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given string and assigns it to the LinkId field.
func (o *QuestionnaireItem) SetLinkId(v string) {
	o.LinkId = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *QuestionnaireItem) SetDefinition(v string) {
	o.Definition = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetCode() []Coding {
	if o == nil || IsNil(o.Code) {
		var ret []Coding
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetCodeOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []Coding and assigns it to the Code field.
func (o *QuestionnaireItem) SetCode(v []Coding) {
	o.Code = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *QuestionnaireItem) SetPrefix(v string) {
	o.Prefix = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *QuestionnaireItem) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *QuestionnaireItem) SetType(v string) {
	o.Type = &v
}

// GetEnableWhen returns the EnableWhen field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetEnableWhen() []QuestionnaireEnableWhen {
	if o == nil || IsNil(o.EnableWhen) {
		var ret []QuestionnaireEnableWhen
		return ret
	}
	return o.EnableWhen
}

// GetEnableWhenOk returns a tuple with the EnableWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetEnableWhenOk() ([]QuestionnaireEnableWhen, bool) {
	if o == nil || IsNil(o.EnableWhen) {
		return nil, false
	}
	return o.EnableWhen, true
}

// HasEnableWhen returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasEnableWhen() bool {
	if o != nil && !IsNil(o.EnableWhen) {
		return true
	}

	return false
}

// SetEnableWhen gets a reference to the given []QuestionnaireEnableWhen and assigns it to the EnableWhen field.
func (o *QuestionnaireItem) SetEnableWhen(v []QuestionnaireEnableWhen) {
	o.EnableWhen = v
}

// GetEnableBehavior returns the EnableBehavior field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetEnableBehavior() string {
	if o == nil || IsNil(o.EnableBehavior) {
		var ret string
		return ret
	}
	return *o.EnableBehavior
}

// GetEnableBehaviorOk returns a tuple with the EnableBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetEnableBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.EnableBehavior) {
		return nil, false
	}
	return o.EnableBehavior, true
}

// HasEnableBehavior returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasEnableBehavior() bool {
	if o != nil && !IsNil(o.EnableBehavior) {
		return true
	}

	return false
}

// SetEnableBehavior gets a reference to the given string and assigns it to the EnableBehavior field.
func (o *QuestionnaireItem) SetEnableBehavior(v string) {
	o.EnableBehavior = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *QuestionnaireItem) SetRequired(v bool) {
	o.Required = &v
}

// GetRepeats returns the Repeats field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetRepeats() bool {
	if o == nil || IsNil(o.Repeats) {
		var ret bool
		return ret
	}
	return *o.Repeats
}

// GetRepeatsOk returns a tuple with the Repeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetRepeatsOk() (*bool, bool) {
	if o == nil || IsNil(o.Repeats) {
		return nil, false
	}
	return o.Repeats, true
}

// HasRepeats returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasRepeats() bool {
	if o != nil && !IsNil(o.Repeats) {
		return true
	}

	return false
}

// SetRepeats gets a reference to the given bool and assigns it to the Repeats field.
func (o *QuestionnaireItem) SetRepeats(v bool) {
	o.Repeats = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *QuestionnaireItem) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetMaxLength() float32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret float32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetMaxLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given float32 and assigns it to the MaxLength field.
func (o *QuestionnaireItem) SetMaxLength(v float32) {
	o.MaxLength = &v
}

// GetAnswerValueSet returns the AnswerValueSet field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetAnswerValueSet() string {
	if o == nil || IsNil(o.AnswerValueSet) {
		var ret string
		return ret
	}
	return *o.AnswerValueSet
}

// GetAnswerValueSetOk returns a tuple with the AnswerValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetAnswerValueSetOk() (*string, bool) {
	if o == nil || IsNil(o.AnswerValueSet) {
		return nil, false
	}
	return o.AnswerValueSet, true
}

// HasAnswerValueSet returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasAnswerValueSet() bool {
	if o != nil && !IsNil(o.AnswerValueSet) {
		return true
	}

	return false
}

// SetAnswerValueSet gets a reference to the given string and assigns it to the AnswerValueSet field.
func (o *QuestionnaireItem) SetAnswerValueSet(v string) {
	o.AnswerValueSet = &v
}

// GetAnswerOption returns the AnswerOption field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetAnswerOption() []QuestionnaireAnswerOption {
	if o == nil || IsNil(o.AnswerOption) {
		var ret []QuestionnaireAnswerOption
		return ret
	}
	return o.AnswerOption
}

// GetAnswerOptionOk returns a tuple with the AnswerOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetAnswerOptionOk() ([]QuestionnaireAnswerOption, bool) {
	if o == nil || IsNil(o.AnswerOption) {
		return nil, false
	}
	return o.AnswerOption, true
}

// HasAnswerOption returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasAnswerOption() bool {
	if o != nil && !IsNil(o.AnswerOption) {
		return true
	}

	return false
}

// SetAnswerOption gets a reference to the given []QuestionnaireAnswerOption and assigns it to the AnswerOption field.
func (o *QuestionnaireItem) SetAnswerOption(v []QuestionnaireAnswerOption) {
	o.AnswerOption = v
}

// GetInitial returns the Initial field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetInitial() []QuestionnaireInitial {
	if o == nil || IsNil(o.Initial) {
		var ret []QuestionnaireInitial
		return ret
	}
	return o.Initial
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetInitialOk() ([]QuestionnaireInitial, bool) {
	if o == nil || IsNil(o.Initial) {
		return nil, false
	}
	return o.Initial, true
}

// HasInitial returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasInitial() bool {
	if o != nil && !IsNil(o.Initial) {
		return true
	}

	return false
}

// SetInitial gets a reference to the given []QuestionnaireInitial and assigns it to the Initial field.
func (o *QuestionnaireItem) SetInitial(v []QuestionnaireInitial) {
	o.Initial = v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *QuestionnaireItem) GetItem() []QuestionnaireItem {
	if o == nil || IsNil(o.Item) {
		var ret []QuestionnaireItem
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireItem) GetItemOk() ([]QuestionnaireItem, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *QuestionnaireItem) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []QuestionnaireItem and assigns it to the Item field.
func (o *QuestionnaireItem) SetItem(v []QuestionnaireItem) {
	o.Item = v
}

func (o QuestionnaireItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuestionnaireItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.EnableWhen) {
		toSerialize["enableWhen"] = o.EnableWhen
	}
	if !IsNil(o.EnableBehavior) {
		toSerialize["enableBehavior"] = o.EnableBehavior
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Repeats) {
		toSerialize["repeats"] = o.Repeats
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.AnswerValueSet) {
		toSerialize["answerValueSet"] = o.AnswerValueSet
	}
	if !IsNil(o.AnswerOption) {
		toSerialize["answerOption"] = o.AnswerOption
	}
	if !IsNil(o.Initial) {
		toSerialize["initial"] = o.Initial
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	return toSerialize, nil
}

type NullableQuestionnaireItem struct {
	value *QuestionnaireItem
	isSet bool
}

func (v NullableQuestionnaireItem) Get() *QuestionnaireItem {
	return v.value
}

func (v *NullableQuestionnaireItem) Set(val *QuestionnaireItem) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireItem) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireItem(val *QuestionnaireItem) *NullableQuestionnaireItem {
	return &NullableQuestionnaireItem{value: val, isSet: true}
}

func (v NullableQuestionnaireItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


