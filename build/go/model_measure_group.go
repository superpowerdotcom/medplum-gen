/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MeasureGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasureGroup{}

// MeasureGroup The Measure resource provides the definition of a quality measure.
type MeasureGroup struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
	Code *CodeableConcept `json:"code,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A population criteria for the measure.
	Population []MeasurePopulation `json:"population,omitempty"`
	// The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
	Stratifier []MeasureStratifier `json:"stratifier,omitempty"`
}

// NewMeasureGroup instantiates a new MeasureGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasureGroup() *MeasureGroup {
	this := MeasureGroup{}
	return &this
}

// NewMeasureGroupWithDefaults instantiates a new MeasureGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasureGroupWithDefaults() *MeasureGroup {
	this := MeasureGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeasureGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeasureGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeasureGroup) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MeasureGroup) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MeasureGroup) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MeasureGroup) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MeasureGroup) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MeasureGroup) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MeasureGroup) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MeasureGroup) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MeasureGroup) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *MeasureGroup) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MeasureGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MeasureGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MeasureGroup) SetDescription(v string) {
	o.Description = &v
}

// GetPopulation returns the Population field value if set, zero value otherwise.
func (o *MeasureGroup) GetPopulation() []MeasurePopulation {
	if o == nil || IsNil(o.Population) {
		var ret []MeasurePopulation
		return ret
	}
	return o.Population
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetPopulationOk() ([]MeasurePopulation, bool) {
	if o == nil || IsNil(o.Population) {
		return nil, false
	}
	return o.Population, true
}

// HasPopulation returns a boolean if a field has been set.
func (o *MeasureGroup) HasPopulation() bool {
	if o != nil && !IsNil(o.Population) {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given []MeasurePopulation and assigns it to the Population field.
func (o *MeasureGroup) SetPopulation(v []MeasurePopulation) {
	o.Population = v
}

// GetStratifier returns the Stratifier field value if set, zero value otherwise.
func (o *MeasureGroup) GetStratifier() []MeasureStratifier {
	if o == nil || IsNil(o.Stratifier) {
		var ret []MeasureStratifier
		return ret
	}
	return o.Stratifier
}

// GetStratifierOk returns a tuple with the Stratifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasureGroup) GetStratifierOk() ([]MeasureStratifier, bool) {
	if o == nil || IsNil(o.Stratifier) {
		return nil, false
	}
	return o.Stratifier, true
}

// HasStratifier returns a boolean if a field has been set.
func (o *MeasureGroup) HasStratifier() bool {
	if o != nil && !IsNil(o.Stratifier) {
		return true
	}

	return false
}

// SetStratifier gets a reference to the given []MeasureStratifier and assigns it to the Stratifier field.
func (o *MeasureGroup) SetStratifier(v []MeasureStratifier) {
	o.Stratifier = v
}

func (o MeasureGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasureGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Population) {
		toSerialize["population"] = o.Population
	}
	if !IsNil(o.Stratifier) {
		toSerialize["stratifier"] = o.Stratifier
	}
	return toSerialize, nil
}

type NullableMeasureGroup struct {
	value *MeasureGroup
	isSet bool
}

func (v NullableMeasureGroup) Get() *MeasureGroup {
	return v.value
}

func (v *NullableMeasureGroup) Set(val *MeasureGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasureGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasureGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasureGroup(val *MeasureGroup) *NullableMeasureGroup {
	return &NullableMeasureGroup{value: val, isSet: true}
}

func (v NullableMeasureGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasureGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


