/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservationDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationDefinition{}

// ObservationDefinition Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
type ObservationDefinition struct {
	// This is a ObservationDefinition resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The name of the individual or organization that published the ObservationDefinition.
	Publisher *Reference `json:"publisher,omitempty"`
	// A code that classifies the general type of observation.
	Category []CodeableConcept `json:"category,omitempty"`
	// Describes what will be observed. Sometimes this is called the observation \"name\".
	Code CodeableConcept `json:"code"`
	// A unique identifier assigned to this ObservationDefinition artifact.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
	PermittedDataType []string `json:"permittedDataType,omitempty"`
	// Value of \"true\" or \"false\"
	MultipleResultsAllowed *bool `json:"multipleResultsAllowed,omitempty"`
	// The method or technique used to perform the observation.
	Method *CodeableConcept `json:"method,omitempty"`
	// A sequence of Unicode characters
	PreferredReportName *string `json:"preferredReportName,omitempty"`
	// Characteristics for quantitative results of this observation.
	QuantitativeDetails *ObservationDefinitionQuantitativeDetails `json:"quantitativeDetails,omitempty"`
	// Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
	QualifiedInterval []ObservationDefinitionQualifiedInterval `json:"qualifiedInterval,omitempty"`
	// The set of valid coded results for the observations  conforming to this ObservationDefinition.
	ValidCodedValueSet *Reference `json:"validCodedValueSet,omitempty"`
	// The set of normal coded results for the observations conforming to this ObservationDefinition.
	NormalCodedValueSet *Reference `json:"normalCodedValueSet,omitempty"`
	// The set of abnormal coded results for the observation conforming to this ObservationDefinition.
	AbnormalCodedValueSet *Reference `json:"abnormalCodedValueSet,omitempty"`
	// The set of critical coded results for the observation conforming to this ObservationDefinition.
	CriticalCodedValueSet *Reference `json:"criticalCodedValueSet,omitempty"`
}

type _ObservationDefinition ObservationDefinition

// NewObservationDefinition instantiates a new ObservationDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationDefinition(resourceType string, code CodeableConcept) *ObservationDefinition {
	this := ObservationDefinition{}
	this.ResourceType = resourceType
	this.Code = code
	return &this
}

// NewObservationDefinitionWithDefaults instantiates a new ObservationDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationDefinitionWithDefaults() *ObservationDefinition {
	this := ObservationDefinition{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ObservationDefinition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ObservationDefinition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationDefinition) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ObservationDefinition) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ObservationDefinition) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ObservationDefinition) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *ObservationDefinition) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *ObservationDefinition) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *ObservationDefinition) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ObservationDefinition) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ObservationDefinition) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ObservationDefinition) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ObservationDefinition) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ObservationDefinition) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *ObservationDefinition) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *ObservationDefinition) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *ObservationDefinition) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *ObservationDefinition) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ObservationDefinition) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ObservationDefinition) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ObservationDefinition) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ObservationDefinition) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ObservationDefinition) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ObservationDefinition) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ObservationDefinition) GetPublisher() Reference {
	if o == nil || IsNil(o.Publisher) {
		var ret Reference
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetPublisherOk() (*Reference, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ObservationDefinition) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given Reference and assigns it to the Publisher field.
func (o *ObservationDefinition) SetPublisher(v Reference) {
	o.Publisher = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ObservationDefinition) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ObservationDefinition) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *ObservationDefinition) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetCode returns the Code field value
func (o *ObservationDefinition) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ObservationDefinition) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ObservationDefinition) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ObservationDefinition) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *ObservationDefinition) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetPermittedDataType returns the PermittedDataType field value if set, zero value otherwise.
func (o *ObservationDefinition) GetPermittedDataType() []string {
	if o == nil || IsNil(o.PermittedDataType) {
		var ret []string
		return ret
	}
	return o.PermittedDataType
}

// GetPermittedDataTypeOk returns a tuple with the PermittedDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetPermittedDataTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.PermittedDataType) {
		return nil, false
	}
	return o.PermittedDataType, true
}

// HasPermittedDataType returns a boolean if a field has been set.
func (o *ObservationDefinition) HasPermittedDataType() bool {
	if o != nil && !IsNil(o.PermittedDataType) {
		return true
	}

	return false
}

// SetPermittedDataType gets a reference to the given []string and assigns it to the PermittedDataType field.
func (o *ObservationDefinition) SetPermittedDataType(v []string) {
	o.PermittedDataType = v
}

// GetMultipleResultsAllowed returns the MultipleResultsAllowed field value if set, zero value otherwise.
func (o *ObservationDefinition) GetMultipleResultsAllowed() bool {
	if o == nil || IsNil(o.MultipleResultsAllowed) {
		var ret bool
		return ret
	}
	return *o.MultipleResultsAllowed
}

// GetMultipleResultsAllowedOk returns a tuple with the MultipleResultsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetMultipleResultsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleResultsAllowed) {
		return nil, false
	}
	return o.MultipleResultsAllowed, true
}

// HasMultipleResultsAllowed returns a boolean if a field has been set.
func (o *ObservationDefinition) HasMultipleResultsAllowed() bool {
	if o != nil && !IsNil(o.MultipleResultsAllowed) {
		return true
	}

	return false
}

// SetMultipleResultsAllowed gets a reference to the given bool and assigns it to the MultipleResultsAllowed field.
func (o *ObservationDefinition) SetMultipleResultsAllowed(v bool) {
	o.MultipleResultsAllowed = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ObservationDefinition) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *ObservationDefinition) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *ObservationDefinition) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetPreferredReportName returns the PreferredReportName field value if set, zero value otherwise.
func (o *ObservationDefinition) GetPreferredReportName() string {
	if o == nil || IsNil(o.PreferredReportName) {
		var ret string
		return ret
	}
	return *o.PreferredReportName
}

// GetPreferredReportNameOk returns a tuple with the PreferredReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetPreferredReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredReportName) {
		return nil, false
	}
	return o.PreferredReportName, true
}

// HasPreferredReportName returns a boolean if a field has been set.
func (o *ObservationDefinition) HasPreferredReportName() bool {
	if o != nil && !IsNil(o.PreferredReportName) {
		return true
	}

	return false
}

// SetPreferredReportName gets a reference to the given string and assigns it to the PreferredReportName field.
func (o *ObservationDefinition) SetPreferredReportName(v string) {
	o.PreferredReportName = &v
}

// GetQuantitativeDetails returns the QuantitativeDetails field value if set, zero value otherwise.
func (o *ObservationDefinition) GetQuantitativeDetails() ObservationDefinitionQuantitativeDetails {
	if o == nil || IsNil(o.QuantitativeDetails) {
		var ret ObservationDefinitionQuantitativeDetails
		return ret
	}
	return *o.QuantitativeDetails
}

// GetQuantitativeDetailsOk returns a tuple with the QuantitativeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetQuantitativeDetailsOk() (*ObservationDefinitionQuantitativeDetails, bool) {
	if o == nil || IsNil(o.QuantitativeDetails) {
		return nil, false
	}
	return o.QuantitativeDetails, true
}

// HasQuantitativeDetails returns a boolean if a field has been set.
func (o *ObservationDefinition) HasQuantitativeDetails() bool {
	if o != nil && !IsNil(o.QuantitativeDetails) {
		return true
	}

	return false
}

// SetQuantitativeDetails gets a reference to the given ObservationDefinitionQuantitativeDetails and assigns it to the QuantitativeDetails field.
func (o *ObservationDefinition) SetQuantitativeDetails(v ObservationDefinitionQuantitativeDetails) {
	o.QuantitativeDetails = &v
}

// GetQualifiedInterval returns the QualifiedInterval field value if set, zero value otherwise.
func (o *ObservationDefinition) GetQualifiedInterval() []ObservationDefinitionQualifiedInterval {
	if o == nil || IsNil(o.QualifiedInterval) {
		var ret []ObservationDefinitionQualifiedInterval
		return ret
	}
	return o.QualifiedInterval
}

// GetQualifiedIntervalOk returns a tuple with the QualifiedInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetQualifiedIntervalOk() ([]ObservationDefinitionQualifiedInterval, bool) {
	if o == nil || IsNil(o.QualifiedInterval) {
		return nil, false
	}
	return o.QualifiedInterval, true
}

// HasQualifiedInterval returns a boolean if a field has been set.
func (o *ObservationDefinition) HasQualifiedInterval() bool {
	if o != nil && !IsNil(o.QualifiedInterval) {
		return true
	}

	return false
}

// SetQualifiedInterval gets a reference to the given []ObservationDefinitionQualifiedInterval and assigns it to the QualifiedInterval field.
func (o *ObservationDefinition) SetQualifiedInterval(v []ObservationDefinitionQualifiedInterval) {
	o.QualifiedInterval = v
}

// GetValidCodedValueSet returns the ValidCodedValueSet field value if set, zero value otherwise.
func (o *ObservationDefinition) GetValidCodedValueSet() Reference {
	if o == nil || IsNil(o.ValidCodedValueSet) {
		var ret Reference
		return ret
	}
	return *o.ValidCodedValueSet
}

// GetValidCodedValueSetOk returns a tuple with the ValidCodedValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetValidCodedValueSetOk() (*Reference, bool) {
	if o == nil || IsNil(o.ValidCodedValueSet) {
		return nil, false
	}
	return o.ValidCodedValueSet, true
}

// HasValidCodedValueSet returns a boolean if a field has been set.
func (o *ObservationDefinition) HasValidCodedValueSet() bool {
	if o != nil && !IsNil(o.ValidCodedValueSet) {
		return true
	}

	return false
}

// SetValidCodedValueSet gets a reference to the given Reference and assigns it to the ValidCodedValueSet field.
func (o *ObservationDefinition) SetValidCodedValueSet(v Reference) {
	o.ValidCodedValueSet = &v
}

// GetNormalCodedValueSet returns the NormalCodedValueSet field value if set, zero value otherwise.
func (o *ObservationDefinition) GetNormalCodedValueSet() Reference {
	if o == nil || IsNil(o.NormalCodedValueSet) {
		var ret Reference
		return ret
	}
	return *o.NormalCodedValueSet
}

// GetNormalCodedValueSetOk returns a tuple with the NormalCodedValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetNormalCodedValueSetOk() (*Reference, bool) {
	if o == nil || IsNil(o.NormalCodedValueSet) {
		return nil, false
	}
	return o.NormalCodedValueSet, true
}

// HasNormalCodedValueSet returns a boolean if a field has been set.
func (o *ObservationDefinition) HasNormalCodedValueSet() bool {
	if o != nil && !IsNil(o.NormalCodedValueSet) {
		return true
	}

	return false
}

// SetNormalCodedValueSet gets a reference to the given Reference and assigns it to the NormalCodedValueSet field.
func (o *ObservationDefinition) SetNormalCodedValueSet(v Reference) {
	o.NormalCodedValueSet = &v
}

// GetAbnormalCodedValueSet returns the AbnormalCodedValueSet field value if set, zero value otherwise.
func (o *ObservationDefinition) GetAbnormalCodedValueSet() Reference {
	if o == nil || IsNil(o.AbnormalCodedValueSet) {
		var ret Reference
		return ret
	}
	return *o.AbnormalCodedValueSet
}

// GetAbnormalCodedValueSetOk returns a tuple with the AbnormalCodedValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetAbnormalCodedValueSetOk() (*Reference, bool) {
	if o == nil || IsNil(o.AbnormalCodedValueSet) {
		return nil, false
	}
	return o.AbnormalCodedValueSet, true
}

// HasAbnormalCodedValueSet returns a boolean if a field has been set.
func (o *ObservationDefinition) HasAbnormalCodedValueSet() bool {
	if o != nil && !IsNil(o.AbnormalCodedValueSet) {
		return true
	}

	return false
}

// SetAbnormalCodedValueSet gets a reference to the given Reference and assigns it to the AbnormalCodedValueSet field.
func (o *ObservationDefinition) SetAbnormalCodedValueSet(v Reference) {
	o.AbnormalCodedValueSet = &v
}

// GetCriticalCodedValueSet returns the CriticalCodedValueSet field value if set, zero value otherwise.
func (o *ObservationDefinition) GetCriticalCodedValueSet() Reference {
	if o == nil || IsNil(o.CriticalCodedValueSet) {
		var ret Reference
		return ret
	}
	return *o.CriticalCodedValueSet
}

// GetCriticalCodedValueSetOk returns a tuple with the CriticalCodedValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationDefinition) GetCriticalCodedValueSetOk() (*Reference, bool) {
	if o == nil || IsNil(o.CriticalCodedValueSet) {
		return nil, false
	}
	return o.CriticalCodedValueSet, true
}

// HasCriticalCodedValueSet returns a boolean if a field has been set.
func (o *ObservationDefinition) HasCriticalCodedValueSet() bool {
	if o != nil && !IsNil(o.CriticalCodedValueSet) {
		return true
	}

	return false
}

// SetCriticalCodedValueSet gets a reference to the given Reference and assigns it to the CriticalCodedValueSet field.
func (o *ObservationDefinition) SetCriticalCodedValueSet(v Reference) {
	o.CriticalCodedValueSet = &v
}

func (o ObservationDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.PermittedDataType) {
		toSerialize["permittedDataType"] = o.PermittedDataType
	}
	if !IsNil(o.MultipleResultsAllowed) {
		toSerialize["multipleResultsAllowed"] = o.MultipleResultsAllowed
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.PreferredReportName) {
		toSerialize["preferredReportName"] = o.PreferredReportName
	}
	if !IsNil(o.QuantitativeDetails) {
		toSerialize["quantitativeDetails"] = o.QuantitativeDetails
	}
	if !IsNil(o.QualifiedInterval) {
		toSerialize["qualifiedInterval"] = o.QualifiedInterval
	}
	if !IsNil(o.ValidCodedValueSet) {
		toSerialize["validCodedValueSet"] = o.ValidCodedValueSet
	}
	if !IsNil(o.NormalCodedValueSet) {
		toSerialize["normalCodedValueSet"] = o.NormalCodedValueSet
	}
	if !IsNil(o.AbnormalCodedValueSet) {
		toSerialize["abnormalCodedValueSet"] = o.AbnormalCodedValueSet
	}
	if !IsNil(o.CriticalCodedValueSet) {
		toSerialize["criticalCodedValueSet"] = o.CriticalCodedValueSet
	}
	return toSerialize, nil
}

func (o *ObservationDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservationDefinition := _ObservationDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservationDefinition)

	if err != nil {
		return err
	}

	*o = ObservationDefinition(varObservationDefinition)

	return err
}

type NullableObservationDefinition struct {
	value *ObservationDefinition
	isSet bool
}

func (v NullableObservationDefinition) Get() *ObservationDefinition {
	return v.value
}

func (v *NullableObservationDefinition) Set(val *ObservationDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationDefinition(val *ObservationDefinition) *NullableObservationDefinition {
	return &NullableObservationDefinition{value: val, isSet: true}
}

func (v NullableObservationDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


