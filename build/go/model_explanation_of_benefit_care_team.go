/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExplanationOfBenefitCareTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplanationOfBenefitCareTeam{}

// ExplanationOfBenefitCareTeam This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
type ExplanationOfBenefitCareTeam struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Sequence *float32 `json:"sequence,omitempty"`
	// Member of the team who provided the product or service.
	Provider Reference `json:"provider"`
	// Value of \"true\" or \"false\"
	Responsible *bool `json:"responsible,omitempty"`
	// The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
	Role *CodeableConcept `json:"role,omitempty"`
	// The qualification of the practitioner which is applicable for this service.
	Qualification *CodeableConcept `json:"qualification,omitempty"`
}

type _ExplanationOfBenefitCareTeam ExplanationOfBenefitCareTeam

// NewExplanationOfBenefitCareTeam instantiates a new ExplanationOfBenefitCareTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanationOfBenefitCareTeam(provider Reference) *ExplanationOfBenefitCareTeam {
	this := ExplanationOfBenefitCareTeam{}
	this.Provider = provider
	return &this
}

// NewExplanationOfBenefitCareTeamWithDefaults instantiates a new ExplanationOfBenefitCareTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationOfBenefitCareTeamWithDefaults() *ExplanationOfBenefitCareTeam {
	this := ExplanationOfBenefitCareTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExplanationOfBenefitCareTeam) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ExplanationOfBenefitCareTeam) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ExplanationOfBenefitCareTeam) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ExplanationOfBenefitCareTeam) SetSequence(v float32) {
	o.Sequence = &v
}

// GetProvider returns the Provider field value
func (o *ExplanationOfBenefitCareTeam) GetProvider() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetProviderOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ExplanationOfBenefitCareTeam) SetProvider(v Reference) {
	o.Provider = v
}

// GetResponsible returns the Responsible field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetResponsible() bool {
	if o == nil || IsNil(o.Responsible) {
		var ret bool
		return ret
	}
	return *o.Responsible
}

// GetResponsibleOk returns a tuple with the Responsible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetResponsibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Responsible) {
		return nil, false
	}
	return o.Responsible, true
}

// HasResponsible returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasResponsible() bool {
	if o != nil && !IsNil(o.Responsible) {
		return true
	}

	return false
}

// SetResponsible gets a reference to the given bool and assigns it to the Responsible field.
func (o *ExplanationOfBenefitCareTeam) SetResponsible(v bool) {
	o.Responsible = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetRole() CodeableConcept {
	if o == nil || IsNil(o.Role) {
		var ret CodeableConcept
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetRoleOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given CodeableConcept and assigns it to the Role field.
func (o *ExplanationOfBenefitCareTeam) SetRole(v CodeableConcept) {
	o.Role = &v
}

// GetQualification returns the Qualification field value if set, zero value otherwise.
func (o *ExplanationOfBenefitCareTeam) GetQualification() CodeableConcept {
	if o == nil || IsNil(o.Qualification) {
		var ret CodeableConcept
		return ret
	}
	return *o.Qualification
}

// GetQualificationOk returns a tuple with the Qualification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplanationOfBenefitCareTeam) GetQualificationOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Qualification) {
		return nil, false
	}
	return o.Qualification, true
}

// HasQualification returns a boolean if a field has been set.
func (o *ExplanationOfBenefitCareTeam) HasQualification() bool {
	if o != nil && !IsNil(o.Qualification) {
		return true
	}

	return false
}

// SetQualification gets a reference to the given CodeableConcept and assigns it to the Qualification field.
func (o *ExplanationOfBenefitCareTeam) SetQualification(v CodeableConcept) {
	o.Qualification = &v
}

func (o ExplanationOfBenefitCareTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplanationOfBenefitCareTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	toSerialize["provider"] = o.Provider
	if !IsNil(o.Responsible) {
		toSerialize["responsible"] = o.Responsible
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Qualification) {
		toSerialize["qualification"] = o.Qualification
	}
	return toSerialize, nil
}

func (o *ExplanationOfBenefitCareTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExplanationOfBenefitCareTeam := _ExplanationOfBenefitCareTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExplanationOfBenefitCareTeam)

	if err != nil {
		return err
	}

	*o = ExplanationOfBenefitCareTeam(varExplanationOfBenefitCareTeam)

	return err
}

type NullableExplanationOfBenefitCareTeam struct {
	value *ExplanationOfBenefitCareTeam
	isSet bool
}

func (v NullableExplanationOfBenefitCareTeam) Get() *ExplanationOfBenefitCareTeam {
	return v.value
}

func (v *NullableExplanationOfBenefitCareTeam) Set(val *ExplanationOfBenefitCareTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanationOfBenefitCareTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanationOfBenefitCareTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanationOfBenefitCareTeam(val *ExplanationOfBenefitCareTeam) *NullableExplanationOfBenefitCareTeam {
	return &NullableExplanationOfBenefitCareTeam{value: val, isSet: true}
}

func (v NullableExplanationOfBenefitCareTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanationOfBenefitCareTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


