/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentReference{}

// DocumentReference A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
type DocumentReference struct {
	// This is a DocumentReference resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
	MasterIdentifier *Identifier `json:"masterIdentifier,omitempty"`
	// Other identifiers associated with the document, including version independent identifiers.
	Identifier []Identifier `json:"identifier,omitempty"`
	// The status of this document reference.
	Status *string `json:"status,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	DocStatus *string `json:"docStatus,omitempty"`
	// Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
	Type *CodeableConcept `json:"type,omitempty"`
	// A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
	Category []CodeableConcept `json:"category,omitempty"`
	// Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
	Subject *Reference `json:"subject,omitempty"`
	// An instant in time - known at least to the second
	Date *string `json:"date,omitempty"`
	// Identifies who is responsible for adding the information to the document.
	Author []Reference `json:"author,omitempty"`
	// Which person or organization authenticates that this document is valid.
	Authenticator *Reference `json:"authenticator,omitempty"`
	// Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
	Custodian *Reference `json:"custodian,omitempty"`
	// Relationships that this document has with other document references that already exist.
	RelatesTo []DocumentReferenceRelatesTo `json:"relatesTo,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the \"reference\" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
	SecurityLabel []CodeableConcept `json:"securityLabel,omitempty"`
	// The document and format referenced. There may be multiple content element repetitions, each with a different format.
	Content []DocumentReferenceContent `json:"content"`
	// The clinical context in which the document was prepared.
	Context *DocumentReferenceContext `json:"context,omitempty"`
}

type _DocumentReference DocumentReference

// NewDocumentReference instantiates a new DocumentReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentReference(resourceType string, content []DocumentReferenceContent) *DocumentReference {
	this := DocumentReference{}
	this.ResourceType = resourceType
	this.Content = content
	return &this
}

// NewDocumentReferenceWithDefaults instantiates a new DocumentReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentReferenceWithDefaults() *DocumentReference {
	this := DocumentReference{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *DocumentReference) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DocumentReference) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocumentReference) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocumentReference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DocumentReference) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DocumentReference) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DocumentReference) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DocumentReference) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *DocumentReference) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *DocumentReference) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *DocumentReference) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DocumentReference) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DocumentReference) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DocumentReference) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DocumentReference) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DocumentReference) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *DocumentReference) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *DocumentReference) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *DocumentReference) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *DocumentReference) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DocumentReference) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DocumentReference) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DocumentReference) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DocumentReference) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DocumentReference) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DocumentReference) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetMasterIdentifier returns the MasterIdentifier field value if set, zero value otherwise.
func (o *DocumentReference) GetMasterIdentifier() Identifier {
	if o == nil || IsNil(o.MasterIdentifier) {
		var ret Identifier
		return ret
	}
	return *o.MasterIdentifier
}

// GetMasterIdentifierOk returns a tuple with the MasterIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetMasterIdentifierOk() (*Identifier, bool) {
	if o == nil || IsNil(o.MasterIdentifier) {
		return nil, false
	}
	return o.MasterIdentifier, true
}

// HasMasterIdentifier returns a boolean if a field has been set.
func (o *DocumentReference) HasMasterIdentifier() bool {
	if o != nil && !IsNil(o.MasterIdentifier) {
		return true
	}

	return false
}

// SetMasterIdentifier gets a reference to the given Identifier and assigns it to the MasterIdentifier field.
func (o *DocumentReference) SetMasterIdentifier(v Identifier) {
	o.MasterIdentifier = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DocumentReference) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DocumentReference) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *DocumentReference) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DocumentReference) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DocumentReference) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DocumentReference) SetStatus(v string) {
	o.Status = &v
}

// GetDocStatus returns the DocStatus field value if set, zero value otherwise.
func (o *DocumentReference) GetDocStatus() string {
	if o == nil || IsNil(o.DocStatus) {
		var ret string
		return ret
	}
	return *o.DocStatus
}

// GetDocStatusOk returns a tuple with the DocStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetDocStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DocStatus) {
		return nil, false
	}
	return o.DocStatus, true
}

// HasDocStatus returns a boolean if a field has been set.
func (o *DocumentReference) HasDocStatus() bool {
	if o != nil && !IsNil(o.DocStatus) {
		return true
	}

	return false
}

// SetDocStatus gets a reference to the given string and assigns it to the DocStatus field.
func (o *DocumentReference) SetDocStatus(v string) {
	o.DocStatus = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentReference) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentReference) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *DocumentReference) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DocumentReference) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DocumentReference) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *DocumentReference) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *DocumentReference) GetSubject() Reference {
	if o == nil || IsNil(o.Subject) {
		var ret Reference
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetSubjectOk() (*Reference, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *DocumentReference) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given Reference and assigns it to the Subject field.
func (o *DocumentReference) SetSubject(v Reference) {
	o.Subject = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DocumentReference) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DocumentReference) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *DocumentReference) SetDate(v string) {
	o.Date = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DocumentReference) GetAuthor() []Reference {
	if o == nil || IsNil(o.Author) {
		var ret []Reference
		return ret
	}
	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetAuthorOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DocumentReference) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given []Reference and assigns it to the Author field.
func (o *DocumentReference) SetAuthor(v []Reference) {
	o.Author = v
}

// GetAuthenticator returns the Authenticator field value if set, zero value otherwise.
func (o *DocumentReference) GetAuthenticator() Reference {
	if o == nil || IsNil(o.Authenticator) {
		var ret Reference
		return ret
	}
	return *o.Authenticator
}

// GetAuthenticatorOk returns a tuple with the Authenticator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetAuthenticatorOk() (*Reference, bool) {
	if o == nil || IsNil(o.Authenticator) {
		return nil, false
	}
	return o.Authenticator, true
}

// HasAuthenticator returns a boolean if a field has been set.
func (o *DocumentReference) HasAuthenticator() bool {
	if o != nil && !IsNil(o.Authenticator) {
		return true
	}

	return false
}

// SetAuthenticator gets a reference to the given Reference and assigns it to the Authenticator field.
func (o *DocumentReference) SetAuthenticator(v Reference) {
	o.Authenticator = &v
}

// GetCustodian returns the Custodian field value if set, zero value otherwise.
func (o *DocumentReference) GetCustodian() Reference {
	if o == nil || IsNil(o.Custodian) {
		var ret Reference
		return ret
	}
	return *o.Custodian
}

// GetCustodianOk returns a tuple with the Custodian field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetCustodianOk() (*Reference, bool) {
	if o == nil || IsNil(o.Custodian) {
		return nil, false
	}
	return o.Custodian, true
}

// HasCustodian returns a boolean if a field has been set.
func (o *DocumentReference) HasCustodian() bool {
	if o != nil && !IsNil(o.Custodian) {
		return true
	}

	return false
}

// SetCustodian gets a reference to the given Reference and assigns it to the Custodian field.
func (o *DocumentReference) SetCustodian(v Reference) {
	o.Custodian = &v
}

// GetRelatesTo returns the RelatesTo field value if set, zero value otherwise.
func (o *DocumentReference) GetRelatesTo() []DocumentReferenceRelatesTo {
	if o == nil || IsNil(o.RelatesTo) {
		var ret []DocumentReferenceRelatesTo
		return ret
	}
	return o.RelatesTo
}

// GetRelatesToOk returns a tuple with the RelatesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetRelatesToOk() ([]DocumentReferenceRelatesTo, bool) {
	if o == nil || IsNil(o.RelatesTo) {
		return nil, false
	}
	return o.RelatesTo, true
}

// HasRelatesTo returns a boolean if a field has been set.
func (o *DocumentReference) HasRelatesTo() bool {
	if o != nil && !IsNil(o.RelatesTo) {
		return true
	}

	return false
}

// SetRelatesTo gets a reference to the given []DocumentReferenceRelatesTo and assigns it to the RelatesTo field.
func (o *DocumentReference) SetRelatesTo(v []DocumentReferenceRelatesTo) {
	o.RelatesTo = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DocumentReference) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentReference) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DocumentReference) SetDescription(v string) {
	o.Description = &v
}

// GetSecurityLabel returns the SecurityLabel field value if set, zero value otherwise.
func (o *DocumentReference) GetSecurityLabel() []CodeableConcept {
	if o == nil || IsNil(o.SecurityLabel) {
		var ret []CodeableConcept
		return ret
	}
	return o.SecurityLabel
}

// GetSecurityLabelOk returns a tuple with the SecurityLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetSecurityLabelOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.SecurityLabel) {
		return nil, false
	}
	return o.SecurityLabel, true
}

// HasSecurityLabel returns a boolean if a field has been set.
func (o *DocumentReference) HasSecurityLabel() bool {
	if o != nil && !IsNil(o.SecurityLabel) {
		return true
	}

	return false
}

// SetSecurityLabel gets a reference to the given []CodeableConcept and assigns it to the SecurityLabel field.
func (o *DocumentReference) SetSecurityLabel(v []CodeableConcept) {
	o.SecurityLabel = v
}

// GetContent returns the Content field value
func (o *DocumentReference) GetContent() []DocumentReferenceContent {
	if o == nil {
		var ret []DocumentReferenceContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetContentOk() ([]DocumentReferenceContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *DocumentReference) SetContent(v []DocumentReferenceContent) {
	o.Content = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *DocumentReference) GetContext() DocumentReferenceContext {
	if o == nil || IsNil(o.Context) {
		var ret DocumentReferenceContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReference) GetContextOk() (*DocumentReferenceContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DocumentReference) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given DocumentReferenceContext and assigns it to the Context field.
func (o *DocumentReference) SetContext(v DocumentReferenceContext) {
	o.Context = &v
}

func (o DocumentReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.MasterIdentifier) {
		toSerialize["masterIdentifier"] = o.MasterIdentifier
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DocStatus) {
		toSerialize["docStatus"] = o.DocStatus
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Authenticator) {
		toSerialize["authenticator"] = o.Authenticator
	}
	if !IsNil(o.Custodian) {
		toSerialize["custodian"] = o.Custodian
	}
	if !IsNil(o.RelatesTo) {
		toSerialize["relatesTo"] = o.RelatesTo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SecurityLabel) {
		toSerialize["securityLabel"] = o.SecurityLabel
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

func (o *DocumentReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentReference := _DocumentReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentReference)

	if err != nil {
		return err
	}

	*o = DocumentReference(varDocumentReference)

	return err
}

type NullableDocumentReference struct {
	value *DocumentReference
	isSet bool
}

func (v NullableDocumentReference) Get() *DocumentReference {
	return v.value
}

func (v *NullableDocumentReference) Set(val *DocumentReference) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentReference) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentReference(val *DocumentReference) *NullableDocumentReference {
	return &NullableDocumentReference{value: val, isSet: true}
}

func (v NullableDocumentReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


