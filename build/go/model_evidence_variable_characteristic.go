/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the EvidenceVariableCharacteristic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvidenceVariableCharacteristic{}

// EvidenceVariableCharacteristic The EvidenceVariable resource describes a \"PICO\" element that knowledge (evidence, assertion, recommendation) is about.
type EvidenceVariableCharacteristic struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionReference *Reference `json:"definitionReference,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCanonical *string `json:"definitionCanonical,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionCodeableConcept *CodeableConcept `json:"definitionCodeableConcept,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionExpression *Expression `json:"definitionExpression,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionDataRequirement *DataRequirement `json:"definitionDataRequirement,omitempty"`
	// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
	DefinitionTriggerDefinition *TriggerDefinition `json:"definitionTriggerDefinition,omitempty"`
	// Use UsageContext to define the members of the population, such as Age Ranges, Genders, Settings.
	UsageContext []UsageContext `json:"usageContext,omitempty"`
	// Value of \"true\" or \"false\"
	Exclude *bool `json:"exclude,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDateTime *string `json:"participantEffectiveDateTime,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectivePeriod *Period `json:"participantEffectivePeriod,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveDuration *Duration `json:"participantEffectiveDuration,omitempty"`
	// Indicates what effective period the study covers.
	ParticipantEffectiveTiming *Timing `json:"participantEffectiveTiming,omitempty"`
	// Indicates duration from the participant's study entry.
	TimeFromStart *Duration `json:"timeFromStart,omitempty"`
	// Indicates how elements are aggregated within the study effective period.
	GroupMeasure *string `json:"groupMeasure,omitempty"`
}

// NewEvidenceVariableCharacteristic instantiates a new EvidenceVariableCharacteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidenceVariableCharacteristic() *EvidenceVariableCharacteristic {
	this := EvidenceVariableCharacteristic{}
	return &this
}

// NewEvidenceVariableCharacteristicWithDefaults instantiates a new EvidenceVariableCharacteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceVariableCharacteristicWithDefaults() *EvidenceVariableCharacteristic {
	this := EvidenceVariableCharacteristic{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EvidenceVariableCharacteristic) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *EvidenceVariableCharacteristic) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *EvidenceVariableCharacteristic) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EvidenceVariableCharacteristic) SetDescription(v string) {
	o.Description = &v
}

// GetDefinitionReference returns the DefinitionReference field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionReference() Reference {
	if o == nil || IsNil(o.DefinitionReference) {
		var ret Reference
		return ret
	}
	return *o.DefinitionReference
}

// GetDefinitionReferenceOk returns a tuple with the DefinitionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.DefinitionReference) {
		return nil, false
	}
	return o.DefinitionReference, true
}

// HasDefinitionReference returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionReference() bool {
	if o != nil && !IsNil(o.DefinitionReference) {
		return true
	}

	return false
}

// SetDefinitionReference gets a reference to the given Reference and assigns it to the DefinitionReference field.
func (o *EvidenceVariableCharacteristic) SetDefinitionReference(v Reference) {
	o.DefinitionReference = &v
}

// GetDefinitionCanonical returns the DefinitionCanonical field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionCanonical() string {
	if o == nil || IsNil(o.DefinitionCanonical) {
		var ret string
		return ret
	}
	return *o.DefinitionCanonical
}

// GetDefinitionCanonicalOk returns a tuple with the DefinitionCanonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionCanonical) {
		return nil, false
	}
	return o.DefinitionCanonical, true
}

// HasDefinitionCanonical returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionCanonical() bool {
	if o != nil && !IsNil(o.DefinitionCanonical) {
		return true
	}

	return false
}

// SetDefinitionCanonical gets a reference to the given string and assigns it to the DefinitionCanonical field.
func (o *EvidenceVariableCharacteristic) SetDefinitionCanonical(v string) {
	o.DefinitionCanonical = &v
}

// GetDefinitionCodeableConcept returns the DefinitionCodeableConcept field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DefinitionCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DefinitionCodeableConcept
}

// GetDefinitionCodeableConceptOk returns a tuple with the DefinitionCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DefinitionCodeableConcept) {
		return nil, false
	}
	return o.DefinitionCodeableConcept, true
}

// HasDefinitionCodeableConcept returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionCodeableConcept() bool {
	if o != nil && !IsNil(o.DefinitionCodeableConcept) {
		return true
	}

	return false
}

// SetDefinitionCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DefinitionCodeableConcept field.
func (o *EvidenceVariableCharacteristic) SetDefinitionCodeableConcept(v CodeableConcept) {
	o.DefinitionCodeableConcept = &v
}

// GetDefinitionExpression returns the DefinitionExpression field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionExpression() Expression {
	if o == nil || IsNil(o.DefinitionExpression) {
		var ret Expression
		return ret
	}
	return *o.DefinitionExpression
}

// GetDefinitionExpressionOk returns a tuple with the DefinitionExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionExpressionOk() (*Expression, bool) {
	if o == nil || IsNil(o.DefinitionExpression) {
		return nil, false
	}
	return o.DefinitionExpression, true
}

// HasDefinitionExpression returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionExpression() bool {
	if o != nil && !IsNil(o.DefinitionExpression) {
		return true
	}

	return false
}

// SetDefinitionExpression gets a reference to the given Expression and assigns it to the DefinitionExpression field.
func (o *EvidenceVariableCharacteristic) SetDefinitionExpression(v Expression) {
	o.DefinitionExpression = &v
}

// GetDefinitionDataRequirement returns the DefinitionDataRequirement field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionDataRequirement() DataRequirement {
	if o == nil || IsNil(o.DefinitionDataRequirement) {
		var ret DataRequirement
		return ret
	}
	return *o.DefinitionDataRequirement
}

// GetDefinitionDataRequirementOk returns a tuple with the DefinitionDataRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionDataRequirementOk() (*DataRequirement, bool) {
	if o == nil || IsNil(o.DefinitionDataRequirement) {
		return nil, false
	}
	return o.DefinitionDataRequirement, true
}

// HasDefinitionDataRequirement returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionDataRequirement() bool {
	if o != nil && !IsNil(o.DefinitionDataRequirement) {
		return true
	}

	return false
}

// SetDefinitionDataRequirement gets a reference to the given DataRequirement and assigns it to the DefinitionDataRequirement field.
func (o *EvidenceVariableCharacteristic) SetDefinitionDataRequirement(v DataRequirement) {
	o.DefinitionDataRequirement = &v
}

// GetDefinitionTriggerDefinition returns the DefinitionTriggerDefinition field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetDefinitionTriggerDefinition() TriggerDefinition {
	if o == nil || IsNil(o.DefinitionTriggerDefinition) {
		var ret TriggerDefinition
		return ret
	}
	return *o.DefinitionTriggerDefinition
}

// GetDefinitionTriggerDefinitionOk returns a tuple with the DefinitionTriggerDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetDefinitionTriggerDefinitionOk() (*TriggerDefinition, bool) {
	if o == nil || IsNil(o.DefinitionTriggerDefinition) {
		return nil, false
	}
	return o.DefinitionTriggerDefinition, true
}

// HasDefinitionTriggerDefinition returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasDefinitionTriggerDefinition() bool {
	if o != nil && !IsNil(o.DefinitionTriggerDefinition) {
		return true
	}

	return false
}

// SetDefinitionTriggerDefinition gets a reference to the given TriggerDefinition and assigns it to the DefinitionTriggerDefinition field.
func (o *EvidenceVariableCharacteristic) SetDefinitionTriggerDefinition(v TriggerDefinition) {
	o.DefinitionTriggerDefinition = &v
}

// GetUsageContext returns the UsageContext field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetUsageContext() []UsageContext {
	if o == nil || IsNil(o.UsageContext) {
		var ret []UsageContext
		return ret
	}
	return o.UsageContext
}

// GetUsageContextOk returns a tuple with the UsageContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetUsageContextOk() ([]UsageContext, bool) {
	if o == nil || IsNil(o.UsageContext) {
		return nil, false
	}
	return o.UsageContext, true
}

// HasUsageContext returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasUsageContext() bool {
	if o != nil && !IsNil(o.UsageContext) {
		return true
	}

	return false
}

// SetUsageContext gets a reference to the given []UsageContext and assigns it to the UsageContext field.
func (o *EvidenceVariableCharacteristic) SetUsageContext(v []UsageContext) {
	o.UsageContext = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *EvidenceVariableCharacteristic) SetExclude(v bool) {
	o.Exclude = &v
}

// GetParticipantEffectiveDateTime returns the ParticipantEffectiveDateTime field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveDateTime() string {
	if o == nil || IsNil(o.ParticipantEffectiveDateTime) {
		var ret string
		return ret
	}
	return *o.ParticipantEffectiveDateTime
}

// GetParticipantEffectiveDateTimeOk returns a tuple with the ParticipantEffectiveDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveDateTime) {
		return nil, false
	}
	return o.ParticipantEffectiveDateTime, true
}

// HasParticipantEffectiveDateTime returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasParticipantEffectiveDateTime() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveDateTime) {
		return true
	}

	return false
}

// SetParticipantEffectiveDateTime gets a reference to the given string and assigns it to the ParticipantEffectiveDateTime field.
func (o *EvidenceVariableCharacteristic) SetParticipantEffectiveDateTime(v string) {
	o.ParticipantEffectiveDateTime = &v
}

// GetParticipantEffectivePeriod returns the ParticipantEffectivePeriod field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectivePeriod() Period {
	if o == nil || IsNil(o.ParticipantEffectivePeriod) {
		var ret Period
		return ret
	}
	return *o.ParticipantEffectivePeriod
}

// GetParticipantEffectivePeriodOk returns a tuple with the ParticipantEffectivePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectivePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ParticipantEffectivePeriod) {
		return nil, false
	}
	return o.ParticipantEffectivePeriod, true
}

// HasParticipantEffectivePeriod returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasParticipantEffectivePeriod() bool {
	if o != nil && !IsNil(o.ParticipantEffectivePeriod) {
		return true
	}

	return false
}

// SetParticipantEffectivePeriod gets a reference to the given Period and assigns it to the ParticipantEffectivePeriod field.
func (o *EvidenceVariableCharacteristic) SetParticipantEffectivePeriod(v Period) {
	o.ParticipantEffectivePeriod = &v
}

// GetParticipantEffectiveDuration returns the ParticipantEffectiveDuration field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveDuration() Duration {
	if o == nil || IsNil(o.ParticipantEffectiveDuration) {
		var ret Duration
		return ret
	}
	return *o.ParticipantEffectiveDuration
}

// GetParticipantEffectiveDurationOk returns a tuple with the ParticipantEffectiveDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveDuration) {
		return nil, false
	}
	return o.ParticipantEffectiveDuration, true
}

// HasParticipantEffectiveDuration returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasParticipantEffectiveDuration() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveDuration) {
		return true
	}

	return false
}

// SetParticipantEffectiveDuration gets a reference to the given Duration and assigns it to the ParticipantEffectiveDuration field.
func (o *EvidenceVariableCharacteristic) SetParticipantEffectiveDuration(v Duration) {
	o.ParticipantEffectiveDuration = &v
}

// GetParticipantEffectiveTiming returns the ParticipantEffectiveTiming field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveTiming() Timing {
	if o == nil || IsNil(o.ParticipantEffectiveTiming) {
		var ret Timing
		return ret
	}
	return *o.ParticipantEffectiveTiming
}

// GetParticipantEffectiveTimingOk returns a tuple with the ParticipantEffectiveTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetParticipantEffectiveTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.ParticipantEffectiveTiming) {
		return nil, false
	}
	return o.ParticipantEffectiveTiming, true
}

// HasParticipantEffectiveTiming returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasParticipantEffectiveTiming() bool {
	if o != nil && !IsNil(o.ParticipantEffectiveTiming) {
		return true
	}

	return false
}

// SetParticipantEffectiveTiming gets a reference to the given Timing and assigns it to the ParticipantEffectiveTiming field.
func (o *EvidenceVariableCharacteristic) SetParticipantEffectiveTiming(v Timing) {
	o.ParticipantEffectiveTiming = &v
}

// GetTimeFromStart returns the TimeFromStart field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetTimeFromStart() Duration {
	if o == nil || IsNil(o.TimeFromStart) {
		var ret Duration
		return ret
	}
	return *o.TimeFromStart
}

// GetTimeFromStartOk returns a tuple with the TimeFromStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetTimeFromStartOk() (*Duration, bool) {
	if o == nil || IsNil(o.TimeFromStart) {
		return nil, false
	}
	return o.TimeFromStart, true
}

// HasTimeFromStart returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasTimeFromStart() bool {
	if o != nil && !IsNil(o.TimeFromStart) {
		return true
	}

	return false
}

// SetTimeFromStart gets a reference to the given Duration and assigns it to the TimeFromStart field.
func (o *EvidenceVariableCharacteristic) SetTimeFromStart(v Duration) {
	o.TimeFromStart = &v
}

// GetGroupMeasure returns the GroupMeasure field value if set, zero value otherwise.
func (o *EvidenceVariableCharacteristic) GetGroupMeasure() string {
	if o == nil || IsNil(o.GroupMeasure) {
		var ret string
		return ret
	}
	return *o.GroupMeasure
}

// GetGroupMeasureOk returns a tuple with the GroupMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceVariableCharacteristic) GetGroupMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.GroupMeasure) {
		return nil, false
	}
	return o.GroupMeasure, true
}

// HasGroupMeasure returns a boolean if a field has been set.
func (o *EvidenceVariableCharacteristic) HasGroupMeasure() bool {
	if o != nil && !IsNil(o.GroupMeasure) {
		return true
	}

	return false
}

// SetGroupMeasure gets a reference to the given string and assigns it to the GroupMeasure field.
func (o *EvidenceVariableCharacteristic) SetGroupMeasure(v string) {
	o.GroupMeasure = &v
}

func (o EvidenceVariableCharacteristic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvidenceVariableCharacteristic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DefinitionReference) {
		toSerialize["definitionReference"] = o.DefinitionReference
	}
	if !IsNil(o.DefinitionCanonical) {
		toSerialize["definitionCanonical"] = o.DefinitionCanonical
	}
	if !IsNil(o.DefinitionCodeableConcept) {
		toSerialize["definitionCodeableConcept"] = o.DefinitionCodeableConcept
	}
	if !IsNil(o.DefinitionExpression) {
		toSerialize["definitionExpression"] = o.DefinitionExpression
	}
	if !IsNil(o.DefinitionDataRequirement) {
		toSerialize["definitionDataRequirement"] = o.DefinitionDataRequirement
	}
	if !IsNil(o.DefinitionTriggerDefinition) {
		toSerialize["definitionTriggerDefinition"] = o.DefinitionTriggerDefinition
	}
	if !IsNil(o.UsageContext) {
		toSerialize["usageContext"] = o.UsageContext
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.ParticipantEffectiveDateTime) {
		toSerialize["participantEffectiveDateTime"] = o.ParticipantEffectiveDateTime
	}
	if !IsNil(o.ParticipantEffectivePeriod) {
		toSerialize["participantEffectivePeriod"] = o.ParticipantEffectivePeriod
	}
	if !IsNil(o.ParticipantEffectiveDuration) {
		toSerialize["participantEffectiveDuration"] = o.ParticipantEffectiveDuration
	}
	if !IsNil(o.ParticipantEffectiveTiming) {
		toSerialize["participantEffectiveTiming"] = o.ParticipantEffectiveTiming
	}
	if !IsNil(o.TimeFromStart) {
		toSerialize["timeFromStart"] = o.TimeFromStart
	}
	if !IsNil(o.GroupMeasure) {
		toSerialize["groupMeasure"] = o.GroupMeasure
	}
	return toSerialize, nil
}

type NullableEvidenceVariableCharacteristic struct {
	value *EvidenceVariableCharacteristic
	isSet bool
}

func (v NullableEvidenceVariableCharacteristic) Get() *EvidenceVariableCharacteristic {
	return v.value
}

func (v *NullableEvidenceVariableCharacteristic) Set(val *EvidenceVariableCharacteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidenceVariableCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidenceVariableCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidenceVariableCharacteristic(val *EvidenceVariableCharacteristic) *NullableEvidenceVariableCharacteristic {
	return &NullableEvidenceVariableCharacteristic{value: val, isSet: true}
}

func (v NullableEvidenceVariableCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidenceVariableCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


