/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CoverageEligibilityRequestDiagnosis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageEligibilityRequestDiagnosis{}

// CoverageEligibilityRequestDiagnosis The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
type CoverageEligibilityRequestDiagnosis struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosisCodeableConcept,omitempty"`
	// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
	DiagnosisReference *Reference `json:"diagnosisReference,omitempty"`
}

// NewCoverageEligibilityRequestDiagnosis instantiates a new CoverageEligibilityRequestDiagnosis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageEligibilityRequestDiagnosis() *CoverageEligibilityRequestDiagnosis {
	this := CoverageEligibilityRequestDiagnosis{}
	return &this
}

// NewCoverageEligibilityRequestDiagnosisWithDefaults instantiates a new CoverageEligibilityRequestDiagnosis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageEligibilityRequestDiagnosisWithDefaults() *CoverageEligibilityRequestDiagnosis {
	this := CoverageEligibilityRequestDiagnosis{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestDiagnosis) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestDiagnosis) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestDiagnosis) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoverageEligibilityRequestDiagnosis) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestDiagnosis) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestDiagnosis) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestDiagnosis) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CoverageEligibilityRequestDiagnosis) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestDiagnosis) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestDiagnosis) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestDiagnosis) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CoverageEligibilityRequestDiagnosis) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetDiagnosisCodeableConcept returns the DiagnosisCodeableConcept field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestDiagnosis) GetDiagnosisCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.DiagnosisCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.DiagnosisCodeableConcept
}

// GetDiagnosisCodeableConceptOk returns a tuple with the DiagnosisCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestDiagnosis) GetDiagnosisCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.DiagnosisCodeableConcept) {
		return nil, false
	}
	return o.DiagnosisCodeableConcept, true
}

// HasDiagnosisCodeableConcept returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestDiagnosis) HasDiagnosisCodeableConcept() bool {
	if o != nil && !IsNil(o.DiagnosisCodeableConcept) {
		return true
	}

	return false
}

// SetDiagnosisCodeableConcept gets a reference to the given CodeableConcept and assigns it to the DiagnosisCodeableConcept field.
func (o *CoverageEligibilityRequestDiagnosis) SetDiagnosisCodeableConcept(v CodeableConcept) {
	o.DiagnosisCodeableConcept = &v
}

// GetDiagnosisReference returns the DiagnosisReference field value if set, zero value otherwise.
func (o *CoverageEligibilityRequestDiagnosis) GetDiagnosisReference() Reference {
	if o == nil || IsNil(o.DiagnosisReference) {
		var ret Reference
		return ret
	}
	return *o.DiagnosisReference
}

// GetDiagnosisReferenceOk returns a tuple with the DiagnosisReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityRequestDiagnosis) GetDiagnosisReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.DiagnosisReference) {
		return nil, false
	}
	return o.DiagnosisReference, true
}

// HasDiagnosisReference returns a boolean if a field has been set.
func (o *CoverageEligibilityRequestDiagnosis) HasDiagnosisReference() bool {
	if o != nil && !IsNil(o.DiagnosisReference) {
		return true
	}

	return false
}

// SetDiagnosisReference gets a reference to the given Reference and assigns it to the DiagnosisReference field.
func (o *CoverageEligibilityRequestDiagnosis) SetDiagnosisReference(v Reference) {
	o.DiagnosisReference = &v
}

func (o CoverageEligibilityRequestDiagnosis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageEligibilityRequestDiagnosis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.DiagnosisCodeableConcept) {
		toSerialize["diagnosisCodeableConcept"] = o.DiagnosisCodeableConcept
	}
	if !IsNil(o.DiagnosisReference) {
		toSerialize["diagnosisReference"] = o.DiagnosisReference
	}
	return toSerialize, nil
}

type NullableCoverageEligibilityRequestDiagnosis struct {
	value *CoverageEligibilityRequestDiagnosis
	isSet bool
}

func (v NullableCoverageEligibilityRequestDiagnosis) Get() *CoverageEligibilityRequestDiagnosis {
	return v.value
}

func (v *NullableCoverageEligibilityRequestDiagnosis) Set(val *CoverageEligibilityRequestDiagnosis) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageEligibilityRequestDiagnosis) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageEligibilityRequestDiagnosis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageEligibilityRequestDiagnosis(val *CoverageEligibilityRequestDiagnosis) *NullableCoverageEligibilityRequestDiagnosis {
	return &NullableCoverageEligibilityRequestDiagnosis{value: val, isSet: true}
}

func (v NullableCoverageEligibilityRequestDiagnosis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageEligibilityRequestDiagnosis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


