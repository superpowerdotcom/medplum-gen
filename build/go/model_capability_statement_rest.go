/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the CapabilityStatementRest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapabilityStatementRest{}

// CapabilityStatementRest A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
type CapabilityStatementRest struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
	Mode *string `json:"mode,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	Documentation *string `json:"documentation,omitempty"`
	// Information about security implementation from an interface perspective - what a client needs to know.
	Security *CapabilityStatementSecurity `json:"security,omitempty"`
	// A specification of the restful capabilities of the solution for a specific resource type.
	Resource []CapabilityStatementResource `json:"resource,omitempty"`
	// A specification of restful operations supported by the system.
	Interaction []CapabilityStatementInteraction1 `json:"interaction,omitempty"`
	// Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
	SearchParam []CapabilityStatementSearchParam `json:"searchParam,omitempty"`
	// Definition of an operation or a named query together with its parameters and their meaning and type.
	Operation []CapabilityStatementOperation `json:"operation,omitempty"`
	// An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
	Compartment []string `json:"compartment,omitempty"`
}

// NewCapabilityStatementRest instantiates a new CapabilityStatementRest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityStatementRest() *CapabilityStatementRest {
	this := CapabilityStatementRest{}
	return &this
}

// NewCapabilityStatementRestWithDefaults instantiates a new CapabilityStatementRest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityStatementRestWithDefaults() *CapabilityStatementRest {
	this := CapabilityStatementRest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CapabilityStatementRest) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CapabilityStatementRest) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CapabilityStatementRest) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *CapabilityStatementRest) SetMode(v string) {
	o.Mode = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *CapabilityStatementRest) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetSecurity() CapabilityStatementSecurity {
	if o == nil || IsNil(o.Security) {
		var ret CapabilityStatementSecurity
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetSecurityOk() (*CapabilityStatementSecurity, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given CapabilityStatementSecurity and assigns it to the Security field.
func (o *CapabilityStatementRest) SetSecurity(v CapabilityStatementSecurity) {
	o.Security = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetResource() []CapabilityStatementResource {
	if o == nil || IsNil(o.Resource) {
		var ret []CapabilityStatementResource
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetResourceOk() ([]CapabilityStatementResource, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given []CapabilityStatementResource and assigns it to the Resource field.
func (o *CapabilityStatementRest) SetResource(v []CapabilityStatementResource) {
	o.Resource = v
}

// GetInteraction returns the Interaction field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetInteraction() []CapabilityStatementInteraction1 {
	if o == nil || IsNil(o.Interaction) {
		var ret []CapabilityStatementInteraction1
		return ret
	}
	return o.Interaction
}

// GetInteractionOk returns a tuple with the Interaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetInteractionOk() ([]CapabilityStatementInteraction1, bool) {
	if o == nil || IsNil(o.Interaction) {
		return nil, false
	}
	return o.Interaction, true
}

// HasInteraction returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasInteraction() bool {
	if o != nil && !IsNil(o.Interaction) {
		return true
	}

	return false
}

// SetInteraction gets a reference to the given []CapabilityStatementInteraction1 and assigns it to the Interaction field.
func (o *CapabilityStatementRest) SetInteraction(v []CapabilityStatementInteraction1) {
	o.Interaction = v
}

// GetSearchParam returns the SearchParam field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetSearchParam() []CapabilityStatementSearchParam {
	if o == nil || IsNil(o.SearchParam) {
		var ret []CapabilityStatementSearchParam
		return ret
	}
	return o.SearchParam
}

// GetSearchParamOk returns a tuple with the SearchParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetSearchParamOk() ([]CapabilityStatementSearchParam, bool) {
	if o == nil || IsNil(o.SearchParam) {
		return nil, false
	}
	return o.SearchParam, true
}

// HasSearchParam returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasSearchParam() bool {
	if o != nil && !IsNil(o.SearchParam) {
		return true
	}

	return false
}

// SetSearchParam gets a reference to the given []CapabilityStatementSearchParam and assigns it to the SearchParam field.
func (o *CapabilityStatementRest) SetSearchParam(v []CapabilityStatementSearchParam) {
	o.SearchParam = v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetOperation() []CapabilityStatementOperation {
	if o == nil || IsNil(o.Operation) {
		var ret []CapabilityStatementOperation
		return ret
	}
	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetOperationOk() ([]CapabilityStatementOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given []CapabilityStatementOperation and assigns it to the Operation field.
func (o *CapabilityStatementRest) SetOperation(v []CapabilityStatementOperation) {
	o.Operation = v
}

// GetCompartment returns the Compartment field value if set, zero value otherwise.
func (o *CapabilityStatementRest) GetCompartment() []string {
	if o == nil || IsNil(o.Compartment) {
		var ret []string
		return ret
	}
	return o.Compartment
}

// GetCompartmentOk returns a tuple with the Compartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityStatementRest) GetCompartmentOk() ([]string, bool) {
	if o == nil || IsNil(o.Compartment) {
		return nil, false
	}
	return o.Compartment, true
}

// HasCompartment returns a boolean if a field has been set.
func (o *CapabilityStatementRest) HasCompartment() bool {
	if o != nil && !IsNil(o.Compartment) {
		return true
	}

	return false
}

// SetCompartment gets a reference to the given []string and assigns it to the Compartment field.
func (o *CapabilityStatementRest) SetCompartment(v []string) {
	o.Compartment = v
}

func (o CapabilityStatementRest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapabilityStatementRest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Interaction) {
		toSerialize["interaction"] = o.Interaction
	}
	if !IsNil(o.SearchParam) {
		toSerialize["searchParam"] = o.SearchParam
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Compartment) {
		toSerialize["compartment"] = o.Compartment
	}
	return toSerialize, nil
}

type NullableCapabilityStatementRest struct {
	value *CapabilityStatementRest
	isSet bool
}

func (v NullableCapabilityStatementRest) Get() *CapabilityStatementRest {
	return v.value
}

func (v *NullableCapabilityStatementRest) Set(val *CapabilityStatementRest) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityStatementRest) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityStatementRest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityStatementRest(val *CapabilityStatementRest) *NullableCapabilityStatementRest {
	return &NullableCapabilityStatementRest{value: val, isSet: true}
}

func (v NullableCapabilityStatementRest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityStatementRest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


