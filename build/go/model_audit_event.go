/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuditEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEvent{}

// AuditEvent A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent struct {
	// This is a AuditEvent resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
	Type Coding `json:"type"`
	// Identifier for the category of event.
	Subtype []Coding `json:"subtype,omitempty"`
	// Indicator for type of action performed during the event that generated the audit.
	Action *string `json:"action,omitempty"`
	// The period during which the activity occurred.
	Period *Period `json:"period,omitempty"`
	// An instant in time - known at least to the second
	Recorded *string `json:"recorded,omitempty"`
	// Indicates whether the event succeeded or failed.
	Outcome *string `json:"outcome,omitempty"`
	// A sequence of Unicode characters
	OutcomeDesc *string `json:"outcomeDesc,omitempty"`
	// The purposeOfUse (reason) that was used during the event being recorded.
	PurposeOfEvent []CodeableConcept `json:"purposeOfEvent,omitempty"`
	// An actor taking an active role in the event or activity that is logged.
	Agent []AuditEventAgent `json:"agent"`
	// The system that is reporting the event.
	Source AuditEventSource `json:"source"`
	// Specific instances of data or objects that have been accessed.
	Entity []AuditEventEntity `json:"entity,omitempty"`
}

type _AuditEvent AuditEvent

// NewAuditEvent instantiates a new AuditEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEvent(resourceType string, type_ Coding, agent []AuditEventAgent, source AuditEventSource) *AuditEvent {
	this := AuditEvent{}
	this.ResourceType = resourceType
	this.Type = type_
	this.Agent = agent
	this.Source = source
	return &this
}

// NewAuditEventWithDefaults instantiates a new AuditEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventWithDefaults() *AuditEvent {
	this := AuditEvent{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *AuditEvent) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *AuditEvent) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditEvent) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *AuditEvent) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *AuditEvent) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *AuditEvent) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *AuditEvent) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *AuditEvent) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *AuditEvent) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AuditEvent) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AuditEvent) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AuditEvent) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AuditEvent) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AuditEvent) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *AuditEvent) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *AuditEvent) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *AuditEvent) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *AuditEvent) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AuditEvent) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AuditEvent) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *AuditEvent) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *AuditEvent) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *AuditEvent) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *AuditEvent) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value
func (o *AuditEvent) GetType() Coding {
	if o == nil {
		var ret Coding
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetTypeOk() (*Coding, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuditEvent) SetType(v Coding) {
	o.Type = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *AuditEvent) GetSubtype() []Coding {
	if o == nil || IsNil(o.Subtype) {
		var ret []Coding
		return ret
	}
	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetSubtypeOk() ([]Coding, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *AuditEvent) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given []Coding and assigns it to the Subtype field.
func (o *AuditEvent) SetSubtype(v []Coding) {
	o.Subtype = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AuditEvent) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AuditEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *AuditEvent) SetAction(v string) {
	o.Action = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *AuditEvent) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *AuditEvent) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *AuditEvent) SetPeriod(v Period) {
	o.Period = &v
}

// GetRecorded returns the Recorded field value if set, zero value otherwise.
func (o *AuditEvent) GetRecorded() string {
	if o == nil || IsNil(o.Recorded) {
		var ret string
		return ret
	}
	return *o.Recorded
}

// GetRecordedOk returns a tuple with the Recorded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetRecordedOk() (*string, bool) {
	if o == nil || IsNil(o.Recorded) {
		return nil, false
	}
	return o.Recorded, true
}

// HasRecorded returns a boolean if a field has been set.
func (o *AuditEvent) HasRecorded() bool {
	if o != nil && !IsNil(o.Recorded) {
		return true
	}

	return false
}

// SetRecorded gets a reference to the given string and assigns it to the Recorded field.
func (o *AuditEvent) SetRecorded(v string) {
	o.Recorded = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *AuditEvent) GetOutcome() string {
	if o == nil || IsNil(o.Outcome) {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetOutcomeOk() (*string, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *AuditEvent) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *AuditEvent) SetOutcome(v string) {
	o.Outcome = &v
}

// GetOutcomeDesc returns the OutcomeDesc field value if set, zero value otherwise.
func (o *AuditEvent) GetOutcomeDesc() string {
	if o == nil || IsNil(o.OutcomeDesc) {
		var ret string
		return ret
	}
	return *o.OutcomeDesc
}

// GetOutcomeDescOk returns a tuple with the OutcomeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetOutcomeDescOk() (*string, bool) {
	if o == nil || IsNil(o.OutcomeDesc) {
		return nil, false
	}
	return o.OutcomeDesc, true
}

// HasOutcomeDesc returns a boolean if a field has been set.
func (o *AuditEvent) HasOutcomeDesc() bool {
	if o != nil && !IsNil(o.OutcomeDesc) {
		return true
	}

	return false
}

// SetOutcomeDesc gets a reference to the given string and assigns it to the OutcomeDesc field.
func (o *AuditEvent) SetOutcomeDesc(v string) {
	o.OutcomeDesc = &v
}

// GetPurposeOfEvent returns the PurposeOfEvent field value if set, zero value otherwise.
func (o *AuditEvent) GetPurposeOfEvent() []CodeableConcept {
	if o == nil || IsNil(o.PurposeOfEvent) {
		var ret []CodeableConcept
		return ret
	}
	return o.PurposeOfEvent
}

// GetPurposeOfEventOk returns a tuple with the PurposeOfEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetPurposeOfEventOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.PurposeOfEvent) {
		return nil, false
	}
	return o.PurposeOfEvent, true
}

// HasPurposeOfEvent returns a boolean if a field has been set.
func (o *AuditEvent) HasPurposeOfEvent() bool {
	if o != nil && !IsNil(o.PurposeOfEvent) {
		return true
	}

	return false
}

// SetPurposeOfEvent gets a reference to the given []CodeableConcept and assigns it to the PurposeOfEvent field.
func (o *AuditEvent) SetPurposeOfEvent(v []CodeableConcept) {
	o.PurposeOfEvent = v
}

// GetAgent returns the Agent field value
func (o *AuditEvent) GetAgent() []AuditEventAgent {
	if o == nil {
		var ret []AuditEventAgent
		return ret
	}

	return o.Agent
}

// GetAgentOk returns a tuple with the Agent field value
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetAgentOk() ([]AuditEventAgent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Agent, true
}

// SetAgent sets field value
func (o *AuditEvent) SetAgent(v []AuditEventAgent) {
	o.Agent = v
}

// GetSource returns the Source field value
func (o *AuditEvent) GetSource() AuditEventSource {
	if o == nil {
		var ret AuditEventSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetSourceOk() (*AuditEventSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *AuditEvent) SetSource(v AuditEventSource) {
	o.Source = v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *AuditEvent) GetEntity() []AuditEventEntity {
	if o == nil || IsNil(o.Entity) {
		var ret []AuditEventEntity
		return ret
	}
	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetEntityOk() ([]AuditEventEntity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *AuditEvent) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given []AuditEventEntity and assigns it to the Entity field.
func (o *AuditEvent) SetEntity(v []AuditEventEntity) {
	o.Entity = v
}

func (o AuditEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Recorded) {
		toSerialize["recorded"] = o.Recorded
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.OutcomeDesc) {
		toSerialize["outcomeDesc"] = o.OutcomeDesc
	}
	if !IsNil(o.PurposeOfEvent) {
		toSerialize["purposeOfEvent"] = o.PurposeOfEvent
	}
	toSerialize["agent"] = o.Agent
	toSerialize["source"] = o.Source
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	return toSerialize, nil
}

func (o *AuditEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"type",
		"agent",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditEvent := _AuditEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditEvent)

	if err != nil {
		return err
	}

	*o = AuditEvent(varAuditEvent)

	return err
}

type NullableAuditEvent struct {
	value *AuditEvent
	isSet bool
}

func (v NullableAuditEvent) Get() *AuditEvent {
	return v.value
}

func (v *NullableAuditEvent) Set(val *AuditEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEvent(val *AuditEvent) *NullableAuditEvent {
	return &NullableAuditEvent{value: val, isSet: true}
}

func (v NullableAuditEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


