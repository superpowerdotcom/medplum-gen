/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the GraphDefinitionLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphDefinitionLink{}

// GraphDefinitionLink A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
type GraphDefinitionLink struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Path *string `json:"path,omitempty"`
	// A sequence of Unicode characters
	SliceName *string `json:"sliceName,omitempty"`
	// A whole number
	Min *float32 `json:"min,omitempty"`
	// A sequence of Unicode characters
	Max *string `json:"max,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// Potential target for the link.
	Target []GraphDefinitionTarget `json:"target,omitempty"`
}

// NewGraphDefinitionLink instantiates a new GraphDefinitionLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphDefinitionLink() *GraphDefinitionLink {
	this := GraphDefinitionLink{}
	return &this
}

// NewGraphDefinitionLinkWithDefaults instantiates a new GraphDefinitionLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphDefinitionLinkWithDefaults() *GraphDefinitionLink {
	this := GraphDefinitionLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GraphDefinitionLink) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *GraphDefinitionLink) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *GraphDefinitionLink) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GraphDefinitionLink) SetPath(v string) {
	o.Path = &v
}

// GetSliceName returns the SliceName field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetSliceName() string {
	if o == nil || IsNil(o.SliceName) {
		var ret string
		return ret
	}
	return *o.SliceName
}

// GetSliceNameOk returns a tuple with the SliceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetSliceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SliceName) {
		return nil, false
	}
	return o.SliceName, true
}

// HasSliceName returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasSliceName() bool {
	if o != nil && !IsNil(o.SliceName) {
		return true
	}

	return false
}

// SetSliceName gets a reference to the given string and assigns it to the SliceName field.
func (o *GraphDefinitionLink) SetSliceName(v string) {
	o.SliceName = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *GraphDefinitionLink) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *GraphDefinitionLink) SetMax(v string) {
	o.Max = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GraphDefinitionLink) SetDescription(v string) {
	o.Description = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *GraphDefinitionLink) GetTarget() []GraphDefinitionTarget {
	if o == nil || IsNil(o.Target) {
		var ret []GraphDefinitionTarget
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDefinitionLink) GetTargetOk() ([]GraphDefinitionTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *GraphDefinitionLink) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given []GraphDefinitionTarget and assigns it to the Target field.
func (o *GraphDefinitionLink) SetTarget(v []GraphDefinitionTarget) {
	o.Target = v
}

func (o GraphDefinitionLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphDefinitionLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.SliceName) {
		toSerialize["sliceName"] = o.SliceName
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullableGraphDefinitionLink struct {
	value *GraphDefinitionLink
	isSet bool
}

func (v NullableGraphDefinitionLink) Get() *GraphDefinitionLink {
	return v.value
}

func (v *NullableGraphDefinitionLink) Set(val *GraphDefinitionLink) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphDefinitionLink) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphDefinitionLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphDefinitionLink(val *GraphDefinitionLink) *NullableGraphDefinitionLink {
	return &NullableGraphDefinitionLink{value: val, isSet: true}
}

func (v NullableGraphDefinitionLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphDefinitionLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


