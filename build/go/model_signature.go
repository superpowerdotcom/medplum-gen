/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Signature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Signature{}

// Signature A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
type Signature struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
	Type []Coding `json:"type"`
	// An instant in time - known at least to the second
	When *string `json:"when,omitempty"`
	// A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
	Who Reference `json:"who"`
	// A reference to an application-usable description of the identity that is represented by the signature.
	OnBehalfOf *Reference `json:"onBehalfOf,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	TargetFormat *string `json:"targetFormat,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	SigFormat *string `json:"sigFormat,omitempty"`
	// A stream of bytes
	Data *string `json:"data,omitempty"`
}

type _Signature Signature

// NewSignature instantiates a new Signature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignature(type_ []Coding, who Reference) *Signature {
	this := Signature{}
	this.Type = type_
	this.Who = who
	return &this
}

// NewSignatureWithDefaults instantiates a new Signature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureWithDefaults() *Signature {
	this := Signature{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Signature) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Signature) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Signature) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Signature) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Signature) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *Signature) SetExtension(v []Extension) {
	o.Extension = v
}

// GetType returns the Type field value
func (o *Signature) GetType() []Coding {
	if o == nil {
		var ret []Coding
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Signature) GetTypeOk() ([]Coding, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Signature) SetType(v []Coding) {
	o.Type = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *Signature) GetWhen() string {
	if o == nil || IsNil(o.When) {
		var ret string
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetWhenOk() (*string, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *Signature) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given string and assigns it to the When field.
func (o *Signature) SetWhen(v string) {
	o.When = &v
}

// GetWho returns the Who field value
func (o *Signature) GetWho() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Who
}

// GetWhoOk returns a tuple with the Who field value
// and a boolean to check if the value has been set.
func (o *Signature) GetWhoOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Who, true
}

// SetWho sets field value
func (o *Signature) SetWho(v Reference) {
	o.Who = v
}

// GetOnBehalfOf returns the OnBehalfOf field value if set, zero value otherwise.
func (o *Signature) GetOnBehalfOf() Reference {
	if o == nil || IsNil(o.OnBehalfOf) {
		var ret Reference
		return ret
	}
	return *o.OnBehalfOf
}

// GetOnBehalfOfOk returns a tuple with the OnBehalfOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetOnBehalfOfOk() (*Reference, bool) {
	if o == nil || IsNil(o.OnBehalfOf) {
		return nil, false
	}
	return o.OnBehalfOf, true
}

// HasOnBehalfOf returns a boolean if a field has been set.
func (o *Signature) HasOnBehalfOf() bool {
	if o != nil && !IsNil(o.OnBehalfOf) {
		return true
	}

	return false
}

// SetOnBehalfOf gets a reference to the given Reference and assigns it to the OnBehalfOf field.
func (o *Signature) SetOnBehalfOf(v Reference) {
	o.OnBehalfOf = &v
}

// GetTargetFormat returns the TargetFormat field value if set, zero value otherwise.
func (o *Signature) GetTargetFormat() string {
	if o == nil || IsNil(o.TargetFormat) {
		var ret string
		return ret
	}
	return *o.TargetFormat
}

// GetTargetFormatOk returns a tuple with the TargetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetTargetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFormat) {
		return nil, false
	}
	return o.TargetFormat, true
}

// HasTargetFormat returns a boolean if a field has been set.
func (o *Signature) HasTargetFormat() bool {
	if o != nil && !IsNil(o.TargetFormat) {
		return true
	}

	return false
}

// SetTargetFormat gets a reference to the given string and assigns it to the TargetFormat field.
func (o *Signature) SetTargetFormat(v string) {
	o.TargetFormat = &v
}

// GetSigFormat returns the SigFormat field value if set, zero value otherwise.
func (o *Signature) GetSigFormat() string {
	if o == nil || IsNil(o.SigFormat) {
		var ret string
		return ret
	}
	return *o.SigFormat
}

// GetSigFormatOk returns a tuple with the SigFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetSigFormatOk() (*string, bool) {
	if o == nil || IsNil(o.SigFormat) {
		return nil, false
	}
	return o.SigFormat, true
}

// HasSigFormat returns a boolean if a field has been set.
func (o *Signature) HasSigFormat() bool {
	if o != nil && !IsNil(o.SigFormat) {
		return true
	}

	return false
}

// SetSigFormat gets a reference to the given string and assigns it to the SigFormat field.
func (o *Signature) SetSigFormat(v string) {
	o.SigFormat = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Signature) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Signature) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *Signature) SetData(v string) {
	o.Data = &v
}

func (o Signature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Signature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	toSerialize["who"] = o.Who
	if !IsNil(o.OnBehalfOf) {
		toSerialize["onBehalfOf"] = o.OnBehalfOf
	}
	if !IsNil(o.TargetFormat) {
		toSerialize["targetFormat"] = o.TargetFormat
	}
	if !IsNil(o.SigFormat) {
		toSerialize["sigFormat"] = o.SigFormat
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *Signature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"who",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignature := _Signature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignature)

	if err != nil {
		return err
	}

	*o = Signature(varSignature)

	return err
}

type NullableSignature struct {
	value *Signature
	isSet bool
}

func (v NullableSignature) Get() *Signature {
	return v.value
}

func (v *NullableSignature) Set(val *Signature) {
	v.value = val
	v.isSet = true
}

func (v NullableSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignature(val *Signature) *NullableSignature {
	return &NullableSignature{value: val, isSet: true}
}

func (v NullableSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


