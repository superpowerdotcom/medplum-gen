/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoverageEligibilityResponseBenefit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageEligibilityResponseBenefit{}

// CoverageEligibilityResponseBenefit This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
type CoverageEligibilityResponseBenefit struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Classification of benefit being provided.
	Type CodeableConcept `json:"type"`
	// The quantity of the benefit which is permitted under the coverage.
	AllowedUnsignedInt *float32 `json:"allowedUnsignedInt,omitempty"`
	// The quantity of the benefit which is permitted under the coverage.
	AllowedString *string `json:"allowedString,omitempty"`
	// The quantity of the benefit which is permitted under the coverage.
	AllowedMoney *Money `json:"allowedMoney,omitempty"`
	// The quantity of the benefit which have been consumed to date.
	UsedUnsignedInt *float32 `json:"usedUnsignedInt,omitempty"`
	// The quantity of the benefit which have been consumed to date.
	UsedString *string `json:"usedString,omitempty"`
	// The quantity of the benefit which have been consumed to date.
	UsedMoney *Money `json:"usedMoney,omitempty"`
}

type _CoverageEligibilityResponseBenefit CoverageEligibilityResponseBenefit

// NewCoverageEligibilityResponseBenefit instantiates a new CoverageEligibilityResponseBenefit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageEligibilityResponseBenefit(type_ CodeableConcept) *CoverageEligibilityResponseBenefit {
	this := CoverageEligibilityResponseBenefit{}
	this.Type = type_
	return &this
}

// NewCoverageEligibilityResponseBenefitWithDefaults instantiates a new CoverageEligibilityResponseBenefit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageEligibilityResponseBenefitWithDefaults() *CoverageEligibilityResponseBenefit {
	this := CoverageEligibilityResponseBenefit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoverageEligibilityResponseBenefit) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *CoverageEligibilityResponseBenefit) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *CoverageEligibilityResponseBenefit) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value
func (o *CoverageEligibilityResponseBenefit) GetType() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CoverageEligibilityResponseBenefit) SetType(v CodeableConcept) {
	o.Type = v
}

// GetAllowedUnsignedInt returns the AllowedUnsignedInt field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetAllowedUnsignedInt() float32 {
	if o == nil || IsNil(o.AllowedUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.AllowedUnsignedInt
}

// GetAllowedUnsignedIntOk returns a tuple with the AllowedUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetAllowedUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.AllowedUnsignedInt) {
		return nil, false
	}
	return o.AllowedUnsignedInt, true
}

// HasAllowedUnsignedInt returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasAllowedUnsignedInt() bool {
	if o != nil && !IsNil(o.AllowedUnsignedInt) {
		return true
	}

	return false
}

// SetAllowedUnsignedInt gets a reference to the given float32 and assigns it to the AllowedUnsignedInt field.
func (o *CoverageEligibilityResponseBenefit) SetAllowedUnsignedInt(v float32) {
	o.AllowedUnsignedInt = &v
}

// GetAllowedString returns the AllowedString field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetAllowedString() string {
	if o == nil || IsNil(o.AllowedString) {
		var ret string
		return ret
	}
	return *o.AllowedString
}

// GetAllowedStringOk returns a tuple with the AllowedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetAllowedStringOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedString) {
		return nil, false
	}
	return o.AllowedString, true
}

// HasAllowedString returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasAllowedString() bool {
	if o != nil && !IsNil(o.AllowedString) {
		return true
	}

	return false
}

// SetAllowedString gets a reference to the given string and assigns it to the AllowedString field.
func (o *CoverageEligibilityResponseBenefit) SetAllowedString(v string) {
	o.AllowedString = &v
}

// GetAllowedMoney returns the AllowedMoney field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetAllowedMoney() Money {
	if o == nil || IsNil(o.AllowedMoney) {
		var ret Money
		return ret
	}
	return *o.AllowedMoney
}

// GetAllowedMoneyOk returns a tuple with the AllowedMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetAllowedMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.AllowedMoney) {
		return nil, false
	}
	return o.AllowedMoney, true
}

// HasAllowedMoney returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasAllowedMoney() bool {
	if o != nil && !IsNil(o.AllowedMoney) {
		return true
	}

	return false
}

// SetAllowedMoney gets a reference to the given Money and assigns it to the AllowedMoney field.
func (o *CoverageEligibilityResponseBenefit) SetAllowedMoney(v Money) {
	o.AllowedMoney = &v
}

// GetUsedUnsignedInt returns the UsedUnsignedInt field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetUsedUnsignedInt() float32 {
	if o == nil || IsNil(o.UsedUnsignedInt) {
		var ret float32
		return ret
	}
	return *o.UsedUnsignedInt
}

// GetUsedUnsignedIntOk returns a tuple with the UsedUnsignedInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetUsedUnsignedIntOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedUnsignedInt) {
		return nil, false
	}
	return o.UsedUnsignedInt, true
}

// HasUsedUnsignedInt returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasUsedUnsignedInt() bool {
	if o != nil && !IsNil(o.UsedUnsignedInt) {
		return true
	}

	return false
}

// SetUsedUnsignedInt gets a reference to the given float32 and assigns it to the UsedUnsignedInt field.
func (o *CoverageEligibilityResponseBenefit) SetUsedUnsignedInt(v float32) {
	o.UsedUnsignedInt = &v
}

// GetUsedString returns the UsedString field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetUsedString() string {
	if o == nil || IsNil(o.UsedString) {
		var ret string
		return ret
	}
	return *o.UsedString
}

// GetUsedStringOk returns a tuple with the UsedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetUsedStringOk() (*string, bool) {
	if o == nil || IsNil(o.UsedString) {
		return nil, false
	}
	return o.UsedString, true
}

// HasUsedString returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasUsedString() bool {
	if o != nil && !IsNil(o.UsedString) {
		return true
	}

	return false
}

// SetUsedString gets a reference to the given string and assigns it to the UsedString field.
func (o *CoverageEligibilityResponseBenefit) SetUsedString(v string) {
	o.UsedString = &v
}

// GetUsedMoney returns the UsedMoney field value if set, zero value otherwise.
func (o *CoverageEligibilityResponseBenefit) GetUsedMoney() Money {
	if o == nil || IsNil(o.UsedMoney) {
		var ret Money
		return ret
	}
	return *o.UsedMoney
}

// GetUsedMoneyOk returns a tuple with the UsedMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageEligibilityResponseBenefit) GetUsedMoneyOk() (*Money, bool) {
	if o == nil || IsNil(o.UsedMoney) {
		return nil, false
	}
	return o.UsedMoney, true
}

// HasUsedMoney returns a boolean if a field has been set.
func (o *CoverageEligibilityResponseBenefit) HasUsedMoney() bool {
	if o != nil && !IsNil(o.UsedMoney) {
		return true
	}

	return false
}

// SetUsedMoney gets a reference to the given Money and assigns it to the UsedMoney field.
func (o *CoverageEligibilityResponseBenefit) SetUsedMoney(v Money) {
	o.UsedMoney = &v
}

func (o CoverageEligibilityResponseBenefit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageEligibilityResponseBenefit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.AllowedUnsignedInt) {
		toSerialize["allowedUnsignedInt"] = o.AllowedUnsignedInt
	}
	if !IsNil(o.AllowedString) {
		toSerialize["allowedString"] = o.AllowedString
	}
	if !IsNil(o.AllowedMoney) {
		toSerialize["allowedMoney"] = o.AllowedMoney
	}
	if !IsNil(o.UsedUnsignedInt) {
		toSerialize["usedUnsignedInt"] = o.UsedUnsignedInt
	}
	if !IsNil(o.UsedString) {
		toSerialize["usedString"] = o.UsedString
	}
	if !IsNil(o.UsedMoney) {
		toSerialize["usedMoney"] = o.UsedMoney
	}
	return toSerialize, nil
}

func (o *CoverageEligibilityResponseBenefit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoverageEligibilityResponseBenefit := _CoverageEligibilityResponseBenefit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoverageEligibilityResponseBenefit)

	if err != nil {
		return err
	}

	*o = CoverageEligibilityResponseBenefit(varCoverageEligibilityResponseBenefit)

	return err
}

type NullableCoverageEligibilityResponseBenefit struct {
	value *CoverageEligibilityResponseBenefit
	isSet bool
}

func (v NullableCoverageEligibilityResponseBenefit) Get() *CoverageEligibilityResponseBenefit {
	return v.value
}

func (v *NullableCoverageEligibilityResponseBenefit) Set(val *CoverageEligibilityResponseBenefit) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageEligibilityResponseBenefit) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageEligibilityResponseBenefit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageEligibilityResponseBenefit(val *CoverageEligibilityResponseBenefit) *NullableCoverageEligibilityResponseBenefit {
	return &NullableCoverageEligibilityResponseBenefit{value: val, isSet: true}
}

func (v NullableCoverageEligibilityResponseBenefit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageEligibilityResponseBenefit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


