/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceDefinitionMaterial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDefinitionMaterial{}

// DeviceDefinitionMaterial The characteristics, operational status and capabilities of a medical-related component of a medical device.
type DeviceDefinitionMaterial struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The substance.
	Substance CodeableConcept `json:"substance"`
	// Value of \"true\" or \"false\"
	Alternate *bool `json:"alternate,omitempty"`
	// Value of \"true\" or \"false\"
	AllergenicIndicator *bool `json:"allergenicIndicator,omitempty"`
}

type _DeviceDefinitionMaterial DeviceDefinitionMaterial

// NewDeviceDefinitionMaterial instantiates a new DeviceDefinitionMaterial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDefinitionMaterial(substance CodeableConcept) *DeviceDefinitionMaterial {
	this := DeviceDefinitionMaterial{}
	this.Substance = substance
	return &this
}

// NewDeviceDefinitionMaterialWithDefaults instantiates a new DeviceDefinitionMaterial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDefinitionMaterialWithDefaults() *DeviceDefinitionMaterial {
	this := DeviceDefinitionMaterial{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceDefinitionMaterial) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceDefinitionMaterial) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceDefinitionMaterial) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DeviceDefinitionMaterial) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionMaterial) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DeviceDefinitionMaterial) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DeviceDefinitionMaterial) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DeviceDefinitionMaterial) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DeviceDefinitionMaterial) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetSubstance returns the Substance field value
func (o *DeviceDefinitionMaterial) GetSubstance() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Substance
}

// GetSubstanceOk returns a tuple with the Substance field value
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetSubstanceOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Substance, true
}

// SetSubstance sets field value
func (o *DeviceDefinitionMaterial) SetSubstance(v CodeableConcept) {
	o.Substance = v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *DeviceDefinitionMaterial) GetAlternate() bool {
	if o == nil || IsNil(o.Alternate) {
		var ret bool
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *DeviceDefinitionMaterial) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given bool and assigns it to the Alternate field.
func (o *DeviceDefinitionMaterial) SetAlternate(v bool) {
	o.Alternate = &v
}

// GetAllergenicIndicator returns the AllergenicIndicator field value if set, zero value otherwise.
func (o *DeviceDefinitionMaterial) GetAllergenicIndicator() bool {
	if o == nil || IsNil(o.AllergenicIndicator) {
		var ret bool
		return ret
	}
	return *o.AllergenicIndicator
}

// GetAllergenicIndicatorOk returns a tuple with the AllergenicIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDefinitionMaterial) GetAllergenicIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.AllergenicIndicator) {
		return nil, false
	}
	return o.AllergenicIndicator, true
}

// HasAllergenicIndicator returns a boolean if a field has been set.
func (o *DeviceDefinitionMaterial) HasAllergenicIndicator() bool {
	if o != nil && !IsNil(o.AllergenicIndicator) {
		return true
	}

	return false
}

// SetAllergenicIndicator gets a reference to the given bool and assigns it to the AllergenicIndicator field.
func (o *DeviceDefinitionMaterial) SetAllergenicIndicator(v bool) {
	o.AllergenicIndicator = &v
}

func (o DeviceDefinitionMaterial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDefinitionMaterial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["substance"] = o.Substance
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.AllergenicIndicator) {
		toSerialize["allergenicIndicator"] = o.AllergenicIndicator
	}
	return toSerialize, nil
}

func (o *DeviceDefinitionMaterial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"substance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceDefinitionMaterial := _DeviceDefinitionMaterial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceDefinitionMaterial)

	if err != nil {
		return err
	}

	*o = DeviceDefinitionMaterial(varDeviceDefinitionMaterial)

	return err
}

type NullableDeviceDefinitionMaterial struct {
	value *DeviceDefinitionMaterial
	isSet bool
}

func (v NullableDeviceDefinitionMaterial) Get() *DeviceDefinitionMaterial {
	return v.value
}

func (v *NullableDeviceDefinitionMaterial) Set(val *DeviceDefinitionMaterial) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDefinitionMaterial) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDefinitionMaterial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDefinitionMaterial(val *DeviceDefinitionMaterial) *NullableDeviceDefinitionMaterial {
	return &NullableDeviceDefinitionMaterial{value: val, isSet: true}
}

func (v NullableDeviceDefinitionMaterial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDefinitionMaterial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


