/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MedicinalProductIngredientStrength type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicinalProductIngredientStrength{}

// MedicinalProductIngredientStrength An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredientStrength struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
	Presentation Ratio `json:"presentation"`
	// A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
	PresentationLowLimit *Ratio `json:"presentationLowLimit,omitempty"`
	// The strength per unitary volume (or mass).
	Concentration *Ratio `json:"concentration,omitempty"`
	// A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
	ConcentrationLowLimit *Ratio `json:"concentrationLowLimit,omitempty"`
	// A sequence of Unicode characters
	MeasurementPoint *string `json:"measurementPoint,omitempty"`
	// The country or countries for which the strength range applies.
	Country []CodeableConcept `json:"country,omitempty"`
	// Strength expressed in terms of a reference substance.
	ReferenceStrength []MedicinalProductIngredientReferenceStrength `json:"referenceStrength,omitempty"`
}

type _MedicinalProductIngredientStrength MedicinalProductIngredientStrength

// NewMedicinalProductIngredientStrength instantiates a new MedicinalProductIngredientStrength object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicinalProductIngredientStrength(presentation Ratio) *MedicinalProductIngredientStrength {
	this := MedicinalProductIngredientStrength{}
	this.Presentation = presentation
	return &this
}

// NewMedicinalProductIngredientStrengthWithDefaults instantiates a new MedicinalProductIngredientStrength object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicinalProductIngredientStrengthWithDefaults() *MedicinalProductIngredientStrength {
	this := MedicinalProductIngredientStrength{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicinalProductIngredientStrength) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicinalProductIngredientStrength) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicinalProductIngredientStrength) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPresentation returns the Presentation field value
func (o *MedicinalProductIngredientStrength) GetPresentation() Ratio {
	if o == nil {
		var ret Ratio
		return ret
	}

	return o.Presentation
}

// GetPresentationOk returns a tuple with the Presentation field value
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetPresentationOk() (*Ratio, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Presentation, true
}

// SetPresentation sets field value
func (o *MedicinalProductIngredientStrength) SetPresentation(v Ratio) {
	o.Presentation = v
}

// GetPresentationLowLimit returns the PresentationLowLimit field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetPresentationLowLimit() Ratio {
	if o == nil || IsNil(o.PresentationLowLimit) {
		var ret Ratio
		return ret
	}
	return *o.PresentationLowLimit
}

// GetPresentationLowLimitOk returns a tuple with the PresentationLowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetPresentationLowLimitOk() (*Ratio, bool) {
	if o == nil || IsNil(o.PresentationLowLimit) {
		return nil, false
	}
	return o.PresentationLowLimit, true
}

// HasPresentationLowLimit returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasPresentationLowLimit() bool {
	if o != nil && !IsNil(o.PresentationLowLimit) {
		return true
	}

	return false
}

// SetPresentationLowLimit gets a reference to the given Ratio and assigns it to the PresentationLowLimit field.
func (o *MedicinalProductIngredientStrength) SetPresentationLowLimit(v Ratio) {
	o.PresentationLowLimit = &v
}

// GetConcentration returns the Concentration field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetConcentration() Ratio {
	if o == nil || IsNil(o.Concentration) {
		var ret Ratio
		return ret
	}
	return *o.Concentration
}

// GetConcentrationOk returns a tuple with the Concentration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetConcentrationOk() (*Ratio, bool) {
	if o == nil || IsNil(o.Concentration) {
		return nil, false
	}
	return o.Concentration, true
}

// HasConcentration returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasConcentration() bool {
	if o != nil && !IsNil(o.Concentration) {
		return true
	}

	return false
}

// SetConcentration gets a reference to the given Ratio and assigns it to the Concentration field.
func (o *MedicinalProductIngredientStrength) SetConcentration(v Ratio) {
	o.Concentration = &v
}

// GetConcentrationLowLimit returns the ConcentrationLowLimit field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetConcentrationLowLimit() Ratio {
	if o == nil || IsNil(o.ConcentrationLowLimit) {
		var ret Ratio
		return ret
	}
	return *o.ConcentrationLowLimit
}

// GetConcentrationLowLimitOk returns a tuple with the ConcentrationLowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetConcentrationLowLimitOk() (*Ratio, bool) {
	if o == nil || IsNil(o.ConcentrationLowLimit) {
		return nil, false
	}
	return o.ConcentrationLowLimit, true
}

// HasConcentrationLowLimit returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasConcentrationLowLimit() bool {
	if o != nil && !IsNil(o.ConcentrationLowLimit) {
		return true
	}

	return false
}

// SetConcentrationLowLimit gets a reference to the given Ratio and assigns it to the ConcentrationLowLimit field.
func (o *MedicinalProductIngredientStrength) SetConcentrationLowLimit(v Ratio) {
	o.ConcentrationLowLimit = &v
}

// GetMeasurementPoint returns the MeasurementPoint field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetMeasurementPoint() string {
	if o == nil || IsNil(o.MeasurementPoint) {
		var ret string
		return ret
	}
	return *o.MeasurementPoint
}

// GetMeasurementPointOk returns a tuple with the MeasurementPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetMeasurementPointOk() (*string, bool) {
	if o == nil || IsNil(o.MeasurementPoint) {
		return nil, false
	}
	return o.MeasurementPoint, true
}

// HasMeasurementPoint returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasMeasurementPoint() bool {
	if o != nil && !IsNil(o.MeasurementPoint) {
		return true
	}

	return false
}

// SetMeasurementPoint gets a reference to the given string and assigns it to the MeasurementPoint field.
func (o *MedicinalProductIngredientStrength) SetMeasurementPoint(v string) {
	o.MeasurementPoint = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetCountry() []CodeableConcept {
	if o == nil || IsNil(o.Country) {
		var ret []CodeableConcept
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetCountryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []CodeableConcept and assigns it to the Country field.
func (o *MedicinalProductIngredientStrength) SetCountry(v []CodeableConcept) {
	o.Country = v
}

// GetReferenceStrength returns the ReferenceStrength field value if set, zero value otherwise.
func (o *MedicinalProductIngredientStrength) GetReferenceStrength() []MedicinalProductIngredientReferenceStrength {
	if o == nil || IsNil(o.ReferenceStrength) {
		var ret []MedicinalProductIngredientReferenceStrength
		return ret
	}
	return o.ReferenceStrength
}

// GetReferenceStrengthOk returns a tuple with the ReferenceStrength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicinalProductIngredientStrength) GetReferenceStrengthOk() ([]MedicinalProductIngredientReferenceStrength, bool) {
	if o == nil || IsNil(o.ReferenceStrength) {
		return nil, false
	}
	return o.ReferenceStrength, true
}

// HasReferenceStrength returns a boolean if a field has been set.
func (o *MedicinalProductIngredientStrength) HasReferenceStrength() bool {
	if o != nil && !IsNil(o.ReferenceStrength) {
		return true
	}

	return false
}

// SetReferenceStrength gets a reference to the given []MedicinalProductIngredientReferenceStrength and assigns it to the ReferenceStrength field.
func (o *MedicinalProductIngredientStrength) SetReferenceStrength(v []MedicinalProductIngredientReferenceStrength) {
	o.ReferenceStrength = v
}

func (o MedicinalProductIngredientStrength) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicinalProductIngredientStrength) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["presentation"] = o.Presentation
	if !IsNil(o.PresentationLowLimit) {
		toSerialize["presentationLowLimit"] = o.PresentationLowLimit
	}
	if !IsNil(o.Concentration) {
		toSerialize["concentration"] = o.Concentration
	}
	if !IsNil(o.ConcentrationLowLimit) {
		toSerialize["concentrationLowLimit"] = o.ConcentrationLowLimit
	}
	if !IsNil(o.MeasurementPoint) {
		toSerialize["measurementPoint"] = o.MeasurementPoint
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.ReferenceStrength) {
		toSerialize["referenceStrength"] = o.ReferenceStrength
	}
	return toSerialize, nil
}

func (o *MedicinalProductIngredientStrength) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"presentation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedicinalProductIngredientStrength := _MedicinalProductIngredientStrength{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedicinalProductIngredientStrength)

	if err != nil {
		return err
	}

	*o = MedicinalProductIngredientStrength(varMedicinalProductIngredientStrength)

	return err
}

type NullableMedicinalProductIngredientStrength struct {
	value *MedicinalProductIngredientStrength
	isSet bool
}

func (v NullableMedicinalProductIngredientStrength) Get() *MedicinalProductIngredientStrength {
	return v.value
}

func (v *NullableMedicinalProductIngredientStrength) Set(val *MedicinalProductIngredientStrength) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicinalProductIngredientStrength) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicinalProductIngredientStrength) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicinalProductIngredientStrength(val *MedicinalProductIngredientStrength) *NullableMedicinalProductIngredientStrength {
	return &NullableMedicinalProductIngredientStrength{value: val, isSet: true}
}

func (v NullableMedicinalProductIngredientStrength) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicinalProductIngredientStrength) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


