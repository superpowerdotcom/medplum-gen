/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the OperationDefinitionParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationDefinitionParameter{}

// OperationDefinitionParameter A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
type OperationDefinitionParameter struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Name *string `json:"name,omitempty"`
	// Whether this is an input or an output parameter.
	Use *string `json:"use,omitempty"`
	// A whole number
	Min *float32 `json:"min,omitempty"`
	// A sequence of Unicode characters
	Max *string `json:"max,omitempty"`
	// A sequence of Unicode characters
	Documentation *string `json:"documentation,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Type *string `json:"type,omitempty"`
	// Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
	TargetProfile []string `json:"targetProfile,omitempty"`
	// How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
	SearchType *string `json:"searchType,omitempty"`
	// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
	Binding *OperationDefinitionBinding `json:"binding,omitempty"`
	// Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
	ReferencedFrom []OperationDefinitionReferencedFrom `json:"referencedFrom,omitempty"`
	// The parts of a nested Parameter.
	Part []OperationDefinitionParameter `json:"part,omitempty"`
}

// NewOperationDefinitionParameter instantiates a new OperationDefinitionParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationDefinitionParameter() *OperationDefinitionParameter {
	this := OperationDefinitionParameter{}
	return &this
}

// NewOperationDefinitionParameterWithDefaults instantiates a new OperationDefinitionParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationDefinitionParameterWithDefaults() *OperationDefinitionParameter {
	this := OperationDefinitionParameter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OperationDefinitionParameter) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *OperationDefinitionParameter) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *OperationDefinitionParameter) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OperationDefinitionParameter) SetName(v string) {
	o.Name = &v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *OperationDefinitionParameter) SetUse(v string) {
	o.Use = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *OperationDefinitionParameter) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *OperationDefinitionParameter) SetMax(v string) {
	o.Max = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *OperationDefinitionParameter) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OperationDefinitionParameter) SetType(v string) {
	o.Type = &v
}

// GetTargetProfile returns the TargetProfile field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetTargetProfile() []string {
	if o == nil || IsNil(o.TargetProfile) {
		var ret []string
		return ret
	}
	return o.TargetProfile
}

// GetTargetProfileOk returns a tuple with the TargetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetTargetProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetProfile) {
		return nil, false
	}
	return o.TargetProfile, true
}

// HasTargetProfile returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasTargetProfile() bool {
	if o != nil && !IsNil(o.TargetProfile) {
		return true
	}

	return false
}

// SetTargetProfile gets a reference to the given []string and assigns it to the TargetProfile field.
func (o *OperationDefinitionParameter) SetTargetProfile(v []string) {
	o.TargetProfile = v
}

// GetSearchType returns the SearchType field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetSearchType() string {
	if o == nil || IsNil(o.SearchType) {
		var ret string
		return ret
	}
	return *o.SearchType
}

// GetSearchTypeOk returns a tuple with the SearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetSearchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SearchType) {
		return nil, false
	}
	return o.SearchType, true
}

// HasSearchType returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasSearchType() bool {
	if o != nil && !IsNil(o.SearchType) {
		return true
	}

	return false
}

// SetSearchType gets a reference to the given string and assigns it to the SearchType field.
func (o *OperationDefinitionParameter) SetSearchType(v string) {
	o.SearchType = &v
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetBinding() OperationDefinitionBinding {
	if o == nil || IsNil(o.Binding) {
		var ret OperationDefinitionBinding
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetBindingOk() (*OperationDefinitionBinding, bool) {
	if o == nil || IsNil(o.Binding) {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasBinding() bool {
	if o != nil && !IsNil(o.Binding) {
		return true
	}

	return false
}

// SetBinding gets a reference to the given OperationDefinitionBinding and assigns it to the Binding field.
func (o *OperationDefinitionParameter) SetBinding(v OperationDefinitionBinding) {
	o.Binding = &v
}

// GetReferencedFrom returns the ReferencedFrom field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetReferencedFrom() []OperationDefinitionReferencedFrom {
	if o == nil || IsNil(o.ReferencedFrom) {
		var ret []OperationDefinitionReferencedFrom
		return ret
	}
	return o.ReferencedFrom
}

// GetReferencedFromOk returns a tuple with the ReferencedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetReferencedFromOk() ([]OperationDefinitionReferencedFrom, bool) {
	if o == nil || IsNil(o.ReferencedFrom) {
		return nil, false
	}
	return o.ReferencedFrom, true
}

// HasReferencedFrom returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasReferencedFrom() bool {
	if o != nil && !IsNil(o.ReferencedFrom) {
		return true
	}

	return false
}

// SetReferencedFrom gets a reference to the given []OperationDefinitionReferencedFrom and assigns it to the ReferencedFrom field.
func (o *OperationDefinitionParameter) SetReferencedFrom(v []OperationDefinitionReferencedFrom) {
	o.ReferencedFrom = v
}

// GetPart returns the Part field value if set, zero value otherwise.
func (o *OperationDefinitionParameter) GetPart() []OperationDefinitionParameter {
	if o == nil || IsNil(o.Part) {
		var ret []OperationDefinitionParameter
		return ret
	}
	return o.Part
}

// GetPartOk returns a tuple with the Part field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationDefinitionParameter) GetPartOk() ([]OperationDefinitionParameter, bool) {
	if o == nil || IsNil(o.Part) {
		return nil, false
	}
	return o.Part, true
}

// HasPart returns a boolean if a field has been set.
func (o *OperationDefinitionParameter) HasPart() bool {
	if o != nil && !IsNil(o.Part) {
		return true
	}

	return false
}

// SetPart gets a reference to the given []OperationDefinitionParameter and assigns it to the Part field.
func (o *OperationDefinitionParameter) SetPart(v []OperationDefinitionParameter) {
	o.Part = v
}

func (o OperationDefinitionParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationDefinitionParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TargetProfile) {
		toSerialize["targetProfile"] = o.TargetProfile
	}
	if !IsNil(o.SearchType) {
		toSerialize["searchType"] = o.SearchType
	}
	if !IsNil(o.Binding) {
		toSerialize["binding"] = o.Binding
	}
	if !IsNil(o.ReferencedFrom) {
		toSerialize["referencedFrom"] = o.ReferencedFrom
	}
	if !IsNil(o.Part) {
		toSerialize["part"] = o.Part
	}
	return toSerialize, nil
}

type NullableOperationDefinitionParameter struct {
	value *OperationDefinitionParameter
	isSet bool
}

func (v NullableOperationDefinitionParameter) Get() *OperationDefinitionParameter {
	return v.value
}

func (v *NullableOperationDefinitionParameter) Set(val *OperationDefinitionParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationDefinitionParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationDefinitionParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationDefinitionParameter(val *OperationDefinitionParameter) *NullableOperationDefinitionParameter {
	return &NullableOperationDefinitionParameter{value: val, isSet: true}
}

func (v NullableOperationDefinitionParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationDefinitionParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


