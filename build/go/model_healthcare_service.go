/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HealthcareService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthcareService{}

// HealthcareService The details of a healthcare service available at a location.
type HealthcareService struct {
	// This is a HealthcareService resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// External identifiers for this item.
	Identifier []Identifier `json:"identifier,omitempty"`
	// Value of \"true\" or \"false\"
	Active *bool `json:"active,omitempty"`
	// The organization that provides this healthcare service.
	ProvidedBy *Reference `json:"providedBy,omitempty"`
	// Identifies the broad category of service being performed or delivered.
	Category []CodeableConcept `json:"category,omitempty"`
	// The specific type of service that may be delivered or performed.
	Type []CodeableConcept `json:"type,omitempty"`
	// Collection of specialties handled by the service site. This is more of a medical term.
	Specialty []CodeableConcept `json:"specialty,omitempty"`
	// The location(s) where this healthcare service may be provided.
	Location []Reference `json:"location,omitempty"`
	// A sequence of Unicode characters
	Name *string `json:"name,omitempty"`
	// A sequence of Unicode characters
	Comment *string `json:"comment,omitempty"`
	// A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
	ExtraDetails *string `json:"extraDetails,omitempty"`
	// If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
	Photo *Attachment `json:"photo,omitempty"`
	// List of contacts related to this specific healthcare service.
	Telecom []ContactPoint `json:"telecom,omitempty"`
	// The location(s) that this service is available to (not where the service is provided).
	CoverageArea []Reference `json:"coverageArea,omitempty"`
	// The code(s) that detail the conditions under which the healthcare service is available/offered.
	ServiceProvisionCode []CodeableConcept `json:"serviceProvisionCode,omitempty"`
	// Does this service have specific eligibility requirements that need to be met in order to use the service?
	Eligibility []HealthcareServiceEligibility `json:"eligibility,omitempty"`
	// Programs that this service is applicable to.
	Program []CodeableConcept `json:"program,omitempty"`
	// Collection of characteristics (attributes).
	Characteristic []CodeableConcept `json:"characteristic,omitempty"`
	// Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
	Communication []CodeableConcept `json:"communication,omitempty"`
	// Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
	ReferralMethod []CodeableConcept `json:"referralMethod,omitempty"`
	// Value of \"true\" or \"false\"
	AppointmentRequired *bool `json:"appointmentRequired,omitempty"`
	// A collection of times that the Service Site is available.
	AvailableTime []HealthcareServiceAvailableTime `json:"availableTime,omitempty"`
	// The HealthcareService is not available during this period of time due to the provided reason.
	NotAvailable []HealthcareServiceNotAvailable `json:"notAvailable,omitempty"`
	// A sequence of Unicode characters
	AvailabilityExceptions *string `json:"availabilityExceptions,omitempty"`
	// Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
	Endpoint []Reference `json:"endpoint,omitempty"`
}

type _HealthcareService HealthcareService

// NewHealthcareService instantiates a new HealthcareService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthcareService(resourceType string) *HealthcareService {
	this := HealthcareService{}
	this.ResourceType = resourceType
	return &this
}

// NewHealthcareServiceWithDefaults instantiates a new HealthcareService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthcareServiceWithDefaults() *HealthcareService {
	this := HealthcareService{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *HealthcareService) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *HealthcareService) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HealthcareService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HealthcareService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HealthcareService) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *HealthcareService) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *HealthcareService) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *HealthcareService) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *HealthcareService) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *HealthcareService) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *HealthcareService) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *HealthcareService) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *HealthcareService) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *HealthcareService) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HealthcareService) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HealthcareService) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *HealthcareService) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *HealthcareService) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *HealthcareService) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *HealthcareService) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *HealthcareService) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *HealthcareService) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *HealthcareService) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *HealthcareService) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *HealthcareService) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *HealthcareService) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *HealthcareService) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *HealthcareService) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *HealthcareService) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *HealthcareService) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *HealthcareService) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *HealthcareService) SetActive(v bool) {
	o.Active = &v
}

// GetProvidedBy returns the ProvidedBy field value if set, zero value otherwise.
func (o *HealthcareService) GetProvidedBy() Reference {
	if o == nil || IsNil(o.ProvidedBy) {
		var ret Reference
		return ret
	}
	return *o.ProvidedBy
}

// GetProvidedByOk returns a tuple with the ProvidedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetProvidedByOk() (*Reference, bool) {
	if o == nil || IsNil(o.ProvidedBy) {
		return nil, false
	}
	return o.ProvidedBy, true
}

// HasProvidedBy returns a boolean if a field has been set.
func (o *HealthcareService) HasProvidedBy() bool {
	if o != nil && !IsNil(o.ProvidedBy) {
		return true
	}

	return false
}

// SetProvidedBy gets a reference to the given Reference and assigns it to the ProvidedBy field.
func (o *HealthcareService) SetProvidedBy(v Reference) {
	o.ProvidedBy = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *HealthcareService) GetCategory() []CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret []CodeableConcept
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetCategoryOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *HealthcareService) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []CodeableConcept and assigns it to the Category field.
func (o *HealthcareService) SetCategory(v []CodeableConcept) {
	o.Category = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HealthcareService) GetType() []CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret []CodeableConcept
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetTypeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HealthcareService) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []CodeableConcept and assigns it to the Type field.
func (o *HealthcareService) SetType(v []CodeableConcept) {
	o.Type = v
}

// GetSpecialty returns the Specialty field value if set, zero value otherwise.
func (o *HealthcareService) GetSpecialty() []CodeableConcept {
	if o == nil || IsNil(o.Specialty) {
		var ret []CodeableConcept
		return ret
	}
	return o.Specialty
}

// GetSpecialtyOk returns a tuple with the Specialty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetSpecialtyOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Specialty) {
		return nil, false
	}
	return o.Specialty, true
}

// HasSpecialty returns a boolean if a field has been set.
func (o *HealthcareService) HasSpecialty() bool {
	if o != nil && !IsNil(o.Specialty) {
		return true
	}

	return false
}

// SetSpecialty gets a reference to the given []CodeableConcept and assigns it to the Specialty field.
func (o *HealthcareService) SetSpecialty(v []CodeableConcept) {
	o.Specialty = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *HealthcareService) GetLocation() []Reference {
	if o == nil || IsNil(o.Location) {
		var ret []Reference
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetLocationOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *HealthcareService) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []Reference and assigns it to the Location field.
func (o *HealthcareService) SetLocation(v []Reference) {
	o.Location = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HealthcareService) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HealthcareService) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HealthcareService) SetName(v string) {
	o.Name = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HealthcareService) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HealthcareService) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HealthcareService) SetComment(v string) {
	o.Comment = &v
}

// GetExtraDetails returns the ExtraDetails field value if set, zero value otherwise.
func (o *HealthcareService) GetExtraDetails() string {
	if o == nil || IsNil(o.ExtraDetails) {
		var ret string
		return ret
	}
	return *o.ExtraDetails
}

// GetExtraDetailsOk returns a tuple with the ExtraDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetExtraDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraDetails) {
		return nil, false
	}
	return o.ExtraDetails, true
}

// HasExtraDetails returns a boolean if a field has been set.
func (o *HealthcareService) HasExtraDetails() bool {
	if o != nil && !IsNil(o.ExtraDetails) {
		return true
	}

	return false
}

// SetExtraDetails gets a reference to the given string and assigns it to the ExtraDetails field.
func (o *HealthcareService) SetExtraDetails(v string) {
	o.ExtraDetails = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise.
func (o *HealthcareService) GetPhoto() Attachment {
	if o == nil || IsNil(o.Photo) {
		var ret Attachment
		return ret
	}
	return *o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetPhotoOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Photo) {
		return nil, false
	}
	return o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *HealthcareService) HasPhoto() bool {
	if o != nil && !IsNil(o.Photo) {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given Attachment and assigns it to the Photo field.
func (o *HealthcareService) SetPhoto(v Attachment) {
	o.Photo = &v
}

// GetTelecom returns the Telecom field value if set, zero value otherwise.
func (o *HealthcareService) GetTelecom() []ContactPoint {
	if o == nil || IsNil(o.Telecom) {
		var ret []ContactPoint
		return ret
	}
	return o.Telecom
}

// GetTelecomOk returns a tuple with the Telecom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetTelecomOk() ([]ContactPoint, bool) {
	if o == nil || IsNil(o.Telecom) {
		return nil, false
	}
	return o.Telecom, true
}

// HasTelecom returns a boolean if a field has been set.
func (o *HealthcareService) HasTelecom() bool {
	if o != nil && !IsNil(o.Telecom) {
		return true
	}

	return false
}

// SetTelecom gets a reference to the given []ContactPoint and assigns it to the Telecom field.
func (o *HealthcareService) SetTelecom(v []ContactPoint) {
	o.Telecom = v
}

// GetCoverageArea returns the CoverageArea field value if set, zero value otherwise.
func (o *HealthcareService) GetCoverageArea() []Reference {
	if o == nil || IsNil(o.CoverageArea) {
		var ret []Reference
		return ret
	}
	return o.CoverageArea
}

// GetCoverageAreaOk returns a tuple with the CoverageArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetCoverageAreaOk() ([]Reference, bool) {
	if o == nil || IsNil(o.CoverageArea) {
		return nil, false
	}
	return o.CoverageArea, true
}

// HasCoverageArea returns a boolean if a field has been set.
func (o *HealthcareService) HasCoverageArea() bool {
	if o != nil && !IsNil(o.CoverageArea) {
		return true
	}

	return false
}

// SetCoverageArea gets a reference to the given []Reference and assigns it to the CoverageArea field.
func (o *HealthcareService) SetCoverageArea(v []Reference) {
	o.CoverageArea = v
}

// GetServiceProvisionCode returns the ServiceProvisionCode field value if set, zero value otherwise.
func (o *HealthcareService) GetServiceProvisionCode() []CodeableConcept {
	if o == nil || IsNil(o.ServiceProvisionCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ServiceProvisionCode
}

// GetServiceProvisionCodeOk returns a tuple with the ServiceProvisionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetServiceProvisionCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ServiceProvisionCode) {
		return nil, false
	}
	return o.ServiceProvisionCode, true
}

// HasServiceProvisionCode returns a boolean if a field has been set.
func (o *HealthcareService) HasServiceProvisionCode() bool {
	if o != nil && !IsNil(o.ServiceProvisionCode) {
		return true
	}

	return false
}

// SetServiceProvisionCode gets a reference to the given []CodeableConcept and assigns it to the ServiceProvisionCode field.
func (o *HealthcareService) SetServiceProvisionCode(v []CodeableConcept) {
	o.ServiceProvisionCode = v
}

// GetEligibility returns the Eligibility field value if set, zero value otherwise.
func (o *HealthcareService) GetEligibility() []HealthcareServiceEligibility {
	if o == nil || IsNil(o.Eligibility) {
		var ret []HealthcareServiceEligibility
		return ret
	}
	return o.Eligibility
}

// GetEligibilityOk returns a tuple with the Eligibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetEligibilityOk() ([]HealthcareServiceEligibility, bool) {
	if o == nil || IsNil(o.Eligibility) {
		return nil, false
	}
	return o.Eligibility, true
}

// HasEligibility returns a boolean if a field has been set.
func (o *HealthcareService) HasEligibility() bool {
	if o != nil && !IsNil(o.Eligibility) {
		return true
	}

	return false
}

// SetEligibility gets a reference to the given []HealthcareServiceEligibility and assigns it to the Eligibility field.
func (o *HealthcareService) SetEligibility(v []HealthcareServiceEligibility) {
	o.Eligibility = v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *HealthcareService) GetProgram() []CodeableConcept {
	if o == nil || IsNil(o.Program) {
		var ret []CodeableConcept
		return ret
	}
	return o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetProgramOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *HealthcareService) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given []CodeableConcept and assigns it to the Program field.
func (o *HealthcareService) SetProgram(v []CodeableConcept) {
	o.Program = v
}

// GetCharacteristic returns the Characteristic field value if set, zero value otherwise.
func (o *HealthcareService) GetCharacteristic() []CodeableConcept {
	if o == nil || IsNil(o.Characteristic) {
		var ret []CodeableConcept
		return ret
	}
	return o.Characteristic
}

// GetCharacteristicOk returns a tuple with the Characteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetCharacteristicOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Characteristic) {
		return nil, false
	}
	return o.Characteristic, true
}

// HasCharacteristic returns a boolean if a field has been set.
func (o *HealthcareService) HasCharacteristic() bool {
	if o != nil && !IsNil(o.Characteristic) {
		return true
	}

	return false
}

// SetCharacteristic gets a reference to the given []CodeableConcept and assigns it to the Characteristic field.
func (o *HealthcareService) SetCharacteristic(v []CodeableConcept) {
	o.Characteristic = v
}

// GetCommunication returns the Communication field value if set, zero value otherwise.
func (o *HealthcareService) GetCommunication() []CodeableConcept {
	if o == nil || IsNil(o.Communication) {
		var ret []CodeableConcept
		return ret
	}
	return o.Communication
}

// GetCommunicationOk returns a tuple with the Communication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetCommunicationOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Communication) {
		return nil, false
	}
	return o.Communication, true
}

// HasCommunication returns a boolean if a field has been set.
func (o *HealthcareService) HasCommunication() bool {
	if o != nil && !IsNil(o.Communication) {
		return true
	}

	return false
}

// SetCommunication gets a reference to the given []CodeableConcept and assigns it to the Communication field.
func (o *HealthcareService) SetCommunication(v []CodeableConcept) {
	o.Communication = v
}

// GetReferralMethod returns the ReferralMethod field value if set, zero value otherwise.
func (o *HealthcareService) GetReferralMethod() []CodeableConcept {
	if o == nil || IsNil(o.ReferralMethod) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReferralMethod
}

// GetReferralMethodOk returns a tuple with the ReferralMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetReferralMethodOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReferralMethod) {
		return nil, false
	}
	return o.ReferralMethod, true
}

// HasReferralMethod returns a boolean if a field has been set.
func (o *HealthcareService) HasReferralMethod() bool {
	if o != nil && !IsNil(o.ReferralMethod) {
		return true
	}

	return false
}

// SetReferralMethod gets a reference to the given []CodeableConcept and assigns it to the ReferralMethod field.
func (o *HealthcareService) SetReferralMethod(v []CodeableConcept) {
	o.ReferralMethod = v
}

// GetAppointmentRequired returns the AppointmentRequired field value if set, zero value otherwise.
func (o *HealthcareService) GetAppointmentRequired() bool {
	if o == nil || IsNil(o.AppointmentRequired) {
		var ret bool
		return ret
	}
	return *o.AppointmentRequired
}

// GetAppointmentRequiredOk returns a tuple with the AppointmentRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetAppointmentRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.AppointmentRequired) {
		return nil, false
	}
	return o.AppointmentRequired, true
}

// HasAppointmentRequired returns a boolean if a field has been set.
func (o *HealthcareService) HasAppointmentRequired() bool {
	if o != nil && !IsNil(o.AppointmentRequired) {
		return true
	}

	return false
}

// SetAppointmentRequired gets a reference to the given bool and assigns it to the AppointmentRequired field.
func (o *HealthcareService) SetAppointmentRequired(v bool) {
	o.AppointmentRequired = &v
}

// GetAvailableTime returns the AvailableTime field value if set, zero value otherwise.
func (o *HealthcareService) GetAvailableTime() []HealthcareServiceAvailableTime {
	if o == nil || IsNil(o.AvailableTime) {
		var ret []HealthcareServiceAvailableTime
		return ret
	}
	return o.AvailableTime
}

// GetAvailableTimeOk returns a tuple with the AvailableTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetAvailableTimeOk() ([]HealthcareServiceAvailableTime, bool) {
	if o == nil || IsNil(o.AvailableTime) {
		return nil, false
	}
	return o.AvailableTime, true
}

// HasAvailableTime returns a boolean if a field has been set.
func (o *HealthcareService) HasAvailableTime() bool {
	if o != nil && !IsNil(o.AvailableTime) {
		return true
	}

	return false
}

// SetAvailableTime gets a reference to the given []HealthcareServiceAvailableTime and assigns it to the AvailableTime field.
func (o *HealthcareService) SetAvailableTime(v []HealthcareServiceAvailableTime) {
	o.AvailableTime = v
}

// GetNotAvailable returns the NotAvailable field value if set, zero value otherwise.
func (o *HealthcareService) GetNotAvailable() []HealthcareServiceNotAvailable {
	if o == nil || IsNil(o.NotAvailable) {
		var ret []HealthcareServiceNotAvailable
		return ret
	}
	return o.NotAvailable
}

// GetNotAvailableOk returns a tuple with the NotAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetNotAvailableOk() ([]HealthcareServiceNotAvailable, bool) {
	if o == nil || IsNil(o.NotAvailable) {
		return nil, false
	}
	return o.NotAvailable, true
}

// HasNotAvailable returns a boolean if a field has been set.
func (o *HealthcareService) HasNotAvailable() bool {
	if o != nil && !IsNil(o.NotAvailable) {
		return true
	}

	return false
}

// SetNotAvailable gets a reference to the given []HealthcareServiceNotAvailable and assigns it to the NotAvailable field.
func (o *HealthcareService) SetNotAvailable(v []HealthcareServiceNotAvailable) {
	o.NotAvailable = v
}

// GetAvailabilityExceptions returns the AvailabilityExceptions field value if set, zero value otherwise.
func (o *HealthcareService) GetAvailabilityExceptions() string {
	if o == nil || IsNil(o.AvailabilityExceptions) {
		var ret string
		return ret
	}
	return *o.AvailabilityExceptions
}

// GetAvailabilityExceptionsOk returns a tuple with the AvailabilityExceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetAvailabilityExceptionsOk() (*string, bool) {
	if o == nil || IsNil(o.AvailabilityExceptions) {
		return nil, false
	}
	return o.AvailabilityExceptions, true
}

// HasAvailabilityExceptions returns a boolean if a field has been set.
func (o *HealthcareService) HasAvailabilityExceptions() bool {
	if o != nil && !IsNil(o.AvailabilityExceptions) {
		return true
	}

	return false
}

// SetAvailabilityExceptions gets a reference to the given string and assigns it to the AvailabilityExceptions field.
func (o *HealthcareService) SetAvailabilityExceptions(v string) {
	o.AvailabilityExceptions = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *HealthcareService) GetEndpoint() []Reference {
	if o == nil || IsNil(o.Endpoint) {
		var ret []Reference
		return ret
	}
	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthcareService) GetEndpointOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *HealthcareService) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given []Reference and assigns it to the Endpoint field.
func (o *HealthcareService) SetEndpoint(v []Reference) {
	o.Endpoint = v
}

func (o HealthcareService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthcareService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ProvidedBy) {
		toSerialize["providedBy"] = o.ProvidedBy
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Specialty) {
		toSerialize["specialty"] = o.Specialty
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ExtraDetails) {
		toSerialize["extraDetails"] = o.ExtraDetails
	}
	if !IsNil(o.Photo) {
		toSerialize["photo"] = o.Photo
	}
	if !IsNil(o.Telecom) {
		toSerialize["telecom"] = o.Telecom
	}
	if !IsNil(o.CoverageArea) {
		toSerialize["coverageArea"] = o.CoverageArea
	}
	if !IsNil(o.ServiceProvisionCode) {
		toSerialize["serviceProvisionCode"] = o.ServiceProvisionCode
	}
	if !IsNil(o.Eligibility) {
		toSerialize["eligibility"] = o.Eligibility
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.Characteristic) {
		toSerialize["characteristic"] = o.Characteristic
	}
	if !IsNil(o.Communication) {
		toSerialize["communication"] = o.Communication
	}
	if !IsNil(o.ReferralMethod) {
		toSerialize["referralMethod"] = o.ReferralMethod
	}
	if !IsNil(o.AppointmentRequired) {
		toSerialize["appointmentRequired"] = o.AppointmentRequired
	}
	if !IsNil(o.AvailableTime) {
		toSerialize["availableTime"] = o.AvailableTime
	}
	if !IsNil(o.NotAvailable) {
		toSerialize["notAvailable"] = o.NotAvailable
	}
	if !IsNil(o.AvailabilityExceptions) {
		toSerialize["availabilityExceptions"] = o.AvailabilityExceptions
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	return toSerialize, nil
}

func (o *HealthcareService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthcareService := _HealthcareService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHealthcareService)

	if err != nil {
		return err
	}

	*o = HealthcareService(varHealthcareService)

	return err
}

type NullableHealthcareService struct {
	value *HealthcareService
	isSet bool
}

func (v NullableHealthcareService) Get() *HealthcareService {
	return v.value
}

func (v *NullableHealthcareService) Set(val *HealthcareService) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthcareService) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthcareService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthcareService(val *HealthcareService) *NullableHealthcareService {
	return &NullableHealthcareService{value: val, isSet: true}
}

func (v NullableHealthcareService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthcareService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


