/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessPolicyResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPolicyResource{}

// AccessPolicyResource Access details for a resource type.
type AccessPolicyResource struct {
	// A sequence of Unicode characters
	ResourceType string `json:"resourceType"`
	// DEPRECATED Optional compartment restriction for the resource type.
	Compartment *Reference `json:"compartment,omitempty"`
	// A sequence of Unicode characters
	Criteria *string `json:"criteria,omitempty"`
	// Value of \"true\" or \"false\"
	Readonly *bool `json:"readonly,omitempty"`
	// Optional list of hidden fields.  Hidden fields are not readable or writeable.
	HiddenFields []string `json:"hiddenFields,omitempty"`
	// Optional list of read-only fields.  Read-only fields are readable but not writeable.
	ReadonlyFields []string `json:"readonlyFields,omitempty"`
	// Invariants that must be satisfied for the resource to be written.  Can include %before and %after placeholders to refer to the resource before and after the updates are applied.
	WriteConstraint []Expression `json:"writeConstraint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessPolicyResource AccessPolicyResource

// NewAccessPolicyResource instantiates a new AccessPolicyResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPolicyResource(resourceType string) *AccessPolicyResource {
	this := AccessPolicyResource{}
	this.ResourceType = resourceType
	return &this
}

// NewAccessPolicyResourceWithDefaults instantiates a new AccessPolicyResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPolicyResourceWithDefaults() *AccessPolicyResource {
	this := AccessPolicyResource{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *AccessPolicyResource) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *AccessPolicyResource) SetResourceType(v string) {
	o.ResourceType = v
}

// GetCompartment returns the Compartment field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetCompartment() Reference {
	if o == nil || IsNil(o.Compartment) {
		var ret Reference
		return ret
	}
	return *o.Compartment
}

// GetCompartmentOk returns a tuple with the Compartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetCompartmentOk() (*Reference, bool) {
	if o == nil || IsNil(o.Compartment) {
		return nil, false
	}
	return o.Compartment, true
}

// HasCompartment returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasCompartment() bool {
	if o != nil && !IsNil(o.Compartment) {
		return true
	}

	return false
}

// SetCompartment gets a reference to the given Reference and assigns it to the Compartment field.
func (o *AccessPolicyResource) SetCompartment(v Reference) {
	o.Compartment = &v
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetCriteria() string {
	if o == nil || IsNil(o.Criteria) {
		var ret string
		return ret
	}
	return *o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given string and assigns it to the Criteria field.
func (o *AccessPolicyResource) SetCriteria(v string) {
	o.Criteria = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *AccessPolicyResource) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetHiddenFields returns the HiddenFields field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetHiddenFields() []string {
	if o == nil || IsNil(o.HiddenFields) {
		var ret []string
		return ret
	}
	return o.HiddenFields
}

// GetHiddenFieldsOk returns a tuple with the HiddenFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetHiddenFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.HiddenFields) {
		return nil, false
	}
	return o.HiddenFields, true
}

// HasHiddenFields returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasHiddenFields() bool {
	if o != nil && !IsNil(o.HiddenFields) {
		return true
	}

	return false
}

// SetHiddenFields gets a reference to the given []string and assigns it to the HiddenFields field.
func (o *AccessPolicyResource) SetHiddenFields(v []string) {
	o.HiddenFields = v
}

// GetReadonlyFields returns the ReadonlyFields field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetReadonlyFields() []string {
	if o == nil || IsNil(o.ReadonlyFields) {
		var ret []string
		return ret
	}
	return o.ReadonlyFields
}

// GetReadonlyFieldsOk returns a tuple with the ReadonlyFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetReadonlyFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReadonlyFields) {
		return nil, false
	}
	return o.ReadonlyFields, true
}

// HasReadonlyFields returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasReadonlyFields() bool {
	if o != nil && !IsNil(o.ReadonlyFields) {
		return true
	}

	return false
}

// SetReadonlyFields gets a reference to the given []string and assigns it to the ReadonlyFields field.
func (o *AccessPolicyResource) SetReadonlyFields(v []string) {
	o.ReadonlyFields = v
}

// GetWriteConstraint returns the WriteConstraint field value if set, zero value otherwise.
func (o *AccessPolicyResource) GetWriteConstraint() []Expression {
	if o == nil || IsNil(o.WriteConstraint) {
		var ret []Expression
		return ret
	}
	return o.WriteConstraint
}

// GetWriteConstraintOk returns a tuple with the WriteConstraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPolicyResource) GetWriteConstraintOk() ([]Expression, bool) {
	if o == nil || IsNil(o.WriteConstraint) {
		return nil, false
	}
	return o.WriteConstraint, true
}

// HasWriteConstraint returns a boolean if a field has been set.
func (o *AccessPolicyResource) HasWriteConstraint() bool {
	if o != nil && !IsNil(o.WriteConstraint) {
		return true
	}

	return false
}

// SetWriteConstraint gets a reference to the given []Expression and assigns it to the WriteConstraint field.
func (o *AccessPolicyResource) SetWriteConstraint(v []Expression) {
	o.WriteConstraint = v
}

func (o AccessPolicyResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPolicyResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Compartment) {
		toSerialize["compartment"] = o.Compartment
	}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.HiddenFields) {
		toSerialize["hiddenFields"] = o.HiddenFields
	}
	if !IsNil(o.ReadonlyFields) {
		toSerialize["readonlyFields"] = o.ReadonlyFields
	}
	if !IsNil(o.WriteConstraint) {
		toSerialize["writeConstraint"] = o.WriteConstraint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessPolicyResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessPolicyResource := _AccessPolicyResource{}

	err = json.Unmarshal(data, &varAccessPolicyResource)

	if err != nil {
		return err
	}

	*o = AccessPolicyResource(varAccessPolicyResource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceType")
		delete(additionalProperties, "compartment")
		delete(additionalProperties, "criteria")
		delete(additionalProperties, "readonly")
		delete(additionalProperties, "hiddenFields")
		delete(additionalProperties, "readonlyFields")
		delete(additionalProperties, "writeConstraint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessPolicyResource struct {
	value *AccessPolicyResource
	isSet bool
}

func (v NullableAccessPolicyResource) Get() *AccessPolicyResource {
	return v.value
}

func (v *NullableAccessPolicyResource) Set(val *AccessPolicyResource) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPolicyResource) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPolicyResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPolicyResource(val *AccessPolicyResource) *NullableAccessPolicyResource {
	return &NullableAccessPolicyResource{value: val, isSet: true}
}

func (v NullableAccessPolicyResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPolicyResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


