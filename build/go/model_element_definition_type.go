/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ElementDefinitionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElementDefinitionType{}

// ElementDefinitionType Captures constraints on each element within the resource, profile, or extension.
type ElementDefinitionType struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// String of characters used to identify a name or a resource
	Code *string `json:"code,omitempty"`
	// Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
	Profile []string `json:"profile,omitempty"`
	// Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
	TargetProfile []string `json:"targetProfile,omitempty"`
	// If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
	Aggregation []string `json:"aggregation,omitempty"`
	// Whether this reference needs to be version specific or version independent, or whether either can be used.
	Versioning *string `json:"versioning,omitempty"`
}

// NewElementDefinitionType instantiates a new ElementDefinitionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementDefinitionType() *ElementDefinitionType {
	this := ElementDefinitionType{}
	return &this
}

// NewElementDefinitionTypeWithDefaults instantiates a new ElementDefinitionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementDefinitionTypeWithDefaults() *ElementDefinitionType {
	this := ElementDefinitionType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ElementDefinitionType) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ElementDefinitionType) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ElementDefinitionType) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ElementDefinitionType) SetCode(v string) {
	o.Code = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetProfile() []string {
	if o == nil || IsNil(o.Profile) {
		var ret []string
		return ret
	}
	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given []string and assigns it to the Profile field.
func (o *ElementDefinitionType) SetProfile(v []string) {
	o.Profile = v
}

// GetTargetProfile returns the TargetProfile field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetTargetProfile() []string {
	if o == nil || IsNil(o.TargetProfile) {
		var ret []string
		return ret
	}
	return o.TargetProfile
}

// GetTargetProfileOk returns a tuple with the TargetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetTargetProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetProfile) {
		return nil, false
	}
	return o.TargetProfile, true
}

// HasTargetProfile returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasTargetProfile() bool {
	if o != nil && !IsNil(o.TargetProfile) {
		return true
	}

	return false
}

// SetTargetProfile gets a reference to the given []string and assigns it to the TargetProfile field.
func (o *ElementDefinitionType) SetTargetProfile(v []string) {
	o.TargetProfile = v
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetAggregation() []string {
	if o == nil || IsNil(o.Aggregation) {
		var ret []string
		return ret
	}
	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetAggregationOk() ([]string, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given []string and assigns it to the Aggregation field.
func (o *ElementDefinitionType) SetAggregation(v []string) {
	o.Aggregation = v
}

// GetVersioning returns the Versioning field value if set, zero value otherwise.
func (o *ElementDefinitionType) GetVersioning() string {
	if o == nil || IsNil(o.Versioning) {
		var ret string
		return ret
	}
	return *o.Versioning
}

// GetVersioningOk returns a tuple with the Versioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementDefinitionType) GetVersioningOk() (*string, bool) {
	if o == nil || IsNil(o.Versioning) {
		return nil, false
	}
	return o.Versioning, true
}

// HasVersioning returns a boolean if a field has been set.
func (o *ElementDefinitionType) HasVersioning() bool {
	if o != nil && !IsNil(o.Versioning) {
		return true
	}

	return false
}

// SetVersioning gets a reference to the given string and assigns it to the Versioning field.
func (o *ElementDefinitionType) SetVersioning(v string) {
	o.Versioning = &v
}

func (o ElementDefinitionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementDefinitionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.TargetProfile) {
		toSerialize["targetProfile"] = o.TargetProfile
	}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.Versioning) {
		toSerialize["versioning"] = o.Versioning
	}
	return toSerialize, nil
}

type NullableElementDefinitionType struct {
	value *ElementDefinitionType
	isSet bool
}

func (v NullableElementDefinitionType) Get() *ElementDefinitionType {
	return v.value
}

func (v *NullableElementDefinitionType) Set(val *ElementDefinitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableElementDefinitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableElementDefinitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementDefinitionType(val *ElementDefinitionType) *NullableElementDefinitionType {
	return &NullableElementDefinitionType{value: val, isSet: true}
}

func (v NullableElementDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementDefinitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


