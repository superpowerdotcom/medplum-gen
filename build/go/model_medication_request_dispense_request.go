/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the MedicationRequestDispenseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MedicationRequestDispenseRequest{}

// MedicationRequestDispenseRequest An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type MedicationRequestDispenseRequest struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Indicates the quantity or duration for the first dispense of the medication.
	InitialFill *MedicationRequestInitialFill `json:"initialFill,omitempty"`
	// The minimum period of time that must occur between dispenses of the medication.
	DispenseInterval *Duration `json:"dispenseInterval,omitempty"`
	// This indicates the validity period of a prescription (stale dating the Prescription).
	ValidityPeriod *Period `json:"validityPeriod,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	NumberOfRepeatsAllowed *float32 `json:"numberOfRepeatsAllowed,omitempty"`
	// The amount that is to be dispensed for one fill.
	Quantity *Quantity `json:"quantity,omitempty"`
	// Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
	ExpectedSupplyDuration *Duration `json:"expectedSupplyDuration,omitempty"`
	// Indicates the intended dispensing Organization specified by the prescriber.
	Performer *Reference `json:"performer,omitempty"`
}

// NewMedicationRequestDispenseRequest instantiates a new MedicationRequestDispenseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicationRequestDispenseRequest() *MedicationRequestDispenseRequest {
	this := MedicationRequestDispenseRequest{}
	return &this
}

// NewMedicationRequestDispenseRequestWithDefaults instantiates a new MedicationRequestDispenseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicationRequestDispenseRequestWithDefaults() *MedicationRequestDispenseRequest {
	this := MedicationRequestDispenseRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MedicationRequestDispenseRequest) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *MedicationRequestDispenseRequest) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *MedicationRequestDispenseRequest) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetInitialFill returns the InitialFill field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetInitialFill() MedicationRequestInitialFill {
	if o == nil || IsNil(o.InitialFill) {
		var ret MedicationRequestInitialFill
		return ret
	}
	return *o.InitialFill
}

// GetInitialFillOk returns a tuple with the InitialFill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetInitialFillOk() (*MedicationRequestInitialFill, bool) {
	if o == nil || IsNil(o.InitialFill) {
		return nil, false
	}
	return o.InitialFill, true
}

// HasInitialFill returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasInitialFill() bool {
	if o != nil && !IsNil(o.InitialFill) {
		return true
	}

	return false
}

// SetInitialFill gets a reference to the given MedicationRequestInitialFill and assigns it to the InitialFill field.
func (o *MedicationRequestDispenseRequest) SetInitialFill(v MedicationRequestInitialFill) {
	o.InitialFill = &v
}

// GetDispenseInterval returns the DispenseInterval field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetDispenseInterval() Duration {
	if o == nil || IsNil(o.DispenseInterval) {
		var ret Duration
		return ret
	}
	return *o.DispenseInterval
}

// GetDispenseIntervalOk returns a tuple with the DispenseInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetDispenseIntervalOk() (*Duration, bool) {
	if o == nil || IsNil(o.DispenseInterval) {
		return nil, false
	}
	return o.DispenseInterval, true
}

// HasDispenseInterval returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasDispenseInterval() bool {
	if o != nil && !IsNil(o.DispenseInterval) {
		return true
	}

	return false
}

// SetDispenseInterval gets a reference to the given Duration and assigns it to the DispenseInterval field.
func (o *MedicationRequestDispenseRequest) SetDispenseInterval(v Duration) {
	o.DispenseInterval = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetValidityPeriod() Period {
	if o == nil || IsNil(o.ValidityPeriod) {
		var ret Period
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetValidityPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasValidityPeriod() bool {
	if o != nil && !IsNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given Period and assigns it to the ValidityPeriod field.
func (o *MedicationRequestDispenseRequest) SetValidityPeriod(v Period) {
	o.ValidityPeriod = &v
}

// GetNumberOfRepeatsAllowed returns the NumberOfRepeatsAllowed field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetNumberOfRepeatsAllowed() float32 {
	if o == nil || IsNil(o.NumberOfRepeatsAllowed) {
		var ret float32
		return ret
	}
	return *o.NumberOfRepeatsAllowed
}

// GetNumberOfRepeatsAllowedOk returns a tuple with the NumberOfRepeatsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetNumberOfRepeatsAllowedOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfRepeatsAllowed) {
		return nil, false
	}
	return o.NumberOfRepeatsAllowed, true
}

// HasNumberOfRepeatsAllowed returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasNumberOfRepeatsAllowed() bool {
	if o != nil && !IsNil(o.NumberOfRepeatsAllowed) {
		return true
	}

	return false
}

// SetNumberOfRepeatsAllowed gets a reference to the given float32 and assigns it to the NumberOfRepeatsAllowed field.
func (o *MedicationRequestDispenseRequest) SetNumberOfRepeatsAllowed(v float32) {
	o.NumberOfRepeatsAllowed = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetQuantity() Quantity {
	if o == nil || IsNil(o.Quantity) {
		var ret Quantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given Quantity and assigns it to the Quantity field.
func (o *MedicationRequestDispenseRequest) SetQuantity(v Quantity) {
	o.Quantity = &v
}

// GetExpectedSupplyDuration returns the ExpectedSupplyDuration field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetExpectedSupplyDuration() Duration {
	if o == nil || IsNil(o.ExpectedSupplyDuration) {
		var ret Duration
		return ret
	}
	return *o.ExpectedSupplyDuration
}

// GetExpectedSupplyDurationOk returns a tuple with the ExpectedSupplyDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetExpectedSupplyDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.ExpectedSupplyDuration) {
		return nil, false
	}
	return o.ExpectedSupplyDuration, true
}

// HasExpectedSupplyDuration returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasExpectedSupplyDuration() bool {
	if o != nil && !IsNil(o.ExpectedSupplyDuration) {
		return true
	}

	return false
}

// SetExpectedSupplyDuration gets a reference to the given Duration and assigns it to the ExpectedSupplyDuration field.
func (o *MedicationRequestDispenseRequest) SetExpectedSupplyDuration(v Duration) {
	o.ExpectedSupplyDuration = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *MedicationRequestDispenseRequest) GetPerformer() Reference {
	if o == nil || IsNil(o.Performer) {
		var ret Reference
		return ret
	}
	return *o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MedicationRequestDispenseRequest) GetPerformerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *MedicationRequestDispenseRequest) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given Reference and assigns it to the Performer field.
func (o *MedicationRequestDispenseRequest) SetPerformer(v Reference) {
	o.Performer = &v
}

func (o MedicationRequestDispenseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MedicationRequestDispenseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.InitialFill) {
		toSerialize["initialFill"] = o.InitialFill
	}
	if !IsNil(o.DispenseInterval) {
		toSerialize["dispenseInterval"] = o.DispenseInterval
	}
	if !IsNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	if !IsNil(o.NumberOfRepeatsAllowed) {
		toSerialize["numberOfRepeatsAllowed"] = o.NumberOfRepeatsAllowed
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ExpectedSupplyDuration) {
		toSerialize["expectedSupplyDuration"] = o.ExpectedSupplyDuration
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	return toSerialize, nil
}

type NullableMedicationRequestDispenseRequest struct {
	value *MedicationRequestDispenseRequest
	isSet bool
}

func (v NullableMedicationRequestDispenseRequest) Get() *MedicationRequestDispenseRequest {
	return v.value
}

func (v *NullableMedicationRequestDispenseRequest) Set(val *MedicationRequestDispenseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicationRequestDispenseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicationRequestDispenseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicationRequestDispenseRequest(val *MedicationRequestDispenseRequest) *NullableMedicationRequestDispenseRequest {
	return &NullableMedicationRequestDispenseRequest{value: val, isSet: true}
}

func (v NullableMedicationRequestDispenseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicationRequestDispenseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


