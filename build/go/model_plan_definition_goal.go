/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanDefinitionGoal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDefinitionGoal{}

// PlanDefinitionGoal This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
type PlanDefinitionGoal struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Indicates a category the goal falls within.
	Category *CodeableConcept `json:"category,omitempty"`
	// Human-readable and/or coded description of a specific desired objective of care, such as \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at wedding\".
	Description CodeableConcept `json:"description"`
	// Identifies the expected level of importance associated with reaching/sustaining the defined goal.
	Priority *CodeableConcept `json:"priority,omitempty"`
	// The event after which the goal should begin being pursued.
	Start *CodeableConcept `json:"start,omitempty"`
	// Identifies problems, conditions, issues, or concerns the goal is intended to address.
	Addresses []CodeableConcept `json:"addresses,omitempty"`
	// Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
	Documentation []RelatedArtifact `json:"documentation,omitempty"`
	// Indicates what should be done and within what timeframe.
	Target []PlanDefinitionTarget `json:"target,omitempty"`
}

type _PlanDefinitionGoal PlanDefinitionGoal

// NewPlanDefinitionGoal instantiates a new PlanDefinitionGoal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDefinitionGoal(description CodeableConcept) *PlanDefinitionGoal {
	this := PlanDefinitionGoal{}
	this.Description = description
	return &this
}

// NewPlanDefinitionGoalWithDefaults instantiates a new PlanDefinitionGoal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDefinitionGoalWithDefaults() *PlanDefinitionGoal {
	this := PlanDefinitionGoal{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanDefinitionGoal) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *PlanDefinitionGoal) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *PlanDefinitionGoal) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetCategory() CodeableConcept {
	if o == nil || IsNil(o.Category) {
		var ret CodeableConcept
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetCategoryOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given CodeableConcept and assigns it to the Category field.
func (o *PlanDefinitionGoal) SetCategory(v CodeableConcept) {
	o.Category = &v
}

// GetDescription returns the Description field value
func (o *PlanDefinitionGoal) GetDescription() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetDescriptionOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PlanDefinitionGoal) SetDescription(v CodeableConcept) {
	o.Description = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetPriority() CodeableConcept {
	if o == nil || IsNil(o.Priority) {
		var ret CodeableConcept
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetPriorityOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given CodeableConcept and assigns it to the Priority field.
func (o *PlanDefinitionGoal) SetPriority(v CodeableConcept) {
	o.Priority = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetStart() CodeableConcept {
	if o == nil || IsNil(o.Start) {
		var ret CodeableConcept
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetStartOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given CodeableConcept and assigns it to the Start field.
func (o *PlanDefinitionGoal) SetStart(v CodeableConcept) {
	o.Start = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetAddresses() []CodeableConcept {
	if o == nil || IsNil(o.Addresses) {
		var ret []CodeableConcept
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetAddressesOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []CodeableConcept and assigns it to the Addresses field.
func (o *PlanDefinitionGoal) SetAddresses(v []CodeableConcept) {
	o.Addresses = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetDocumentation() []RelatedArtifact {
	if o == nil || IsNil(o.Documentation) {
		var ret []RelatedArtifact
		return ret
	}
	return o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetDocumentationOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given []RelatedArtifact and assigns it to the Documentation field.
func (o *PlanDefinitionGoal) SetDocumentation(v []RelatedArtifact) {
	o.Documentation = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *PlanDefinitionGoal) GetTarget() []PlanDefinitionTarget {
	if o == nil || IsNil(o.Target) {
		var ret []PlanDefinitionTarget
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionGoal) GetTargetOk() ([]PlanDefinitionTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *PlanDefinitionGoal) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given []PlanDefinitionTarget and assigns it to the Target field.
func (o *PlanDefinitionGoal) SetTarget(v []PlanDefinitionTarget) {
	o.Target = v
}

func (o PlanDefinitionGoal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDefinitionGoal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

func (o *PlanDefinitionGoal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanDefinitionGoal := _PlanDefinitionGoal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanDefinitionGoal)

	if err != nil {
		return err
	}

	*o = PlanDefinitionGoal(varPlanDefinitionGoal)

	return err
}

type NullablePlanDefinitionGoal struct {
	value *PlanDefinitionGoal
	isSet bool
}

func (v NullablePlanDefinitionGoal) Get() *PlanDefinitionGoal {
	return v.value
}

func (v *NullablePlanDefinitionGoal) Set(val *PlanDefinitionGoal) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDefinitionGoal) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDefinitionGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDefinitionGoal(val *PlanDefinitionGoal) *NullablePlanDefinitionGoal {
	return &NullablePlanDefinitionGoal{value: val, isSet: true}
}

func (v NullablePlanDefinitionGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDefinitionGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


