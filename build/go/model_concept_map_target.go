/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ConceptMapTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConceptMapTarget{}

// ConceptMapTarget A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
type ConceptMapTarget struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Code *string `json:"code,omitempty"`
	// A sequence of Unicode characters
	Display *string `json:"display,omitempty"`
	// The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
	Equivalence *string `json:"equivalence,omitempty"`
	// A sequence of Unicode characters
	Comment *string `json:"comment,omitempty"`
	// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
	DependsOn []ConceptMapDependsOn `json:"dependsOn,omitempty"`
	// A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
	Product []ConceptMapDependsOn `json:"product,omitempty"`
}

// NewConceptMapTarget instantiates a new ConceptMapTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConceptMapTarget() *ConceptMapTarget {
	this := ConceptMapTarget{}
	return &this
}

// NewConceptMapTargetWithDefaults instantiates a new ConceptMapTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConceptMapTargetWithDefaults() *ConceptMapTarget {
	this := ConceptMapTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConceptMapTarget) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ConceptMapTarget) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ConceptMapTarget) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ConceptMapTarget) SetCode(v string) {
	o.Code = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *ConceptMapTarget) SetDisplay(v string) {
	o.Display = &v
}

// GetEquivalence returns the Equivalence field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetEquivalence() string {
	if o == nil || IsNil(o.Equivalence) {
		var ret string
		return ret
	}
	return *o.Equivalence
}

// GetEquivalenceOk returns a tuple with the Equivalence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetEquivalenceOk() (*string, bool) {
	if o == nil || IsNil(o.Equivalence) {
		return nil, false
	}
	return o.Equivalence, true
}

// HasEquivalence returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasEquivalence() bool {
	if o != nil && !IsNil(o.Equivalence) {
		return true
	}

	return false
}

// SetEquivalence gets a reference to the given string and assigns it to the Equivalence field.
func (o *ConceptMapTarget) SetEquivalence(v string) {
	o.Equivalence = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConceptMapTarget) SetComment(v string) {
	o.Comment = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetDependsOn() []ConceptMapDependsOn {
	if o == nil || IsNil(o.DependsOn) {
		var ret []ConceptMapDependsOn
		return ret
	}
	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetDependsOnOk() ([]ConceptMapDependsOn, bool) {
	if o == nil || IsNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasDependsOn() bool {
	if o != nil && !IsNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []ConceptMapDependsOn and assigns it to the DependsOn field.
func (o *ConceptMapTarget) SetDependsOn(v []ConceptMapDependsOn) {
	o.DependsOn = v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ConceptMapTarget) GetProduct() []ConceptMapDependsOn {
	if o == nil || IsNil(o.Product) {
		var ret []ConceptMapDependsOn
		return ret
	}
	return o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConceptMapTarget) GetProductOk() ([]ConceptMapDependsOn, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ConceptMapTarget) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given []ConceptMapDependsOn and assigns it to the Product field.
func (o *ConceptMapTarget) SetProduct(v []ConceptMapDependsOn) {
	o.Product = v
}

func (o ConceptMapTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConceptMapTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Equivalence) {
		toSerialize["equivalence"] = o.Equivalence
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DependsOn) {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableConceptMapTarget struct {
	value *ConceptMapTarget
	isSet bool
}

func (v NullableConceptMapTarget) Get() *ConceptMapTarget {
	return v.value
}

func (v *NullableConceptMapTarget) Set(val *ConceptMapTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableConceptMapTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableConceptMapTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConceptMapTarget(val *ConceptMapTarget) *NullableConceptMapTarget {
	return &NullableConceptMapTarget{value: val, isSet: true}
}

func (v NullableConceptMapTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConceptMapTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


