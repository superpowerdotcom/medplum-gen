/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EpisodeOfCareDiagnosis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EpisodeOfCareDiagnosis{}

// EpisodeOfCareDiagnosis An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
type EpisodeOfCareDiagnosis struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
	Condition Reference `json:"condition"`
	// Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge â€¦).
	Role *CodeableConcept `json:"role,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Rank *float32 `json:"rank,omitempty"`
}

type _EpisodeOfCareDiagnosis EpisodeOfCareDiagnosis

// NewEpisodeOfCareDiagnosis instantiates a new EpisodeOfCareDiagnosis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpisodeOfCareDiagnosis(condition Reference) *EpisodeOfCareDiagnosis {
	this := EpisodeOfCareDiagnosis{}
	this.Condition = condition
	return &this
}

// NewEpisodeOfCareDiagnosisWithDefaults instantiates a new EpisodeOfCareDiagnosis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpisodeOfCareDiagnosisWithDefaults() *EpisodeOfCareDiagnosis {
	this := EpisodeOfCareDiagnosis{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EpisodeOfCareDiagnosis) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EpisodeOfCareDiagnosis) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EpisodeOfCareDiagnosis) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *EpisodeOfCareDiagnosis) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *EpisodeOfCareDiagnosis) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *EpisodeOfCareDiagnosis) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *EpisodeOfCareDiagnosis) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *EpisodeOfCareDiagnosis) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *EpisodeOfCareDiagnosis) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCondition returns the Condition field value
func (o *EpisodeOfCareDiagnosis) GetCondition() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetConditionOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *EpisodeOfCareDiagnosis) SetCondition(v Reference) {
	o.Condition = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *EpisodeOfCareDiagnosis) GetRole() CodeableConcept {
	if o == nil || IsNil(o.Role) {
		var ret CodeableConcept
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetRoleOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *EpisodeOfCareDiagnosis) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given CodeableConcept and assigns it to the Role field.
func (o *EpisodeOfCareDiagnosis) SetRole(v CodeableConcept) {
	o.Role = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *EpisodeOfCareDiagnosis) GetRank() float32 {
	if o == nil || IsNil(o.Rank) {
		var ret float32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeOfCareDiagnosis) GetRankOk() (*float32, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *EpisodeOfCareDiagnosis) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given float32 and assigns it to the Rank field.
func (o *EpisodeOfCareDiagnosis) SetRank(v float32) {
	o.Rank = &v
}

func (o EpisodeOfCareDiagnosis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EpisodeOfCareDiagnosis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["condition"] = o.Condition
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	return toSerialize, nil
}

func (o *EpisodeOfCareDiagnosis) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEpisodeOfCareDiagnosis := _EpisodeOfCareDiagnosis{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEpisodeOfCareDiagnosis)

	if err != nil {
		return err
	}

	*o = EpisodeOfCareDiagnosis(varEpisodeOfCareDiagnosis)

	return err
}

type NullableEpisodeOfCareDiagnosis struct {
	value *EpisodeOfCareDiagnosis
	isSet bool
}

func (v NullableEpisodeOfCareDiagnosis) Get() *EpisodeOfCareDiagnosis {
	return v.value
}

func (v *NullableEpisodeOfCareDiagnosis) Set(val *EpisodeOfCareDiagnosis) {
	v.value = val
	v.isSet = true
}

func (v NullableEpisodeOfCareDiagnosis) IsSet() bool {
	return v.isSet
}

func (v *NullableEpisodeOfCareDiagnosis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpisodeOfCareDiagnosis(val *EpisodeOfCareDiagnosis) *NullableEpisodeOfCareDiagnosis {
	return &NullableEpisodeOfCareDiagnosis{value: val, isSet: true}
}

func (v NullableEpisodeOfCareDiagnosis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpisodeOfCareDiagnosis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


