/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the SubstanceSourceMaterialOrganism type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstanceSourceMaterialOrganism{}

// SubstanceSourceMaterialOrganism Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterialOrganism struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The family of an organism shall be specified.
	Family *CodeableConcept `json:"family,omitempty"`
	// The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
	Genus *CodeableConcept `json:"genus,omitempty"`
	// The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
	Species *CodeableConcept `json:"species,omitempty"`
	// The Intraspecific type of an organism shall be specified.
	IntraspecificType *CodeableConcept `json:"intraspecificType,omitempty"`
	// A sequence of Unicode characters
	IntraspecificDescription *string `json:"intraspecificDescription,omitempty"`
	// 4.9.13.6.1 Author type (Conditional).
	Author []SubstanceSourceMaterialAuthor `json:"author,omitempty"`
	// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
	Hybrid *SubstanceSourceMaterialHybrid `json:"hybrid,omitempty"`
	// 4.9.13.7.1 Kingdom (Conditional).
	OrganismGeneral *SubstanceSourceMaterialOrganismGeneral `json:"organismGeneral,omitempty"`
}

// NewSubstanceSourceMaterialOrganism instantiates a new SubstanceSourceMaterialOrganism object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstanceSourceMaterialOrganism() *SubstanceSourceMaterialOrganism {
	this := SubstanceSourceMaterialOrganism{}
	return &this
}

// NewSubstanceSourceMaterialOrganismWithDefaults instantiates a new SubstanceSourceMaterialOrganism object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstanceSourceMaterialOrganismWithDefaults() *SubstanceSourceMaterialOrganism {
	this := SubstanceSourceMaterialOrganism{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubstanceSourceMaterialOrganism) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *SubstanceSourceMaterialOrganism) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *SubstanceSourceMaterialOrganism) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetFamily() CodeableConcept {
	if o == nil || IsNil(o.Family) {
		var ret CodeableConcept
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetFamilyOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Family) {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasFamily() bool {
	if o != nil && !IsNil(o.Family) {
		return true
	}

	return false
}

// SetFamily gets a reference to the given CodeableConcept and assigns it to the Family field.
func (o *SubstanceSourceMaterialOrganism) SetFamily(v CodeableConcept) {
	o.Family = &v
}

// GetGenus returns the Genus field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetGenus() CodeableConcept {
	if o == nil || IsNil(o.Genus) {
		var ret CodeableConcept
		return ret
	}
	return *o.Genus
}

// GetGenusOk returns a tuple with the Genus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetGenusOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Genus) {
		return nil, false
	}
	return o.Genus, true
}

// HasGenus returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasGenus() bool {
	if o != nil && !IsNil(o.Genus) {
		return true
	}

	return false
}

// SetGenus gets a reference to the given CodeableConcept and assigns it to the Genus field.
func (o *SubstanceSourceMaterialOrganism) SetGenus(v CodeableConcept) {
	o.Genus = &v
}

// GetSpecies returns the Species field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetSpecies() CodeableConcept {
	if o == nil || IsNil(o.Species) {
		var ret CodeableConcept
		return ret
	}
	return *o.Species
}

// GetSpeciesOk returns a tuple with the Species field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetSpeciesOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Species) {
		return nil, false
	}
	return o.Species, true
}

// HasSpecies returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasSpecies() bool {
	if o != nil && !IsNil(o.Species) {
		return true
	}

	return false
}

// SetSpecies gets a reference to the given CodeableConcept and assigns it to the Species field.
func (o *SubstanceSourceMaterialOrganism) SetSpecies(v CodeableConcept) {
	o.Species = &v
}

// GetIntraspecificType returns the IntraspecificType field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetIntraspecificType() CodeableConcept {
	if o == nil || IsNil(o.IntraspecificType) {
		var ret CodeableConcept
		return ret
	}
	return *o.IntraspecificType
}

// GetIntraspecificTypeOk returns a tuple with the IntraspecificType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetIntraspecificTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.IntraspecificType) {
		return nil, false
	}
	return o.IntraspecificType, true
}

// HasIntraspecificType returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasIntraspecificType() bool {
	if o != nil && !IsNil(o.IntraspecificType) {
		return true
	}

	return false
}

// SetIntraspecificType gets a reference to the given CodeableConcept and assigns it to the IntraspecificType field.
func (o *SubstanceSourceMaterialOrganism) SetIntraspecificType(v CodeableConcept) {
	o.IntraspecificType = &v
}

// GetIntraspecificDescription returns the IntraspecificDescription field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetIntraspecificDescription() string {
	if o == nil || IsNil(o.IntraspecificDescription) {
		var ret string
		return ret
	}
	return *o.IntraspecificDescription
}

// GetIntraspecificDescriptionOk returns a tuple with the IntraspecificDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetIntraspecificDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.IntraspecificDescription) {
		return nil, false
	}
	return o.IntraspecificDescription, true
}

// HasIntraspecificDescription returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasIntraspecificDescription() bool {
	if o != nil && !IsNil(o.IntraspecificDescription) {
		return true
	}

	return false
}

// SetIntraspecificDescription gets a reference to the given string and assigns it to the IntraspecificDescription field.
func (o *SubstanceSourceMaterialOrganism) SetIntraspecificDescription(v string) {
	o.IntraspecificDescription = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetAuthor() []SubstanceSourceMaterialAuthor {
	if o == nil || IsNil(o.Author) {
		var ret []SubstanceSourceMaterialAuthor
		return ret
	}
	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetAuthorOk() ([]SubstanceSourceMaterialAuthor, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given []SubstanceSourceMaterialAuthor and assigns it to the Author field.
func (o *SubstanceSourceMaterialOrganism) SetAuthor(v []SubstanceSourceMaterialAuthor) {
	o.Author = v
}

// GetHybrid returns the Hybrid field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetHybrid() SubstanceSourceMaterialHybrid {
	if o == nil || IsNil(o.Hybrid) {
		var ret SubstanceSourceMaterialHybrid
		return ret
	}
	return *o.Hybrid
}

// GetHybridOk returns a tuple with the Hybrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetHybridOk() (*SubstanceSourceMaterialHybrid, bool) {
	if o == nil || IsNil(o.Hybrid) {
		return nil, false
	}
	return o.Hybrid, true
}

// HasHybrid returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasHybrid() bool {
	if o != nil && !IsNil(o.Hybrid) {
		return true
	}

	return false
}

// SetHybrid gets a reference to the given SubstanceSourceMaterialHybrid and assigns it to the Hybrid field.
func (o *SubstanceSourceMaterialOrganism) SetHybrid(v SubstanceSourceMaterialHybrid) {
	o.Hybrid = &v
}

// GetOrganismGeneral returns the OrganismGeneral field value if set, zero value otherwise.
func (o *SubstanceSourceMaterialOrganism) GetOrganismGeneral() SubstanceSourceMaterialOrganismGeneral {
	if o == nil || IsNil(o.OrganismGeneral) {
		var ret SubstanceSourceMaterialOrganismGeneral
		return ret
	}
	return *o.OrganismGeneral
}

// GetOrganismGeneralOk returns a tuple with the OrganismGeneral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstanceSourceMaterialOrganism) GetOrganismGeneralOk() (*SubstanceSourceMaterialOrganismGeneral, bool) {
	if o == nil || IsNil(o.OrganismGeneral) {
		return nil, false
	}
	return o.OrganismGeneral, true
}

// HasOrganismGeneral returns a boolean if a field has been set.
func (o *SubstanceSourceMaterialOrganism) HasOrganismGeneral() bool {
	if o != nil && !IsNil(o.OrganismGeneral) {
		return true
	}

	return false
}

// SetOrganismGeneral gets a reference to the given SubstanceSourceMaterialOrganismGeneral and assigns it to the OrganismGeneral field.
func (o *SubstanceSourceMaterialOrganism) SetOrganismGeneral(v SubstanceSourceMaterialOrganismGeneral) {
	o.OrganismGeneral = &v
}

func (o SubstanceSourceMaterialOrganism) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstanceSourceMaterialOrganism) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Family) {
		toSerialize["family"] = o.Family
	}
	if !IsNil(o.Genus) {
		toSerialize["genus"] = o.Genus
	}
	if !IsNil(o.Species) {
		toSerialize["species"] = o.Species
	}
	if !IsNil(o.IntraspecificType) {
		toSerialize["intraspecificType"] = o.IntraspecificType
	}
	if !IsNil(o.IntraspecificDescription) {
		toSerialize["intraspecificDescription"] = o.IntraspecificDescription
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Hybrid) {
		toSerialize["hybrid"] = o.Hybrid
	}
	if !IsNil(o.OrganismGeneral) {
		toSerialize["organismGeneral"] = o.OrganismGeneral
	}
	return toSerialize, nil
}

type NullableSubstanceSourceMaterialOrganism struct {
	value *SubstanceSourceMaterialOrganism
	isSet bool
}

func (v NullableSubstanceSourceMaterialOrganism) Get() *SubstanceSourceMaterialOrganism {
	return v.value
}

func (v *NullableSubstanceSourceMaterialOrganism) Set(val *SubstanceSourceMaterialOrganism) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstanceSourceMaterialOrganism) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstanceSourceMaterialOrganism) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstanceSourceMaterialOrganism(val *SubstanceSourceMaterialOrganism) *NullableSubstanceSourceMaterialOrganism {
	return &NullableSubstanceSourceMaterialOrganism{value: val, isSet: true}
}

func (v NullableSubstanceSourceMaterialOrganism) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstanceSourceMaterialOrganism) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


