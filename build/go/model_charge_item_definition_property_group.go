/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the ChargeItemDefinitionPropertyGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeItemDefinitionPropertyGroup{}

// ChargeItemDefinitionPropertyGroup The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
type ChargeItemDefinitionPropertyGroup struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Expressions that describe applicability criteria for the priceComponent.
	Applicability []ChargeItemDefinitionApplicability `json:"applicability,omitempty"`
	// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
	PriceComponent []ChargeItemDefinitionPriceComponent `json:"priceComponent,omitempty"`
}

// NewChargeItemDefinitionPropertyGroup instantiates a new ChargeItemDefinitionPropertyGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeItemDefinitionPropertyGroup() *ChargeItemDefinitionPropertyGroup {
	this := ChargeItemDefinitionPropertyGroup{}
	return &this
}

// NewChargeItemDefinitionPropertyGroupWithDefaults instantiates a new ChargeItemDefinitionPropertyGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeItemDefinitionPropertyGroupWithDefaults() *ChargeItemDefinitionPropertyGroup {
	this := ChargeItemDefinitionPropertyGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChargeItemDefinitionPropertyGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItemDefinitionPropertyGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChargeItemDefinitionPropertyGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChargeItemDefinitionPropertyGroup) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *ChargeItemDefinitionPropertyGroup) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItemDefinitionPropertyGroup) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *ChargeItemDefinitionPropertyGroup) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *ChargeItemDefinitionPropertyGroup) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *ChargeItemDefinitionPropertyGroup) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItemDefinitionPropertyGroup) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *ChargeItemDefinitionPropertyGroup) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *ChargeItemDefinitionPropertyGroup) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetApplicability returns the Applicability field value if set, zero value otherwise.
func (o *ChargeItemDefinitionPropertyGroup) GetApplicability() []ChargeItemDefinitionApplicability {
	if o == nil || IsNil(o.Applicability) {
		var ret []ChargeItemDefinitionApplicability
		return ret
	}
	return o.Applicability
}

// GetApplicabilityOk returns a tuple with the Applicability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItemDefinitionPropertyGroup) GetApplicabilityOk() ([]ChargeItemDefinitionApplicability, bool) {
	if o == nil || IsNil(o.Applicability) {
		return nil, false
	}
	return o.Applicability, true
}

// HasApplicability returns a boolean if a field has been set.
func (o *ChargeItemDefinitionPropertyGroup) HasApplicability() bool {
	if o != nil && !IsNil(o.Applicability) {
		return true
	}

	return false
}

// SetApplicability gets a reference to the given []ChargeItemDefinitionApplicability and assigns it to the Applicability field.
func (o *ChargeItemDefinitionPropertyGroup) SetApplicability(v []ChargeItemDefinitionApplicability) {
	o.Applicability = v
}

// GetPriceComponent returns the PriceComponent field value if set, zero value otherwise.
func (o *ChargeItemDefinitionPropertyGroup) GetPriceComponent() []ChargeItemDefinitionPriceComponent {
	if o == nil || IsNil(o.PriceComponent) {
		var ret []ChargeItemDefinitionPriceComponent
		return ret
	}
	return o.PriceComponent
}

// GetPriceComponentOk returns a tuple with the PriceComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeItemDefinitionPropertyGroup) GetPriceComponentOk() ([]ChargeItemDefinitionPriceComponent, bool) {
	if o == nil || IsNil(o.PriceComponent) {
		return nil, false
	}
	return o.PriceComponent, true
}

// HasPriceComponent returns a boolean if a field has been set.
func (o *ChargeItemDefinitionPropertyGroup) HasPriceComponent() bool {
	if o != nil && !IsNil(o.PriceComponent) {
		return true
	}

	return false
}

// SetPriceComponent gets a reference to the given []ChargeItemDefinitionPriceComponent and assigns it to the PriceComponent field.
func (o *ChargeItemDefinitionPropertyGroup) SetPriceComponent(v []ChargeItemDefinitionPriceComponent) {
	o.PriceComponent = v
}

func (o ChargeItemDefinitionPropertyGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeItemDefinitionPropertyGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Applicability) {
		toSerialize["applicability"] = o.Applicability
	}
	if !IsNil(o.PriceComponent) {
		toSerialize["priceComponent"] = o.PriceComponent
	}
	return toSerialize, nil
}

type NullableChargeItemDefinitionPropertyGroup struct {
	value *ChargeItemDefinitionPropertyGroup
	isSet bool
}

func (v NullableChargeItemDefinitionPropertyGroup) Get() *ChargeItemDefinitionPropertyGroup {
	return v.value
}

func (v *NullableChargeItemDefinitionPropertyGroup) Set(val *ChargeItemDefinitionPropertyGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeItemDefinitionPropertyGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeItemDefinitionPropertyGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeItemDefinitionPropertyGroup(val *ChargeItemDefinitionPropertyGroup) *NullableChargeItemDefinitionPropertyGroup {
	return &NullableChargeItemDefinitionPropertyGroup{value: val, isSet: true}
}

func (v NullableChargeItemDefinitionPropertyGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeItemDefinitionPropertyGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


