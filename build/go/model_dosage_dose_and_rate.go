/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the DosageDoseAndRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DosageDoseAndRate{}

// DosageDoseAndRate Indicates how the medication is/was taken or should be taken by the patient.
type DosageDoseAndRate struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// The kind of dose or rate specified, for example, ordered or calculated.
	Type *CodeableConcept `json:"type,omitempty"`
	// Amount of medication per dose.
	DoseRange *Range `json:"doseRange,omitempty"`
	// Amount of medication per dose.
	DoseQuantity *Quantity `json:"doseQuantity,omitempty"`
	// Amount of medication per unit of time.
	RateRatio *Ratio `json:"rateRatio,omitempty"`
	// Amount of medication per unit of time.
	RateRange *Range `json:"rateRange,omitempty"`
	// Amount of medication per unit of time.
	RateQuantity *Quantity `json:"rateQuantity,omitempty"`
}

// NewDosageDoseAndRate instantiates a new DosageDoseAndRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDosageDoseAndRate() *DosageDoseAndRate {
	this := DosageDoseAndRate{}
	return &this
}

// NewDosageDoseAndRateWithDefaults instantiates a new DosageDoseAndRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDosageDoseAndRateWithDefaults() *DosageDoseAndRate {
	this := DosageDoseAndRate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DosageDoseAndRate) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *DosageDoseAndRate) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *DosageDoseAndRate) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *DosageDoseAndRate) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetDoseRange returns the DoseRange field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetDoseRange() Range {
	if o == nil || IsNil(o.DoseRange) {
		var ret Range
		return ret
	}
	return *o.DoseRange
}

// GetDoseRangeOk returns a tuple with the DoseRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetDoseRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.DoseRange) {
		return nil, false
	}
	return o.DoseRange, true
}

// HasDoseRange returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasDoseRange() bool {
	if o != nil && !IsNil(o.DoseRange) {
		return true
	}

	return false
}

// SetDoseRange gets a reference to the given Range and assigns it to the DoseRange field.
func (o *DosageDoseAndRate) SetDoseRange(v Range) {
	o.DoseRange = &v
}

// GetDoseQuantity returns the DoseQuantity field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetDoseQuantity() Quantity {
	if o == nil || IsNil(o.DoseQuantity) {
		var ret Quantity
		return ret
	}
	return *o.DoseQuantity
}

// GetDoseQuantityOk returns a tuple with the DoseQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetDoseQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.DoseQuantity) {
		return nil, false
	}
	return o.DoseQuantity, true
}

// HasDoseQuantity returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasDoseQuantity() bool {
	if o != nil && !IsNil(o.DoseQuantity) {
		return true
	}

	return false
}

// SetDoseQuantity gets a reference to the given Quantity and assigns it to the DoseQuantity field.
func (o *DosageDoseAndRate) SetDoseQuantity(v Quantity) {
	o.DoseQuantity = &v
}

// GetRateRatio returns the RateRatio field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetRateRatio() Ratio {
	if o == nil || IsNil(o.RateRatio) {
		var ret Ratio
		return ret
	}
	return *o.RateRatio
}

// GetRateRatioOk returns a tuple with the RateRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetRateRatioOk() (*Ratio, bool) {
	if o == nil || IsNil(o.RateRatio) {
		return nil, false
	}
	return o.RateRatio, true
}

// HasRateRatio returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasRateRatio() bool {
	if o != nil && !IsNil(o.RateRatio) {
		return true
	}

	return false
}

// SetRateRatio gets a reference to the given Ratio and assigns it to the RateRatio field.
func (o *DosageDoseAndRate) SetRateRatio(v Ratio) {
	o.RateRatio = &v
}

// GetRateRange returns the RateRange field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetRateRange() Range {
	if o == nil || IsNil(o.RateRange) {
		var ret Range
		return ret
	}
	return *o.RateRange
}

// GetRateRangeOk returns a tuple with the RateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetRateRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.RateRange) {
		return nil, false
	}
	return o.RateRange, true
}

// HasRateRange returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasRateRange() bool {
	if o != nil && !IsNil(o.RateRange) {
		return true
	}

	return false
}

// SetRateRange gets a reference to the given Range and assigns it to the RateRange field.
func (o *DosageDoseAndRate) SetRateRange(v Range) {
	o.RateRange = &v
}

// GetRateQuantity returns the RateQuantity field value if set, zero value otherwise.
func (o *DosageDoseAndRate) GetRateQuantity() Quantity {
	if o == nil || IsNil(o.RateQuantity) {
		var ret Quantity
		return ret
	}
	return *o.RateQuantity
}

// GetRateQuantityOk returns a tuple with the RateQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosageDoseAndRate) GetRateQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.RateQuantity) {
		return nil, false
	}
	return o.RateQuantity, true
}

// HasRateQuantity returns a boolean if a field has been set.
func (o *DosageDoseAndRate) HasRateQuantity() bool {
	if o != nil && !IsNil(o.RateQuantity) {
		return true
	}

	return false
}

// SetRateQuantity gets a reference to the given Quantity and assigns it to the RateQuantity field.
func (o *DosageDoseAndRate) SetRateQuantity(v Quantity) {
	o.RateQuantity = &v
}

func (o DosageDoseAndRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DosageDoseAndRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DoseRange) {
		toSerialize["doseRange"] = o.DoseRange
	}
	if !IsNil(o.DoseQuantity) {
		toSerialize["doseQuantity"] = o.DoseQuantity
	}
	if !IsNil(o.RateRatio) {
		toSerialize["rateRatio"] = o.RateRatio
	}
	if !IsNil(o.RateRange) {
		toSerialize["rateRange"] = o.RateRange
	}
	if !IsNil(o.RateQuantity) {
		toSerialize["rateQuantity"] = o.RateQuantity
	}
	return toSerialize, nil
}

type NullableDosageDoseAndRate struct {
	value *DosageDoseAndRate
	isSet bool
}

func (v NullableDosageDoseAndRate) Get() *DosageDoseAndRate {
	return v.value
}

func (v *NullableDosageDoseAndRate) Set(val *DosageDoseAndRate) {
	v.value = val
	v.isSet = true
}

func (v NullableDosageDoseAndRate) IsSet() bool {
	return v.isSet
}

func (v *NullableDosageDoseAndRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDosageDoseAndRate(val *DosageDoseAndRate) *NullableDosageDoseAndRate {
	return &NullableDosageDoseAndRate{value: val, isSet: true}
}

func (v NullableDosageDoseAndRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDosageDoseAndRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


