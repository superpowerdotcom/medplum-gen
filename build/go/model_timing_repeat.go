/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the TimingRepeat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimingRepeat{}

// TimingRepeat Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
type TimingRepeat struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsDuration *Duration `json:"boundsDuration,omitempty"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsRange *Range `json:"boundsRange,omitempty"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsPeriod *Period `json:"boundsPeriod,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Count *float32 `json:"count,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	CountMax *float32 `json:"countMax,omitempty"`
	// A rational number with implicit precision
	Duration *float32 `json:"duration,omitempty"`
	// A rational number with implicit precision
	DurationMax *float32 `json:"durationMax,omitempty"`
	// The units of time for the duration, in UCUM units.
	DurationUnit *string `json:"durationUnit,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	Frequency *float32 `json:"frequency,omitempty"`
	// An integer with a value that is positive (e.g. >0)
	FrequencyMax *float32 `json:"frequencyMax,omitempty"`
	// A rational number with implicit precision
	Period *float32 `json:"period,omitempty"`
	// A rational number with implicit precision
	PeriodMax *float32 `json:"periodMax,omitempty"`
	// The units of time for the period in UCUM units.
	PeriodUnit *string `json:"periodUnit,omitempty"`
	// If one or more days of week is provided, then the action happens only on the specified day(s).
	DayOfWeek []string `json:"dayOfWeek,omitempty"`
	// Specified time of day for action to take place.
	TimeOfDay []string `json:"timeOfDay,omitempty"`
	// An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
	When []string `json:"when,omitempty"`
	// An integer with a value that is not negative (e.g. >= 0)
	Offset *float32 `json:"offset,omitempty"`
}

// NewTimingRepeat instantiates a new TimingRepeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimingRepeat() *TimingRepeat {
	this := TimingRepeat{}
	return &this
}

// NewTimingRepeatWithDefaults instantiates a new TimingRepeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimingRepeatWithDefaults() *TimingRepeat {
	this := TimingRepeat{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimingRepeat) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimingRepeat) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TimingRepeat) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *TimingRepeat) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *TimingRepeat) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *TimingRepeat) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *TimingRepeat) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *TimingRepeat) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *TimingRepeat) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetBoundsDuration returns the BoundsDuration field value if set, zero value otherwise.
func (o *TimingRepeat) GetBoundsDuration() Duration {
	if o == nil || IsNil(o.BoundsDuration) {
		var ret Duration
		return ret
	}
	return *o.BoundsDuration
}

// GetBoundsDurationOk returns a tuple with the BoundsDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetBoundsDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.BoundsDuration) {
		return nil, false
	}
	return o.BoundsDuration, true
}

// HasBoundsDuration returns a boolean if a field has been set.
func (o *TimingRepeat) HasBoundsDuration() bool {
	if o != nil && !IsNil(o.BoundsDuration) {
		return true
	}

	return false
}

// SetBoundsDuration gets a reference to the given Duration and assigns it to the BoundsDuration field.
func (o *TimingRepeat) SetBoundsDuration(v Duration) {
	o.BoundsDuration = &v
}

// GetBoundsRange returns the BoundsRange field value if set, zero value otherwise.
func (o *TimingRepeat) GetBoundsRange() Range {
	if o == nil || IsNil(o.BoundsRange) {
		var ret Range
		return ret
	}
	return *o.BoundsRange
}

// GetBoundsRangeOk returns a tuple with the BoundsRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetBoundsRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.BoundsRange) {
		return nil, false
	}
	return o.BoundsRange, true
}

// HasBoundsRange returns a boolean if a field has been set.
func (o *TimingRepeat) HasBoundsRange() bool {
	if o != nil && !IsNil(o.BoundsRange) {
		return true
	}

	return false
}

// SetBoundsRange gets a reference to the given Range and assigns it to the BoundsRange field.
func (o *TimingRepeat) SetBoundsRange(v Range) {
	o.BoundsRange = &v
}

// GetBoundsPeriod returns the BoundsPeriod field value if set, zero value otherwise.
func (o *TimingRepeat) GetBoundsPeriod() Period {
	if o == nil || IsNil(o.BoundsPeriod) {
		var ret Period
		return ret
	}
	return *o.BoundsPeriod
}

// GetBoundsPeriodOk returns a tuple with the BoundsPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetBoundsPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.BoundsPeriod) {
		return nil, false
	}
	return o.BoundsPeriod, true
}

// HasBoundsPeriod returns a boolean if a field has been set.
func (o *TimingRepeat) HasBoundsPeriod() bool {
	if o != nil && !IsNil(o.BoundsPeriod) {
		return true
	}

	return false
}

// SetBoundsPeriod gets a reference to the given Period and assigns it to the BoundsPeriod field.
func (o *TimingRepeat) SetBoundsPeriod(v Period) {
	o.BoundsPeriod = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TimingRepeat) GetCount() float32 {
	if o == nil || IsNil(o.Count) {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetCountOk() (*float32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TimingRepeat) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *TimingRepeat) SetCount(v float32) {
	o.Count = &v
}

// GetCountMax returns the CountMax field value if set, zero value otherwise.
func (o *TimingRepeat) GetCountMax() float32 {
	if o == nil || IsNil(o.CountMax) {
		var ret float32
		return ret
	}
	return *o.CountMax
}

// GetCountMaxOk returns a tuple with the CountMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetCountMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.CountMax) {
		return nil, false
	}
	return o.CountMax, true
}

// HasCountMax returns a boolean if a field has been set.
func (o *TimingRepeat) HasCountMax() bool {
	if o != nil && !IsNil(o.CountMax) {
		return true
	}

	return false
}

// SetCountMax gets a reference to the given float32 and assigns it to the CountMax field.
func (o *TimingRepeat) SetCountMax(v float32) {
	o.CountMax = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *TimingRepeat) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *TimingRepeat) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *TimingRepeat) SetDuration(v float32) {
	o.Duration = &v
}

// GetDurationMax returns the DurationMax field value if set, zero value otherwise.
func (o *TimingRepeat) GetDurationMax() float32 {
	if o == nil || IsNil(o.DurationMax) {
		var ret float32
		return ret
	}
	return *o.DurationMax
}

// GetDurationMaxOk returns a tuple with the DurationMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetDurationMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.DurationMax) {
		return nil, false
	}
	return o.DurationMax, true
}

// HasDurationMax returns a boolean if a field has been set.
func (o *TimingRepeat) HasDurationMax() bool {
	if o != nil && !IsNil(o.DurationMax) {
		return true
	}

	return false
}

// SetDurationMax gets a reference to the given float32 and assigns it to the DurationMax field.
func (o *TimingRepeat) SetDurationMax(v float32) {
	o.DurationMax = &v
}

// GetDurationUnit returns the DurationUnit field value if set, zero value otherwise.
func (o *TimingRepeat) GetDurationUnit() string {
	if o == nil || IsNil(o.DurationUnit) {
		var ret string
		return ret
	}
	return *o.DurationUnit
}

// GetDurationUnitOk returns a tuple with the DurationUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetDurationUnitOk() (*string, bool) {
	if o == nil || IsNil(o.DurationUnit) {
		return nil, false
	}
	return o.DurationUnit, true
}

// HasDurationUnit returns a boolean if a field has been set.
func (o *TimingRepeat) HasDurationUnit() bool {
	if o != nil && !IsNil(o.DurationUnit) {
		return true
	}

	return false
}

// SetDurationUnit gets a reference to the given string and assigns it to the DurationUnit field.
func (o *TimingRepeat) SetDurationUnit(v string) {
	o.DurationUnit = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *TimingRepeat) GetFrequency() float32 {
	if o == nil || IsNil(o.Frequency) {
		var ret float32
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetFrequencyOk() (*float32, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *TimingRepeat) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given float32 and assigns it to the Frequency field.
func (o *TimingRepeat) SetFrequency(v float32) {
	o.Frequency = &v
}

// GetFrequencyMax returns the FrequencyMax field value if set, zero value otherwise.
func (o *TimingRepeat) GetFrequencyMax() float32 {
	if o == nil || IsNil(o.FrequencyMax) {
		var ret float32
		return ret
	}
	return *o.FrequencyMax
}

// GetFrequencyMaxOk returns a tuple with the FrequencyMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetFrequencyMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.FrequencyMax) {
		return nil, false
	}
	return o.FrequencyMax, true
}

// HasFrequencyMax returns a boolean if a field has been set.
func (o *TimingRepeat) HasFrequencyMax() bool {
	if o != nil && !IsNil(o.FrequencyMax) {
		return true
	}

	return false
}

// SetFrequencyMax gets a reference to the given float32 and assigns it to the FrequencyMax field.
func (o *TimingRepeat) SetFrequencyMax(v float32) {
	o.FrequencyMax = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *TimingRepeat) GetPeriod() float32 {
	if o == nil || IsNil(o.Period) {
		var ret float32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetPeriodOk() (*float32, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *TimingRepeat) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given float32 and assigns it to the Period field.
func (o *TimingRepeat) SetPeriod(v float32) {
	o.Period = &v
}

// GetPeriodMax returns the PeriodMax field value if set, zero value otherwise.
func (o *TimingRepeat) GetPeriodMax() float32 {
	if o == nil || IsNil(o.PeriodMax) {
		var ret float32
		return ret
	}
	return *o.PeriodMax
}

// GetPeriodMaxOk returns a tuple with the PeriodMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetPeriodMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.PeriodMax) {
		return nil, false
	}
	return o.PeriodMax, true
}

// HasPeriodMax returns a boolean if a field has been set.
func (o *TimingRepeat) HasPeriodMax() bool {
	if o != nil && !IsNil(o.PeriodMax) {
		return true
	}

	return false
}

// SetPeriodMax gets a reference to the given float32 and assigns it to the PeriodMax field.
func (o *TimingRepeat) SetPeriodMax(v float32) {
	o.PeriodMax = &v
}

// GetPeriodUnit returns the PeriodUnit field value if set, zero value otherwise.
func (o *TimingRepeat) GetPeriodUnit() string {
	if o == nil || IsNil(o.PeriodUnit) {
		var ret string
		return ret
	}
	return *o.PeriodUnit
}

// GetPeriodUnitOk returns a tuple with the PeriodUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetPeriodUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodUnit) {
		return nil, false
	}
	return o.PeriodUnit, true
}

// HasPeriodUnit returns a boolean if a field has been set.
func (o *TimingRepeat) HasPeriodUnit() bool {
	if o != nil && !IsNil(o.PeriodUnit) {
		return true
	}

	return false
}

// SetPeriodUnit gets a reference to the given string and assigns it to the PeriodUnit field.
func (o *TimingRepeat) SetPeriodUnit(v string) {
	o.PeriodUnit = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *TimingRepeat) GetDayOfWeek() []string {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret []string
		return ret
	}
	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetDayOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *TimingRepeat) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given []string and assigns it to the DayOfWeek field.
func (o *TimingRepeat) SetDayOfWeek(v []string) {
	o.DayOfWeek = v
}

// GetTimeOfDay returns the TimeOfDay field value if set, zero value otherwise.
func (o *TimingRepeat) GetTimeOfDay() []string {
	if o == nil || IsNil(o.TimeOfDay) {
		var ret []string
		return ret
	}
	return o.TimeOfDay
}

// GetTimeOfDayOk returns a tuple with the TimeOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetTimeOfDayOk() ([]string, bool) {
	if o == nil || IsNil(o.TimeOfDay) {
		return nil, false
	}
	return o.TimeOfDay, true
}

// HasTimeOfDay returns a boolean if a field has been set.
func (o *TimingRepeat) HasTimeOfDay() bool {
	if o != nil && !IsNil(o.TimeOfDay) {
		return true
	}

	return false
}

// SetTimeOfDay gets a reference to the given []string and assigns it to the TimeOfDay field.
func (o *TimingRepeat) SetTimeOfDay(v []string) {
	o.TimeOfDay = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *TimingRepeat) GetWhen() []string {
	if o == nil || IsNil(o.When) {
		var ret []string
		return ret
	}
	return o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetWhenOk() ([]string, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *TimingRepeat) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given []string and assigns it to the When field.
func (o *TimingRepeat) SetWhen(v []string) {
	o.When = v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *TimingRepeat) GetOffset() float32 {
	if o == nil || IsNil(o.Offset) {
		var ret float32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimingRepeat) GetOffsetOk() (*float32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *TimingRepeat) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given float32 and assigns it to the Offset field.
func (o *TimingRepeat) SetOffset(v float32) {
	o.Offset = &v
}

func (o TimingRepeat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimingRepeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.BoundsDuration) {
		toSerialize["boundsDuration"] = o.BoundsDuration
	}
	if !IsNil(o.BoundsRange) {
		toSerialize["boundsRange"] = o.BoundsRange
	}
	if !IsNil(o.BoundsPeriod) {
		toSerialize["boundsPeriod"] = o.BoundsPeriod
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.CountMax) {
		toSerialize["countMax"] = o.CountMax
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.DurationMax) {
		toSerialize["durationMax"] = o.DurationMax
	}
	if !IsNil(o.DurationUnit) {
		toSerialize["durationUnit"] = o.DurationUnit
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.FrequencyMax) {
		toSerialize["frequencyMax"] = o.FrequencyMax
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.PeriodMax) {
		toSerialize["periodMax"] = o.PeriodMax
	}
	if !IsNil(o.PeriodUnit) {
		toSerialize["periodUnit"] = o.PeriodUnit
	}
	if !IsNil(o.DayOfWeek) {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if !IsNil(o.TimeOfDay) {
		toSerialize["timeOfDay"] = o.TimeOfDay
	}
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableTimingRepeat struct {
	value *TimingRepeat
	isSet bool
}

func (v NullableTimingRepeat) Get() *TimingRepeat {
	return v.value
}

func (v *NullableTimingRepeat) Set(val *TimingRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableTimingRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableTimingRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimingRepeat(val *TimingRepeat) *NullableTimingRepeat {
	return &NullableTimingRepeat{value: val, isSet: true}
}

func (v NullableTimingRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimingRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


