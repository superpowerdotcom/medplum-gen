/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the RequestGroupAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestGroupAction{}

// RequestGroupAction A group of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".
type RequestGroupAction struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A sequence of Unicode characters
	Prefix *string `json:"prefix,omitempty"`
	// A sequence of Unicode characters
	Title *string `json:"title,omitempty"`
	// A sequence of Unicode characters
	Description *string `json:"description,omitempty"`
	// A sequence of Unicode characters
	TextEquivalent *string `json:"textEquivalent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Priority *string `json:"priority,omitempty"`
	// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
	Code []CodeableConcept `json:"code,omitempty"`
	// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
	Documentation []RelatedArtifact `json:"documentation,omitempty"`
	// An expression that describes applicability criteria, or start/stop conditions for the action.
	Condition []RequestGroupCondition `json:"condition,omitempty"`
	// A relationship to another action such as \"before\" or \"30-60 minutes after start of\".
	RelatedAction []RequestGroupRelatedAction `json:"relatedAction,omitempty"`
	// An optional value describing when the action should be performed.
	TimingDateTime *string `json:"timingDateTime,omitempty"`
	// An optional value describing when the action should be performed.
	TimingAge *Age `json:"timingAge,omitempty"`
	// An optional value describing when the action should be performed.
	TimingPeriod *Period `json:"timingPeriod,omitempty"`
	// An optional value describing when the action should be performed.
	TimingDuration *Duration `json:"timingDuration,omitempty"`
	// An optional value describing when the action should be performed.
	TimingRange *Range `json:"timingRange,omitempty"`
	// An optional value describing when the action should be performed.
	TimingTiming *Timing `json:"timingTiming,omitempty"`
	// The participant that should perform or be responsible for this action.
	Participant []Reference `json:"participant,omitempty"`
	// The type of action to perform (create, update, remove).
	Type *CodeableConcept `json:"type,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	GroupingBehavior *string `json:"groupingBehavior,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	SelectionBehavior *string `json:"selectionBehavior,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	RequiredBehavior *string `json:"requiredBehavior,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	PrecheckBehavior *string `json:"precheckBehavior,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	CardinalityBehavior *string `json:"cardinalityBehavior,omitempty"`
	// The resource that is the target of the action (e.g. CommunicationRequest).
	Resource *Reference `json:"resource,omitempty"`
	// Sub actions.
	Action []RequestGroupAction `json:"action,omitempty"`
}

// NewRequestGroupAction instantiates a new RequestGroupAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestGroupAction() *RequestGroupAction {
	this := RequestGroupAction{}
	return &this
}

// NewRequestGroupActionWithDefaults instantiates a new RequestGroupAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestGroupActionWithDefaults() *RequestGroupAction {
	this := RequestGroupAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RequestGroupAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RequestGroupAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RequestGroupAction) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *RequestGroupAction) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *RequestGroupAction) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *RequestGroupAction) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *RequestGroupAction) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *RequestGroupAction) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *RequestGroupAction) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *RequestGroupAction) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *RequestGroupAction) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *RequestGroupAction) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RequestGroupAction) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RequestGroupAction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RequestGroupAction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RequestGroupAction) SetDescription(v string) {
	o.Description = &v
}

// GetTextEquivalent returns the TextEquivalent field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTextEquivalent() string {
	if o == nil || IsNil(o.TextEquivalent) {
		var ret string
		return ret
	}
	return *o.TextEquivalent
}

// GetTextEquivalentOk returns a tuple with the TextEquivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTextEquivalentOk() (*string, bool) {
	if o == nil || IsNil(o.TextEquivalent) {
		return nil, false
	}
	return o.TextEquivalent, true
}

// HasTextEquivalent returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTextEquivalent() bool {
	if o != nil && !IsNil(o.TextEquivalent) {
		return true
	}

	return false
}

// SetTextEquivalent gets a reference to the given string and assigns it to the TextEquivalent field.
func (o *RequestGroupAction) SetTextEquivalent(v string) {
	o.TextEquivalent = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *RequestGroupAction) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *RequestGroupAction) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *RequestGroupAction) SetPriority(v string) {
	o.Priority = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RequestGroupAction) GetCode() []CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret []CodeableConcept
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RequestGroupAction) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []CodeableConcept and assigns it to the Code field.
func (o *RequestGroupAction) SetCode(v []CodeableConcept) {
	o.Code = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *RequestGroupAction) GetDocumentation() []RelatedArtifact {
	if o == nil || IsNil(o.Documentation) {
		var ret []RelatedArtifact
		return ret
	}
	return o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetDocumentationOk() ([]RelatedArtifact, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *RequestGroupAction) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given []RelatedArtifact and assigns it to the Documentation field.
func (o *RequestGroupAction) SetDocumentation(v []RelatedArtifact) {
	o.Documentation = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *RequestGroupAction) GetCondition() []RequestGroupCondition {
	if o == nil || IsNil(o.Condition) {
		var ret []RequestGroupCondition
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetConditionOk() ([]RequestGroupCondition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *RequestGroupAction) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []RequestGroupCondition and assigns it to the Condition field.
func (o *RequestGroupAction) SetCondition(v []RequestGroupCondition) {
	o.Condition = v
}

// GetRelatedAction returns the RelatedAction field value if set, zero value otherwise.
func (o *RequestGroupAction) GetRelatedAction() []RequestGroupRelatedAction {
	if o == nil || IsNil(o.RelatedAction) {
		var ret []RequestGroupRelatedAction
		return ret
	}
	return o.RelatedAction
}

// GetRelatedActionOk returns a tuple with the RelatedAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetRelatedActionOk() ([]RequestGroupRelatedAction, bool) {
	if o == nil || IsNil(o.RelatedAction) {
		return nil, false
	}
	return o.RelatedAction, true
}

// HasRelatedAction returns a boolean if a field has been set.
func (o *RequestGroupAction) HasRelatedAction() bool {
	if o != nil && !IsNil(o.RelatedAction) {
		return true
	}

	return false
}

// SetRelatedAction gets a reference to the given []RequestGroupRelatedAction and assigns it to the RelatedAction field.
func (o *RequestGroupAction) SetRelatedAction(v []RequestGroupRelatedAction) {
	o.RelatedAction = v
}

// GetTimingDateTime returns the TimingDateTime field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingDateTime() string {
	if o == nil || IsNil(o.TimingDateTime) {
		var ret string
		return ret
	}
	return *o.TimingDateTime
}

// GetTimingDateTimeOk returns a tuple with the TimingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimingDateTime) {
		return nil, false
	}
	return o.TimingDateTime, true
}

// HasTimingDateTime returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingDateTime() bool {
	if o != nil && !IsNil(o.TimingDateTime) {
		return true
	}

	return false
}

// SetTimingDateTime gets a reference to the given string and assigns it to the TimingDateTime field.
func (o *RequestGroupAction) SetTimingDateTime(v string) {
	o.TimingDateTime = &v
}

// GetTimingAge returns the TimingAge field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingAge() Age {
	if o == nil || IsNil(o.TimingAge) {
		var ret Age
		return ret
	}
	return *o.TimingAge
}

// GetTimingAgeOk returns a tuple with the TimingAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingAgeOk() (*Age, bool) {
	if o == nil || IsNil(o.TimingAge) {
		return nil, false
	}
	return o.TimingAge, true
}

// HasTimingAge returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingAge() bool {
	if o != nil && !IsNil(o.TimingAge) {
		return true
	}

	return false
}

// SetTimingAge gets a reference to the given Age and assigns it to the TimingAge field.
func (o *RequestGroupAction) SetTimingAge(v Age) {
	o.TimingAge = &v
}

// GetTimingPeriod returns the TimingPeriod field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingPeriod() Period {
	if o == nil || IsNil(o.TimingPeriod) {
		var ret Period
		return ret
	}
	return *o.TimingPeriod
}

// GetTimingPeriodOk returns a tuple with the TimingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.TimingPeriod) {
		return nil, false
	}
	return o.TimingPeriod, true
}

// HasTimingPeriod returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingPeriod() bool {
	if o != nil && !IsNil(o.TimingPeriod) {
		return true
	}

	return false
}

// SetTimingPeriod gets a reference to the given Period and assigns it to the TimingPeriod field.
func (o *RequestGroupAction) SetTimingPeriod(v Period) {
	o.TimingPeriod = &v
}

// GetTimingDuration returns the TimingDuration field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingDuration() Duration {
	if o == nil || IsNil(o.TimingDuration) {
		var ret Duration
		return ret
	}
	return *o.TimingDuration
}

// GetTimingDurationOk returns a tuple with the TimingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.TimingDuration) {
		return nil, false
	}
	return o.TimingDuration, true
}

// HasTimingDuration returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingDuration() bool {
	if o != nil && !IsNil(o.TimingDuration) {
		return true
	}

	return false
}

// SetTimingDuration gets a reference to the given Duration and assigns it to the TimingDuration field.
func (o *RequestGroupAction) SetTimingDuration(v Duration) {
	o.TimingDuration = &v
}

// GetTimingRange returns the TimingRange field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingRange() Range {
	if o == nil || IsNil(o.TimingRange) {
		var ret Range
		return ret
	}
	return *o.TimingRange
}

// GetTimingRangeOk returns a tuple with the TimingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.TimingRange) {
		return nil, false
	}
	return o.TimingRange, true
}

// HasTimingRange returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingRange() bool {
	if o != nil && !IsNil(o.TimingRange) {
		return true
	}

	return false
}

// SetTimingRange gets a reference to the given Range and assigns it to the TimingRange field.
func (o *RequestGroupAction) SetTimingRange(v Range) {
	o.TimingRange = &v
}

// GetTimingTiming returns the TimingTiming field value if set, zero value otherwise.
func (o *RequestGroupAction) GetTimingTiming() Timing {
	if o == nil || IsNil(o.TimingTiming) {
		var ret Timing
		return ret
	}
	return *o.TimingTiming
}

// GetTimingTimingOk returns a tuple with the TimingTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTimingTimingOk() (*Timing, bool) {
	if o == nil || IsNil(o.TimingTiming) {
		return nil, false
	}
	return o.TimingTiming, true
}

// HasTimingTiming returns a boolean if a field has been set.
func (o *RequestGroupAction) HasTimingTiming() bool {
	if o != nil && !IsNil(o.TimingTiming) {
		return true
	}

	return false
}

// SetTimingTiming gets a reference to the given Timing and assigns it to the TimingTiming field.
func (o *RequestGroupAction) SetTimingTiming(v Timing) {
	o.TimingTiming = &v
}

// GetParticipant returns the Participant field value if set, zero value otherwise.
func (o *RequestGroupAction) GetParticipant() []Reference {
	if o == nil || IsNil(o.Participant) {
		var ret []Reference
		return ret
	}
	return o.Participant
}

// GetParticipantOk returns a tuple with the Participant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetParticipantOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Participant) {
		return nil, false
	}
	return o.Participant, true
}

// HasParticipant returns a boolean if a field has been set.
func (o *RequestGroupAction) HasParticipant() bool {
	if o != nil && !IsNil(o.Participant) {
		return true
	}

	return false
}

// SetParticipant gets a reference to the given []Reference and assigns it to the Participant field.
func (o *RequestGroupAction) SetParticipant(v []Reference) {
	o.Participant = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RequestGroupAction) GetType() CodeableConcept {
	if o == nil || IsNil(o.Type) {
		var ret CodeableConcept
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetTypeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RequestGroupAction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CodeableConcept and assigns it to the Type field.
func (o *RequestGroupAction) SetType(v CodeableConcept) {
	o.Type = &v
}

// GetGroupingBehavior returns the GroupingBehavior field value if set, zero value otherwise.
func (o *RequestGroupAction) GetGroupingBehavior() string {
	if o == nil || IsNil(o.GroupingBehavior) {
		var ret string
		return ret
	}
	return *o.GroupingBehavior
}

// GetGroupingBehaviorOk returns a tuple with the GroupingBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetGroupingBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.GroupingBehavior) {
		return nil, false
	}
	return o.GroupingBehavior, true
}

// HasGroupingBehavior returns a boolean if a field has been set.
func (o *RequestGroupAction) HasGroupingBehavior() bool {
	if o != nil && !IsNil(o.GroupingBehavior) {
		return true
	}

	return false
}

// SetGroupingBehavior gets a reference to the given string and assigns it to the GroupingBehavior field.
func (o *RequestGroupAction) SetGroupingBehavior(v string) {
	o.GroupingBehavior = &v
}

// GetSelectionBehavior returns the SelectionBehavior field value if set, zero value otherwise.
func (o *RequestGroupAction) GetSelectionBehavior() string {
	if o == nil || IsNil(o.SelectionBehavior) {
		var ret string
		return ret
	}
	return *o.SelectionBehavior
}

// GetSelectionBehaviorOk returns a tuple with the SelectionBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetSelectionBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.SelectionBehavior) {
		return nil, false
	}
	return o.SelectionBehavior, true
}

// HasSelectionBehavior returns a boolean if a field has been set.
func (o *RequestGroupAction) HasSelectionBehavior() bool {
	if o != nil && !IsNil(o.SelectionBehavior) {
		return true
	}

	return false
}

// SetSelectionBehavior gets a reference to the given string and assigns it to the SelectionBehavior field.
func (o *RequestGroupAction) SetSelectionBehavior(v string) {
	o.SelectionBehavior = &v
}

// GetRequiredBehavior returns the RequiredBehavior field value if set, zero value otherwise.
func (o *RequestGroupAction) GetRequiredBehavior() string {
	if o == nil || IsNil(o.RequiredBehavior) {
		var ret string
		return ret
	}
	return *o.RequiredBehavior
}

// GetRequiredBehaviorOk returns a tuple with the RequiredBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetRequiredBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredBehavior) {
		return nil, false
	}
	return o.RequiredBehavior, true
}

// HasRequiredBehavior returns a boolean if a field has been set.
func (o *RequestGroupAction) HasRequiredBehavior() bool {
	if o != nil && !IsNil(o.RequiredBehavior) {
		return true
	}

	return false
}

// SetRequiredBehavior gets a reference to the given string and assigns it to the RequiredBehavior field.
func (o *RequestGroupAction) SetRequiredBehavior(v string) {
	o.RequiredBehavior = &v
}

// GetPrecheckBehavior returns the PrecheckBehavior field value if set, zero value otherwise.
func (o *RequestGroupAction) GetPrecheckBehavior() string {
	if o == nil || IsNil(o.PrecheckBehavior) {
		var ret string
		return ret
	}
	return *o.PrecheckBehavior
}

// GetPrecheckBehaviorOk returns a tuple with the PrecheckBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetPrecheckBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.PrecheckBehavior) {
		return nil, false
	}
	return o.PrecheckBehavior, true
}

// HasPrecheckBehavior returns a boolean if a field has been set.
func (o *RequestGroupAction) HasPrecheckBehavior() bool {
	if o != nil && !IsNil(o.PrecheckBehavior) {
		return true
	}

	return false
}

// SetPrecheckBehavior gets a reference to the given string and assigns it to the PrecheckBehavior field.
func (o *RequestGroupAction) SetPrecheckBehavior(v string) {
	o.PrecheckBehavior = &v
}

// GetCardinalityBehavior returns the CardinalityBehavior field value if set, zero value otherwise.
func (o *RequestGroupAction) GetCardinalityBehavior() string {
	if o == nil || IsNil(o.CardinalityBehavior) {
		var ret string
		return ret
	}
	return *o.CardinalityBehavior
}

// GetCardinalityBehaviorOk returns a tuple with the CardinalityBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetCardinalityBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.CardinalityBehavior) {
		return nil, false
	}
	return o.CardinalityBehavior, true
}

// HasCardinalityBehavior returns a boolean if a field has been set.
func (o *RequestGroupAction) HasCardinalityBehavior() bool {
	if o != nil && !IsNil(o.CardinalityBehavior) {
		return true
	}

	return false
}

// SetCardinalityBehavior gets a reference to the given string and assigns it to the CardinalityBehavior field.
func (o *RequestGroupAction) SetCardinalityBehavior(v string) {
	o.CardinalityBehavior = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *RequestGroupAction) GetResource() Reference {
	if o == nil || IsNil(o.Resource) {
		var ret Reference
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetResourceOk() (*Reference, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *RequestGroupAction) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given Reference and assigns it to the Resource field.
func (o *RequestGroupAction) SetResource(v Reference) {
	o.Resource = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RequestGroupAction) GetAction() []RequestGroupAction {
	if o == nil || IsNil(o.Action) {
		var ret []RequestGroupAction
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestGroupAction) GetActionOk() ([]RequestGroupAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RequestGroupAction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []RequestGroupAction and assigns it to the Action field.
func (o *RequestGroupAction) SetAction(v []RequestGroupAction) {
	o.Action = v
}

func (o RequestGroupAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestGroupAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TextEquivalent) {
		toSerialize["textEquivalent"] = o.TextEquivalent
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.RelatedAction) {
		toSerialize["relatedAction"] = o.RelatedAction
	}
	if !IsNil(o.TimingDateTime) {
		toSerialize["timingDateTime"] = o.TimingDateTime
	}
	if !IsNil(o.TimingAge) {
		toSerialize["timingAge"] = o.TimingAge
	}
	if !IsNil(o.TimingPeriod) {
		toSerialize["timingPeriod"] = o.TimingPeriod
	}
	if !IsNil(o.TimingDuration) {
		toSerialize["timingDuration"] = o.TimingDuration
	}
	if !IsNil(o.TimingRange) {
		toSerialize["timingRange"] = o.TimingRange
	}
	if !IsNil(o.TimingTiming) {
		toSerialize["timingTiming"] = o.TimingTiming
	}
	if !IsNil(o.Participant) {
		toSerialize["participant"] = o.Participant
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.GroupingBehavior) {
		toSerialize["groupingBehavior"] = o.GroupingBehavior
	}
	if !IsNil(o.SelectionBehavior) {
		toSerialize["selectionBehavior"] = o.SelectionBehavior
	}
	if !IsNil(o.RequiredBehavior) {
		toSerialize["requiredBehavior"] = o.RequiredBehavior
	}
	if !IsNil(o.PrecheckBehavior) {
		toSerialize["precheckBehavior"] = o.PrecheckBehavior
	}
	if !IsNil(o.CardinalityBehavior) {
		toSerialize["cardinalityBehavior"] = o.CardinalityBehavior
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableRequestGroupAction struct {
	value *RequestGroupAction
	isSet bool
}

func (v NullableRequestGroupAction) Get() *RequestGroupAction {
	return v.value
}

func (v *NullableRequestGroupAction) Set(val *RequestGroupAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestGroupAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestGroupAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestGroupAction(val *RequestGroupAction) *NullableRequestGroupAction {
	return &NullableRequestGroupAction{value: val, isSet: true}
}

func (v NullableRequestGroupAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestGroupAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


