/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RiskAssessment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskAssessment{}

// RiskAssessment An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
type RiskAssessment struct {
	// This is a RiskAssessment resource
	ResourceType string `json:"resourceType"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	Id *string `json:"id,omitempty"`
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta *Meta `json:"meta,omitempty"`
	// String of characters used to identify a name or a resource
	ImplicitRules *string `json:"implicitRules,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Language *string `json:"language,omitempty"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *Narrative `json:"text,omitempty"`
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []ResourceList `json:"contained,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Business identifier assigned to the risk assessment.
	Identifier []Identifier `json:"identifier,omitempty"`
	// A reference to the request that is fulfilled by this risk assessment.
	BasedOn *Reference `json:"basedOn,omitempty"`
	// A reference to a resource that this risk assessment is part of, such as a Procedure.
	Parent *Reference `json:"parent,omitempty"`
	// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	Status *string `json:"status,omitempty"`
	// The algorithm, process or mechanism used to evaluate the risk.
	Method *CodeableConcept `json:"method,omitempty"`
	// The type of the risk assessment performed.
	Code *CodeableConcept `json:"code,omitempty"`
	// The patient or group the risk assessment applies to.
	Subject Reference `json:"subject"`
	// The encounter where the assessment was performed.
	Encounter *Reference `json:"encounter,omitempty"`
	// The date (and possibly time) the risk assessment was performed.
	OccurrenceDateTime *string `json:"occurrenceDateTime,omitempty"`
	// The date (and possibly time) the risk assessment was performed.
	OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`
	// For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
	Condition *Reference `json:"condition,omitempty"`
	// The provider or software application that performed the assessment.
	Performer *Reference `json:"performer,omitempty"`
	// The reason the risk assessment was performed.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// Resources supporting the reason the risk assessment was performed.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
	Basis []Reference `json:"basis,omitempty"`
	// Describes the expected outcome for the subject.
	Prediction []RiskAssessmentPrediction `json:"prediction,omitempty"`
	// A sequence of Unicode characters
	Mitigation *string `json:"mitigation,omitempty"`
	// Additional comments about the risk assessment.
	Note []Annotation `json:"note,omitempty"`
}

type _RiskAssessment RiskAssessment

// NewRiskAssessment instantiates a new RiskAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskAssessment(resourceType string, subject Reference) *RiskAssessment {
	this := RiskAssessment{}
	this.ResourceType = resourceType
	this.Subject = subject
	return &this
}

// NewRiskAssessmentWithDefaults instantiates a new RiskAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskAssessmentWithDefaults() *RiskAssessment {
	this := RiskAssessment{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *RiskAssessment) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *RiskAssessment) SetResourceType(v string) {
	o.ResourceType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RiskAssessment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RiskAssessment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RiskAssessment) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *RiskAssessment) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *RiskAssessment) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *RiskAssessment) SetMeta(v Meta) {
	o.Meta = &v
}

// GetImplicitRules returns the ImplicitRules field value if set, zero value otherwise.
func (o *RiskAssessment) GetImplicitRules() string {
	if o == nil || IsNil(o.ImplicitRules) {
		var ret string
		return ret
	}
	return *o.ImplicitRules
}

// GetImplicitRulesOk returns a tuple with the ImplicitRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetImplicitRulesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplicitRules) {
		return nil, false
	}
	return o.ImplicitRules, true
}

// HasImplicitRules returns a boolean if a field has been set.
func (o *RiskAssessment) HasImplicitRules() bool {
	if o != nil && !IsNil(o.ImplicitRules) {
		return true
	}

	return false
}

// SetImplicitRules gets a reference to the given string and assigns it to the ImplicitRules field.
func (o *RiskAssessment) SetImplicitRules(v string) {
	o.ImplicitRules = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *RiskAssessment) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *RiskAssessment) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *RiskAssessment) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RiskAssessment) GetText() Narrative {
	if o == nil || IsNil(o.Text) {
		var ret Narrative
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetTextOk() (*Narrative, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RiskAssessment) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given Narrative and assigns it to the Text field.
func (o *RiskAssessment) SetText(v Narrative) {
	o.Text = &v
}

// GetContained returns the Contained field value if set, zero value otherwise.
func (o *RiskAssessment) GetContained() []ResourceList {
	if o == nil || IsNil(o.Contained) {
		var ret []ResourceList
		return ret
	}
	return o.Contained
}

// GetContainedOk returns a tuple with the Contained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetContainedOk() ([]ResourceList, bool) {
	if o == nil || IsNil(o.Contained) {
		return nil, false
	}
	return o.Contained, true
}

// HasContained returns a boolean if a field has been set.
func (o *RiskAssessment) HasContained() bool {
	if o != nil && !IsNil(o.Contained) {
		return true
	}

	return false
}

// SetContained gets a reference to the given []ResourceList and assigns it to the Contained field.
func (o *RiskAssessment) SetContained(v []ResourceList) {
	o.Contained = v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *RiskAssessment) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *RiskAssessment) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *RiskAssessment) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *RiskAssessment) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *RiskAssessment) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *RiskAssessment) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RiskAssessment) GetIdentifier() []Identifier {
	if o == nil || IsNil(o.Identifier) {
		var ret []Identifier
		return ret
	}
	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetIdentifierOk() ([]Identifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RiskAssessment) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given []Identifier and assigns it to the Identifier field.
func (o *RiskAssessment) SetIdentifier(v []Identifier) {
	o.Identifier = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *RiskAssessment) GetBasedOn() Reference {
	if o == nil || IsNil(o.BasedOn) {
		var ret Reference
		return ret
	}
	return *o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetBasedOnOk() (*Reference, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *RiskAssessment) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given Reference and assigns it to the BasedOn field.
func (o *RiskAssessment) SetBasedOn(v Reference) {
	o.BasedOn = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *RiskAssessment) GetParent() Reference {
	if o == nil || IsNil(o.Parent) {
		var ret Reference
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetParentOk() (*Reference, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *RiskAssessment) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given Reference and assigns it to the Parent field.
func (o *RiskAssessment) SetParent(v Reference) {
	o.Parent = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RiskAssessment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RiskAssessment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RiskAssessment) SetStatus(v string) {
	o.Status = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *RiskAssessment) GetMethod() CodeableConcept {
	if o == nil || IsNil(o.Method) {
		var ret CodeableConcept
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetMethodOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *RiskAssessment) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given CodeableConcept and assigns it to the Method field.
func (o *RiskAssessment) SetMethod(v CodeableConcept) {
	o.Method = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RiskAssessment) GetCode() CodeableConcept {
	if o == nil || IsNil(o.Code) {
		var ret CodeableConcept
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RiskAssessment) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeableConcept and assigns it to the Code field.
func (o *RiskAssessment) SetCode(v CodeableConcept) {
	o.Code = &v
}

// GetSubject returns the Subject field value
func (o *RiskAssessment) GetSubject() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetSubjectOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RiskAssessment) SetSubject(v Reference) {
	o.Subject = v
}

// GetEncounter returns the Encounter field value if set, zero value otherwise.
func (o *RiskAssessment) GetEncounter() Reference {
	if o == nil || IsNil(o.Encounter) {
		var ret Reference
		return ret
	}
	return *o.Encounter
}

// GetEncounterOk returns a tuple with the Encounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetEncounterOk() (*Reference, bool) {
	if o == nil || IsNil(o.Encounter) {
		return nil, false
	}
	return o.Encounter, true
}

// HasEncounter returns a boolean if a field has been set.
func (o *RiskAssessment) HasEncounter() bool {
	if o != nil && !IsNil(o.Encounter) {
		return true
	}

	return false
}

// SetEncounter gets a reference to the given Reference and assigns it to the Encounter field.
func (o *RiskAssessment) SetEncounter(v Reference) {
	o.Encounter = &v
}

// GetOccurrenceDateTime returns the OccurrenceDateTime field value if set, zero value otherwise.
func (o *RiskAssessment) GetOccurrenceDateTime() string {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		var ret string
		return ret
	}
	return *o.OccurrenceDateTime
}

// GetOccurrenceDateTimeOk returns a tuple with the OccurrenceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetOccurrenceDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OccurrenceDateTime) {
		return nil, false
	}
	return o.OccurrenceDateTime, true
}

// HasOccurrenceDateTime returns a boolean if a field has been set.
func (o *RiskAssessment) HasOccurrenceDateTime() bool {
	if o != nil && !IsNil(o.OccurrenceDateTime) {
		return true
	}

	return false
}

// SetOccurrenceDateTime gets a reference to the given string and assigns it to the OccurrenceDateTime field.
func (o *RiskAssessment) SetOccurrenceDateTime(v string) {
	o.OccurrenceDateTime = &v
}

// GetOccurrencePeriod returns the OccurrencePeriod field value if set, zero value otherwise.
func (o *RiskAssessment) GetOccurrencePeriod() Period {
	if o == nil || IsNil(o.OccurrencePeriod) {
		var ret Period
		return ret
	}
	return *o.OccurrencePeriod
}

// GetOccurrencePeriodOk returns a tuple with the OccurrencePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetOccurrencePeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.OccurrencePeriod) {
		return nil, false
	}
	return o.OccurrencePeriod, true
}

// HasOccurrencePeriod returns a boolean if a field has been set.
func (o *RiskAssessment) HasOccurrencePeriod() bool {
	if o != nil && !IsNil(o.OccurrencePeriod) {
		return true
	}

	return false
}

// SetOccurrencePeriod gets a reference to the given Period and assigns it to the OccurrencePeriod field.
func (o *RiskAssessment) SetOccurrencePeriod(v Period) {
	o.OccurrencePeriod = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *RiskAssessment) GetCondition() Reference {
	if o == nil || IsNil(o.Condition) {
		var ret Reference
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetConditionOk() (*Reference, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *RiskAssessment) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given Reference and assigns it to the Condition field.
func (o *RiskAssessment) SetCondition(v Reference) {
	o.Condition = &v
}

// GetPerformer returns the Performer field value if set, zero value otherwise.
func (o *RiskAssessment) GetPerformer() Reference {
	if o == nil || IsNil(o.Performer) {
		var ret Reference
		return ret
	}
	return *o.Performer
}

// GetPerformerOk returns a tuple with the Performer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetPerformerOk() (*Reference, bool) {
	if o == nil || IsNil(o.Performer) {
		return nil, false
	}
	return o.Performer, true
}

// HasPerformer returns a boolean if a field has been set.
func (o *RiskAssessment) HasPerformer() bool {
	if o != nil && !IsNil(o.Performer) {
		return true
	}

	return false
}

// SetPerformer gets a reference to the given Reference and assigns it to the Performer field.
func (o *RiskAssessment) SetPerformer(v Reference) {
	o.Performer = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *RiskAssessment) GetReasonCode() []CodeableConcept {
	if o == nil || IsNil(o.ReasonCode) {
		var ret []CodeableConcept
		return ret
	}
	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetReasonCodeOk() ([]CodeableConcept, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *RiskAssessment) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given []CodeableConcept and assigns it to the ReasonCode field.
func (o *RiskAssessment) SetReasonCode(v []CodeableConcept) {
	o.ReasonCode = v
}

// GetReasonReference returns the ReasonReference field value if set, zero value otherwise.
func (o *RiskAssessment) GetReasonReference() []Reference {
	if o == nil || IsNil(o.ReasonReference) {
		var ret []Reference
		return ret
	}
	return o.ReasonReference
}

// GetReasonReferenceOk returns a tuple with the ReasonReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetReasonReferenceOk() ([]Reference, bool) {
	if o == nil || IsNil(o.ReasonReference) {
		return nil, false
	}
	return o.ReasonReference, true
}

// HasReasonReference returns a boolean if a field has been set.
func (o *RiskAssessment) HasReasonReference() bool {
	if o != nil && !IsNil(o.ReasonReference) {
		return true
	}

	return false
}

// SetReasonReference gets a reference to the given []Reference and assigns it to the ReasonReference field.
func (o *RiskAssessment) SetReasonReference(v []Reference) {
	o.ReasonReference = v
}

// GetBasis returns the Basis field value if set, zero value otherwise.
func (o *RiskAssessment) GetBasis() []Reference {
	if o == nil || IsNil(o.Basis) {
		var ret []Reference
		return ret
	}
	return o.Basis
}

// GetBasisOk returns a tuple with the Basis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetBasisOk() ([]Reference, bool) {
	if o == nil || IsNil(o.Basis) {
		return nil, false
	}
	return o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *RiskAssessment) HasBasis() bool {
	if o != nil && !IsNil(o.Basis) {
		return true
	}

	return false
}

// SetBasis gets a reference to the given []Reference and assigns it to the Basis field.
func (o *RiskAssessment) SetBasis(v []Reference) {
	o.Basis = v
}

// GetPrediction returns the Prediction field value if set, zero value otherwise.
func (o *RiskAssessment) GetPrediction() []RiskAssessmentPrediction {
	if o == nil || IsNil(o.Prediction) {
		var ret []RiskAssessmentPrediction
		return ret
	}
	return o.Prediction
}

// GetPredictionOk returns a tuple with the Prediction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetPredictionOk() ([]RiskAssessmentPrediction, bool) {
	if o == nil || IsNil(o.Prediction) {
		return nil, false
	}
	return o.Prediction, true
}

// HasPrediction returns a boolean if a field has been set.
func (o *RiskAssessment) HasPrediction() bool {
	if o != nil && !IsNil(o.Prediction) {
		return true
	}

	return false
}

// SetPrediction gets a reference to the given []RiskAssessmentPrediction and assigns it to the Prediction field.
func (o *RiskAssessment) SetPrediction(v []RiskAssessmentPrediction) {
	o.Prediction = v
}

// GetMitigation returns the Mitigation field value if set, zero value otherwise.
func (o *RiskAssessment) GetMitigation() string {
	if o == nil || IsNil(o.Mitigation) {
		var ret string
		return ret
	}
	return *o.Mitigation
}

// GetMitigationOk returns a tuple with the Mitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetMitigationOk() (*string, bool) {
	if o == nil || IsNil(o.Mitigation) {
		return nil, false
	}
	return o.Mitigation, true
}

// HasMitigation returns a boolean if a field has been set.
func (o *RiskAssessment) HasMitigation() bool {
	if o != nil && !IsNil(o.Mitigation) {
		return true
	}

	return false
}

// SetMitigation gets a reference to the given string and assigns it to the Mitigation field.
func (o *RiskAssessment) SetMitigation(v string) {
	o.Mitigation = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RiskAssessment) GetNote() []Annotation {
	if o == nil || IsNil(o.Note) {
		var ret []Annotation
		return ret
	}
	return o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetNoteOk() ([]Annotation, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RiskAssessment) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given []Annotation and assigns it to the Note field.
func (o *RiskAssessment) SetNote(v []Annotation) {
	o.Note = v
}

func (o RiskAssessment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskAssessment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ImplicitRules) {
		toSerialize["implicitRules"] = o.ImplicitRules
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Contained) {
		toSerialize["contained"] = o.Contained
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Encounter) {
		toSerialize["encounter"] = o.Encounter
	}
	if !IsNil(o.OccurrenceDateTime) {
		toSerialize["occurrenceDateTime"] = o.OccurrenceDateTime
	}
	if !IsNil(o.OccurrencePeriod) {
		toSerialize["occurrencePeriod"] = o.OccurrencePeriod
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Performer) {
		toSerialize["performer"] = o.Performer
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonReference) {
		toSerialize["reasonReference"] = o.ReasonReference
	}
	if !IsNil(o.Basis) {
		toSerialize["basis"] = o.Basis
	}
	if !IsNil(o.Prediction) {
		toSerialize["prediction"] = o.Prediction
	}
	if !IsNil(o.Mitigation) {
		toSerialize["mitigation"] = o.Mitigation
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

func (o *RiskAssessment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceType",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRiskAssessment := _RiskAssessment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRiskAssessment)

	if err != nil {
		return err
	}

	*o = RiskAssessment(varRiskAssessment)

	return err
}

type NullableRiskAssessment struct {
	value *RiskAssessment
	isSet bool
}

func (v NullableRiskAssessment) Get() *RiskAssessment {
	return v.value
}

func (v *NullableRiskAssessment) Set(val *RiskAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskAssessment(val *RiskAssessment) *NullableRiskAssessment {
	return &NullableRiskAssessment{value: val, isSet: true}
}

func (v NullableRiskAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


