/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSite{}

// ProjectSite Web application or web site that is associated with the project.
type ProjectSite struct {
	// A sequence of Unicode characters
	Name string `json:"name"`
	// The list of domain names associated with the site. User authentication will be restricted to the domains you enter here, plus any subdomains. In other words, a registration for example.com also registers subdomain.example.com. A valid domain requires a host and must not include any path, port, query or fragment.
	Domain []string `json:"domain"`
	// A sequence of Unicode characters
	GoogleClientId *string `json:"googleClientId,omitempty"`
	// A sequence of Unicode characters
	GoogleClientSecret *string `json:"googleClientSecret,omitempty"`
	// A sequence of Unicode characters
	RecaptchaSiteKey *string `json:"recaptchaSiteKey,omitempty"`
	// A sequence of Unicode characters
	RecaptchaSecretKey *string `json:"recaptchaSecretKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSite ProjectSite

// NewProjectSite instantiates a new ProjectSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSite(name string, domain []string) *ProjectSite {
	this := ProjectSite{}
	this.Name = name
	this.Domain = domain
	return &this
}

// NewProjectSiteWithDefaults instantiates a new ProjectSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSiteWithDefaults() *ProjectSite {
	this := ProjectSite{}
	return &this
}

// GetName returns the Name field value
func (o *ProjectSite) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectSite) SetName(v string) {
	o.Name = v
}

// GetDomain returns the Domain field value
func (o *ProjectSite) GetDomain() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetDomainOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain, true
}

// SetDomain sets field value
func (o *ProjectSite) SetDomain(v []string) {
	o.Domain = v
}

// GetGoogleClientId returns the GoogleClientId field value if set, zero value otherwise.
func (o *ProjectSite) GetGoogleClientId() string {
	if o == nil || IsNil(o.GoogleClientId) {
		var ret string
		return ret
	}
	return *o.GoogleClientId
}

// GetGoogleClientIdOk returns a tuple with the GoogleClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetGoogleClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.GoogleClientId) {
		return nil, false
	}
	return o.GoogleClientId, true
}

// HasGoogleClientId returns a boolean if a field has been set.
func (o *ProjectSite) HasGoogleClientId() bool {
	if o != nil && !IsNil(o.GoogleClientId) {
		return true
	}

	return false
}

// SetGoogleClientId gets a reference to the given string and assigns it to the GoogleClientId field.
func (o *ProjectSite) SetGoogleClientId(v string) {
	o.GoogleClientId = &v
}

// GetGoogleClientSecret returns the GoogleClientSecret field value if set, zero value otherwise.
func (o *ProjectSite) GetGoogleClientSecret() string {
	if o == nil || IsNil(o.GoogleClientSecret) {
		var ret string
		return ret
	}
	return *o.GoogleClientSecret
}

// GetGoogleClientSecretOk returns a tuple with the GoogleClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetGoogleClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.GoogleClientSecret) {
		return nil, false
	}
	return o.GoogleClientSecret, true
}

// HasGoogleClientSecret returns a boolean if a field has been set.
func (o *ProjectSite) HasGoogleClientSecret() bool {
	if o != nil && !IsNil(o.GoogleClientSecret) {
		return true
	}

	return false
}

// SetGoogleClientSecret gets a reference to the given string and assigns it to the GoogleClientSecret field.
func (o *ProjectSite) SetGoogleClientSecret(v string) {
	o.GoogleClientSecret = &v
}

// GetRecaptchaSiteKey returns the RecaptchaSiteKey field value if set, zero value otherwise.
func (o *ProjectSite) GetRecaptchaSiteKey() string {
	if o == nil || IsNil(o.RecaptchaSiteKey) {
		var ret string
		return ret
	}
	return *o.RecaptchaSiteKey
}

// GetRecaptchaSiteKeyOk returns a tuple with the RecaptchaSiteKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetRecaptchaSiteKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RecaptchaSiteKey) {
		return nil, false
	}
	return o.RecaptchaSiteKey, true
}

// HasRecaptchaSiteKey returns a boolean if a field has been set.
func (o *ProjectSite) HasRecaptchaSiteKey() bool {
	if o != nil && !IsNil(o.RecaptchaSiteKey) {
		return true
	}

	return false
}

// SetRecaptchaSiteKey gets a reference to the given string and assigns it to the RecaptchaSiteKey field.
func (o *ProjectSite) SetRecaptchaSiteKey(v string) {
	o.RecaptchaSiteKey = &v
}

// GetRecaptchaSecretKey returns the RecaptchaSecretKey field value if set, zero value otherwise.
func (o *ProjectSite) GetRecaptchaSecretKey() string {
	if o == nil || IsNil(o.RecaptchaSecretKey) {
		var ret string
		return ret
	}
	return *o.RecaptchaSecretKey
}

// GetRecaptchaSecretKeyOk returns a tuple with the RecaptchaSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSite) GetRecaptchaSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RecaptchaSecretKey) {
		return nil, false
	}
	return o.RecaptchaSecretKey, true
}

// HasRecaptchaSecretKey returns a boolean if a field has been set.
func (o *ProjectSite) HasRecaptchaSecretKey() bool {
	if o != nil && !IsNil(o.RecaptchaSecretKey) {
		return true
	}

	return false
}

// SetRecaptchaSecretKey gets a reference to the given string and assigns it to the RecaptchaSecretKey field.
func (o *ProjectSite) SetRecaptchaSecretKey(v string) {
	o.RecaptchaSecretKey = &v
}

func (o ProjectSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain
	if !IsNil(o.GoogleClientId) {
		toSerialize["googleClientId"] = o.GoogleClientId
	}
	if !IsNil(o.GoogleClientSecret) {
		toSerialize["googleClientSecret"] = o.GoogleClientSecret
	}
	if !IsNil(o.RecaptchaSiteKey) {
		toSerialize["recaptchaSiteKey"] = o.RecaptchaSiteKey
	}
	if !IsNil(o.RecaptchaSecretKey) {
		toSerialize["recaptchaSecretKey"] = o.RecaptchaSecretKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSite := _ProjectSite{}

	err = json.Unmarshal(data, &varProjectSite)

	if err != nil {
		return err
	}

	*o = ProjectSite(varProjectSite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "googleClientId")
		delete(additionalProperties, "googleClientSecret")
		delete(additionalProperties, "recaptchaSiteKey")
		delete(additionalProperties, "recaptchaSecretKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSite struct {
	value *ProjectSite
	isSet bool
}

func (v NullableProjectSite) Get() *ProjectSite {
	return v.value
}

func (v *NullableProjectSite) Set(val *ProjectSite) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSite) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSite(val *ProjectSite) *NullableProjectSite {
	return &NullableProjectSite{value: val, isSet: true}
}

func (v NullableProjectSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


