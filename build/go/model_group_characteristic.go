/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GroupCharacteristic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupCharacteristic{}

// GroupCharacteristic Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
type GroupCharacteristic struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// A code that identifies the kind of trait being asserted.
	Code CodeableConcept `json:"code"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueCodeableConcept *CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueBoolean *bool `json:"valueBoolean,omitempty"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueQuantity *Quantity `json:"valueQuantity,omitempty"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueRange *Range `json:"valueRange,omitempty"`
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueReference *Reference `json:"valueReference,omitempty"`
	// Value of \"true\" or \"false\"
	Exclude *bool `json:"exclude,omitempty"`
	// The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
	Period *Period `json:"period,omitempty"`
}

type _GroupCharacteristic GroupCharacteristic

// NewGroupCharacteristic instantiates a new GroupCharacteristic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupCharacteristic(code CodeableConcept) *GroupCharacteristic {
	this := GroupCharacteristic{}
	this.Code = code
	return &this
}

// NewGroupCharacteristicWithDefaults instantiates a new GroupCharacteristic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupCharacteristicWithDefaults() *GroupCharacteristic {
	this := GroupCharacteristic{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupCharacteristic) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *GroupCharacteristic) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *GroupCharacteristic) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetCode returns the Code field value
func (o *GroupCharacteristic) GetCode() CodeableConcept {
	if o == nil {
		var ret CodeableConcept
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetCodeOk() (*CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *GroupCharacteristic) SetCode(v CodeableConcept) {
	o.Code = v
}

// GetValueCodeableConcept returns the ValueCodeableConcept field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetValueCodeableConcept() CodeableConcept {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		var ret CodeableConcept
		return ret
	}
	return *o.ValueCodeableConcept
}

// GetValueCodeableConceptOk returns a tuple with the ValueCodeableConcept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetValueCodeableConceptOk() (*CodeableConcept, bool) {
	if o == nil || IsNil(o.ValueCodeableConcept) {
		return nil, false
	}
	return o.ValueCodeableConcept, true
}

// HasValueCodeableConcept returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasValueCodeableConcept() bool {
	if o != nil && !IsNil(o.ValueCodeableConcept) {
		return true
	}

	return false
}

// SetValueCodeableConcept gets a reference to the given CodeableConcept and assigns it to the ValueCodeableConcept field.
func (o *GroupCharacteristic) SetValueCodeableConcept(v CodeableConcept) {
	o.ValueCodeableConcept = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *GroupCharacteristic) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

// GetValueQuantity returns the ValueQuantity field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetValueQuantity() Quantity {
	if o == nil || IsNil(o.ValueQuantity) {
		var ret Quantity
		return ret
	}
	return *o.ValueQuantity
}

// GetValueQuantityOk returns a tuple with the ValueQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetValueQuantityOk() (*Quantity, bool) {
	if o == nil || IsNil(o.ValueQuantity) {
		return nil, false
	}
	return o.ValueQuantity, true
}

// HasValueQuantity returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasValueQuantity() bool {
	if o != nil && !IsNil(o.ValueQuantity) {
		return true
	}

	return false
}

// SetValueQuantity gets a reference to the given Quantity and assigns it to the ValueQuantity field.
func (o *GroupCharacteristic) SetValueQuantity(v Quantity) {
	o.ValueQuantity = &v
}

// GetValueRange returns the ValueRange field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetValueRange() Range {
	if o == nil || IsNil(o.ValueRange) {
		var ret Range
		return ret
	}
	return *o.ValueRange
}

// GetValueRangeOk returns a tuple with the ValueRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetValueRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.ValueRange) {
		return nil, false
	}
	return o.ValueRange, true
}

// HasValueRange returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasValueRange() bool {
	if o != nil && !IsNil(o.ValueRange) {
		return true
	}

	return false
}

// SetValueRange gets a reference to the given Range and assigns it to the ValueRange field.
func (o *GroupCharacteristic) SetValueRange(v Range) {
	o.ValueRange = &v
}

// GetValueReference returns the ValueReference field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetValueReference() Reference {
	if o == nil || IsNil(o.ValueReference) {
		var ret Reference
		return ret
	}
	return *o.ValueReference
}

// GetValueReferenceOk returns a tuple with the ValueReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetValueReferenceOk() (*Reference, bool) {
	if o == nil || IsNil(o.ValueReference) {
		return nil, false
	}
	return o.ValueReference, true
}

// HasValueReference returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasValueReference() bool {
	if o != nil && !IsNil(o.ValueReference) {
		return true
	}

	return false
}

// SetValueReference gets a reference to the given Reference and assigns it to the ValueReference field.
func (o *GroupCharacteristic) SetValueReference(v Reference) {
	o.ValueReference = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *GroupCharacteristic) SetExclude(v bool) {
	o.Exclude = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *GroupCharacteristic) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCharacteristic) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *GroupCharacteristic) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *GroupCharacteristic) SetPeriod(v Period) {
	o.Period = &v
}

func (o GroupCharacteristic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupCharacteristic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.ValueCodeableConcept) {
		toSerialize["valueCodeableConcept"] = o.ValueCodeableConcept
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["valueBoolean"] = o.ValueBoolean
	}
	if !IsNil(o.ValueQuantity) {
		toSerialize["valueQuantity"] = o.ValueQuantity
	}
	if !IsNil(o.ValueRange) {
		toSerialize["valueRange"] = o.ValueRange
	}
	if !IsNil(o.ValueReference) {
		toSerialize["valueReference"] = o.ValueReference
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	return toSerialize, nil
}

func (o *GroupCharacteristic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupCharacteristic := _GroupCharacteristic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupCharacteristic)

	if err != nil {
		return err
	}

	*o = GroupCharacteristic(varGroupCharacteristic)

	return err
}

type NullableGroupCharacteristic struct {
	value *GroupCharacteristic
	isSet bool
}

func (v NullableGroupCharacteristic) Get() *GroupCharacteristic {
	return v.value
}

func (v *NullableGroupCharacteristic) Set(val *GroupCharacteristic) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupCharacteristic) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupCharacteristic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupCharacteristic(val *GroupCharacteristic) *NullableGroupCharacteristic {
	return &NullableGroupCharacteristic{value: val, isSet: true}
}

func (v NullableGroupCharacteristic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupCharacteristic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


