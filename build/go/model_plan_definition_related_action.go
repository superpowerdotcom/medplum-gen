/*
Medplum - OpenAPI 3.0

Medplum OpenAPI 3.0 specification.  Learn more about Medplum at [https://www.medplum.com](https://www.medplum.com).

API version: 1.0.5
Contact: hello@medplum.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medplum

import (
	"encoding/json"
)

// checks if the PlanDefinitionRelatedAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDefinitionRelatedAction{}

// PlanDefinitionRelatedAction This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
type PlanDefinitionRelatedAction struct {
	// A sequence of Unicode characters
	Id *string `json:"id,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension []Extension `json:"extension,omitempty"`
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []Extension `json:"modifierExtension,omitempty"`
	// Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	ActionId *string `json:"actionId,omitempty"`
	// The relationship of this action to the related action.
	Relationship *string `json:"relationship,omitempty"`
	// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
	OffsetDuration *Duration `json:"offsetDuration,omitempty"`
	// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
	OffsetRange *Range `json:"offsetRange,omitempty"`
}

// NewPlanDefinitionRelatedAction instantiates a new PlanDefinitionRelatedAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDefinitionRelatedAction() *PlanDefinitionRelatedAction {
	this := PlanDefinitionRelatedAction{}
	return &this
}

// NewPlanDefinitionRelatedActionWithDefaults instantiates a new PlanDefinitionRelatedAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDefinitionRelatedActionWithDefaults() *PlanDefinitionRelatedAction {
	this := PlanDefinitionRelatedAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanDefinitionRelatedAction) SetId(v string) {
	o.Id = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetExtension() []Extension {
	if o == nil || IsNil(o.Extension) {
		var ret []Extension
		return ret
	}
	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given []Extension and assigns it to the Extension field.
func (o *PlanDefinitionRelatedAction) SetExtension(v []Extension) {
	o.Extension = v
}

// GetModifierExtension returns the ModifierExtension field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetModifierExtension() []Extension {
	if o == nil || IsNil(o.ModifierExtension) {
		var ret []Extension
		return ret
	}
	return o.ModifierExtension
}

// GetModifierExtensionOk returns a tuple with the ModifierExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetModifierExtensionOk() ([]Extension, bool) {
	if o == nil || IsNil(o.ModifierExtension) {
		return nil, false
	}
	return o.ModifierExtension, true
}

// HasModifierExtension returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasModifierExtension() bool {
	if o != nil && !IsNil(o.ModifierExtension) {
		return true
	}

	return false
}

// SetModifierExtension gets a reference to the given []Extension and assigns it to the ModifierExtension field.
func (o *PlanDefinitionRelatedAction) SetModifierExtension(v []Extension) {
	o.ModifierExtension = v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetActionId() string {
	if o == nil || IsNil(o.ActionId) {
		var ret string
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetActionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given string and assigns it to the ActionId field.
func (o *PlanDefinitionRelatedAction) SetActionId(v string) {
	o.ActionId = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetRelationship() string {
	if o == nil || IsNil(o.Relationship) {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetRelationshipOk() (*string, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *PlanDefinitionRelatedAction) SetRelationship(v string) {
	o.Relationship = &v
}

// GetOffsetDuration returns the OffsetDuration field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetOffsetDuration() Duration {
	if o == nil || IsNil(o.OffsetDuration) {
		var ret Duration
		return ret
	}
	return *o.OffsetDuration
}

// GetOffsetDurationOk returns a tuple with the OffsetDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetOffsetDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.OffsetDuration) {
		return nil, false
	}
	return o.OffsetDuration, true
}

// HasOffsetDuration returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasOffsetDuration() bool {
	if o != nil && !IsNil(o.OffsetDuration) {
		return true
	}

	return false
}

// SetOffsetDuration gets a reference to the given Duration and assigns it to the OffsetDuration field.
func (o *PlanDefinitionRelatedAction) SetOffsetDuration(v Duration) {
	o.OffsetDuration = &v
}

// GetOffsetRange returns the OffsetRange field value if set, zero value otherwise.
func (o *PlanDefinitionRelatedAction) GetOffsetRange() Range {
	if o == nil || IsNil(o.OffsetRange) {
		var ret Range
		return ret
	}
	return *o.OffsetRange
}

// GetOffsetRangeOk returns a tuple with the OffsetRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDefinitionRelatedAction) GetOffsetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.OffsetRange) {
		return nil, false
	}
	return o.OffsetRange, true
}

// HasOffsetRange returns a boolean if a field has been set.
func (o *PlanDefinitionRelatedAction) HasOffsetRange() bool {
	if o != nil && !IsNil(o.OffsetRange) {
		return true
	}

	return false
}

// SetOffsetRange gets a reference to the given Range and assigns it to the OffsetRange field.
func (o *PlanDefinitionRelatedAction) SetOffsetRange(v Range) {
	o.OffsetRange = &v
}

func (o PlanDefinitionRelatedAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDefinitionRelatedAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.ModifierExtension) {
		toSerialize["modifierExtension"] = o.ModifierExtension
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !IsNil(o.OffsetDuration) {
		toSerialize["offsetDuration"] = o.OffsetDuration
	}
	if !IsNil(o.OffsetRange) {
		toSerialize["offsetRange"] = o.OffsetRange
	}
	return toSerialize, nil
}

type NullablePlanDefinitionRelatedAction struct {
	value *PlanDefinitionRelatedAction
	isSet bool
}

func (v NullablePlanDefinitionRelatedAction) Get() *PlanDefinitionRelatedAction {
	return v.value
}

func (v *NullablePlanDefinitionRelatedAction) Set(val *PlanDefinitionRelatedAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDefinitionRelatedAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDefinitionRelatedAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDefinitionRelatedAction(val *PlanDefinitionRelatedAction) *NullablePlanDefinitionRelatedAction {
	return &NullablePlanDefinitionRelatedAction{value: val, isSet: true}
}

func (v NullablePlanDefinitionRelatedAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDefinitionRelatedAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


